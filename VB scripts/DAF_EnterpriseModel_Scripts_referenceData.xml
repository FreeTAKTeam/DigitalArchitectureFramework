<?xml version="1.0" encoding="utf-8" standalone="no" ?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CFA8AC51-E6B6-471e-A181-F7370598769A}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Create Controller From Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' This code has been included from the default Diagram Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.&#xA;'&#xA;' Script Name: CreateUsecaseControllerclassfromDiagram.vbs&#xA;' Author: Kumar Madhavan&#xA;' Purpose: This method creates a Controller class and adds the activities under the use case as methods. &#xA;' Date: 4-Apr-2016&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnDiagramScript()&#xA;&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedConnector = currentDiagram.SelectedConnector&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;dim diagramElementIndex, diagramElementCount &#xA;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;dim elementId &#xA;&#x9;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Dim selectedObjectsCount , selectedObjectIndex&#xA;&#xA;&#x9;&#x9;if not selectedConnector is nothing then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#xA;&#x9;&#x9;elseif selectedObjects.Count &gt; 0 then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;selectedObjectsCount = selectedObjects.Count &#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;the selected Element count is&quot; &amp; selectedObjectsCount, promptOK&#xA;&#x9;&#x9;&#x9;for selectedObjectIndex = 0 to selectedObjectsCount&#xA;&#x9;&#x9;&#x9;&#x9;elementId = selectedObjects.GetAt(selectedObjectIndex).ElementId&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;the selected Element Id is &quot; &amp; elementId, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;set element = Repository.GetElementById(elementId)&#xA;&#x9;&#x9;&#x9;&#x9;if not element is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;checkelement(currentDiagram.DiagramObjects.GetAt(diagramElementIndex))&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next 'selectedObjectIndex&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramElementCount = currentDiagram.DiagramObjects.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for selectedObjectIndex = 0 to  diagramElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set element = currentDiagram.DiagramObjects.GetAt(selectedObjectIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkelement(element)&#xA;&#x9;&#x9;&#x9;next 'diagramObject&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;currentDiagram.Update()&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;Controller class created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; usecases.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot; &amp; usecaseElementCount, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;&#xA;Function checkelement(element) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;set usecaseElement = Repository.GetElementByID(element.ElementID)&#xA;&#x9;'The elements should be Business Use Case or Busness Use Case Core. When any other usecaseElement is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;dBusinessUseCase&quot;) or (usecaseElement.Stereotype = &quot;dBusinessUseCaseCore&quot;)  then&#xA;&#x9;&#x9;'When the controller class already exist for Usecase. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Controller class already exist for usecase &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;Controller&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;dController&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;dController&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;'Function to check if the usecase element if it has an controller element with name usecase name + Controller&#xA;Function checkUseCaseControllerClass(element)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = element.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(element.Name + &quot;Controller&quot;, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = element.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;dController&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(element, controllerClass) &#xA;&#x9;dim activityElement as EA.Element&#xA;&#x9;dim elementCount, elementIndex &#xA;&#x9;dim activityName, method&#xA;&#x9;&#xA;&#x9;&#x9;elementCount = element.Elements.Count - 1&#xA;&#x9;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;&#x9;set activityElement = element.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;if activityElement.stereotype = &quot;dActivity&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityName = activityElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityName = Replace(activityName, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set method = controllerClass.Methods.AddNew(activityName, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'The notes available in activity is copied to the method notes. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method.Notes = activityElement.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addMethods = 1&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Activity of type &quot; + activityElement.stereotype, promptOK&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next 'elementCount&#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;addMethods = 0&#xA;&#x9;&#x9;end if&#xA;end Function&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Browser DAF m2m"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E706FACF-E24A-47de-B0EE-3F2DAEEB0F85}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CreateUseCaseControllerFromPackage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateUsecaseControllerclassfromDiagram.vbs&#xA;' Author: Giu&#xA;' Purpose: This method creates a  controller from an Use Case . &#xA;' Date: 29-Nov-2022&#xA;'&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkUsecaseElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The controller class created for the usecase element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;Conf created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; usecases.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be Business Use Case or Busness Use Case Core. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;dBusinessUseCase&quot;)  then&#xA;&#x9;&#x9;'When the controller class already exist for Usecase. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Controller already exist for dBusinessUseCase &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;Controller&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;dController&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;dController&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the usecase element if it has an controller element with name usecase name + Controller&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(usecaseElement.Name + &quot;controller&quot;, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;dController&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#x9;dim activityElement as EA.Element&#xA;&#x9;dim elementCount, elementIndex &#xA;&#x9;dim activityName, method&#xA;&#x9;&#xA;&#x9;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;&#x9;set activityElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;if activityElement.stereotype = &quot;dActivity&quot; or (activityElement.stereotype  = &quot;&quot;)  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityName = activityElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityName = Replace(activityName, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set method = controllerClass.Methods.AddNew(activityName, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'The notes available in activity is copied to the method notes. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method.Notes = activityElement.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addMethods = 1&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next 'elementCount&#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;addMethods = 0&#xA;&#x9;&#x9;end if&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( usecaseElement, controllerClass)&#xA;&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Realization&quot;&#xA;&#x9;set source = Repository.GetElementByID( usecaseElement.ElementId)&#xA;&#x9;set target = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;DAF::isImplementedBy&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DA8ED5ED-9D3E-43bc-A6E1-55B31624D7D5}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CreateUserStoryFromPackage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateUsecaseUserStoryfromDiagram.vbs&#xA;' Version : 4.1&#xA;' Author: Giu &#xA;' Purpose: This method creates a User Story from a package, and connect the new UserStory with the Use case using a association. &#xA;' in the project browser, right click on a package containing Use Cases, &#xA;'  select &quot;Create User Story from Use Case&quot; &#xA;'  Move the created user stories in the proper package&#xA;' Date: 15-May-2020&#xA;' Project Browser Script main function&#xA;'&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkUsecaseElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The controller class created for the usecase element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;User Story created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; use cases.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;User Story  can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be Business Use Case or Busness Use Case Core. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;dBusinessUseCase&quot;)  then&#xA;&#x9;&#x9;'When the controller class already exist for Usecase. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;User Story  already exist for usecase &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;User Story&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;dUserStory&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;dUserStory&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the usecase element if it has an controller element with name usecase name + Controller&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(usecaseElement.Name + &quot;UserStory&quot;, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;dUserStory&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( usecaseElement, controllerClass)&#xA;&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Association&quot;&#xA;&#x9;set source = Repository.GetElementByID( usecaseElement.ElementId)&#xA;&#x9;set target = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;DAF::Associated with UseCase&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="6"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF Schema Generator"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="7"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F449A948-EB56-4b7e-A01B-1E1924F5D565}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen_ProtoBuff&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA;* Script Name: * Author: Giu Platania&#xA;* Purpose: generate a ProtoBuff File&#xA;* Date: 8/28/2020&#xA;*/&#xA;function main()&#xA;{&#xA;var schema as EA.SchemaComposer;&#xA;var xmlType as EA.SchemaType;&#xA;&#x9;&#xA;var xmlTypeEnum as EA.SchemaTypeEnum;&#xA;var xmlProp as EA.SchemaProperty;&#xA;var xmlPropEnum as EA.SchemaPropEnum;&#xA;var xmlChoice as EA.SchemaType;&#xA;var xmlChoiceEnum as EA.SchemaTypeEnum;&#xA;// COnfiguration&#xA;// Header&#xA;var syntax='syntax = &quot;proto3&quot;;';&#xA;var optionOptimizeFor = &quot;option optimize_for = LITE_RUNTIME;&quot;;&#xA;var protobufPackage = &quot;package atakmap.commoncommo.protobuf.v3;&#x9;&quot;;&#xA;&#xA;Session.Output(syntax);&#x9;&#xA;Session.Output(optionOptimizeFor);&#x9;&#xA;Session.Output(protobufPackage);&#x9;&#xA;// Get SchemaComposer&#xA;schema = Repository.SchemaComposer;&#xA;// Get Schema Types Enumerator&#xA;xmlTypeEnum = schema.SchemaTypes;&#xA;// Get total number of types in schema&#xA;var count = xmlTypeEnum.GetCount();&#xA;// Enumerate Types&#xA;var UMLProtoDict = {'boolean': 'bool',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'int': 'sint32',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'string': 'string',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'float': 'float',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'long': 'sint64',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'byte': 'bytes',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'double': 'double'}&#xA;xmlType = xmlTypeEnum.GetFirst();&#xA;&#x9;while(xmlType)&#xA;&#x9;{&#xA;&#x9;// Print Class note&#xA;&#x9;&#x9;//Session.Output( &quot;// &quot; + xmlType. + &quot; {&quot;);&#xA;&#x9;Session.Output( &quot;Message &quot; + xmlType.TypeName + &quot; {&quot;);&#xA;&#x9;xmlPropEnum = xmlType.Properties;&#xA;&#x9;&#x9;&#x9;var number = 0&#xA;&#x9;if(xmlPropEnum)&#xA;&#x9;{&#xA;&#x9;&#x9;xmlProp = xmlPropEnum.GetFirst();&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;while(xmlProp)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;number = number + 1;&#xA;&#x9;&#x9;var sPropDesc = xmlProp.Name;&#xA;&#x9;&#x9;sPropDesc += &quot; =&quot; + number;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// checks if attribute is optional&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.IsPrimitive())&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;sPropDesc = UMLProtoDict[xmlProp.PrimitiveType] + &quot; &quot; +sPropDesc;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;//seems to be triggered on attrib type being a uml object instance&#xA;&#x9;&#x9;&#x9;sPropDesc = xmlProp.TypeName.charAt(0).toUpperCase() + xmlProp.TypeName.substring(1) + &quot; &quot; + sPropDesc;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.Cardinality === '0..1')&#xA;&#x9;&#x9;&#x9;sPropDesc = 'optional ' + sPropDesc; &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.InitialValue.length&gt;0)&#xA;&#x9;&#x9;sPropDesc = sPropDesc + ` [default = ${xmlProp.InitialValue}]`&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.IsByReference())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;sPropDesc += &quot; (by reference) &quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;if(xmlProp.IsInline())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;sPropDesc += &quot; (inline) &quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;var comment = xmlProp.Annotation.replace(/(\r\n|\n|\r)/gm, &quot;&quot;);&#xA;&#x9;&#x9;&#x9;Session.Output( &quot; &quot; + sPropDesc +  ';   // ' + comment);&#xA;&#x9;&#x9;&#x9;xmlChoiceEnum = xmlProp.Choices;&#xA;&#x9;&#x9;if(xmlChoiceEnum.GetCount()&gt;0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum.GetFirst();&#xA;&#x9;&#x9;&#x9;Session.Output( &quot; ENUM: &quot;);&#xA;&#x9;&#x9;&#x9;while(xmlChoice)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot; &quot; + xmlChoice.TypeName );&#xA;&#x9;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum.GetNext();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;xmlProp = xmlPropEnum.GetNext();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#x9;xmlType = xmlTypeEnum.GetNext();&#xA;&#x9;&#x9;// close tag&#xA;&#x9;&#x9;Session.Output( &quot;}&quot;);&#xA;&#x9;}&#xA;&#x9;&#x9;&#x9;//TODO: change from VB to JS&#xA;&#x9;&#x9;&#x9;//set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;//scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;//save the script&#xA;&#x9;&#x9;&#x9;//scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot; &amp; connectortype  &amp; &quot;_&quot; &amp; TargetStereotype &amp; &quot;.sql&quot;&#xA;&#x9;&#x9;&#x9;//scriptFile.Save&#xA;&#x9;&#x9;&#x9;//debug info&#xA;&#x9;&#x9;&#x9;//Session.Output &quot;saving script: &quot; &amp; scriptFile.FullPath&#xA;&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BA70072A-A6F6-4feb-91B6-6972D4AA5887}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen_SQLnsert&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA;&#xA;* Script Name: Example Schema Composer Script&#xA;&#xA;* Author:   Giu Platania&#xA;&#xA;* Purpose: Generate inserts for FTS tables&#xA;* Language: Javascript&#xA;* Date:  2019&#xA;&#xA;*/&#xA;&#xA;function printType( xmlType, xmlns, uri)&#xA;&#xA;{&#xA;&#xA;var xmlProp as EA.SchemaProperty;&#xA;var xmlPropEnum as EA.SchemaPropEnum;&#xA;var xmlChoiceEnum1 as EA.SchemaTypeEnum;&#xA;var xmlChoiceEnum2 as EA.SchemaTypeEnum;&#xA;xmlPropEnum = xmlType.Properties;&#xA;&#xA;if(xmlPropEnum)&#xA;&#xA;{&#xA;&#xA;xmlProp = xmlPropEnum.GetFirst();&#xA;&#xA;while(xmlProp)&#xA;&#xA;{&#xA;&#xA;if(xmlType.IsEnumeration())&#xA;&#xA;{&#xA;&#xA;Session.Output('&#x9;('+&quot;'&quot;+xmlProp.Name+&quot;'&quot;+','+&quot;'&quot;+xmlProp.InitialValue+&quot;'&quot;+')'+',');&#xA;&#xA;}&#xA;&#xA;else&#xA;&#xA;{&#xA;&#xA;var sPropDesc = xmlProp.Name;&#xA;&#xA;sPropDesc += &quot;::&quot;&#xA;&#xA;if(xmlProp.IsPrimitive())&#xA;&#xA;sPropDesc += xmlProp.PrimitiveType;&#xA;&#xA;else&#xA;&#xA;sPropDesc += xmlProp.TypeName;&#xA;&#xA;&#xA;if(xmlProp.IsByReference())&#xA;&#xA;{&#xA;&#xA;sPropDesc += &quot;(by reference)&quot;;&#xA;&#xA;}&#xA;&#xA;if(xmlProp.IsInline())&#xA;&#xA;{&#xA;&#xA;sPropDesc += &quot;(inline)&quot;;&#xA;&#xA;}&#xA;&#xA;Session.Output(&quot;   &quot; + sPropDesc + &quot;, cardinality: &quot; + xmlProp.Cardinality);&#xA;&#xA;&#xA;xmlChoiceEnum1 = xmlProp.Choices;&#xA;&#xA;xmlChoiceEnum2 = xmlProp.SchemaChoices;&#xA;&#xA;var count = xmlChoiceEnum1.GetCount() + xmlChoiceEnum2.GetCount();&#xA;&#xA;if(count&gt;1)&#xA;&#xA;{&#xA;&#xA;Session.Output(&quot;   choice of: &quot;);&#xA;&#xA;xmlChoice = xmlChoiceEnum1.GetFirst();&#xA;&#xA;while(xmlChoice)&#xA;&#xA;{&#xA;&#xA;Session.Output(&quot;     &quot; + xmlChoice.TypeName);&#xA;&#xA;xmlChoice = xmlChoiceEnum1.GetNext();&#xA;&#xA;}&#xA;&#xA;xmlChoice = xmlChoiceEnum2.GetFirst();&#xA;&#xA;while(xmlChoice)&#xA;&#xA;{&#xA;&#xA;Session.Output(&quot;     &quot; + xmlChoice.TypeName);&#xA;&#xA;xmlChoice = xmlChoiceEnum2.GetNext();&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;xmlProp = xmlPropEnum.GetNext();&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;&#xA;function main()&#xA;&#xA;{&#xA;var schema as EA.SchemaComposer;&#xA;var xmlType as EA.SchemaType;&#xA;var xmlTypeEnum as EA.SchemaTypeEnum;&#xA;var xmlNamespaceEnum as EA.SchemaNamespaceEnum;&#xA;var xmlNS as EA.SchemaNamespace;&#xA;var tableName = 'Types';&#xA;var columns = &quot;('humanreadable', 'CoT')&quot;;&#xA;var BaseQuery = 'INSERT INTO ' + tableName + &quot; &quot; + columns + &quot; VALUES &quot;;&#xA;Session.Output(BaseQuery)&#xA;// Get SchemaComposer&#xA;&#xA;schema = Repository.SchemaComposer;&#xA;&#xA;// print the namespace references&#xA;&#xA;xmlNamespaceEnum = schema.Namespaces;&#xA;&#xA;if(xmlNamespaceEnum)&#xA;&#xA;{&#xA;&#xA;xmlNS = xmlNamespaceEnum.GetFirst();&#xA;&#xA;while(xmlNS)&#xA;&#xA;{&#xA;&#xA;&#xA;xmlNS = xmlNamespaceEnum.GetNext();&#xA;&#xA;}&#xA;&#xA;}&#xA;&#xA;// Get Schema Types Enumerator&#xA;&#xA;xmlTypeEnum = schema.SchemaTypes;&#xA;xmlType = xmlTypeEnum.GetFirst();&#xA;&#xA;while(xmlType)&#xA;&#xA;{&#xA;&#xA;var xmlns = schema.GetNamespacePrefixForType( xmlType.TypeID );&#xA;&#xA;uri = schema.GetNamespaceForPrefix(xmlns);&#xA;&#xA;printType(xmlType, xmlns, uri);&#xA;&#xA;xmlType = xmlTypeEnum.GetNext();&#xA;&#xA;}&#xA;Session.Output(';')&#xA;}&#xA;&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="12"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="13"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="14"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="15"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="16"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="17"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="18"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="19"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="20"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="21"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="22"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="23"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="24"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="25"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4460A483-7A13-4573-9098-612F61C4ECC9}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen_OpenAPI&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA;* Script Name: * Author: Giu @ SSNA&#xA;* Purpose: generate a OpenAPI file in YAML format&#xA;* Date: 11/05/2020&#xA;* Version 0.1 DRAFT&#xA;*/&#xA;function main()&#xA;{&#xA;var schema as EA.SchemaComposer;&#xA;var xmlType as EA.SchemaType;&#xA;&#x9;&#xA;var xmlTypeEnum as EA.SchemaTypeEnum;&#xA;var xmlProp as EA.SchemaProperty;&#xA;var xmlPropEnum as EA.SchemaPropEnum;&#xA;var xmlChoice as EA.SchemaType;&#xA;var xmlChoiceEnum as EA.SchemaTypeEnum;&#xA;var transformationTitle as EA.SchemaComposer.SchemaName;&#x9;&#xA;// COnfiguration&#xA;var openAPITitel= 'title: ';&#x9;&#xA;var openAPIVersion= ' version: 3.0.1';&#x9;&#xA;var&#x9;openAPIUrl= &quot;url:&quot;;&#xA;var&#x9;openAPIparameters= &quot;parameters:&quot;; &#x9;&#xA;var openAPIdescription = &quot;  description: &quot;;&#xA;var openAPIoperationId = &quot; operationId:&quot;;&#xA;var openAPIcontent = &quot;      content:&quot;;&#xA;var openAPIParmName = &quot;- name&quot;;&#xA;var openAPIparmtype = &quot;type: &quot;;&#xA;var openAPI2 = &quot;&quot;;&#xA;var openAPI3 = &quot;&quot;;&#x9;&#xA;&#x9;&#xA;// Header&#xA;var title= openAPITitel + transformationTitle;&#xA;&#x9;&#xA;&#xA;&#xA;Session.Output(title);&#x9;&#x9;&#xA;Session.Output(openAPIVersion);&#x9;&#xA;//Session.Output();&#x9;&#xA;//Session.Output();&#x9;&#xA;// Get SchemaComposer&#xA;schema = Repository.SchemaComposer;&#xA;// Get Schema Types Enumerator&#xA;xmlTypeEnum = schema.SchemaTypes;&#xA;// Get total number of types in schema&#xA;var count = xmlTypeEnum.GetCount();&#xA;// Enumerate Types&#xA;var UMLProtoDict = {'boolean': 'bool',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'int': 'int32',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'str': 'string',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'float': 'float',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'long': 'int64',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'byte': 'bytes',&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'double': 'double'}&#xA;xmlType = xmlTypeEnum.GetFirst();&#xA;&#x9;while(xmlType)&#xA;&#x9;{&#xA;&#x9;// Print Class note&#xA;&#x9;&#x9;//Session.Output( &quot;// &quot; + xmlType. + &quot; {&quot;);&#xA;&#x9;Session.Output( xmlType.TypeName );&#xA;&#x9;Session.Output( openAPIparameters);&#xA;&#x9;xmlPropEnum = xmlType.Properties;&#xA;&#x9;&#x9;&#x9;var number = 0&#xA;&#x9;if(xmlPropEnum)&#xA;&#x9;{&#xA;&#x9;&#x9;xmlProp = xmlPropEnum.GetFirst();&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;while(xmlProp)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;number = number + 1;&#xA;&#x9;&#x9;var sPropDesc = xmlProp.Name;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;// checks if attribute is optional&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.IsPrimitive())&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;sPropDesc = openAPIparmtype + UMLProtoDict[xmlProp.PrimitiveType] ;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;//seems to be triggered on attrib type being a uml object instance&#xA;&#x9;&#x9;&#x9;sPropDesc = xmlProp.TypeName.charAt(0).toUpperCase() + xmlProp.TypeName.substring(1);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.Cardinality === '0..1')&#xA;&#x9;&#x9;&#x9;sPropDesc = 'optional ' + sPropDesc; &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.InitialValue.length&gt;0)&#xA;&#x9;&#x9;sPropDesc = sPropDesc + ` [default = ${xmlProp.InitialValue}]`&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(xmlProp.IsByReference())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;sPropDesc += &quot; (by reference) &quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;if(xmlProp.IsInline())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;sPropDesc += &quot; (inline) &quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;var comment = xmlProp.Annotation.replace(/(\r\n|\n|\r)/gm, &quot;&quot;);&#xA;&#x9;&#x9;&#x9;openAPIdescription&#xA;&#x9;&#x9;&#x9;Session.Output( &quot; &quot; + sPropDesc);&#xA;&#x9;&#x9;&#x9;Session.Output( openAPIdescription + comment);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;xmlChoiceEnum = xmlProp.Choices;&#xA;&#x9;&#x9;if(xmlChoiceEnum.GetCount()&gt;0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum.GetFirst();&#xA;&#x9;&#x9;&#x9;Session.Output( &quot; ENUM: &quot;);&#xA;&#x9;&#x9;&#x9;while(xmlChoice)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot; &quot; + xmlChoice.TypeName );&#xA;&#x9;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum.GetNext();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;xmlProp = xmlPropEnum.GetNext();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#x9;xmlType = xmlTypeEnum.GetNext();&#xA;&#x9;&#x9;// close tag&#xA;&#x9;&#x9;Session.Output( &quot;&quot;);&#xA;&#x9;}&#xA;&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="26"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3994D728-A1B0-46d2-B96F-E1B74A3A1C68}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;stereotype - Select &amp;amp; apply&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="// Script Name:     SetStereotypeOnSelectedElements&#xA;// Author:          Giu Platania&#xA;// Purpose:         Updates the stereotype for all elements selected in the Project Browser.&#xA;// Date:            2025-08-06&#xA;// Version:         1.0&#xA;&#xA;!INC Local Scripts.EAConstants-JScript&#xA;!INC EAScriptLib.JScript-Dialog&#xA;&#xA;/*&#xA;* Main function for Project Browser Script.&#xA;* Select elements in the Project Browser, then execute the script to set a new stereotype.&#xA;*/&#xA;function OnProjectBrowserScript()&#xA;{&#xA;    // Show the script output window&#xA;    Repository.EnsureOutputVisible(&quot;Script&quot;);&#xA;&#xA;    // Prompt user for the new stereotype&#xA;    var input = DLGInputBox('Enter new stereotype', 'Multi-select element update', '');&#xA;    if (input == null || input == &quot;&quot;) {&#xA;        Session.Output('No stereotype entered. Operation cancelled.');&#xA;        return;&#xA;    }&#xA;&#xA;    // Get the currently selected elements in the Project Browser&#xA;    var selElem = Repository.GetTreeSelectedElements();&#xA;&#xA;    if (selElem == null || selElem.Count == 0) {&#xA;        Session.Output('No elements selected. Please select elements in the Project Browser.');&#xA;        return;&#xA;    }&#xA;&#xA;    // Update stereotype for each selected element&#xA;    for (var i = 0; i &lt; selElem.Count; i++) {&#xA;        var e = selElem.GetAt(i);&#xA;        var oldStereotype = e.Stereotype;&#xA;        e.Stereotype = input;&#xA;        e.Update();&#xA;        e.Refresh();&#xA;        Session.Output('Element changed: ' + e.Name + ' (old stereotype: ' + oldStereotype + ') changed stereotype to: ' + e.Stereotype);&#xA;    }&#xA;    Session.Output('All selected elements updated.');&#xA;}&#xA;&#xA;OnProjectBrowserScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="27"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EAE259C0-D146-4404-96FC-C562DF6A3594}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CreateUserStoryFromFeature&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateUsecaseUserStoryfromDiagram.vbs&#xA;' Version : 4.1&#xA;' Author: Giu &#xA;' Purpose: This method creates a User Story from a package, and connect the new UserStory with the Use case using a association. &#xA;' in the project browser, right click on a package containing Use Cases, &#xA;'  select &quot;Create User Story from Use Case&quot; &#xA;'  Move the created user stories in the proper package&#xA;' Date: 15-May-2020&#xA;' Project Browser Script main function&#xA;'&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkUsecaseElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The controller class created for the usecase element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;User Story created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; use cases.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;User Story  can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be dFeature. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;dFeature&quot;)  then&#xA;&#x9;&#x9;'When the Use Case already exist for feature. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;usecase  already exist for Feature &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;Use Case&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;dUserStory&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;dBusinessUseCase&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the usecase element if it has an controller element with name usecase name + Controller&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(usecaseElement.Name + &quot;UserStory&quot;, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;dBusinessUseCase&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( usecaseElement, controllerClass)&#xA;' create a connector between the feature and the use case&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Realization&quot;&#xA;&#x9;set source = Repository.GetElementByID( usecaseElement.ElementId)&#xA;&#x9;set target = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;DAF::is realized by Use Case&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="29"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2C32616A-EC0B-48ed-A130-F252139E8923}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;stereotype DAF - sync &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     Synchronize Stereotypes&#xA;' Author:          Geert Bellekens &amp; Giu Platania&#xA;' Purpose:         Synchronizes all stereotypes in the list for the specified profile in the current EA repository.&#xA;' Date:            2025-08-06&#xA;' Version:         2.0&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;Dim outputTabName&#xA;outputTabName = &quot;Synchronize stereotypes&quot;&#xA;&#xA;Sub main&#xA;    Repository.CreateOutputTab outputTabName&#xA;    Repository.ClearOutput outputTabName&#xA;    Repository.EnsureOutputVisible outputTabName&#xA;&#xA;    ' Inform the user we're starting&#xA;    Repository.WriteOutput outputTabName, Now() &amp; &quot;: Starting synchronizing stereotypes&quot;, 0&#xA;&#xA;    Dim stereotypes, stereotype&#xA;    Dim profile&#xA;    Set stereotypes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;    '*********** Set profile name here *********************&#xA;    profile = &quot;DAF&quot;&#xA;    '*********** Add all stereotypes below *****************&#xA;    stereotypes.Add &quot;Action&quot;&#xA;    stereotypes.Add &quot;dActivity&quot;&#xA;    stereotypes.Add &quot;dActor&quot;&#xA;    stereotypes.Add &quot;dAPI&quot;&#xA;    stereotypes.Add &quot;dAPIOperation&quot;&#xA;    stereotypes.Add &quot;dAPIParameter&quot;&#xA;    stereotypes.Add &quot;dAPIResponse&quot;&#xA;    stereotypes.Add &quot;dApplicationComponent&quot;&#xA;    stereotypes.Add &quot;dApplicationFunction&quot;&#xA;    stereotypes.Add &quot;dBusinessProcess&quot;&#xA;    stereotypes.Add &quot;dBusinessService&quot;&#xA;    stereotypes.Add &quot;dBusinessUseCase&quot;&#xA;    stereotypes.Add &quot;dCapability&quot;&#xA;    stereotypes.Add &quot;dCluster&quot;&#xA;    stereotypes.Add &quot;dContainer&quot;&#xA;    stereotypes.Add &quot;dController&quot;&#xA;    stereotypes.Add &quot;dDataEntity&quot;&#xA;    stereotypes.Add &quot;dDecision&quot;&#xA;    stereotypes.Add &quot;dDeploymentModel&quot;&#xA;    stereotypes.Add &quot;dDeploymentNode&quot;&#xA;    stereotypes.Add &quot;dEvent&quot;&#xA;    stereotypes.Add &quot;dFeature&quot;&#xA;    stereotypes.Add &quot;dGoal&quot;&#xA;    stereotypes.Add &quot;dGrowthPackage&quot;&#xA;    stereotypes.Add &quot;dInitiative&quot;&#xA;    stereotypes.Add &quot;dIPRange&quot;&#xA;    stereotypes.Add &quot;dIssue&quot;&#xA;    stereotypes.Add &quot;dJSON_Attribute&quot;&#xA;    stereotypes.Add &quot;dJSON_Datatype&quot;&#xA;    stereotypes.Add &quot;dJSON_Element&quot;&#xA;    stereotypes.Add &quot;dJSON_Schema&quot;&#xA;    stereotypes.Add &quot;dJSON_SchemaSubSet&quot;&#xA;    stereotypes.Add &quot;dJSON_Type&quot;&#xA;    stereotypes.Add &quot;dLocation&quot;&#xA;    stereotypes.Add &quot;dLogicalAppComponent&quot;&#xA;    stereotypes.Add &quot;dMeasurementArea&quot;&#xA;    stereotypes.Add &quot;dMeasurementCategory&quot;&#xA;    stereotypes.Add &quot;dMeasurementGrouping&quot;&#xA;    stereotypes.Add &quot;dMeasurementIndicator&quot;&#xA;    stereotypes.Add &quot;dModelClass&quot;&#xA;    stereotypes.Add &quot;dNetwork&quot;&#xA;    stereotypes.Add &quot;dObject&quot;&#xA;    stereotypes.Add &quot;dObjective&quot;&#xA;    stereotypes.Add &quot;dOnPremise&quot;&#xA;    stereotypes.Add &quot;dOpinion&quot;&#xA;    stereotypes.Add &quot;dOpinionInner&quot;&#xA;    stereotypes.Add &quot;dOrganizationUnit&quot;&#xA;    stereotypes.Add &quot;dPhysicalService&quot;&#xA;    stereotypes.Add &quot;dPrinciple&quot;&#xA;    stereotypes.Add &quot;dProduct&quot;&#xA;    stereotypes.Add &quot;dProgram&quot;&#xA;    stereotypes.Add &quot;dPublicCluster&quot;&#xA;    stereotypes.Add &quot;dRegion&quot;&#xA;    stereotypes.Add &quot;dRequirement&quot;&#xA;    stereotypes.Add &quot;dResource&quot;&#xA;    stereotypes.Add &quot;dRisk&quot;&#xA;    stereotypes.Add &quot;dRole&quot;&#xA;    stereotypes.Add &quot;dSecurityGroup&quot;&#xA;    stereotypes.Add &quot;dSkill&quot;&#xA;    stereotypes.Add &quot;dStakeholder&quot;&#xA;    stereotypes.Add &quot;dSubNetwork&quot;&#xA;    stereotypes.Add &quot;dSystem&quot;&#xA;    stereotypes.Add &quot;dTable&quot;&#xA;    stereotypes.Add &quot;dTest&quot;&#xA;    stereotypes.Add &quot;dUserStory&quot;&#xA;    stereotypes.Add &quot;dValue&quot;&#xA;    stereotypes.Add &quot;dValueRef&quot;&#xA;    stereotypes.Add &quot;dValueStream&quot;&#xA;    stereotypes.Add &quot;dView&quot;&#xA;    stereotypes.Add &quot;dVolume&quot;&#xA;    stereotypes.Add &quot;dZone&quot;&#xA;    '*********** Add all stereotypes here End ***************&#xA;&#xA;    ' Synchronize each stereotype&#xA;    For Each stereotype In stereotypes&#xA;        If Len(Trim(profile)) &gt; 0 And Len(Trim(stereotype)) &gt; 0 Then&#xA;            SynchronizeStereotype profile, stereotype&#xA;        Else&#xA;            Repository.WriteOutput outputTabName, &quot;Skipped empty profile or stereotype value.&quot;, 0&#xA;        End If&#xA;    Next&#xA;&#xA;    Repository.WriteOutput outputTabName, Now() &amp; &quot;: Finished synchronizing stereotypes&quot;, 0&#xA;End Sub&#xA;&#xA;' Synchronize a single stereotype with the given profile&#xA;Sub SynchronizeStereotype(profile, stereotype)&#xA;    On Error Resume Next&#xA;    Repository.WriteOutput outputTabName, &quot;Processing stereotype &quot; &amp; profile &amp; &quot;::&quot; &amp; stereotype, 0&#xA;    Repository.CustomCommand &quot;Repository&quot;, &quot;SynchProfile&quot;, &quot;Profile=&quot; &amp; profile &amp; &quot;;Stereotype=&quot; &amp; stereotype &amp; &quot;;&quot;&#xA;    If Err.Number &lt;&gt; 0 Then&#xA;        Repository.WriteOutput outputTabName, &quot;Error synchronizing &quot; &amp; profile &amp; &quot;::&quot; &amp; stereotype &amp; &quot; - &quot; &amp; Err.Description, 0&#xA;        Err.Clear&#xA;    End If&#xA;End Sub&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="31"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5371AE80-CE63-43e0-ADA0-0EC814A608E7}"/>
			<Column name="ScriptAuthor" value="{9DCD3AF7-1F19-470d-A665-C7270CAC79B4}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Stereotype - Apply DAF &quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;// Replace the file below with another element list to reuse this script.&#xA;//!INC Conversion Scripts.ConversionTable&#xA;&#xA;function TypeConversion(sourceObject,sourceStereotype,targetObject, targetStereotype)&#xA;{&#xA;    this.sourceObject = sourceObject;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetObject = targetObject;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var Conversions = new Array();&#xA;&#xA;//Convert standards to DAF standard&#xA;Conversions[0] = new TypeConversion(&quot;Activity&quot;, &quot;dPhysicalService&quot;, &quot;Interface&quot;, &quot;dPhysicalService&quot;);&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;TMF_BusinessEntity&quot;);&#xA;// =================================================================================&#xA;// Name: Element Conversion&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// The table is included as a file so it may be changed for other mappings&#xA;// Navigates from selected package and recursively modifies each element&#xA;// NOTE: Requires a package to be selected in the Project Browser&#xA;//&#xA;// Related APIs&#xA;// =================================================================================&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/element2.html&#xA;// Repository API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/repository3.html&#xA;// Tagged Value API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/taggedvalue.html&#xA;&#xA;function StartWithSelectedPackage()&#xA;{&#xA;    // Show the script output window&#xA;    Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;    Session.Output( &quot;JScript TypeConverstion&quot; );&#xA;    Session.Output( &quot;===========================&quot; );&#xA;&#xA;    var thePackage as EA.Package;&#xA;    thePackage = Repository.GetTreeSelectedPackage();&#xA;   &#xA;    if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;    {&#xA;        NavigatePackage( &quot;&quot;, thePackage );&#xA;    }&#xA;    else&#xA;    {&#xA;        Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;            &quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;    }&#xA;   &#xA;    Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child&#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function NavigatePackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Add the current package's name to the list&#xA;    Session.Output( indent + currentPackage.Name + &quot; (PackageID=&quot; +&#xA;        currentPackage.PackageID + &quot;)&quot; );&#xA;   &#xA;    // Convert the elements this package contains&#xA;    ConvertElementsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;   &#xA;    // Recursively process any child packages&#xA;    var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;    while ( !childPackageEnumerator.atEnd() )&#xA;    {&#xA;        var childPackage as EA.Package;&#xA;        childPackage = childPackageEnumerator.item();&#xA;        NavigatePackage( indent + &quot;    &quot;, childPackage );&#xA;       &#xA;        childPackageEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertElementsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Iterate through all elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertElements( indent, theElement )&#xA;{&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    currentElement.ObjectType&#xA;    ConvertElement(indent+&quot;    &quot;,currentElement );&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentElement.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the element from BSIF to&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertElement( indent, theElement )&#xA;{&#xA;// Debug Comment out when run for real&#xA;    //Session.Output( indent + &quot;CALLED: ConvertElement with &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; Conversions.length ; i++ )&#xA;    {&#xA;        // If want to limit to stereotype that matches source list then convert&#xA; //       if ( (theElement.Stereotype == Conversions[i].sourceStereotype) &amp;&amp; (theElement.Type == Conversions[i].sourceObject ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED: &quot; + theElement.Name + &quot; (&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+Conversions[i].targetObject+&quot;,&quot;+Conversions[i].targetStereotype+&quot;)&quot; );&#xA;             theElement.Type = Conversions[i].targetObject;&#xA;            //Overright the stereotype list to have only one stereotype&#xA;            theElement.StereotypeEx = Conversions[i].targetStereotype;&#xA;            theElement.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;StartWithSelectedPackage();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="32"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EC6A20A6-0B0F-4ae9-827C-5D93D9D0352D}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;stereotype - Change &quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;&#xA;// *** WARNING *** this is a very destructive script!!!! *** WARNING *** &#xA;// Replace the file below with another element list to reuse this script.&#xA;//!INC Conversion Scripts.ConversionTable&#xA;&#xA;function TypeConversion(sourceObject,sourceStereotype,targetObject, targetStereotype)&#xA;{&#xA;    this.sourceObject = sourceObject;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetObject = targetObject;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var Conversions = new Array();&#xA;&#xA;//Convert standards to MDG standard&#xA;Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;XSDtopLevelElement&quot;, &quot;Class&quot;, &quot;dModelClass&quot;);&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;TMF_BusinessEntity&quot;);//&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;TMF_Domain&quot;, &quot;Class&quot;, &quot;TMF_AF&quot;);&#xA;// =================================================================================&#xA;// Name: Element Conversion&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// The table is included as a file so it may be changed for other mappings&#xA;// Navigates from selected package and recursively modifies each element&#xA;// NOTE: Requires a package to be selected in the Project Browser&#xA;//&#xA;// Related APIs&#xA;// =================================================================================&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/element2.html&#xA;// Repository API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/repository3.html&#xA;// Tagged Value API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/taggedvalue.html&#xA;&#xA;function StartWithSelectedPackage()&#xA;{&#xA;    // Show the script output window&#xA;    Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;    Session.Output( &quot;JScript Type Converstion&quot; );&#xA;    Session.Output( &quot;===========================&quot; );&#xA;&#xA;    var thePackage as EA.Package;&#xA;    thePackage = Repository.GetTreeSelectedPackage();&#xA;   &#xA;    if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;    {&#xA;        NavigatePackage( &quot;&quot;, thePackage );&#xA;    }&#xA;    else&#xA;    {&#xA;        Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;            &quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;    }&#xA;   &#xA;    Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child&#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function NavigatePackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Add the current package's name to the list&#xA;    Session.Output( indent + currentPackage.Name + &quot; (PackageID=&quot; +&#xA;        currentPackage.PackageID + &quot;)&quot; );&#xA;   &#xA;    // Convert the elements this package contains&#xA;    ConvertElementsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;   &#xA;    // Recursively process any child packages&#xA;    var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;    while ( !childPackageEnumerator.atEnd() )&#xA;    {&#xA;        var childPackage as EA.Package;&#xA;        childPackage = childPackageEnumerator.item();&#xA;        NavigatePackage( indent + &quot;    &quot;, childPackage );&#xA;       &#xA;        childPackageEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertElementsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Iterate through all elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertElements( indent, theElement )&#xA;{&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    currentElement.ObjectType&#xA;    ConvertElement(indent+&quot;    &quot;,currentElement );&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentElement.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the element from BSIF to&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertElement( indent, theElement )&#xA;{&#xA;// Debug Comment out when run for real&#xA;    //Session.Output( indent + &quot;CALLED: ConvertElement with &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; Conversions.length ; i++ )&#xA;    {&#xA;        // If want to limit to stereotype that matches source list then convert&#xA; //       if ( (theElement.Stereotype == Conversions[i].sourceStereotype) &amp;&amp; (theElement.Type == Conversions[i].sourceObject ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED: &quot; + theElement.Name + &quot; (&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+Conversions[i].targetObject+&quot;,&quot;+Conversions[i].targetStereotype+&quot;)&quot; );&#xA;             theElement.Type = Conversions[i].targetObject;&#xA;            //Overright the stereotype list to have only one stereotype&#xA;            theElement.StereotypeEx = Conversions[i].targetStereotype;&#xA;            theElement.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;StartWithSelectedPackage();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="33"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{4F60163A-9A48-4c3f-950A-C2BA61749587}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="M3 Local"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="34"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{93A06792-1DAA-4dc9-A7AF-5B099457DC34}"/>
			<Column name="ScriptAuthor" value="{4F60163A-9A48-4c3f-950A-C2BA61749587}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Generate UMl Profile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA; ' &#xA;' Script Name: UML profile configuratrion&#xA;' Author:  Giu Platania&#xA;' Purpose: Scripts to transform metamodel into UML Profile, create classes for toolboxes (elements and relationships&#xA;' generates the quicklink file and a list of packages named after the stereotypes to be used as &quot;TOGAF catalogs&quot;.&#xA;' generates toolboxes&#xA;' generate SQL queries&#xA;' Date: 2022 / 06 / 15&#xA;' Version: 4.20220615&#xA; '&#xA; ' TODO&#xA; &#xA; &#xA; ' USAGE:&#xA; ' this is the companion script to the M3 MdG technology&#xA;'    Create a package called Metamodel or use the template&#xA;'    customize the the GUID of the Metamodel package, UML profile , Tolboxes classes and connectors in the script &quot;Configuration&quot;&#xA;'    create a M3 diagram or use the template&#xA;'&#x9; use the M3 toolbox to create *Concepts*&#xA;'    in alternative  add the tagged values 'Metaclass' and 'Redefines' to regular UML classes. The tagged values are case sensitive (!) &#xA;'    script will add a _metaype property automatically&#xA; '   script will add a _strictness property automatically. it defines the degree to which a stereotyped element can have more than one stereotype applied to it.&#xA; '   (if required) add the refines tag e.g. &quot;ArchiMate3::Archimate_BusinessProcess&quot; /&#xA; '   Create relationships using the *relationship* connector . You can also use an UML::association and add the tags the UML type is only cosmetic because is defined in the &quot;metaclass&quot; tagged value. &#xA; ' &#x9;Aggregation in the profile is always placed at the *source End* of the relationship / UML::association, ignoring the model. &#xA; '   Create a package called like your target language with the stereotype &quot;profile&quot; or use the template&#xA; '   customize the the GUId of the Metamodel package in the configuration script&#xA; '   inside the Stereotype package create a document called &quot;QuickLink&quot; or use the template&#xA; ' &#x9;Copy the provided M3 configuration script in a new script&#xA; '   Customize the target folder in the configuration script for the quicklink document output&#xA; '   Execute the script Generate UML profile&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC M3 Local.Model Management Utilities&#xA;!INC M3 Local.configuration&#xA;!INC Wrappers.Include&#xA;&#xA;const STREAM_FOR_READING = 1&#xA;const STREAM_FOR_WRITING = 2&#xA;const STREAM_FOR_APPENDING = 3&#xA;&#xA;dim profilePackage &#x9;&#x9;&#x9;as EA.Package&#xA;dim quickLinkFileStream&#x9;   'as Scripting.TextStream&#xA;dim toolboxClass &#x9;as EA.Element&#xA;dim toolboxConnector as EA.Element&#xA;&#xA;sub transformPackageGUID( metamodelPackageGUID, profilePackageGUID, fileName)&#xA;&#xA;&#x9;dim metamodelPackage &#x9;as EA.Package&#xA;&#x9;&#x9;Repository.EnableUIUpdates = false&#xA;&#x9;&#x9;quickLinkFileName = fileName&#xA;&#x9;&#x9;createQuickLinkFile&#x9;&#xA;&#x9;set profilePackage = Repository.GetPackageByGuid( profilePackageGUID)&#xA;&#x9;set metamodelPackage = Repository.GetPackageByGuid( metamodelPackageGUID)&#xA;&#x9;set toolboxClass = Repository.GetElementByGuid(ProfileToolboxClassGUID) &#xA;&#x9;set toolboxConnector = Repository.GetElementByGuid(ProfileToolboxConnectorGUID)&#xA;&#x9;clearProfileMetamodelTags profilePackage&#xA;&#x9;cleanToolboxesAttributes toolboxClass&#xA;&#x9;cleanToolboxConnectorAttributes  toolboxConnector&#xA;&#x9;transformPackage metamodelPackage&#xA;&#x9;quickLinkFileStream.Close&#xA;&#x9;updateQuickLinkDocument&#xA;&#x9;Repository.RefreshModelView profilePackage.PackageID&#xA;&#x9;Repository.EnableUIUpdates = true&#xA;&#x9;Session.Output &quot;Done at&quot; &amp; Now() &#xA;end sub&#xA;&#xA;sub clearProfileMetamodelTags( profilePackage)&#xA;&#xA;&#x9;dim profileClass as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;Clearing profile metamodel tags...&quot;&#xA;&#x9;for each profileClass in profilePackage.Elements&#xA;&#x9;&#x9;if profileClass.MetaType = &quot;Stereotype&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;deleteTaggedValue profileClass, &quot;Metamodel GUID&quot;&#xA;&#x9;&#x9;&#x9;deleteTaggedValue profileClass, &quot;Profile Type&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' SQL script&#xA;'''''''''''''''''''''''&#xA;&#xA;'' SQL Simple relationship&#xA;sub SQLSimpleRelationship( SourceStereotype, TargetStereotype, connectortype)&#xA;&#x9;dim sqlGetString 'as string&#xA;&#x9;dim scriptFile&#xA;&#x9;sqlGetString = &#x9;&#x9;&quot;-- Generated &quot;  &amp; now() &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;--  &quot; &amp; SourceStereotype &amp; &quot; (GroupName) connected with  &quot; &amp; TargetStereotype &amp; &quot; (series)&quot; &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;SELECT &quot; &amp; SourceStereotype &amp; &quot;.Name as &quot; &amp; SourceStereotype &amp; &quot;,  &quot; &amp; TargetStereotype &amp; &quot;.Name as  &quot; &amp; TargetStereotype  &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FROM t_object AS &quot; &amp; SourceStereotype &amp; &quot;&quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_connector as connector ON &quot; &amp; SourceStereotype &amp; &quot;.Object_ID = connector.End_Object_ID&quot; &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_object AS &quot; &amp; TargetStereotype &amp; &quot; ON connector.Start_Object_ID =  &quot; &amp; TargetStereotype &amp; &quot;.Object_ID&quot; &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;WHERE &quot; &amp; SourceStereotype &amp; &quot;.Stereotype='&quot; &amp; TargetStereotype  &amp;&quot;'&quot; &amp; vbNewLine &amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND  &quot; &amp; TargetStereotype &amp; &quot;.Stereotype='&quot; &amp; SourceStereotype &amp; &quot;'&quot; &amp; vbNewLine &amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND connector.Stereotype='&quot; &amp; ConnectorType &amp;&quot;'&quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot; &amp; connectortype  &amp; &quot;_&quot; &amp; TargetStereotype &amp; &quot;.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;Session.Output &quot;saving script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;&#xA;&#xA;&#xA;sub transformPackage( metamodelPackage)&#xA;&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage &#x9;as EA.Package&#xA;&#x9;Session.Output &quot;Generating profile elements for '&quot; &amp; metamodelPackage.Name &amp; &quot;' package...&quot;&#xA;&#x9;for each element in metamodelPackage.Elements&#xA;&#x9;&#x9;select case element.Type&#xA;&#x9;&#x9;case &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;transformClass element&#xA;&#x9;&#x9;&#x9;''create the toolbox for elements&#xA;&#x9;&#x9;&#x9;addToolboxesAttributes element, toolboxClass&#xA;&#x9;&#x9;case &quot;Enumeration&quot;&#xA;&#x9;&#x9;&#x9;transformEnumeration element&#xA;&#x9;&#x9;end select&#xA;&#x9;next&#x9;&#xA;&#x9;for each subPackage in metamodelPackage.Packages&#xA;&#x9;&#x9;transformPackage subPackage&#xA;&#x9;next&#x9;&#xA;end sub&#xA;&#xA;sub transformEnumeration( metamodelEnum)&#xA;&#xA;&#x9;dim profileEnum as EA.Element&#xA;&#x9;dim enumName   'as String&#xA;&#x9;enumName = metamodelEnum.Name&#xA;&#x9;Session.Output &quot;Generating enumeration for '&quot; &amp; enumName &amp; &quot;' ...&quot;&#xA;&#x9;set profileEnum = getProfileElement( enumName)&#xA;&#x9;if profileEnum is nothing then&#xA;&#x9;&#x9;set profileEnum = copyEnumeration( metamodelEnum, profilePackage)&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;deleteElement profileEnum&#xA;&#x9;&#x9;set profileEnum = copyEnumeration( metamodelEnum, profilePackage)&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function copyEnumeration( enumeration, package)&#xA;&#xA;&#x9;dim newEnumeration&#x9;as EA.Element&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim newAttribute&#x9;as EA.Attribute&#xA;&#x9;set newEnumeration = package.Elements.AddNew( enumeration.Name, &quot;Enumeration&quot;)&#x9;&#xA;&#x9;newEnumeration.Update&#x9;&#xA;&#x9;for each attribute in enumeration.Attributes&#xA;&#x9;&#x9;set newAttribute = newEnumeration.Attributes.AddNew( attribute.Name, &quot;int&quot;)&#xA;&#x9;&#x9;newAttribute.Stereotype = &quot;enum&quot;&#xA;&#x9;&#x9;newAttribute.Update&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;newEnumeration.Attributes.Refresh&#xA;&#x9;setTaggedValueValue newEnumeration, &quot;Profile Type&quot;, &quot;Element&quot;&#xA;&#x9;setTaggedValueValue newEnumeration, &quot;Metamodel GUID&quot;, enumeration.ElementGUID&#xA;&#x9;profilePackage.Elements.Refresh&#xA;&#x9;set copyEnumeration = newEnumeration&#xA;end function&#xA;&#xA;sub transformClassGUID( classGUID, profilePackageGUID, fileName)&#xA;&#xA;&#x9;dim metamodelClass as EA.Element  &#x9;&#xA;&#x9;quickLinkFileName = fileName&#xA;&#x9;createQuickLinkFile&#xA;&#x9;set profilePackage = Repository.GetPackageByGuid( profilePackageGUID)&#xA;&#x9;set metamodelClass = Repository.GetElementByGuid( classGUID)&#xA;&#x9;transformClass metamodelClass&#xA;&#x9;quickLinkFileStream.Close&#xA;&#x9;Repository.RefreshModelView profilePackage.PackageID&#xA;end sub&#xA;&#xA;sub transformClass( metamodelClass)&#xA;&#x9;&#xA;&#x9;dim superClass&#x9;&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim redefinedStereotypeName&#x9;  ' as String&#xA;&#x9;dim metaclassName&#x9;&#x9;&#x9;  ' as String&#xA;&#x9;dim stereotypeName&#x9;&#x9; &#x9;  ' as String&#xA;&#x9;dim stereotypeClass&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim metaType&#x9;&#x9;&#x9;&#x9; ' As String&#xA;&#x9;metaType = &quot;&quot;&#xA;&#xA;&#x9;if metamodelClass.Stereotype = &quot;Concept&quot; then&#x9;&#xA;&#x9;&#x9;set superClass = getRelatedSupplierElement2( metamodelClass, &quot;Generalization&quot;, &quot;&quot;, &quot;Class&quot;, &quot;&quot;)&#xA;&#x9;&#x9;metaclassName = getTaggedValueValue( metamodelClass, &quot;Metaclass&quot;)&#xA;&#x9;&#x9;redefinedStereotypeName = getTaggedValueValue( metamodelClass, &quot;Redefines&quot;)&#xA;&#xA;&#x9;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString or metaclassName &lt;&gt; vbNullString or not( superClass is nothing) then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Generating stereotype for '&quot; &amp; metamodelClass.Name &amp; &quot;' class...&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeName = metamodelClass.Name&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set stereotypeClass = getProfileElement(stereotypeName)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if stereotypeClass is nothing then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set stereotypeClass = profilePackage.Elements.AddNew( stereotypeName, &quot;Class&quot;)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeClass.Stereotype = &quot;stereotype&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeClass.Update&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'setup the catalog name&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9; &#x9;if metamodelClass.Alias &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;metaType = metamodelClass.Alias&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' take off the prefix chars&#xA;&#x9;&#x9;&#x9; 'metaType = MID (stereotypeName, 2)&#xA;&#x9;&#x9;&#x9;&#x9;metaType = metamodelClass.Name&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;createCatalog metaType&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setStereotypeProperties metamodelClass, stereotypeClass, metamodelClass.Name&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Profile Type&quot;, &quot;Element&quot;&#xA;&#x9;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Metamodel GUID&quot;, metamodelClass.ElementGUID&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;setProfileRedefinedStereotype stereotypeClass, redefinedStereotypeName&#xA;&#x9;&#x9;&#x9;elseif superClass is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;setProfileMetaclass metamodelClass, stereotypeClass&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;setProfileSuperclass stereotypeClass, superClass&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'if redefinedStereotypeName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;'&#x9;setProfileRedefinedStereotype stereotypeClass, redefinedStereotypeName&#xA;&#x9;&#x9;&#x9;'end if&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;transformRelationships metamodelClass, stereotypeClass&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if  &#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;sub createCatalog(stereotypeName)&#xA;' create a list of packages wit the same name of the stereotypes&#xA;' this can be included in the technology to create a repository structure according to the metamodel&#xA;&#x9;&#x9;&#x9; On Error Resume Next&#xA;&#x9;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set subPackage = profilePackage.Packages.GetByName(stereotypeName)&#xA;&#x9;&#x9;&#x9;''if  subPackage is nothing then&#xA;&#x9;&#x9;&#x9;If Err.Number &lt;&gt; 0 Then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set subPackage = profilePackage.Packages.AddNew(stereotypeName,&quot;Package&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Generating catalog for &quot; &amp; stereotypeName&#xA;&#x9;&#x9;&#x9;&#x9;subPackage.Update&#xA;&#x9;&#x9;&#x9;&#x9;Err.Clear&#xA;&#x9;&#x9;&#x9;end if&#xA;end sub&#xA;&#xA;function setProfileMetaclass( metamodelItem, stereotypeClass)&#xA;' add the metaclass to the stereotype&#xA;&#x9;dim metaclassName  ' as String&#xA;&#x9;dim profileMetaclass as EA.Element&#x9;&#xA;&#x9;metaclassName = metamodelItem.TaggedValues.GetByName( &quot;Metaclass&quot;).Value&#x9;&#xA;&#x9;set profileMetaclass = getRelatedSupplierElement( stereotypeClass, &quot;Extension&quot;, &quot;Metaclass&quot;)&#xA;&#x9;&#xA;&#x9;if profileMetaclass is nothing then&#xA;&#x9;&#x9;set profileMetaclass = addStereotypeMetaclass( stereotypeClass, metaclassName)&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;if profileMetaclass.Name &lt;&gt; metaclassName then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;deleteElement profileMetaclass&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set profileMetaclass = addStereotypeMetaclass( stereotypeClass, metaclassName)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;end if&#x9;&#xA;&#x9;' add the GUID&#xA;&#x9;setTaggedValueValue profileMetaClass, &quot;Metamodel GUID&quot;, stereotypeClass.ElementGUID&#x9;&#xA;&#x9;set setProfileMetaclass = profileMetaClass&#x9;&#xA;end function&#xA;&#xA;sub setProfileSuperclass( stereotypeClass, metamodelSuperClass)&#xA;&#xA;&#x9;dim stereotypeSuperClass&#x9;as EA.Element&#x9;&#xA;&#x9;set stereotypeSuperClass = getRelatedSupplierElement( stereotypeClass, &quot;Generalization&quot;, &quot;Stereotype&quot;)&#x9;&#xA;&#x9;if stereotypeSuperClass is nothing then&#x9;&#xA;&#x9;&#x9;set stereotypeSuperClass = getProfileElement( metamodelSuperClass.Name)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;if stereotypeSuperClass is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set stereotypeSuperClass = profilePackage.Elements.AddNew( metamodelSuperClass.Name, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;stereotypeSuperClass.Stereotype = &quot;stereotype&quot;&#xA;&#x9;&#x9;&#x9;stereotypeSuperClass.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;addConnector stereotypeClass, &quot;Generalization&quot;, &quot;&quot;, stereotypeSuperClass&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub setProfileRedefinedStereotype( stereotypeClass, redefinedStereotypeName)&#xA;&#xA;&#x9;dim redefinedStereotypeClass&#x9;as EA.Element&#x9;&#xA;&#x9;set redefinedStereotypeClass = getRelatedSupplierElement2( stereotypeClass, &quot;Generalization&quot;, &quot;redefines&quot;, &quot;Class&quot;, &quot;stereotype&quot;)&#x9;&#xA;&#x9;if redefinedStereotypeClass is nothing then&#x9;&#xA;&#x9;&#x9;set redefinedStereotypeClass = getProfileElement( redefinedStereotypeName)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;if redefinedStereotypeClass is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set redefinedStereotypeClass = profilePackage.Elements.AddNew( redefinedStereotypeName, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;redefinedStereotypeClass.Stereotype = &quot;stereotype&quot;&#xA;&#x9;&#x9;&#x9;redefinedStereotypeClass.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;addConnector stereotypeClass, &quot;Generalization&quot;, &quot;redefines&quot;, redefinedStereotypeClass&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' ATTRIBUTES&#xA;'''''''''''''''''''''''&#xA;sub setStereotypeProperties( metamodelClass, stereotypeClass, stereotypeName)&#xA;&#x9;'set properties for elements and connectors&#xA;&#x9;dim imageAttribute &#x9;as  EA.Attribute&#xA;&#x9;setAttribute stereotypeClass, &quot;_metatype&quot;, metamodelClass.Alias&#x9;&#x9;&#xA;&#x9;setAttribute stereotypeClass, &quot;_strictness&quot;, &quot;profile&quot;&#x9;&#xA;&#x9;'' check if image exists&#xA;&#x9;'setAttribute stereotypeClass, &quot;_Image&quot;, &quot;&quot;&#x9;&#x9;&#xA;&#x9;setAttribute stereotypeClass, &quot;icon&quot;, IconPath + stereotypeName + &quot;.bmp&quot;&#xA;&#x9;deleteTaggedValueAttributes stereotypeClass&#x9;&#xA;&#x9;if metamodelClass.ObjectType = otElement then&#xA;&#x9;&#x9;addTaggedValueAttributes metamodelClass, stereotypeClass&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub deleteTaggedValueAttributes( stereotypeClass)&#xA;&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim attributeCount 'as Integer&#xA;&#x9;dim attributeIndex 'as Integer&#x9;&#xA;&#x9;attributeCount = stereotypeClass.Attributes.Count&#xA;&#x9;for attributeIndex = attributeCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set attribute = stereotypeClass.Attributes.GetAt( attributeIndex)&#x9;&#xA;&#x9;&#x9;if left( attribute.Name, 1) &lt;&gt; &quot;_&quot; and attribute.Name &lt;&gt; &quot;icon&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if attribute.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeClass.Attributes.Delete attributeIndex&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;stereotypeClass.Attributes.Refresh&#xA;end sub&#xA;&#xA;sub addTaggedValueAttributes( metamodelClass, stereotypeClass)&#xA;&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#x9;&#xA;&#x9;for each attribute in metamodelClass.Attributes&#x9;&#xA;&#x9;&#x9;if not attribute.IsDerived then&#xA;&#x9;&#x9;&#x9;copyAttribute stereotypeClass, attribute&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;metamodelClass.Attributes.Refresh&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' TOOLBOX&#xA;'''''''''''''''''''''''&#xA;sub cleanToolboxesAttributes(ToolboxClass)&#xA;' delete all the attrribute of the template ToolboxClass&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim attributeCount 'as Integer&#xA;&#x9;dim attributeIndex 'as Integer&#x9;&#xA;&#x9;Session.Output &quot;Cleaning Element toolbox ... &quot;&#xA;&#x9;attributeCount = ToolboxClass.Attributes.Count&#xA;&#x9;for attributeIndex = attributeCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set attribute = ToolboxClass.Attributes.GetAt( attributeIndex)&#x9;&#xA;&#x9;&#x9;if left( attribute.Name, 1) &lt;&gt; &quot;_&quot; and attribute.Name &lt;&gt; &quot;icon&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if attribute.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;ToolboxClass.Attributes.Delete attributeIndex&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;ToolboxClass.Attributes.Refresh&#xA;end sub&#xA;&#xA;sub cleanToolboxConnectorAttributes(ToolboxConnector)&#xA;' delete all the attrribute of the template ToolboxConnector&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim attributeCount 'as Integer&#xA;&#x9;dim attributeIndex 'as Integer&#x9;&#xA;&#x9;Session.Output &quot;Cleaning Connector toolbox ... &quot;&#xA;&#x9;attributeCount = ToolboxConnector.Attributes.Count&#xA;&#x9;for attributeIndex = attributeCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set attribute = ToolboxConnector.Attributes.GetAt( attributeIndex)&#x9;&#xA;&#x9;&#x9;if left( attribute.Name, 1) &lt;&gt; &quot;_&quot; and attribute.Name &lt;&gt; &quot;icon&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if attribute.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;ToolboxConnector.Attributes.Delete attributeIndex&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;ToolboxConnector.Attributes.Refresh&#xA;end sub&#xA;&#xA;sub addToolboxesAttributes( metamodelClass, ToolboxClass)&#xA;' Add all the attrribute of the template ToolboxConnector&#xA;&#x9;&#x9;Session.Output &quot;adding toolbox for &quot; +  metamodelClass.Name + &quot; toolboxClass &quot; + ToolboxClass.Name&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#x9;&#xA;&#x9;dim toolboxAttribute as EA.Attribute&#xA;&#x9;set toolboxAttribute = ToolboxClass.Attributes.AddNew(ProfileName +&quot;::&quot;+metamodelClass.Name + &quot;(&quot;+ metamodelClass.Type + &quot;)&quot;, &quot;string&quot;)&#xA;&#x9;toolboxAttribute.Alias = metamodelClass.Alias&#xA;&#x9;toolboxAttribute.Default = metamodelClass.Alias&#xA;&#x9;toolboxAttribute.Update()&#xA;&#x9;ToolboxClass.Attributes.Refresh&#x9;&#xA;end sub&#xA;&#xA;sub createtoolboxConnector(connector)&#xA;'' create a set of connectors in a standard toolbox class defined in the configuration&#xA;&#x9;Session.Output &quot;adding toolbox for &quot; +  connector.Name + &quot; toolboxClass &quot; + ToolboxConnector.Name&#xA;&#x9;dim toolboxAttribute as EA.Attribute&#xA;&#x9;dim metaclassName ' as string&#xA;&#x9;metaclassName = getTaggedValueValue( connector, &quot;Metaclass&quot;)&#xA;&#x9;set toolboxAttribute = ToolboxConnector.Attributes.AddNew(ProfileName +&quot;::&quot;+connector.Name + &quot;(UML::&quot;+ metaclassName + &quot;)&quot;, &quot;string&quot;)&#xA;&#x9;toolboxAttribute.Alias = connector.Alias&#xA;&#x9;toolboxAttribute.Default = connector.Alias&#xA;&#x9;toolboxAttribute.Update()&#xA;&#x9;ToolboxConnector.Attributes.Refresh&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' RELATIONSHIPS&#xA;'''''''''''''''''''''''&#xA;&#xA;sub transformRelationships( metamodelClass, stereotypeClass)&#xA;&#x9;dim connector as EA.Connector&#x9;&#xA;&#x9;for each connector in metamodelClass.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.ClientID = metamodelClass.ElementID then&#xA;&#x9;&#x9;&#x9;transformRelationship connector&#xA;&#x9;&#x9;&#x9;'' create toolbox relationships&#x9;&#xA;&#x9;&#x9;&#x9;createtoolboxConnector connector&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;end sub&#xA;&#xA;&#xA;sub transformRelationship( metamodelConnector)&#xA;&#xA;&#x9;dim metaclassName&#x9;&#x9;&#x9;  ' as String&#xA;&#x9;dim metaclassAlias&#x9;&#x9;&#x9;&#x9;'as string&#xA;&#x9;dim redefinedStereotypeName&#x9;  ' as String&#xA;&#x9;dim stereotypeName&#x9;&#x9; &#x9;  ' as String&#xA;&#x9;dim stereotypeClass&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim profileMetaclass&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;metaclassName = getTaggedValueValue( metamodelConnector, &quot;Metaclass&quot;)&#xA;&#x9;metaclassAlias = metamodelConnector.alias&#xA;&#x9;redefinedStereotypeName = getTaggedValueValue( metamodelConnector, &quot;Redefines&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString or metaclassName &lt;&gt; vbNullString then&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Generating stereotype for '&quot; &amp; metamodelConnector.Name &amp; &quot;' relationship...&quot;&#x9;&#x9;&#xA;&#x9;&#x9;'if metamodelConnector.Alias &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'&#x9;stereotypeName = metamodelConnector.Alias&#xA;&#x9;&#x9;'else&#xA;&#x9;&#x9;&#x9;stereotypeName = metamodelConnector.Name&#xA;&#x9;&#x9;'end if&#x9;&#x9;&#xA;&#x9;&#x9;set stereotypeClass = getProfileElement( stereotypeName)&#x9;&#x9;&#xA;&#x9;&#x9;if stereotypeClass is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set stereotypeClass = profilePackage.Elements.AddNew( stereotypeName, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;stereotypeClass.Stereotype = &quot;stereotype&quot;&#x9;&#xA;&#x9;&#x9;&#x9;stereotypeClass.Update&#xA;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;setStereotypeProperties metamodelConnector, stereotypeClass, metamodelConnector.Name&#xA;&#x9;&#x9;set profileMetaclass = setProfileMetaclass( metamodelConnector, stereotypeClass)&#x9;&#x9;&#xA;&#x9;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;setProfileRedefinedStereotype stereotypeClass, redefinedStereotypeName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;setAttribute profileMetaclass, &quot;_MeaningForwards&quot;, metamodelConnector.SupplierEnd.Role&#xA;&#x9;&#x9;setAttribute profileMetaclass, &quot;_MeaningBackwards&quot;, metamodelConnector.ClientEnd.Role&#xA;&#x9;&#x9;setTaggedValueValue profileMetaclass, &quot;Metamodel GUID&quot;, metamodelConnector.ConnectorGUID&#xA;&#x9;&#x9;'setAttribute profileMetaclass, &quot;_lineStyle&quot;, &quot;orthogonalR&quot;&#xA;&#x9;&#x9;setAttribute profileMetaclass, &quot;_relatedTo&quot;, metaclassAlias&#x9;&#x9;&#xA;&#x9;&#x9;setTaggedValueValue profileMetaclass, &quot;Metamodel GUID&quot;, stereotypeClass.ElementGUID&#xA;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Profile Type&quot;, &quot;Connector&quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;updateQuickLink metamodelConnector&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' QuickLink&#xA;'''''''''''''''''''''''&#xA;&#xA;sub createQuickLinkFile&#xA;&#xA;&#x9;dim fileSysObj 'as Scripting.FileSystemObject&#xA;&#x9;set fileSysObj = CreateObject( &quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;set quickLinkFileStream = fileSysObj.CreateTextFile( quickLinkFileName, STREAM_FOR_WRITING)&#xA;&#x9;quickLinkFileStream.WriteLine &quot;//Source Element Type,Source Stereotype Filter,Target Element Type,Target Stereotype Filter,Diagram Filter,New Element Type,New Element Stereotype,New Link Type,New Link Stereotype,New Link Direction,New Link Caption,New Link &amp; Element Caption,Create Link,Create Element,Disallow Self connector,No inherit from Metatype,Menu Group,Complexity Level,Target Must Be Parent,Embed element,Precedes Separator LEAF,Precedes Separator GROUP,Dummy Column&quot;&#xA;&#x9;quickLinkFileStream.WriteLine &quot;//generated:&quot; &amp; now()&#xA;end sub&#xA;&#xA;sub updateQuickLinkDocument&#xA;&#x9;dim quickLinkDoc&#x9;as EA.Element&#xA;&#x9;Session.Output &quot;Updating QuickLink document...&quot;&#x9;&#xA;&#x9;set quickLinkDoc = getProfileElement( &quot;QuickLink&quot;)&#xA;&#x9;quickLinkDoc.LoadLinkedDocument quickLinkFileName&#x9;&#xA;&#x9;quickLinkDoc.Update&#xA;end sub&#xA;&#xA;sub updateQuickLink( connector)&#xA;&#x9;dim connMetaclass      'as String&#xA;&#x9;dim connStereotype&#x9;   'as String&#xA;&#x9;dim toDirection&#x9;&#x9;   'as String&#xA;&#x9;dim fromDirection&#x9;   'as String&#xA;&#x9;dim sourceElement &#x9;&#x9;as EA.Element&#xA;&#x9;dim sourceMetaclass&#x9;   'as String&#xA;&#x9;dim sourceStereotype   'as String&#x9;&#xA;&#x9;dim targetElement &#x9;&#x9;as EA.Element&#xA;&#x9;dim targetMetaclass&#x9;   'as String&#xA;&#x9;dim targetStereotype   'as String&#xA;&#x9;dim row( 22)&#x9;&#x9;   'as String&#xA;&#x9;dim textRow&#x9;&#x9;&#x9;   'as String&#xA;&#xA;&#x9;connMetaclass = getTaggedValueValue( connector, &quot;Metaclass&quot;)&#xA;&#xA;&#x9;'if connector.Alias &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'connStereotype = connector.Alias&#xA;&#x9;'else&#xA;&#x9;&#x9;connStereotype = connector.Name&#xA;&#x9;'end if&#xA;&#x9;if connMetaclass = &quot;Composition&quot; or connMetaclass = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;toDirection = &quot;from&quot;&#xA;&#x9;&#x9;fromDirection = &quot;to&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;toDirection = &quot;directed&quot;&#xA;&#x9;&#x9;fromDirection = &quot;from&quot;&#xA;&#x9;end if&#xA;&#x9;set sourceElement = Repository.GetElementByID( connector.ClientID)&#xA;&#x9;sourceMetaclass = getTaggedValueValue( sourceElement, &quot;Metaclass&quot;)&#xA;&#x9;sourceStereotype = sourceElement.Name&#x9;&#xA;&#x9;set targetElement = Repository.GetElementByID( connector.SupplierID)&#xA;&#x9;targetMetaclass = getTaggedValueValue( targetElement, &quot;Metaclass&quot;)&#x9;&#xA;&#x9;targetStereotype = targetElement.Name&#xA;&#x9;&#xA;&#x9;' create SQL&#xA;&#x9;SQLSimpleRelationship sourceStereotype, targetStereotype, connStereotype&#xA;&#x9;&#x9;&#xA;&#x9;' Create relationship group comment row&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine &quot;// &quot; &amp; sourceStereotype &amp; &quot; -&gt; &quot; &amp; connector.Name &amp; &quot; -&gt; &quot; &amp; targetStereotype&#xA;&#x9;&#xA;&#x9;' Create from-existing-source-to-existing-target row&#xA;&#x9;&#xA;&#x9;row(0)  = sourceMetaclass &#x9;' Source Element Type&#xA;&#x9;row(1)  = sourceStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(2)  = targetMetaclass&#x9;' Target Element Type&#xA;&#x9;row(3)  = targetStereotype&#x9;' Target Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = vbNullString&#x9;&#x9;' New Element Type&#xA;&#x9;row(6)  = vbNullString&#x9;&#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = toDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) = connector.SupplierEnd.Role ' New Link Caption INVERTED FOR DAF&#xA;&#x9;row(11) = vbNullString&#x9;&#x9;' New Link &amp; Element Caption&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = vbNullString&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName&#x9;&#x9;' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;&#x9;&#xA;&#x9;' Create from-existing-target-to-existing-source row&#xA;&#x9;&#xA;&#x9;row(0)  = targetMetaclass&#x9;' Target Element Type&#xA;&#x9;row(1)  = targetStereotype&#x9;' Target Stereotype Filter&#xA;&#x9;row(2)  = sourceMetaclass &#x9;' Source Element Type&#xA;&#x9;row(3)  = sourceStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = vbNullString&#x9;&#x9;' New Element Type&#xA;&#x9;row(6)  = vbNullString&#x9;&#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = fromDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) =  connector.ClientEnd.Role ' New Link Caption INVERTED FOR DAF&#xA;&#x9;row(11) = vbNullString&#x9;&#x9;' New Link &amp; Element Caption&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = vbNullString&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName&#x9;&#x9;' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;&#x9;&#xA;&#x9;' Create from-existing-source-to-new-target row&#xA;&#x9;&#xA;&#x9;row(0)  = sourceMetaclass &#x9;' Source Element Type&#xA;&#x9;row(1)  = sourceStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(2)  = vbNullString&#x9;&#x9;' Target Element Type&#xA;&#x9;row(3)  = vbNullString&#x9;&#x9;' Target Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = targetMetaclass&#x9;' New Element Type&#xA;&#x9;row(6)  = targetStereotype&#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = toDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) = vbNullString&#x9;&#x9;' New Link Caption&#xA;&#x9;row(11) =  connector.SupplierEnd.Role '' New Link &amp; Element Caption  INVERTED FOR DAF&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName ' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;&#xA;&#x9;' Create from-existing-target-to-new-source row&#xA;&#x9;&#xA;&#x9;row(0)  = targetMetaclass &#x9;' Source Element Type&#xA;&#x9;row(1)  = targetStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(2)  = vbNullString&#x9;&#x9;' Target Element Type&#xA;&#x9;row(3)  = vbNullString&#x9;&#x9;' Target Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = sourceMetaclass&#x9;' New Element Type&#xA;&#x9;row(6)  = sourceStereotype &#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = fromDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) = vbNullString&#x9;&#x9;' New Link Caption&#xA;&#x9;row(11) = connector.ClientEnd.Role' New Link &amp; Element Caption  INVERTED FOR DAF&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName&#x9;&#x9; ' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;end sub&#xA;&#xA;function getProfileElement( profileElementName)&#xA;&#xA;&#x9;dim profileElement &#x9;as EA.Element&#xA;&#x9;dim element &#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;set profileElement = nothing&#x9;&#xA;&#x9;for each element in profilePackage.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if element.Name = profileElementName then&#xA;&#x9;&#x9;&#x9;set profileElement = element&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getProfileElement = profileElement&#x9;&#xA;end function&#xA;&#xA;function addStereotypeMetaClass( stereotypeClass, metaclassName)&#xA;&#xA;&#x9;dim profileMetaclass as EA.Element&#xA;&#x9;set profileMetaclass = profilePackage.Elements.AddNew( metaclassName, &quot;Class&quot;)&#xA;&#x9;profileMetaclass.Stereotype = &quot;metaclass&quot;&#xA;&#x9;profileMetaclass.Update&#xA;&#x9;profilePackage.Elements.Refresh&#xA;&#x9;addConnector stereotypeClass, &quot;Extension&quot;, &quot;&quot;, profileMetaclass&#xA;&#x9;set addStereotypeMetaClass = profileMetaclass&#x9;&#xA;end function&#xA;&#xA;sub testTransformClassGUID&#xA;&#x9;dim classGUID&#x9;&#x9;   ' as String&#xA;&#x9;dim profilePackageGUID ' as String&#xA;&#x9;dim quickLinkFileName    ' as String&#xA;&#x9;&#xA;&#x9;'DEPRECATED:  USE THE CONFIGURATION SCRIPT&#xA;&#x9;'classGUID = &quot;&quot;'e.g &quot;{BD4895B5-CA1E-4420-8849-51B5C0C349F6}&quot;  Metamodel package&#xA;&#x9;'profilePackageGUID =  &quot;&quot;'e.g &quot;{A570D667-E328-470a-A8B4-482813E31493}&quot; Profile Package&#xA;&#x9;'quickLinkFileName = &quot;c:\tmp\QuickLink.csv&quot; ' location of the Quicklinker file&#xA;&#x9;&#xA;&#x9;if Not profilePackageGUID is nothing  then&#xA;&#x9;&#x9;transformClassGUID classGUID, profilePackageGUID&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Please configure the script .&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub testTransformPackageGUID&#xA;&#x9;&#x9;transformPackageGUID metamodelPackageGUID, profilePackageGUID, quickLinkFileName&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Done!&quot;&#x9;&#xA;end sub&#xA;&#xA;testTransformPackageGUID"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="35"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{70CCEE03-525B-42e7-A2CC-17F430BD659D}"/>
			<Column name="ScriptAuthor" value="{4F60163A-9A48-4c3f-950A-C2BA61749587}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;configuration&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name: UML profile configuration&#xA;' Author: brothercorvo@gmail.com&#xA; ' this is the companion script to the M2 MdG technology&#xA;' Purpose: use this script to configure the targets for the M3 MDG scripts &#xA;'&#x9;&#x9;&#x9;&#xA;' Date: 2022 / 11 / 17&#xA;' Version: 4.20221117&#xA;'&#xA;&#xA;&#x9;dim metamodelPackageGUID ' as String&#xA;&#x9;dim profilePackageGUID   ' as String&#xA;&#x9;dim quickLinkFileName    ' as String&#xA;&#x9;dim ProfileName    ' as String&#xA;&#x9;dim mdgTechFilePath    ' as String&#xA;&#x9;dim ProfileDiagramGUID ' as String &#xA;&#x9;dim UMLProfileFilename' as String&#xA;&#x9;dim ProfileToolboxClassGUID ''as String&#xA;&#x9;dim ProfileToolboxConnectorGUID 'as String&#xA;&#x9;dim GenerateCatalogs ' as boolean&#xA;&#x9;dim generateSLQ ' as boolean&#xA;&#x9;dim IconPath  'as String&#xA;&#x9;dim SQLPath  'as String&#xA;&#x9;metamodelPackageGUID = &quot;{999A1E59-97AD-4301-AABF-515F6C82DC02}&quot; ' Metamodel package, default is the template GUID&#xA;&#x9;profilePackageGUID = &quot;{1BE8BA27-0DF4-4a63-A015-EFC37AB7D95D}&quot; ' Profile Package, default is the template GUID&#xA;&#x9;ProfileDiagramGUID=&quot;{E55262DA-B743-49ae-A6E4-57B9E04FF3A2}&quot; ' GUID of the diagram where the MDG  profile is locate, default is the template GUID&#xA;&#x9;ProfileToolboxClassGUID=&quot;{F6D0FC11-8D91-4a67-BF27-C262335214AD}&quot; ' the GUId of a stereotyped element containing tollboxes&#xA;&#x9;ProfileToolboxConnectorGUID=&quot;{62D4B13D-72F9-41f9-A7EC-D1D2A627EE4B}&quot; ' the GUId of a stereotyped element containing tollboxes&#xA;&#x9;quickLinkFileName = &quot;C:\Users\broth\Documents\work\TM forum\2021\model\Mdg\QuickLink\QuickLink.csv&quot; ' location of the Quicklinker file&#xA;&#x9;ProfileName = &quot;TMF&quot; 'name of the profile being generated&#xA;&#x9;mdgTechFilePath=&quot;C:\Users\broth\Documents\work\TM forum\2021\model\Mdg\mdg.mts&quot; 'technology MTS location&#xA;&#x9;UMLProfileFilename=&quot;C:\Users\broth\Documents\work\TM forum\2021\model\Mdg\profile\Profile.xml&quot; 'location of the UML profile saved&#xA;&#x9;IconPath=&quot;C:\Users\broth\Documents\work\TM forum\2021\model\Mdg\Icons\&quot;&#xA;&#x9;SQLPath=&quot;C:\Users\broth\Documents\work\TM forum\2021\model\Mdg\SQLQueries\&quot;&#xA;&#x9;GenerateCatalogs = 1&#xA;&#x9;generateSLQ = 1"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="36"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E8593E72-9DE7-4b49-81DE-3D5BB2F51575}"/>
			<Column name="ScriptAuthor" value="{4F60163A-9A48-4c3f-950A-C2BA61749587}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Model Management Utilities&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Maintained in TMF model&#xA; &#xA;function getRelatedSupplierElement( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#xA;&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getRelatedSupplierElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;function addConnector( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;&#xA;&#x9;'Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#xA;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#xA;&#x9;&#xA;&#x9;newConnector.Stereotype = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#xA;&#x9;&#xA;&#x9;newConnector.Update&#xA;&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#xA;&#x9;set addConnector = newConnector&#xA;&#x9;&#xA;end function&#xA;&#xA;function lookupElement(lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#xA;&#x9;sqlString = &quot;SELECT ea_guid FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_object.Name = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#xA;&#x9;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;&#xA;end function&#xA;&#xA;sub deleteElement( elementToDelete)&#xA;&#xA;&#x9;dim packageID&#x9;  ' as Integer&#xA;&#x9;dim package &#x9;&#x9;as EA.Package&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementIndex  ' as Integer&#xA;&#xA;&#x9;packageID = elementToDelete.PackageID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#xA;&#x9;elementIndex = 0&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if element.ElementID = elementToDelete.ElementID then&#xA;&#x9;&#x9;&#x9;package.Elements.Delete(elementIndex)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;&#x9;&#x9;elementIndex = elementIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;package.Elements.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub setAttribute( element, attributeName, defaultValue)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#xA;&#x9;&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#xA;&#x9;&#x9;if attribute.Name = attributeName then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( attributeName, &quot;&quot;)&#x9;&#x9;&#xA;&#x9;&#x9;element.Attributes.Refresh&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;attribute.Default = defaultValue&#xA;&#x9;&#xA;&#x9;attribute.Update&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub copyAttribute( element, sourceAttribute)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = sourceAttribute.Name then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( sourceAttribute.Name, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;element.Attributes.Refresh&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;attribute.Default = sourceAttribute.Default&#xA;&#x9;attribute.Type = sourceAttribute.Type&#xA;&#x9;attribute.ClassifierID = sourceAttribute.ClassifierID&#xA;&#x9;attribute.Notes = sourceAttribute.Notes&#x9;&#xA;&#x9;attribute.Update&#xA;&#x9;&#xA;end sub&#xA;&#xA;function getTaggedValueValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue &#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueValue   'as String&#xA;&#x9;&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;taggedValueValue = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;taggedValueValue = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;getTaggedValueValue = taggedValueValue&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setTaggedValueValue( eaItem, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;on error resume next&#xA;&#x9;&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 or taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.AddNew( taggedValueName, &quot;&quot;)&#xA;&#x9;&#x9;err.Clear&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;on error goto 0&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;&#xA;&#x9;taggedValue.Update&#xA;&#x9;&#xA;&#x9;eaItem.TaggedValues.Refresh&#xA;&#xA;end sub&#xA;&#xA;sub deleteTaggedValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue&#x9;&#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueCount   'as Integer&#xA;&#x9;dim taggedValueIndex   'as Integer&#xA;&#x9;dim deleted&#x9;&#x9;&#x9;   'as Boolean&#xA;&#x9;&#xA;&#x9;deleted = false&#xA;&#x9;&#xA;&#x9;taggedValueCount = eaItem.TaggedValues.Count&#xA;&#x9;&#xA;&#x9;for taggedValueIndex = taggedValueCount - 1 to 0 step -1&#xA;&#x9;&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.GetAt( taggedValueIndex)&#xA;&#x9;&#xA;&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;&#x9;&#x9;&#x9;eaItem.TaggedValues.Delete taggedValueIndex&#xA;&#x9;&#x9;&#x9;deleted = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if deleted then&#xA;&#x9;&#x9;eaItem.TaggedValues.Refresh&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function getRelatedSupplierElement2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#xA;&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedSupplierElementList2( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getRelatedSupplierElementList2 = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;function getRelatedElement( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#xA;&#x9;&#xA;&#x9;set relatedElementList = getRelatedElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getRelatedElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;function getOwnedElementNameList( element, ownedMetatypeList)&#xA;&#xA;&#x9;dim ownedElement &#x9;as EA.Element&#xA;&#x9;dim nameList&#x9;   'as String&#xA;&#x9;dim typeID&#x9;&#x9;   'as Integer&#xA;&#x9;dim typeElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementName&#x9;   'as String&#xA;&#x9;dim objectState&#x9;   'as String&#xA;&#x9;&#xA;&#x9;nameList = vbNullString&#xA;&#x9;&#xA;&#x9;if ownedMetatypeList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;ownedMetatypeList = ownedMetatypeList &amp; &quot;,&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each ownedElement in element.EmbeddedElements&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if InStr( ownedMetatypeList, ownedElement.MetaType &amp; &quot;,&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;typeID = ownedElement.PropertyType&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;typeID = ownedElement.ClassfierID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;elementName = ownedElement.Name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set typeElement = Repository.GetElementByID( typeID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementName = typeElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if nameList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; vbCRLF&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;nameList = nameList &amp; elementName&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectState = getCustomPropertyValue( ownedElement, &quot;objectState&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectState &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; &quot; [&quot; &amp; objectState &amp; &quot;]&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;getOwnedElementNameList = nameList&#xA;&#xA;end function&#xA;&#xA;function getCustomPropertyValue( ownedElement, propertyName)&#xA;&#xA;&#x9;dim customProperty as EA._CustomProperty&#xA;&#x9;dim propertyValue 'as String&#xA;&#x9;&#xA;&#x9;propertyValue = vbNullString&#xA;&#x9;&#xA;&#x9;for each customProperty in ownedElement.CustomProperties&#xA;&#x9;&#xA;&#x9;&#x9;if customProperty.Name = propertyName then&#xA;&#x9;&#x9;&#x9;propertyValue = customProperty.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;getCustomPropertyValue = propertyValue&#xA;&#x9;&#xA;end function&#xA;&#xA;function getAncestorPackage( element, ancestorPackageLevel)&#xA;&#xA;&#x9;dim packageLevel&#x9;   'as Integer&#xA;&#x9;dim packageID&#x9;&#x9;   'as Integer&#xA;&#x9;dim package&#x9;&#x9;&#x9;&#x9;as EA.Package&#xA;&#xA;&#x9;packageID = element.PackageID&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;&#xA;&#x9;for packageLevel = 2 to ancestorPackageLevel&#xA;&#x9;&#xA;&#x9;&#x9;packageID = package.ParentID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if packageID = 0 then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getAncestorPackage = package&#xA;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="37"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{24B8717D-8829-4db3-8403-CC1D276631BC}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TextFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;!INC Utils.Include&#xA;&#xA;&#xA;Class TextFile&#xA;&#x9;Private m_FullPath&#xA;&#x9;Private m_Contents&#xA;&#x9;Private m_Folder&#xA;&#x9;Private m_FileName&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  set m_Folder = Nothing&#xA;&#x9;  m_FileName = &quot;&quot;&#xA;&#x9;  m_Contents = &quot;&quot;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = me.Folder.FullPath &amp; &quot;\&quot; &amp; me.FileName&#xA;&#x9;End Property&#xA;&#x9;public Property Let FullPath(value)&#xA;&#x9;  dim startBackslash&#xA;&#x9;  startBackslash = InstrRev(value, &quot;\&quot;, -1, 1)&#xA;&#x9;  me.Folder.FullPath = left(value, startBackslash -1) 'get everything before the last &quot;\&quot;&#xA;&#x9;  me.FileName = mid(value, startBackslash + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;end Property&#xA;&#x9;&#x9;&#xA;&#x9;' Contents property.&#xA;&#x9;Public Property Get Contents&#xA;&#x9;  Contents = m_Contents&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Contents(value)&#xA;&#x9;  m_Contents = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;' FileNameWithoutExtension property.&#xA;&#x9;Public Property Get FileNameWithoutExtension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  FileNameWithoutExtension = left(me.FileName, startExtension -1) 'get everything before the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;' Extension property.&#xA;&#x9;Public Property Get Extension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  Extension = mid(me.FileName, startExtension + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Folder property.&#xA;&#x9;Public Property Get Folder&#xA;&#x9;  if m_Folder is nothing then&#xA;&#x9;&#x9;set m_Folder = new FileSystemFolder&#xA;&#x9;  end if&#xA;&#x9;  set Folder = m_Folder&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Folder(value)&#xA;&#x9;  set m_Folder = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#xA;&#x9;sub Save&#xA;&#x9;&#x9;Dim fso, MyFile&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;'first make sure the directory exists&#xA;&#x9;&#x9;me.Folder.Save&#xA;&#x9;&#x9;'then create file&#xA;&#x9;&#x9;Set MyFile = fso.CreateTextFile(me.FullPath, True)&#xA;&#x9;&#x9;MyFile.Write(Contents)&#xA;&#x9;&#x9;MyFile.close&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;end class&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="38"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Script Management"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="39"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Wrappers"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="40"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{41CC735E-AC5F-4f31-9306-5D3945721F31}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;'option explicit&#xA;&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'for some reason all scripts in the database have this value in the column scriptCategory&#xA;Const scriptCategory = &quot;605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F&quot;&#xA;&#xA;Class Script &#xA;&#x9;Private m_Name&#xA;&#x9;Private m_Code&#xA;&#x9;Private m_Group&#xA;&#x9;Private m_Id&#xA;&#x9;Private m_GUID&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  m_Name = &quot;&quot;&#xA;&#x9;  m_Code = &quot;&quot;&#xA;&#x9;  m_Id = &quot;&quot;&#xA;&#x9;  set m_Group = Nothing&#xA;&#x9;End Sub&#xA;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' Code property.&#xA;&#x9;Public Property Get Code&#xA;&#x9;  Code = m_Code&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Code(value)&#xA;&#x9;  m_Code = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Id property.&#xA;&#x9;Public Property Get Id&#xA;&#x9;  Id = m_Id&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Id(value)&#xA;&#x9;  m_Id = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' GUID property.&#xA;&#x9;Public Property Get GUID&#xA;&#x9;  GUID = m_GUID&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GUID(value)&#xA;&#x9;  m_GUID = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Path property.&#xA;&#x9;Public Property Get Path&#xA;&#x9;  Path = getPathFromCode&#xA;&#x9;  if len(Path) &lt; 1 then&#xA;&#x9;&#x9;Path = &quot;\&quot; &amp; me.Group.Name&#xA;&#x9;  end if&#xA;&#x9;End Property&#xA;&#xA;&#x9;' Group property.&#xA;&#x9;Public Property Get Group&#xA;&#x9;  set Group = m_Group&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Group(value)&#xA;&#x9;  set m_Group = value&#xA;&#x9;  'add the script to the group&#xA;&#x9;   m_Group.Scripts.Add me&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' GroupNameInCode property&#xA;&#x9;Public Property Get GroupInNameCode&#xA;&#x9;  GroupInNameCode = getGroupFromCode()&#xA;&#x9;End Property&#xA;&#xA;&#x9;&#xA;&#x9;' Gets all scripts stored in the model&#xA;&#x9;Public function getAllScripts(allGroups)&#xA;&#x9;&#x9;dim resultArray, scriptGroup,row,queryResult&#xA;&#x9;&#x9;set scriptGroup = new scriptGroup&#xA;&#x9;&#x9;set allGroups = scriptGroup.getAllGroups()&#xA;&#x9;&#x9;dim allScripts&#xA;&#x9;&#x9;set allScripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;dim sqlGet&#xA;&#x9;&#x9;sqlGet = &quot;select s.ScriptID, s.Notes, s.Script,ps.Script as SCRIPTGROUP, ps.Notes as GROUPNOTES, ps.ScriptID as GroupID, ps.ScriptName as GroupGUID, s.ScriptName as ScriptGUID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; from t_script s &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; inner join t_script ps on s.ScriptAuthor = ps.ScriptName &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; where s.notes like '&lt;Script Name=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;        queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim id, notes, code, group, name, groupNotes, groupID, groupGUID, scriptGUID&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray)&#xA;&#x9;&#x9;&#x9;id = resultArray(i,0)&#xA;&#x9;&#x9;&#x9;notes = resultArray(i,1)&#xA;&#x9;&#x9;&#x9;code = resultArray(i,2) &#xA;&#x9;&#x9;&#x9;group = resultArray(i,3)&#xA;&#x9;&#x9;&#x9;groupNotes = resultArray(i,4)&#xA;&#x9;&#x9;&#x9;groupID = resultArray(i,5)&#xA;&#x9;&#x9;&#x9;groupGUID = resultArray(i,6)&#xA;&#x9;&#x9;&#x9;scriptGUID = resultArray(i,7)&#xA;&#x9;&#x9;&#x9;if len(notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'first get or create the group&#xA;&#x9;&#x9;&#x9;&#x9;if allGroups.Exists(groupID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = allGroups(groupID)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Name = group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Id = groupID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.GUID = groupGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.setGroupTypeFromNotes groupNotes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;allGroups.Add groupID, scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'then make the script&#xA;&#x9;&#x9;&#x9;&#x9;name = getNameFromNotes(notes)&#xA;&#x9;&#x9;&#x9;&#x9;dim script&#xA;&#x9;&#x9;&#x9;&#x9;set script = New Script&#xA;&#x9;&#x9;&#x9;&#x9;script.Id = id&#xA;&#x9;&#x9;&#x9;&#x9;script.Name = name&#xA;&#x9;&#x9;&#x9;&#x9;script.Code = code&#xA;&#x9;&#x9;&#x9;&#x9;script.GUID = scriptGUID&#xA;&#x9;&#x9;&#x9;&#x9;'add the group to the script&#xA;&#x9;&#x9;&#x9;&#x9;script.Group = scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;'add the script to the list&#xA;&#x9;&#x9;&#x9;&#x9;allScripts.Add script&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set getAllScripts = allScripts&#xA;&#x9;End function&#xA;&#x9;&#xA;&#x9;'the notes contain= &lt;Script Name=&quot;MyScriptName&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;&#x9;'so the name is the second part when splitted by double quotes&#xA;&#x9;private function getNameFromNotes(notes)&#xA;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;getNameFromNotes = parts(1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the path is defined in the code as '[path=\directory\subdirectory]&#xA;&#x9;private function getPathFromCode()&#xA;&#x9;&#x9;getPathFromCode = getKeyValue(&quot;path&quot;)&#xA;&#x9;end function&#xA;&#x9;'the Group is defined in the code as '[group=NameOfTheGroup]&#xA;&#x9;public function getGroupFromCode()&#xA;&#x9;&#x9;getGroupFromCode = getKeyValue(&quot;group&quot;)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the key-value pair is defined in the code as '[keyName=value]&#xA;&#x9;public function getKeyValue(keyName)&#xA;&#x9;&#x9;dim returnValue&#xA;&#x9;&#x9;returnValue = &quot;&quot; 'initialise emtpy&#xA;&#x9;&#x9;dim keyIndicator, startKey, endKey, tempValue&#xA;&#x9;&#x9;keyIndicator = &quot;[&quot; &amp; keyName &amp; &quot;=&quot; &#xA;&#x9;&#x9;startKey = instr(me.Code, keyIndicator) + len(keyIndicator)&#xA;&#x9;&#x9;if startKey &gt; len(keyIndicator) then&#xA;&#x9;&#x9;&#x9;endKey = instr(startKey, me.Code, &quot;]&quot;)&#xA;&#x9;&#x9;&#x9;if endKey &gt; startKey then&#xA;&#x9;&#x9;&#x9;&#x9;tempValue = mid(me.code,startKey, endKey - startKey)&#xA;&#x9;&#x9;&#x9;&#x9;'filter out newline in case someone forgot to add the closing &quot;]&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if instr(tempValue,vbNewLine) = 0 and instr(tempValue,vbLF) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnValue = tempValue&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;getKeyValue = returnValue&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function addGroupToCode()&#xA;&#x9;&#x9;dim groupFromCode&#xA;&#x9;&#x9;groupFromCode = me.getGroupFromCode()&#xA;&#x9;&#x9;if not len(groupFromCode) &gt; 0 then&#xA;&#x9;&#x9;&#x9;'add the group indicator&#xA;&#x9;&#x9;&#x9;me.Code = &quot;'[group=&quot; &amp; me.Group.Name &amp; &quot;]&quot; &amp; vbNewLine &amp; me.Code&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'Insert the script in the database&#xA;&#x9;public sub Create&#xA;&#x9;&#x9;dim sqlInsert&#xA;&#x9;&#x9;sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName, ScriptAuthor, Notes, Script) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Values ('&quot; &amp; scriptCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&quot; &amp; me.Group.GUID &amp; &quot;','&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;','&quot; &amp; escapeSQLString(me.Code) &amp; &quot;')&quot;&#xA;&#x9;&#x9;Repository.Execute sqlInsert&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'update the script in the database&#xA;&#x9;public sub Update&#xA;&#x9;&#x9;dim sqlUpdate&#xA;&#x9;&#x9;sqlUpdate = &quot;update t_script set script = '&quot; &amp; escapeSQLString(me.Code) &amp; &quot;', ScriptAuthor = '&quot; &amp; me.Group.GUID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;', Notes = '&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;' where ScriptName = '&quot; &amp; me.GUID &amp; &quot;'&quot;&#xA;&#x9;&#x9;Session.Output sqlUpdate&#xA;&#x9;&#x9;Repository.Execute sqlUpdate&#xA;&#x9;end sub&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="41"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6722BF4C-7A5E-4de7-9DE4-71F5EA164FDD}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SaveAllScripts&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: Saves all scripts in a given folder on the file system&#xA;' Date: 2015-12-07&#xA;'&#xA;sub main&#xA;&#x9;dim script&#xA;&#x9;set script = New Script&#xA;&#x9;dim allScripts, allGroups&#xA;&#x9;set allGroups = Nothing&#xA;&#x9;'get the folder from the user&#xA;&#x9;dim folder, shell&#xA;&#x9;Set shell  = CreateObject( &quot;Shell.Application&quot; )&#xA;    Set folder = new FileSystemFolder&#xA;&#x9;set folder = folder.getUserSelectedFolder(&quot;&quot;)&#xA;&#x9;if not folder is nothing then&#xA;&#x9;&#x9;set allScripts = script.getAllScripts(allGroups)&#xA;&#x9;&#x9;Session.Output &quot;allGroups.Count: &quot; &amp; allGroups.Count&#xA;&#x9;end if&#xA;&#x9;for each script in allScripts&#xA;&#x9;&#x9;Session.Output &quot;filename: &quot; &amp; folder.FullPath &amp; script.Path &amp; &quot;\&quot; &amp; script.Name &amp; &quot;.vbs&quot;&#xA;&#x9;&#x9;dim file&#xA;&#x9;&#x9;set file = New TextFile&#xA;&#x9;&#x9;file.FullPath = folder.FullPath &amp; script.Path &amp; &quot;\&quot; &amp; script.Name &amp; &quot;.vbs&quot;&#xA;&#x9;&#x9;'first make sure the code indicator is added to the code&#xA;&#x9;&#x9;script.addGroupToCode&#xA;&#x9;&#x9;'then save the script with the group indicator&#xA;&#x9;&#x9;file.Contents = script.Code&#xA;&#x9;&#x9;file.Save&#xA;&#x9;next&#xA;end sub&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="42"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D4328F95-DD46-493d-A629-B1A2E2BCF7A9}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers]&#xA;'[group=Wrappers]&#xA;&#xA;'include all individual scripts in this group&#xA;!INC Wrappers.Script&#xA;!INC Wrappers.ScriptGroup&#xA;'!INC Wrappers.TaggedValue&#xA;'include the util group&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="43"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C7667985-9405-4a84-B7A0-478D2C7DB659}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ScriptGroup&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;'constants for group type in database&#xA;Const gtNormal = &quot;NORMAL&quot;, gtProjectBrowser = &quot;PROJBROWSER&quot;, gtDiagram = &quot;DIAGRAM&quot;, gtWorkflow = &quot;WORKFLOW&quot;, _&#xA;  gtSearch = &quot;SEARCH&quot;, gtModelSearch = &quot;MODELSEARCH&quot;, gtContextElement = &quot;CONTEXTELEMENT&quot;, _&#xA;  gtContextPackage = &quot;CONTEXTPACKAGE&quot;, gtContextDiagram = &quot;CONTEXTDIAGRAM&quot;, gtContextLink = &quot;CONTEXTLINK&quot;&#xA;&#xA;'for some reason all groups have this value in column scriptCategory&#xA;Const scriptGroupCategory = &quot;3955A83E-9E54-4810-8053-FACC68CD4782&quot;&#xA;&#xA;Class ScriptGroup &#xA;&#x9;Private m_Id&#xA;&#x9;Private m_GUID&#xA;&#x9;Private m_Name&#xA;&#x9;Private m_GroupType&#xA;&#x9;Private m_Scripts&#xA;&#x9;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  m_Id = &quot;&quot;&#xA;&#x9;  m_Name = &quot;&quot;&#xA;&#x9;  m_GroupType = &quot;&quot;&#xA;&#x9;  set m_Scripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' Id property.&#xA;&#x9;Public Property Get Id&#xA;&#x9;  Id = m_Id&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Id(value)&#xA;&#x9;  m_Id = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' GUID property.&#xA;&#x9;Public Property Get GUID&#xA;&#x9;  GUID = m_GUID&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GUID(value)&#xA;&#x9;  m_GUID = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' GroupType property.&#xA;&#x9;Public Property Get GroupType&#xA;&#x9;  GroupType = m_GroupType&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GroupType(value)&#xA;&#x9;  m_GroupType = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Scripts property.&#xA;&#x9;Public Property Get Scripts&#xA;&#x9;  set Scripts = m_Scripts&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'the notes contain something like &lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;&#x9;'so the group type is the second part when splitted by double quotes&#xA;&#x9;private function getGroupTypeFromNotes(notes)&#xA;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;getGroupTypeFromNotes = parts(1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'sets the GroupType based on the given notes&#xA;&#x9;public sub setGroupTypeFromNotes(notes)&#xA;&#x9;&#x9;GroupType = getGroupTypeFromNotes(notes)&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'gets a dictionary of all groups without the scripts&#xA;&#x9;public function getAllGroups()&#xA;&#x9;&#x9;dim allGroups, sqlGet&#xA;&#x9;&#x9;dim queryResult&#xA;&#x9;&#x9;dim resultArray&#xA;&#x9;&#x9;set allGroups = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;sqlGet = &quot;select s.[ScriptID], s.[ScriptName] AS GroupGUID, s.[Notes], s.[Script] as GroupName &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_script s &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where s.Notes like '&lt;Group Type=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;&#x9;&#x9;queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim groupId, groupGUID, groupName, notes, scriptGroup&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray)&#xA;&#x9;&#x9;&#x9;groupId = resultArray(i,0)&#xA;&#x9;&#x9;&#x9;groupGUID = resultArray(i,1)&#xA;&#x9;&#x9;&#x9;notes = resultArray(i,2) &#xA;&#x9;&#x9;&#x9;groupName = resultArray(i,3)&#xA;&#x9;&#x9;&#x9;if len(notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'first get or create the group&#xA;&#x9;&#x9;&#x9;&#x9;if not allGroups.Exists(groupID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Name = groupName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Id = groupId&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.GUID = groupGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.setGroupTypeFromNotes notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;allGroups.Add groupID, scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set getAllGroups = allGroups&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'Insert the group in the database&#xA;&#x9;public sub Create&#xA;&#x9;&#x9;dim sqlInsert&#xA;&#x9;&#x9;sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName,Notes, Script) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Values ('&quot; &amp; scriptGroupCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&lt;Group Type=&quot;&quot;&quot; &amp; me.GroupType &amp; &quot;&quot;&quot; Notes=&quot;&quot;&quot;&quot;/&gt;','&quot; &amp; me.Name &amp; &quot;')&quot;&#xA;&#x9;&#x9;Repository.Execute sqlInsert&#xA;&#x9;end sub&#xA;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="44"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Utils"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="45"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6EE713A9-211C-4236-9415-A782E0C4D688}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;XML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="46"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7186BAAA-A64A-4d3b-A9E1-B5007952E559}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;!INC Utils.XML&#xA;!INC Utils.SQL&#xA;!INC Utils.FileSystemFolder&#xA;!INC Utils.TextFile&#xA;!INC Utils.ExcelFile&#xA;!INC Utils.Util&#xA;!INC Utils.Model Management Utilities&#xA;!INC Utils.DAF Conf&#xA;'Author: Giu platania&#xA;'Date: 2025-01-22"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="47"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7496696C-1068-48ea-8095-D2D980702A21}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SQL&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'returns the SQL wildcard depending on the type of repository&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'escapes a literal string so it can be inserted using sql&#xA;function escapeSQLString(inputString)&#xA;&#x9;'replace the single quotes with two single quotes for all db types&#xA;&#x9;inputString = replace(inputString, &quot;'&quot;,&quot;''&quot;)&#xA;&#x9;'dbspecifics&#xA;&#x9;select case Repository.RepositoryType&#xA;&#x9;&#x9;case &quot;POSTGRES&quot;&#xA;&#x9;&#x9;&#x9;' replace backslash &quot;\&quot; by double backslash &quot;\\&quot;&#xA;&#x9;&#x9;&#x9;inputString = replace(inputString,&quot;\&quot;,&quot;\\&quot;)&#xA;&#x9;&#x9;case &quot;JET&quot;&#xA;&#x9;&#x9;&#x9;'replace pipe character | by '&amp; chr(124) &amp;'&#xA;&#x9;&#x9;&#x9;inputString = replace(inputString,&quot;|&quot;, &quot;'&amp; chr(124) &amp;'&quot;)&#xA;&#x9;end select&#xA;&#x9;escapeSQLString = inputString&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="48"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DED04622-7E82-43e9-8BB1-C5D18A467709}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LoadScripts&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;!INC EAScriptLib.VBScript-GUID&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: Loads scripts from the file systems and stores them in Enterprise Architect&#xA;' Date: 2015-12-07&#xA;'&#xA;sub main&#xA;&#x9;dim selectedFolder,file, allScripts, allGroups,script, overwriteExisting&#xA;&#x9;set selectedFolder = new FileSystemFolder&#xA;&#x9;set selectedFolder = selectedFolder.getUserSelectedFolder(&quot;&quot;)&#xA;&#x9;overwriteExisting = &quot;undecided&quot;&#xA;&#x9;if not selectedFolder is nothing then&#xA;&#x9;&#x9;set allGroups = Nothing&#xA;&#x9;&#x9;set script = new Script&#xA;&#x9;&#x9;'first get all existing scripts and groups&#xA;&#x9;&#x9;set allScripts = Script.getAllScripts(allGroups)&#xA;&#x9;&#x9;'get the scripts from the folder and its subfolders&#xA;&#x9;&#x9;getScriptsFromFolder selectedFolder, allGroups, allScripts, overwriteExisting&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;'gets all the scripts from the given folder and its subfolders (if any)&#xA;function getScriptsFromFolder(selectedFolder, allGroups, allScripts, overwriteExisting)&#xA;&#x9;dim script, subFolder&#xA;&#x9;for each file in selectedFolder.TextFiles&#xA;&#x9;&#x9;Session.Output &quot;FileName: &quot; &amp; file.FileName&#xA;&#x9;&#x9;'Session.Output &quot;Code: &quot; &amp; file.Contents&#xA;&#x9;&#x9;set script = getScriptFromFile(file, allGroups, allScripts,overwriteExisting)&#xA;&#x9;&#x9;if overwriteExisting = vbCancel then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'then process subfolders&#xA;&#x9;if not overwriteExisting = vbCancel then&#xA;&#x9;&#x9;for each subFolder in selectedFolder.SubFolders&#xA;&#x9;&#x9;&#x9;getScriptsFromFolder subFolder, allGroups, allScripts, overwriteExisting&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getScriptFromFile(file, allGroups, allScripts,overwriteExisting)&#xA;&#x9;dim script, newScript, foundMatch, newScriptGroupName, group, foundGroup&#xA;&#x9;foundMatch = false&#xA;&#x9;foundGroup = false&#xA;&#x9;set group = nothing&#xA;&#x9;set script = Nothing&#xA;&#x9;if file.Extension = &quot;vbs&quot; then&#xA;&#x9;&#x9;for each script in allScripts&#xA;&#x9;&#x9;&#x9;set newScript = new Script&#xA;&#x9;&#x9;&#x9;newScript.Name = file.FileNameWithoutExtension&#xA;&#x9;&#x9;&#x9;newScript.Code = file.Contents&#xA;&#x9;&#x9;&#x9;newScriptGroupName = newScript.GroupInNameCode &#xA;&#x9;&#x9;&#x9;'if the groupname was not found in the code we use the name of the package&#xA;&#x9;&#x9;&#x9;if len(newScriptGroupName) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;newScriptGroupName = file.Folder.Name&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'check the name of the script&#xA;&#x9;&#x9;&#x9;if script.Name = newScript.Name then&#xA;&#x9;&#x9;&#x9;&#x9;'check if there is a groupname defined in the file&#xA;&#x9;&#x9;&#x9;&#x9;if script.Group.Name = newScriptGroupName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'we have a match&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foundMatch = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set group = script.Group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if not foundMatch then &#xA;&#x9;&#x9;&#x9;'script did not exist yet&#xA;&#x9;&#x9;&#x9;'figure out if the group exists already&#xA;&#x9;&#x9;&#x9;for each group in allGroups.Items&#xA;&#x9;&#x9;&#x9;&#x9;if group.Name = newScriptGroupName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'found the group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the new script&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newScript.Group = group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foundGroup = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'if the group doesn't exist yet we have to create it&#xA;&#x9;&#x9;&#x9;if not foundGroup then&#xA;&#x9;&#x9;&#x9;&#x9;set group = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;group.Name = newScriptGroupName&#xA;&#x9;&#x9;&#x9;&#x9;group.GUID = GUIDGenerateGUID()&#xA;&#x9;&#x9;&#x9;&#x9;group.GroupType = gtNormal&#xA;&#x9;&#x9;&#x9;&#x9;'create the Group in the database&#xA;&#x9;&#x9;&#x9;&#x9;group.Create&#xA;&#x9;&#x9;&#x9;&#x9;'refresh allGroups&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;allGroups.Count before: &quot; &amp; allGroups.Count&#xA;&#x9;&#x9;&#x9;&#x9;set allGroups = group.GetAllGroups()&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;allGroups.Count after: &quot; &amp; allGroups.Count&#xA;&#x9;&#x9;&#x9;&#x9;'add the group to the script&#xA;&#x9;&#x9;&#x9;&#x9;newScript.Group = group&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'Now we have to create the script&#xA;&#x9;&#x9;&#x9;newScript.GUID = GUIDGenerateGUID()&#xA;&#x9;&#x9;&#x9;newScript.Create&#xA;&#x9;&#x9;&#x9;set script = newScript&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if overwriteExisting = &quot;undecided&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;overwriteExisting = Msgbox(&quot;Do you want to update existing scripts?&quot;, vbYesNoCancel+vbQuestion, &quot;Update existing scripts&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if overwriteExisting = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;script.Code = newScript.Code&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;script.Update&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#x9;set getScriptFromFile = script&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="49"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B9D0310B-6ADB-4e32-BC6A-6157EAD659C4}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FileSystemFolder&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Include&#xA;&#xA;Const ForReading = 1, ForWriting = 2, ForAppending = 8&#xA;Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0&#xA;&#xA;Class FileSystemFolder&#xA;&#x9;Private m_ParentPath&#xA;&#x9;Private m_Name&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = m_ParentPath &amp; &quot;\&quot; &amp; Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FullPath(value)&#xA;&#x9;  dim nameStart&#xA;&#x9;  nameStart = InstrRev(value, &quot;\&quot;, -1, 0) &#xA;&#x9;  m_ParentPath = left(value,nameStart -1)&#xA;&#x9;  m_Name = mid(value,NameStart +1)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'parentFolder&#xA;&#x9;Public Property Get ParentFolder&#xA;&#x9;&#x9;set ParentFolder = nothing&#xA;&#x9;&#x9;if len(m_ParentPath) &gt; 0 and right(m_ParentPath,2) &lt;&gt; &quot;:\&quot; then&#xA;&#x9;&#x9;&#x9;set ParentFolder = new FileSystemFolder&#xA;&#x9;&#x9;&#x9;ParentFolder.FullPath = m_ParentPath&#xA;&#x9;&#x9;end if&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' TextFiles property&#xA;&#x9;Public Property Get TextFiles&#xA;&#x9;&#x9;dim fso, fsoFolder, files, file, result, v_textFile, ts&#xA;&#x9;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FolderExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;Set fsoFolder = fso.GetFolder(me.FullPath)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Set files = fsoFolder.Files&#xA;&#x9;&#x9;&#x9;For Each file in files&#xA;&#x9;&#x9;&#x9;&#x9;set v_textFile = new TextFile&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.Folder = me&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.FileName = file.Name&#xA;&#x9;&#x9;&#x9;&#x9;set ts = file.OpenAsTextStream(ForReading, TristateUseDefault)&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.Contents = ts.ReadAll&#xA;&#x9;&#x9;&#x9;&#x9;ts.Close&#xA;&#x9;&#x9;&#x9;&#x9;result.add v_textFile&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;set TextFiles = result&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'SubFolders property&#xA;&#x9;public property Get SubFolders&#xA;&#x9;&#x9;Dim fso, result, folders, tempfolder, subfolder&#xA;&#x9;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;Set tempfolder = fso.GetFolder(me.FullPath)&#xA;&#x9;&#x9;Set folders = tempfolder.SubFolders&#xA;&#x9;&#x9;For Each folder in folders&#xA;&#x9;&#x9;&#x9;set subfolder = new FileSystemFolder&#xA;&#x9;&#x9;&#x9;subFolder.FullPath = folder.Path&#xA;&#x9;&#x9;&#x9;result.Add subFolder&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;set SubFolders = result&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;public function getUserSelectedFolder(startPath)&#xA;&#x9;&#x9;dim folder, shell&#xA;&#x9;&#x9;Set shell  = CreateObject( &quot;Shell.Application&quot; )&#xA;&#x9;&#x9;if len(startPath) &gt; O then&#xA;&#x9;&#x9;&#x9;Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0,startPath)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not folder is nothing then&#xA;&#x9;&#x9;&#x9;set getUserSelectedFolder = New FileSystemFolder&#xA;&#x9;&#x9;&#x9;getUserSelectedFolder.FullPath = folder.Self.Path &#xA;&#x9;&#x9;&#x9;Session.Output &quot;folder.Self.Path: &quot; &amp; folder.Self.Path&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set getUserSelectedFolder = Nothing&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public sub Save()&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;'first check if the path doesn't exist yet&#xA;&#x9;&#x9;if not fso.FolderExists(me.FullPath) and len(me.FullPath) &gt; 1 then&#xA;&#x9;&#x9;&#x9;if not me.ParentFolder is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;me.ParentFolder.Save&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;fso.CreateFolder me.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;End Class&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="50"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F6831D2E-D63E-4A12-80FD-48AF4928F19E}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Bookmark&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ho]&#xA;'[group=ho]&#xA;'Function:  Handle Bookmarks (package &amp; elements, diagrams planned)&#xA;'File:      Bookmarks.vbs&#xA;'Author:    Helmut Ortmann&#xA;'Date: 2015-12-29&#xA;!INC Utils.Include&#xA;&#xA;'----------------------------------------------------------------------------------------------------------&#xA;'Supported function:&#xA;'-------------------&#xA;'delAllBookmarks()                Delete all bookmarks&#xA;'delBookmarks(lGuid)              Delete bookmarks according to the passed list of GUIDs (System.Collections.ArrayList)&#xA;'lGuid=getBookmarks()             Get list of bookmarks (System.Collections.ArrayList)&#xA;'setBookmarks(lGuid)              Set bookmarks according to the passed list of GUIDs (System.Collections.ArrayList)&#xA;'updateBookmarks(lGuid, value)    Update bookmarks according to the passed list of GUIDs (System.Collections.ArrayList)&#xA;'                                 Delete: value=0; Set: value=1&#xA;'------------------&#xA;' Remarks:&#xA;' Bookmarks are EA Elements with the field Tagged=1&#xA;' Only Elements and packages can be bookmarked, no Digarams!&#xA;&#xA;'----------------------------------------------------------------&#xA;' Testscript: Modify/Delete/Report selected elements from Search Window&#xA;'----------------------------------------------------------------&#xA;' Example SQL Search: &#xA;' Make sure to use GUIDs&#xA;' SELECT t_object.ea_guid AS CLASSGUID, &#xA;'        t_object.Object_Type AS CLASSTYPE, t_object.Name, t_object.ea_guid, t_object.Object_Type&#xA;'    from t_object&#xA;' Test:&#xA;' 1. Run query&#xA;' 2. Select rows, copy them to clipboard&#xA;' 3. Run script&#xA;&#xA;sub testBookmark&#xA;  Dim guid, el&#xA;  Dim lGuids&#xA;  set lGuids = getBookmarks()&#xA;  Session.Output &quot;--------- Start test bookmark --------------&quot;&#xA;  for each guid in lGuids&#xA;&#x9;' here you may put in your action according to the meta type&#xA;&#x9;Set el = Repository.GetElementByGuid(guid)&#xA;&#x9;if not el is nothing then&#xA;&#x9;&#x9;Select Case el.MetaType&#xA;&#x9;&#x9;&#x9;Case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;  Package:&quot; + Left(el.Name,30) + &quot; &quot; + el.MetaType+ &quot; &quot; + guid&#xA;&#x9;&#x9;&#x9;Case &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;  Class  :&quot; + Left(el.Name,30) + &quot; &quot; + guid&#xA;&#x9;&#x9;&#x9;Case Else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output  &quot;  &quot; + el.MetaType + &quot;:&quot; + Left(el.Name,30) + &quot; &quot; + guid&#xA;&#x9;&#x9;End Select&#xA;&#x9;end if&#xA;  Next&#xA;  Session.Output &quot;  Found Bookmarks: &quot; + CStr(lGuids.Count)&#xA;  &#xA;  ' delete all bookmarks&#xA;  delAllBookmarks()&#xA;  Session.Output &quot;All bookmarks deleted&quot; &#xA;  &#xA;  ' reread all bookmarksd&#xA;  set lGuids = getBookmarks()&#xA;  Session.Output &quot;  Found Bookmarks: &quot; + CStr(lGuids.Count)&#xA;  &#xA;  ' create bookmarks&#xA;  setBookmarks(lGuids)&#xA;  Session.Output &quot;All bookmarks restored&quot; &#xA;  &#xA;  ' reread all bookmarksd&#xA;  set lGuids = getBookmarks()&#xA;  Session.Output &quot;  Found Bookmarks: &quot; + CStr(lGuids.Count)&#xA;  &#xA;  Session.Output &quot;--------- End test bookmark --------------&quot;&#xA;  &#xA;end sub&#xA;&#xA;'--------------------------------------------------------------&#xA;' delAllBookmarks&#xA;'--------------------------------------------------------------&#xA;Function delAllBookmarks()&#xA;    Dim sqlDelAll&#xA;&#x9;Dim queryResult&#xA;    sqlDelAll = &quot;update t_object &quot; &amp; _&#xA;&#x9;&#x9;            &quot; set tagged = 0; &quot; &#xA;&#x9;sqlDelAll = &quot;UPDATE t_object SET tagged=0&quot;&#xA;    Repository.Execute sqlDelAll&#xA;End Function&#xA;&#xA;'--------------------------------------------------------------&#xA;' delBookmarks(ArrayList&lt;GUID&gt;)&#xA;'--------------------------------------------------------------&#xA;Function delBookmarks(lGuid)&#xA;&#x9;updateBookmarks lGuid,0&#xA;End Function&#xA;'--------------------------------------------------------------&#xA;' setBookmarks ArrayList&lt;GUID&gt;&#xA;'--------------------------------------------------------------&#xA;Function setBookmarks(lGuid)&#xA;&#x9;updateBookmarks lGuid,1 &#xA;End Function&#xA;&#xA;Function updateBookmarks(lGuid, value)&#xA;&#x9;Dim guids&#xA;&#x9;Dim guid&#xA;&#x9;Dim sqlSet&#xA;&#x9;&#xA;&#x9;' construct sql update &#xA;&#x9;guids = &quot;&quot;&#xA;&#x9;for each guid in lGuid&#xA;&#x9;&#x9;Session.Output &quot;'&quot;+guid+&quot;'&quot;&#xA;&#x9;    if len(guid) &gt; 37 then&#xA;&#x9;&#x9;&#x9;guids = guids + &quot;'&quot; + guid + &quot;',&quot;&#xA;&#x9;&#x9;End if&#xA;&#x9;Next&#xA;&#x9;if guid &lt;&gt; &quot;&quot; Then &#xA;&#x9;&#x9;' remove last comma&#xA;&#x9;&#x9;if (len(guids) &gt; 0) then&#xA;&#x9;&#x9;&#x9;guids = mid(guids, 1, len(guids) -1)&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;sqlSet = &quot;update t_object &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9; &quot; set tagged=&quot; &amp; CStr(value) &amp; _&#xA;&#x9;&#x9;&#x9;&#x9; &quot; where ea_guid in (&quot; + guids + &quot;);&quot;&#xA;&#x9;&#x9;' Session.Output &quot;Set bookmarks '&quot; + sqlSet + &quot;' &quot;&#xA;&#x9;&#x9;Repository.Execute sqlSet&#xA;&#x9;End if&#xA;&#xA;End Function&#xA;'--------------------------------------------------------------&#xA;' ArrayList&lt;GUID&gt; getBookmarks&#xA;'--------------------------------------------------------------&#xA;' Prerequisition:&#xA;'&#xA;'&#xA;Function getBookmarks( )&#xA;&#x9;&#x9;Dim sqlGet&#xA;&#x9;&#x9;Dim resultArray&#xA;&#x9;&#x9;Dim queryResult&#xA;&#x9;&#x9;Dim lGuid&#xA;&#x9;&#x9;Set lGuid = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;sqlGet = &quot;select o.ea_guid &quot; &amp; _&#xA;&#x9;&#x9;            &quot; from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.tagged = 1 &quot;&#xA;        queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray) &#xA;&#x9;&#x9;&#x9;if len(resultArray(i,0)) &gt; 37 then &#xA;&#x9;&#x9;&#x9;&#x9;lGuid.Add resultArray(i,0)&#xA;&#x9;&#x9;&#x9;End if&#xA;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;Set getBookmarks = lGuid&#xA; End Function&#xA;&#xA;' Call main function&#xA;'testBookmark"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="51"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F5071657-E597-4035-A31B-AD33CFE4DF65}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Clipboard&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ho]&#xA;'[group=ho]&#xA;'Function:  Handle Cipboard, read GUIDs from Clipboard&#xA;'File:      Clipboard.vbs&#xA;'Author:    Helmut Ortmann&#xA;'Date: 2015-12-29&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ho.StringFunctions    &#xA;&#xA;&#xA;'----------------------------------------------------------------------------------------------------------&#xA;'Supported function:&#xA;'-------------------&#xA;' lGuid = getGuidsFromClipboard()     Get list of GUIDs from vlipboard in the array of GUIDs of type (System.Collections.ArrayList)&#xA;' setTextInClipboard(text)            Copy text to Clipboard (On some Windows systems there is a IExplorer security warning)&#xA;&#xA;&#xA;'----------------------------------------------------------------&#xA;' Testscript: Modify/Delete/Report selected elements from Search Window&#xA;'----------------------------------------------------------------&#xA;' Example SQL Search: &#xA;' Make sure to use GUIDs&#xA;' SELECT t_object.ea_guid AS CLASSGUID, &#xA;'        t_object.Object_Type AS CLASSTYPE, t_object.Name, t_object.ea_guid, t_object.Object_Type&#xA;'    from t_object&#xA;' Test:&#xA;' 1. Run query&#xA;' 2. Select rows, copy them to clipboard&#xA;' 3. Run script&#xA;&#xA;sub testGetGuidsFromClipboard&#xA;  Dim GUID&#xA;  Dim lGuids&#xA;  Dim oType&#xA;  Dim el As EA.Element&#xA;  Dim dia As EA.Diagram&#xA;  ' get list of GUIDs, usually one per row&#xA;  set lGuids = getGuidsFromClipboard()&#xA;  &#xA;  for each guid in lGuids&#xA;&#x9;' Here you may put in your action according to the meta type&#xA;&#x9;' Element or package&#xA;&#x9;Set el = Repository.GetElementByGuid(guid)&#xA;&#x9;if not el is nothing then&#xA;&#x9;&#x9;Select Case el.MetaType&#xA;&#x9;&#x9;&#x9;Case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Package:&quot; + Rpad(el.Name,&quot;_&quot;,30) + &quot; &quot; + guid&#xA;&#x9;&#x9;&#x9;Case &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Class  :&quot; + Rpad(el.Name,&quot;_&quot;,30) + &quot; &quot; + guid&#xA;&#x9;&#x9;&#x9;Case Else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output  el.MetaType + &quot;:&quot; + RPad(el.Name,&quot;_&quot;,30) + &quot; &quot; + guid&#xA;&#x9;&#x9;End Select&#xA;&#x9;else &#xA;&#x9;&#x9;Set dia = Repository.GetDiagramByGuid(guid)&#xA;&#x9;&#x9;if not dia is nothing then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Diagram:&quot; + Rpad(dia.Name,&quot;_&quot;,30) + &quot; &quot; + guid&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;&#x9;end if&#xA;  Next&#xA;  Session.Output &quot;Found GUIDs in clipboard:&quot; + CStr(lGuids.Count)&#xA;  &#xA;  clipboard = getTextFromClipboard&#xA;&#xA;  'Put something to clipboard&#xA;  ret = setTextInClipboard(&quot;Beatiful weather&quot;)&#xA;  &#xA;&#xA;end sub&#xA;&#xA;&#xA;'--------------------------------------------------------------&#xA;' ArrayList&lt;GUID&gt; getGuidsFromClipboard&#xA;'--------------------------------------------------------------&#xA;' Prerequisition:&#xA;' - One GUID for each row is used&#xA;'&#xA;'&#xA;Function getGuidsFromClipboard( )&#xA;Dim objHtml&#xA;Dim re&#xA;Dim colMatch&#xA;Dim textClipboard&#xA;Dim lGuid&#xA;&#xA;&#xA;  ' Get Clipboard content of type text&#xA;  textClipboard = getTextFromClipboard()&#xA;  &#xA;  ' Extract GUIDs with regExp&#xA;  Set re = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;  With re&#xA;&#x9;.Pattern = &quot;{[0-9abcdefABCDEF-]+}&quot;&#xA;&#x9;.Global = True&#xA;&#x9;.IgnoreCase = False&#xA;  End With&#xA;  Set colMatch = re.Execute(textClipboard)&#xA;  ' Collect Guids in ArrayList&#xA;  Set lGuid = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;  for each colMatch in colMatch&#xA;&#x9;lGuid.Add colMatch.Value&#xA;  Next&#xA;  ' return ArrayList of GUIDs&#xA;  Set getGuidsFromClipboard = lGuid&#xA;End Function&#xA;&#xA;Function getTextFromClipboard()&#xA;  Dim objHTML &#xA;  Set objHTML = CreateObject(&quot;htmlfile&quot;)&#xA;  getTextFromClipboard = objHTML.ParentWindow.ClipboardData.GetData(&quot;Text&quot;)&#xA;End Function&#xA;&#xA;' Note: IE gives a security warning. I haven' found another way to copy&#xA;' It's not that fast&#xA;Function setTextInClipboard(text)&#xA;&#x9;Set objIE = CreateObject(&quot;InternetExplorer.Application&quot;)&#xA;&#x9;objIE.Navigate(&quot;about:blank&quot;)&#xA;&#x9;objIE.document.parentwindow.clipboardData.SetData &quot;text&quot;, text&#xA;&#x9;objIE.Quit&#xA;&#x9;&#xA;&#x9;&#xA;End Function&#xA;&#xA;' test function, if useful remove tick mark&#xA;'testGetGuidsFromClipboard"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="52"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6347F604-5CD9-40F7-BB96-87192BC583FD}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ComReferences&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ho]&#xA;'[group=ho]&#xA;'Function:  Useful references to common COM objects&#xA;'File:      ComReferences.vbs&#xA;'Author:    Helmut Ortmann&#xA;'Date: 2015-12-30&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;Session.Output &quot;&quot;&#xA;Session.Output &quot;COM Object List&quot;&#xA;Session.Output &quot;COM Object: HTMLFile&quot;&#xA;Session.Output &quot;https://autohotkey.com/board/topic/56987-com-object-reference-autohotkey-l/#entry358974&quot;&#xA;&#xA;Session.Output &quot;Err object&quot;&#xA;Session.Output &quot;https://msdn.microsoft.com/en-us/subscriptions/sbf5ze0e(v=vs.84).aspx&quot;&#xA;&#xA;Session.Output &quot;On error Statement&quot;&#xA;Session.Output &quot;https://msdn.microsoft.com/en-us/subscriptions/53f3k80h(v=vs.84).aspx&quot;&#xA;&#xA;Session.Output &quot;Dictionary&quot;&#xA;Session.Output &quot;http://windowsitpro.com/scripting/understanding-vbscript-dictionary-object-alternative-arrays&quot;&#xA;&#xA;Session.Output &quot;System.Collections.ArrayList&quot;&#xA;Session.Output &quot;&quot;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="53"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{39314288-5C74-4B72-BF38-B91C80E7E60E}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Delete&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ho]&#xA;'[group=ho]&#xA;'Function:  Delete copied/bookmarked elements &#xA;'File:      Delete.vbs&#xA;'Author:    Helmut Ortmann&#xA;'Date: 2015-12-29&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ho.Clipboard&#xA;!INC ho.Bookmark&#xA;&#xA;&#xA;sub testDelete&#xA;Session.output &quot;Test function 'delete' started&quot;&#xA;Session.output &quot;Test function 'delete' finished&quot;&#xA;end sub&#xA;&#xA;'------------------------------------------------------&#xA;' Delete all items from clipboard &#xA;'------------------------------------------------------&#xA;' Precondition:&#xA;' - Each raw of Clipboard shall contain a GUID to identify the item to delete&#xA;' - Supported element types&#xA;' -- Elements&#xA;' -- Packages&#xA;' -- Diagrams&#xA;'&#xA;'Possible select statement:&#xA;' select ea_guid, name, object_Type, &quot;Element&quot; from t_object where name like &quot;XX*&quot; UNION&#xA;' select ea_guid, name, diagram_Type, &quot;Diagram&quot; from t_diagram where name like &quot;XX*&quot; UNION&#xA;' select ea_guid, name, &quot;Package&quot;, &quot;Package&quot; from t_package where name like &quot;XX*&quot;&#xA;Function deleteClipboardItems()&#xA;&#x9;Dim lGuids ' List of GUIDs in &quot;System.Collections.ArrayList&quot;&#xA;   &#xA;&#x9;Set lGuids = getGuidsFromClipboard()&#xA;    deleteClipboardItems = deleteByGuids(lGuids)&#xA;End Function&#xA;&#xA;'------------------------------------------------------&#xA;' Delete all bookmarked items to the passed package&#xA;'------------------------------------------------------&#xA;' Precondition:&#xA;' - Supported element types&#xA;' -- Elements&#xA;' -- Packages&#xA;' -- Diagrams&#xA;'&#xA;Function deleteBookmarkedItems()&#xA;&#x9;Dim lGuids ' List of GUIDs in &quot;System.Collections.ArrayList&quot;&#xA;   &#xA;&#x9;Set lGuids = getBookmarks()&#xA;    deleteBookmarkedItems = deleteByGuids(lGuids)&#xA;End function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;Function deleteByGuids(lGuids)&#xA;    Dim count&#xA;&#x9;Dim i&#xA;&#x9;Dim itemName&#xA;&#x9;Dim itemPkgId&#xA;&#x9;Dim itemType&#xA;&#x9;Dim guid&#xA;&#x9;Dim itemId&#xA;&#x9;&#xA;&#x9;Dim eaPkg As EA.Package&#xA;&#x9;Dim eaDia As EA.Diagram&#xA;&#x9;Dim eaEl As EA.Element&#xA;&#x9;Dim col As EA.Collection&#xA;&#x9;&#xA;&#x9;' List of packages to update&#xA;&#x9;Dim dictSrcPkg&#xA;&#x9;Set dictSrcPkg = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;count = 0&#xA;&#x9;for each guid in lGuids&#xA;&#x9;    Set eaPkg = nothing&#xA;&#x9;&#x9;Set eaDia = nothing&#xA;&#x9;&#x9;Set eaEl = nothing&#xA;&#xA;&#x9;&#xA;&#x9;    ' Element, an element might be a package and therefore isn't counted or logged to screen&#xA;&#x9;&#x9;Set eaEl = Repository.GetElementByGuid(guid)&#xA;&#x9;&#x9;if not eaEl is nothing then&#xA;&#x9;&#x9;  itemPkgId = eaEl.PackageID&#xA;&#x9;&#x9;  itemName = eaEl.Name&#xA;&#x9;&#x9;  itemType = eaEl.Type&#xA;&#x9;&#x9;  itemId = eaEl.ElementID&#xA;&#xA;&#x9;&#x9;  ' delete element&#xA;&#x9;&#x9;  Set eaPkg = Repository.GetPackageByID(itemPkgId)&#xA;&#x9;&#x9;  Set col = eaPkg.Elements&#xA;&#x9;&#x9;  i = 0&#xA;&#x9;&#x9;  For each eaEl in col&#xA;&#x9;&#x9;&#x9;if eaEl.ElementID = itemId then&#xA;&#x9;&#x9;&#x9;&#x9;col.Delete(i)&#xA;&#x9;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;  Next&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  ' Remeber package to later refresh/update package, posible EA error&#xA;&#x9;&#x9;  if not dictSrcPkg.Exists(itemPkgId) then&#xA;&#x9;&#x9;&#x9;&#x9;dictSrcPkg.Add itemPkgId, 0 &#xA;&#x9;&#x9;  end if&#xA;&#xA;&#x9;&#x9;  ' Element possibly is a package, only count during copying the package&#xA;&#x9;&#x9;  if itemType &lt;&gt; &quot;Package&quot; Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Delete Element '&quot; + itemName&#xA;&#x9;&#x9;&#x9;count = count + 1&#xA;&#x9;&#x9;  End if&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' Package&#xA;&#x9;&#x9;Set eaPkg = Repository.GetPackageByGuid(guid)&#xA;&#x9;&#x9;if not eaPkg is nothing then&#xA;&#x9;&#x9;  itemPkgId = eaPkg.ParentID&#xA;&#x9;&#x9;  itemName = eaPkg.Name&#xA;&#x9;&#x9;  itemId = eaPkg.PackageID&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;  ' delete Package&#xA;&#x9;&#x9;  Set eaPkg = Repository.GetPackageByID(itemPkgId)&#xA;&#x9;&#x9;  Set col = eaPkg.Packages&#xA;&#x9;&#x9;  i = 0&#xA;&#x9;&#x9;  For each eaPkg in col&#xA;&#x9;&#x9;&#x9;if eaPkg.PackageID = itemId then&#xA;&#x9;&#x9;&#x9;&#x9;col.Delete(i)&#xA;&#x9;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;  Next&#xA;&#xA;&#x9;&#x9;  ' Remeber package to later refresh/update package, posible EA error&#xA;&#x9;&#x9;  'if not dictSrcPkg.Exists(itemPkgId) then&#xA;&#x9;&#x9;  '&#x9;&#x9;dictSrcPkg.Add itemPkgId, 0 &#xA;&#x9;&#x9;  'end if&#xA;&#x9;&#x9;  Session.Output &quot;Delete Package '&quot; + itemName&#xA;&#x9;&#x9;  count = count + 1&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' Diagram&#xA;&#x9;&#x9;on error resume next&#xA;&#x9;&#x9;Set eaDia = Repository.GetDiagramByGuid(guid)&#xA;&#x9;&#x9;if Err.Number = 0 then&#xA;&#x9;&#x9;&#x9;if not eaDia is nothing then&#xA;&#x9;&#x9;&#x9;  itemPkgId = eaDia.PackageID&#xA;&#x9;&#x9;      itemName = eaDia.Name&#xA;&#x9;&#x9;&#x9;  itemId = eaDia.DiagramID&#xA;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;  ' delete diagram&#xA;&#x9;&#x9;&#x9;  Set eaPkg = Repository.GetPackageByID(itemPkgId)&#xA;&#x9;&#x9;&#x9;  Set col = eaPkg.Diagrams&#xA;&#x9;&#x9;&#x9;  i = 0&#xA;&#x9;&#x9;&#x9;  For each eaDia in col&#xA;&#x9;&#x9;&#x9;&#x9;if eaDia.DiagramID = itemId then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;col.Delete(i)&#xA;&#x9;&#x9;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#x9;  Next&#xA;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;  ' Remeber package to later refresh them, posible EA error&#xA;&#x9;&#x9;&#x9;  if not dictSrcPkg.Exists(pkgId) then&#xA;&#x9;&#x9;&#x9;   &#x9;   dictSrcPkg.Add itemPkgId, 0 &#xA;&#x9;&#x9;&#x9;  end if&#xA;&#xA;&#x9;&#x9;&#x9;  Session.Output &quot;Delete Diagram '&quot; + itemName  &#xA;&#x9;&#x9;&#x9;  count = count + 1&#xA;&#x9;&#x9;&#x9;End if&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;On Error GoTo 0&#xA;&#x9;&#x9;&#xA;&#x9;Next&#xA;&#x9;&#xA;&#x9;' Refresh all source packages&#xA;    For each itemPkgId in dictSrcPkg&#xA;&#x9;    Set eaPkg = Repository.GetPackageByID(itemPkgId)&#xA;&#x9;&#x9;if not eaPkg is nothing then&#xA;&#x9;&#x9;&#x9;eaPkg.Update()&#xA;&#x9;&#x9;&#x9;Repository.RefreshModelView(itemPkgId)&#x9;&#xA;&#x9;&#x9;End if&#xA;&#x9;Next&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;deleteByGuids = count&#xA;End Function&#x9;&#xA;&#xA;&#xA;'Test&#xA;'testDelete"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="54"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7ABB2A02-D15A-4EF2-A5C2-C1D6A6317423}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Move&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ho]&#xA;'[group=ho]&#xA;'Function:  Move copied elements to a new position&#xA;'File:      Move.vbs&#xA;'Author:    Helmut Ortmann&#xA;'Date: 2015-12-29&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ho.Clipboard&#xA;!INC ho.Bookmark&#xA;&#xA;&#xA;sub testMove&#xA;Session.output &quot;Test function 'move' started&quot;&#xA;Session.output &quot;Test function 'move' finished&quot;&#xA;end sub&#xA;&#xA;'------------------------------------------------------&#xA;' Move all items from clipboard to the passed package&#xA;'------------------------------------------------------&#xA;' Precondition:&#xA;' - Each raw of Clipboard shall contain a GUID to identify the item to move&#xA;' - Supported element types&#xA;' -- Elements&#xA;' -- Packages&#xA;' -- Diagrams&#xA;'&#xA;'Possible select statement:&#xA;' select ea_guid, name, object_Type, &quot;Element&quot; from t_object where name like &quot;XX*&quot; UNION&#xA;' select ea_guid, name, diagram_Type, &quot;Diagram&quot; from t_diagram where name like &quot;XX*&quot; UNION&#xA;' select ea_guid, name, &quot;Package&quot;, &quot;Package&quot; from t_package where name like &quot;XX*&quot;&#xA;Function moveClipboardItems(pkg)&#xA;&#x9;Dim lGuids ' List of GUIDs in &quot;System.Collections.ArrayList&quot;&#xA;   &#xA;&#x9;Set lGuids = getGuidsFromClipboard()&#xA;    moveClipboardItems = moveByGuids(lGuids, pkg)&#xA;End function&#xA;&#xA;'------------------------------------------------------&#xA;' Move all bookmarked items to the passed package&#xA;'------------------------------------------------------&#xA;' Precondition:&#xA;' - Supported element types&#xA;' -- Elements&#xA;' -- Packages&#xA;' -- Diagrams&#xA;'&#xA;Function moveBookmarkedItems(pkg)&#xA;&#x9;Dim lGuids ' List of GUIDs in &quot;System.Collections.ArrayList&quot;&#xA;   &#xA;&#x9;Set lGuids = getBookmarks()&#xA;    moveBookmarkedItems = moveByGuids(lGuids, pkg)&#xA;End function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;Function moveByGuids(lGuids, pkg)&#xA;    Dim count&#xA;&#x9;Dim pkgId&#xA;&#x9;Dim guid&#xA;&#x9;Dim trgtPkgId&#xA;&#x9;&#xA;&#x9;Dim trgtPkg As EA.Package&#xA;&#x9;Dim eaPkg As EA.Package&#xA;&#x9;Dim eaDia As EA.Diagram&#xA;&#x9;Dim eaEl As EA.Element&#xA;&#x9;&#xA;&#x9;Dim dictSrcPkg&#xA;&#x9;Set dictSrcPkg = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;count = 0&#xA;&#x9;pkgId = 0&#xA;&#x9;Set trgtPkg = pkg &#xA;&#x9;trgtPkgId =  trgtPkg.PackageID&#xA;&#x9;Session.Output &quot;Started with package '&quot; + trgtPkg.Name + &quot;' &quot;&#xA;&#x9;for each guid in lGuids&#xA;&#x9;    Set eaPkg = nothing&#xA;&#x9;&#x9;Set eaDia = nothing&#xA;&#x9;&#x9;Set eaEl = nothing&#xA;&#x9;&#xA;&#x9;    ' Element, an element might be a package and therefore isn't counted or logged to screen&#xA;&#x9;&#x9;Set eaEl = Repository.GetElementByGuid(guid)&#xA;&#x9;&#x9;if not eaEl is nothing then&#xA;&#x9;&#x9;  eaEl.PackageID = trgtPkg.PackageID&#xA;&#x9;&#x9;  eaEl.Update()&#xA;&#x9;&#x9;  trgtPkg.Update()&#xA;&#x9;&#x9;  ' Element possibly is a package, only count during copying the package&#xA;&#x9;&#x9;  if eaEl.Type &lt;&gt; &quot;Package&quot; Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Moved Element '&quot; + eaEl.Name  + &quot;:&quot; + eaEl.Type + &quot;' to Package &quot; + trgtPkg.Name &#xA;&#x9;&#x9;&#x9;count = count + 1&#xA;&#x9;&#x9;  End if&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' Package&#xA;&#x9;&#x9;Set eaPkg = Repository.GetPackageByGuid(guid)&#xA;&#x9;&#x9;if not eaPkg is nothing then&#xA;&#x9;&#x9;  eaPkg.ParentID = trgtPkg.PackageID&#xA;&#x9;&#x9;  eaPkg.Update()&#xA;&#x9;&#x9;  Session.Output &quot;Moved Package '&quot; + eaPkg.Name + &quot;' to Package &quot; + trgtPkg.Name &#xA;&#x9;&#x9;  count = count + 1&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' Diagram&#xA;&#x9;&#x9;on error resume next&#xA;&#x9;&#x9;Set eaDia = Repository.GetDiagramByGuid(guid)&#xA;&#x9;&#x9;if Err.Number = 0 then&#xA;&#x9;&#x9;&#x9;if not eaDia is nothing then&#xA;&#x9;&#x9;&#x9;  pkgId = eaDia.PackageID&#xA;&#x9;&#x9;&#x9;  eaDia.PackageID = trgtPkg.PackageID&#xA;&#x9;&#x9;&#x9;  eaDia.Update()&#xA;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;  ' Remeber package to later refresh them, posible EA error&#xA;&#x9;&#x9;&#x9;  if not dictSrcPkg.Exists(pkgId) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dictSrcPkg.Add pkgId, 0 &#xA;&#x9;&#x9;&#x9;  end if&#xA;&#xA;&#x9;&#x9;&#x9;  Session.Output &quot;Moved Diagram '&quot; + eaDia.Name + &quot;' to Package &quot; + trgtPkg.Name &#xA;&#x9;&#x9;&#x9;  count = count + 1&#xA;&#x9;&#x9;&#x9;End if&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;On Error GoTo 0&#xA;&#x9;&#x9;&#xA;&#x9;Next&#xA;    trgtPkg.Update()&#xA;&#x9;Repository.RefreshModelView(trgtPkgId)&#xA;&#x9;&#xA;&#x9;' Refresh all source packages&#xA;&#x9;For each pkgId in dictSrcPkg&#xA;&#x9;&#x9;Repository.RefreshModelView(pkgId)&#x9;&#xA;&#x9;Next&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' select the target package&#xA;&#x9;Repository.ShowInProjectView(trgtPkg)&#xA;&#x9;&#xA;&#x9;moveByGuids = count&#xA;End Function&#x9;&#xA;&#xA;&#xA;'Test&#xA;'testMove"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="55"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1AE012E3-B465-4D8F-9156-E67F4AFD2C73}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;StringFunctions&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ho]&#xA;'[group=ho]&#xA;&#xA;'Function:  Useful String functions&#xA;'File:      String.vbs&#xA;'Author:    Helmut Ortmann&#xA;'Date: 2015-12-30&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Left pads a string to the specified length, truncate it if to long&#xA;Function Lpad (pString, pChar, pLength)  &#xA;  strString = pString&#xA;  &#xA;  ' Create padding of required length&#xA;  strPadding = String(pLength,pChar)  &#xA;  &#xA;  strString = strPadding &amp; strString&#xA;  strString = Right(strString,pLength)&#xA;  &#xA;   Lpad = strString  ' Return string  &#xA;&#xA;End Function &#xA;&#xA;' Right pads a string to the specified length, truncate it if to long&#xA;Function Rpad (pString, pChar, pLength)  &#xA;  strString = pString&#xA;  &#xA;  ' Create padding of required length&#xA;  strPadding = String(pLength,pChar)  &#xA;  &#xA;  strString = strString &amp; strPadding&#xA;  strString = Left(strString,pLength)  &#xA;  &#xA;  Rpad = strString  ' Return string  &#xA;&#xA;End Function  &#xA;&#xA;Sub testString&#xA;Session.Output &quot;'&quot; + Lpad(&quot;ab&quot;,&quot;_&quot;, 10) + &quot;'&quot;&#xA;Session.Output &quot;'&quot; + Rpad(&quot;ab&quot;,&quot;_&quot;, 10) + &quot;'&quot;&#xA;Session.Output &quot;'&quot; + Lpad(&quot;1234567890123456789&quot;,&quot;_&quot;, 10) + &quot;'&quot;&#xA;End sub&#xA;&#xA;&#xA;' for test purposes remove tick mark&#xA;'testString"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="56"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{469E019B-C4EB-4F44-A523-F422AA39EDD6}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;MODELSEARCH&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="ModelSearch"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="57"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A56952FF-082F-4231-A338-37D7AABCD5CA}"/>
			<Column name="ScriptAuthor" value="{469E019B-C4EB-4F44-A523-F422AA39EDD6}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DeleteBookmarkedItems&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;'[path=\Framework\ho\ModelSearch]&#xA;'[group=hoModelSearch]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ho.Bookmark&#xA;!INC ho.Delete&#xA;&#xA;'------------------------------------------------------------------------------------&#xA;' Delete bookmarked elements &#xA;'------------------------------------------------------------------------------------&#xA;' Items to delete:&#xA;' - Elements&#xA;' Show all bookmarked item by standard search/find:&#xA;' - Diagrams, Find bookmarked Elements (Version 12.1)&#xA;'----------------- &#xA;'Procedure:&#xA;'1. Bookmark the elements you want to handle&#xA;'2. Check if correct (Standard Search):  &#xA;'   Diagrams, Find bookmarked Elements (Version 12.1)&#xA;'3. Search:&#xA;'   Right Click, Scripts, DeleteBookmarkedItems&#xA;'4. Output in System Output, Tab Script&#xA;'5. Sometimes you have to reload Project Browser&#xA;'   Project Browser:&#xA;'   Select root package&#xA;'   Right Click, File, Reload Project  (12.1, other EA versions may differ)&#xA;'------------------&#xA;'Prerequisites:&#xA;'- Script is in ModelSearch Group&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;Dim promptResult&#xA;&#x9;Dim count&#xA;&#x9;Dim lGuids  ' List of guids &lt;System.Collections.ArrayList&gt;&#xA;&#x9;Set lGuids = getBookmarks()&#xA;    If lGuids.Count &gt; 0 then&#x9;&#xA;&#x9;&#x9;promptResult = Session.Prompt(&quot;Do you really want to delete &quot; + CStr(lGuids.Count) + &quot; bookmarked items?&quot;, promptYESNO)&#xA;&#x9;&#x9;if promptResult = resultYes Then&#xA;&#x9;&#x9;&#x9;count = deleteBookmarkedItems()&#xA;&#x9;&#x9;&#x9;Session.Output CStr(count) + &quot; bookmarked items deleted!!&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Output &quot;No elements bookmarked, break!&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="58"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{719FD4F9-4F5B-4866-813D-4C08A8650DCF}"/>
			<Column name="ScriptAuthor" value="{469E019B-C4EB-4F44-A523-F422AA39EDD6}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DeleteClipboardedItems&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;'[path=\Framework\ho\ModelSearch]&#xA;'[group=hoModelSearch]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ho.Clipboard&#xA;!INC ho.Delete&#xA;&#xA;'&#xA;'------------------------------------------------------------------------------------&#xA;' Delete clipboarded items (Model Search Group)&#xA;'------------------------------------------------------------------------------------&#xA;' Items to delete:&#xA;' - Elements&#xA;' - Diagrams&#xA;' - Packages&#xA;'----------------- &#xA;'Procedure:&#xA;'1. Run SQL Model Search to find your items to move &#xA;'    (Example: hoClipboard)&#xA;'2. Search:            &#xA;'   Copy the required rows to Clipboard&#xA;'   (e.g. CTR+A,CTRL+C for all)&#xA;'3. Search:&#xA;'   Right Click, Scripts, DeleteClipboardedItems&#xA;'5. Output in System Output, Tab Script&#xA;'6. Sometimes you have to reload Project Browser&#xA;'   Project Browser:&#xA;'   Select root package&#xA;'   Right Click, File, Reload Project  (12.1, other EA versions may differ)&#xA;'------------------&#xA;'Prerequisites:&#xA;'- Script has to be in ModelSearch Group&#xA;'- Each raw in Search result contains a GUID of the item to move&#xA;'-- Elements to move&#xA;'-- Diagrams to move&#xA;'-- Packages to move  &#xA;'------------------- &#xA;' Example SQL Model Search&#xA;' select ea_guid, name, object_Type, &quot;Element&quot; from t_object where name like &quot;XX*&quot; UNION&#xA; 'select ea_guid, name, diagram_Type, &quot;Diagram&quot; from t_diagram where name like &quot;XX*&quot; UNION&#xA;' select ea_guid, name, &quot;Package&quot;, &quot;Package&quot; from t_package where name like &quot;XX*&quot;&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;    Dim promptResult&#xA;&#x9;Dim count&#xA;&#x9;Dim lGuids  ' List of guids &lt;System.Collections.ArrayList&gt;&#xA;&#x9;Set lGuids = getGuidsFromClipboard()&#xA;    If lGuids.Count &gt; 0 then&#x9;&#xA;&#x9;&#x9;promptResult = Session.Prompt(&quot;Do you really want to delete &quot; + CStr(lGuids.Count) + &quot; clipboarded items?&quot;, promptYESNO)&#xA;&#x9;&#x9;if promptResult = resultYes Then&#xA;&#x9;&#x9;&#x9;count = deleteClipboardItems()&#xA;&#x9;&#x9;&#x9;Session.Output CStr(count) + &quot; clipboarded items deleted!!&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Output &quot;No elements on Clipboard, break!&quot;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="60"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{04C5FA99-7EAF-4CF3-8C08-8BB65E0C1C74}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MoveBookmarkedToSelectedPackage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;'[path=\Framework\ho\ProjectBrowser]&#xA;'[group=hoProjectBrowser]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Move&#xA;&#xA;'&#xA;'-------------------------------------------------------------------&#xA;' Move bookmarked elements to selected package&#xA;'-------------------------------------------------------------------&#xA;' Items to move:&#xA;' - Elements&#xA;' Show all bookmarked item by standard search/find:&#xA;' - Diagrams, Find bookmarked Elements (Version 12.1)&#xA;'&#xA;'----------------- &#xA;'Procedure:&#xA;'1. Bookmark the elements you want to handle&#xA;'2. Check if correct (Standard Search):  &#xA;'   Diagrams, Find bookmarked Elements (Version 12.1)&#xA;'3. Project Browser:&#xA;'   Select the the target package to move to&#xA;'4. Project Browser:&#xA;'   Right Click, Scripts, MoveBookmarkedToSelectedPackage&#xA;'5. Output in System Output, Tab Script&#xA;'6. Sometimes you have to reload Project Browser&#xA;'   Select root package&#xA;'   Right Click, File, Reload Project  (12.1, other EA versions may differ)&#xA;'------------------&#xA;'Prerequisites:&#xA;'- Script has to be in ProjectBrowser Group:&#xA;'&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim count&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;count = moveBookmarkedItems(thePackage)&#xA;&#x9;&#x9;&#x9;Session.Output CStr(count) + &quot; elements moved to package '&quot; + thePackage.Name + &quot;'.&quot;&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script only supports Packages.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="61"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{25566D00-4B72-40C8-A6A4-F4B038FCC05F}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MoveClipboardedToSelectedPackage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;'[path=\Framework\ho\ProjectBrowser]&#xA;'[group=hoProjectBrowser]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ho.Move&#xA;&#xA;'&#xA;'-------------------------------------------------------------------&#xA;' Move clipboarded items to selected package (project browser group)&#xA;'-------------------------------------------------------------------&#xA;' Items to move:&#xA;' - Elements&#xA;' - Diagrams&#xA;' - Packages&#xA;'----------------- &#xA;'Procedure:&#xA;'1. Run SQL Model Search to find your items to move &#xA;'    (Example: hoClipboard)&#xA;'2. Search:            &#xA;'   Copy the required rows to Clipboard&#xA;'   (e.g. CTR+A,CTRL+C for all)&#xA;'3. Project Browser:&#xA;'   Select the the target package to move to&#xA;'4. Project Browser:&#xA;'   Right Click, Scripts, MoveClipboardedToSelectedPackage&#xA;'5. Output in System Output, Tab Script&#xA;'6. Sometimes you have to reload Project Browser&#xA;'   '- Script has to be in ProjectBrowser Group:&#xA;'   Select root package&#xA;'   Right Click, File, Reload Project  (12.1, other EA versions may differ)&#xA;'------------------&#xA;'Prerequisites:&#xA;'- Projectbrowser Group&#xA;'- Each raw in Search result contains a GUID of the item to move&#xA;'-- Elements to move&#xA;'-- Diagrams to move&#xA;'-- Packages to move  &#xA;'------------------- &#xA;' Example SQL Model Search&#xA;' select ea_guid, name, object_Type, &quot;Element&quot; from t_object where name like &quot;XX*&quot; UNION&#xA; 'select ea_guid, name, diagram_Type, &quot;Diagram&quot; from t_diagram where name like &quot;XX*&quot; UNION&#xA;' select ea_guid, name, &quot;Package&quot;, &quot;Package&quot; from t_package where name like &quot;XX*&quot;&#xA;'&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim count&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;count = moveClipboardItems(thePackage)&#xA;&#x9;&#x9;&#x9;Session.Output CStr(count) + &quot; elements moved to package '&quot; + thePackage.Name + &quot;'.&quot;&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script only supports Packages.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="62"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{417EA105-C9C9-4F1B-A414-AE0393506CDC}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="ModelValidation"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="63"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{109834D3-F8B2-43B5-A889-E4EAC0A7C1EF}"/>
			<Column name="ScriptAuthor" value="{417EA105-C9C9-4F1B-A414-AE0393506CDC}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=ModelValidation]&#xA;&#xA;'include constants&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'include the util group&#xA;!INC Utils.Include&#xA;'include the Atrials Rules group&#xA;!INC Atrias Rules.Include&#xA;&#xA;'include the scripts in this folder&#xA;!INC ModelValidation.ModelValidator&#xA;!INC ModelValidation.ValidationResult&#xA;'!INC ModelValidation.Rule this is actually a template -&gt; equivalent of an abstract class&#xA;!INC ModelValidation.TestRule"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="64"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{63707AB5-8237-4B8B-8334-1A1BA52EF34D}"/>
			<Column name="ScriptAuthor" value="{417EA105-C9C9-4F1B-A414-AE0393506CDC}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ModelValidator&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=ModelValidation]&#xA;&#xA;&#xA;Class ModelValidator&#xA;'#region private attributes&#xA;&#x9; private m_Rules&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;'initialize all rules&#xA;&#x9;&#x9;me.Rules = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'me.Rules.Add new TestRule&#xA;&#x9;&#x9;me.Rules.Add new Rule_BPANotSynchronized&#xA;&#x9;&#x9;me.Rules.Add new Rule_MessageNotSynchronized&#xA;&#x9;&#x9;me.Rules.Add new Rule_MessageUsedAsLink&#xA;&#x9;&#x9;me.Rules.Add new Rule_MessageFlowWithoutMessage&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;&#x9;' Rules property&#xA;&#x9;Public Property Get Rules&#xA;&#x9;  set Rules = m_Rules&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Rules(value)&#xA;&#x9;  set m_Rules = value&#xA;&#x9;End Property&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;public function Validate(items, alwaysAutoFix, neverAutoFix, options, outputTabName)&#xA;&#x9;&#x9;dim item, rule, validationResults,  autoFixResult, validationResult&#xA;&#x9;&#x9;set validationResults = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;for each item in items&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Validating item: &quot; &amp; getItemName(item),0&#xA;&#x9;&#x9;&#x9;for each rule in me.Rules&#xA;&#x9;&#x9;&#x9;&#x9;set validationResult = rule.Validate(item)&#xA;&#x9;&#x9;&#x9;&#x9;if (alwaysAutoFix or rule.AutoFix) _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and not neverAutoFix and not validationResult.IsValid then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;autoFixResult = rule.Fix(item,options)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;if validationResult.IsValid = false then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;validationResults.Add validationResult&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set Validate = validationResults&#xA;&#x9;end function&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="65"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7ED3BBE9-D2D6-48FE-8A76-85A5E3FFA90D}"/>
			<Column name="ScriptAuthor" value="{417EA105-C9C9-4F1B-A414-AE0393506CDC}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rule&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=ModelValidation]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;Class Rule&#xA;'#region private attributes&#xA;&#x9;private m_Autofix&#xA;&#x9;private m_Name&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_name = &quot;AbstractRule&quot;&#xA;&#x9;&#x9;me.AutoFix = false&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' Autofix property.&#xA;&#x9;Public Property Get Autofix&#xA;&#x9;  Autofix = m_Autofix&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Autofix(value)&#xA;&#x9;  m_Autofix = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property.&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  ProblemStatement = m_ProblemStatement&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Resolution property.&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  Resolution = m_Resolution&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'The Validate will validate the given item agains this rule&#xA;&#x9;'It returns a ValidationResult&#xA;&#x9;public function Validate(item)&#xA;&#x9;&#x9;&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the Fix function will fix the problem if possible&#xA;&#x9;' returns true if the fix succeeded and false if it wasn't able to fix the problem&#xA;&#x9;public function Fix(item, options)&#xA;&#x9;end function&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="66"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C2D25376-EBD6-470D-8AE1-8782FE6BF3DE}"/>
			<Column name="ScriptAuthor" value="{417EA105-C9C9-4F1B-A414-AE0393506CDC}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TestRule&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=ModelValidation]&#xA;&#xA;&#xA;Class TestRule&#xA;'#region private attributes&#xA;&#x9;private m_Autofix&#xA;&#x9;private m_Name&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_name = &quot;Test Rule&quot;&#xA;&#x9;&#x9;m_ProblemStatement = &quot;There is a problem with this element&quot;&#xA;&#x9;&#x9;m_Resolution = &quot;Fix it dammit!&quot;&#xA;&#x9;&#x9;me.AutoFix = true&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' Autofix property.&#xA;&#x9;Public Property Get Autofix&#xA;&#x9;  Autofix = m_Autofix&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Autofix(value)&#xA;&#x9;  m_Autofix = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property.&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  ProblemStatement = m_ProblemStatement&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Resolution property.&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  Resolution = m_Resolution&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'The Validate will validate the given item agains this rule&#xA;&#x9;'It the validation result&#xA;&#x9;public function Validate(item)&#xA;&#x9;&#x9;dim validationResult&#xA;&#x9;&#x9;set validationResult = new ValidationResult&#xA;&#x9;&#x9;validationResult.Rule = me&#xA;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;validationResult.ValidatedItem = item&#xA;&#x9;&#x9;validationResult.ProblemStatement = &quot;the element &quot; &amp; getItemName(item) &amp; &quot; is not valid&quot;&#xA;&#x9;&#x9;validationResult.Resolution = &quot;fix &quot; &amp; getItemName(item) &amp; &quot; and fast!&quot;&#xA;&#x9;&#x9;set Validate = validationResult&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the Fix function will fix the problem if possible&#xA;&#x9;' returns true if the fix succeeded and false if it wasn't able to fix the problem&#xA;&#x9;public function Fix(item, options)&#xA;&#x9;&#x9;'msgbox &quot;Fixed it!&quot;&#xA;&#x9;end function&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="67"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{0BF2B622-AB6E-4D11-8D98-0F8B4EF91F4C}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Search Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="68"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0ED5778A-7C24-4DE0-B7D4-4A9335567C16}"/>
			<Column name="ScriptAuthor" value="{0BF2B622-AB6E-4D11-8D98-0F8B4EF91F4C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TestValidation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=Search Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ModelValidation.Include&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim selectedElements as EA.Collection&#xA;&#x9;set selectedElements = Repository.GetTreeSelectedElements&#xA;&#x9;dim modelValidator&#xA;&#x9;set modelValidator = new ModelValidator&#xA;&#x9;dim ValidationResults, validationResult&#xA;&#x9;dim options&#xA;&#x9;set options = nothing&#xA;&#x9;set ValidationResults = modelValidator.Validate(selectedElements, false, false,options)&#xA;&#x9;if ValidationResults.Count &gt; 0 then&#xA;&#x9;&#x9;dim searchresults &#xA;&#x9;&#x9;set searchresults = new SearchResults&#xA;&#x9;&#x9;searchResults.Name = &quot;Validation Result&quot;&#xA;&#x9;&#x9;'add headers&#xA;&#x9;&#x9;searchResults.Fields = ValidationResults(0).Headers&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add results&#xA;&#x9;&#x9;for each validationResult in ValidationResults&#xA;&#x9;&#x9;&#x9;searchResults.Results.Add validationResult.getResultFields()&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'show the results&#xA;&#x9;&#x9;searchResults.Show&#xA;&#x9;end if&#xA;&#x9;&#xA;'&#x9;searchResults = &quot;&lt;ReportViewData UID=&quot;&quot;&quot;&quot;&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&lt;Fields&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&lt;Field name=&quot;&quot;CLASSGUID&quot;&quot;/&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&lt;Field name=&quot;&quot;CLASSTYPE&quot;&quot;/&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&lt;Field name=&quot;&quot;Name&quot;&quot;/&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&lt;/Fields&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&lt;Rows&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&lt;Row&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&#x9;&lt;Field name=&quot;&quot;CLASSGUID&quot;&quot; value=&quot;&quot;{68FFEBD2-B90B-4b55-A697-962FA0768AA5}&quot;&quot;/&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&#x9;&lt;Field name=&quot;&quot;CLASSTYPE&quot;&quot; value=&quot;&quot;UseCase&quot;&quot;/&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&#x9;&lt;Field name=&quot;&quot;Name&quot;&quot; value=&quot;&quot;UC - ME - 007 - Process iExV &quot;&quot;/&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&lt;/Row&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;&lt;/Rows&gt;&quot; &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/ReportViewData&gt;&quot;&#xA;'&#x9;Repository.RunModelSearch &quot;searchName&quot;,&quot;searchTerm&quot;,&quot;searchOptions&quot;,searchResults&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="69"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FD93130E-7340-4EB4-92B4-B07F0B6D9F41}"/>
			<Column name="ScriptAuthor" value="{0BF2B622-AB6E-4D11-8D98-0F8B4EF91F4C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ValidateSelectedElements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=Search Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ModelValidation.Include&#xA;!INC Wrappers.Include&#xA;!INC Utils.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;dim outputTabName&#xA;outputTabName = &quot;ModelValidation&quot;&#xA;&#xA;sub main&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'tell the user we are starting&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting Model Validation&quot;,0&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim selectedElements as EA.Collection&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim selectedPackage&#xA;&#x9;dim modelValidator&#xA;&#x9;set modelValidator = new ModelValidator&#xA;&#x9;dim ValidationResults, validationResult&#xA;&#x9;dim options&#xA;&#x9;set options = nothing&#xA;&#x9;'get the elements to validate&#xA;&#x9;dim itemsToValidate &#xA;&#x9;set itemsToValidate = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'tell the user what we are doing&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Getting list of elements to validate&quot;,0&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;set selectedElements = Repository.GetTreeSelectedElements&#xA;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;for each element in selectedElements&#xA;&#x9;&#x9;&#x9;&#x9;itemsToValidate.Add element&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Adding &quot; &amp; getItemName(element) &amp; &quot; to list to validate&quot;,0&#xA;&#x9;&#x9;&#x9;&#x9;itemsToValidate.AddRange getElementsFromElement(element)&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set itemsToValidate = getElementsFrompackage(Repository.GetTreeSelectedPackage)&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;msgbox &quot;This scripts works only if you select either a package or one or more elements int the project browser&quot;&#xA;&#x9;end select &#xA;&#x9;'starting validation&#xA;&#x9;Repository.WriteOutput outputTabName, &quot;Start validating &quot; &amp; itemsToValidate.Count &amp; &quot; items&quot;,0&#xA;&#x9;set ValidationResults = modelValidator.Validate(itemsToValidate, false, false, options, outputTabName)&#xA;&#x9;Repository.WriteOutput outputTabName, &quot;Processing Validation Results&quot;,0&#xA;&#x9;if ValidationResults.Count &gt; 0 then&#xA;&#x9;&#x9;dim searchresults &#xA;&#x9;&#x9;set searchresults = new SearchResults&#xA;&#x9;&#x9;searchResults.Name = &quot;Validation Result&quot;&#xA;&#x9;&#x9;'add headers&#xA;&#x9;&#x9;searchResults.Fields = ValidationResults(0).Headers&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add results&#xA;&#x9;&#x9;for each validationResult in ValidationResults&#xA;&#x9;&#x9;&#x9;searchResults.Results.Add validationResult.getResultFields()&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Results processed, starting showing results&quot;,0&#xA;&#x9;&#x9;'show the results&#xA;&#x9;&#x9;searchResults.Show&#xA;&#x9;end if&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished Model Validation&quot;,0&#xA;&#xA;end sub&#xA;&#xA;function getElementsFromPackage(package)&#xA;'&#x9;'loop elements and add to a collection&#xA;'&#x9;dim elements&#xA;'&#x9;set elements  = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;'&#x9;dim element as EA.Element&#xA;'&#x9;dim subPackage as EA.Package&#xA;'&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;elements.Add element&#xA;'&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Adding &quot; &amp; getItemName(element) &amp; &quot; to list to validate&quot;,0&#xA;'&#x9;&#x9;elements.AddRange getElementsFromElement(element)&#xA;'&#x9;next&#xA;'&#x9;'loop subpackages&#xA;'&#x9;for each subPackage in package.Packages&#xA;'&#x9;&#x9;elements.AddRange getElementsFromPackage(subPackage)&#xA;'&#x9;next&#xA;'&#x9;'return&#xA;'&#x9;set getElementsFromPackage = elements&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = getPackageTree(package)&#xA;&#x9;&#xA;&#x9;dim sqlGetElements&#xA;&#x9;sqlGetElements = &quot;select o.Object_ID from t_object o where o.Package_ID in (&quot; &amp; makePackageIDString(packageList) &amp; &quot;)&quot;&#xA;&#x9;set getElementsFromPackage = getElementsFromQuery(sqlGetElements)&#xA;end function&#xA;&#xA;function getElementsFromElement(element)&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim elements&#xA;&#x9;set elements  = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;elements.Add subElement&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Adding &quot; &amp; getItemName(subElement) &amp; &quot; to list to validate&quot;,0&#xA;&#x9;&#x9;elements.AddRange getElementsFromElement(subElement)&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set getElementsFromElement = elements&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="70"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B290AB10-25AE-422D-BCC5-F1E6EABA2D81}"/>
			<Column name="ScriptAuthor" value="{417EA105-C9C9-4F1B-A414-AE0393506CDC}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ValidationResult&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\ModelValidation]&#xA;'[group=ModelValidation]&#xA;&#xA;Class ValidationResult&#xA;'#region private attributes&#xA;&#x9;private m_ValidatedItem&#xA;&#x9;private m_IsValid&#xA;&#x9;private m_Rule&#xA;&#x9;private m_Headers&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;me.IsValid = false&#xA;&#x9;&#x9;me.ValidatedItem = nothing&#xA;&#x9;&#x9;me.Rule = nothing&#xA;&#x9;&#x9;set m_Headers =  CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;m_Headers.Add &quot;CLASSGUID&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;CLASSTYPE&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;Name&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;Rule&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;IsValid&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;Problem&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;Resolution&quot;&#xA;&#x9;&#x9;m_Headers.Add &quot;Fully Qualified Name&quot;&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' ValidatedItem property&#xA;&#x9;Public Property Get ValidatedItem&#xA;&#x9;  set ValidatedItem = m_ValidatedItem&#xA;&#x9;End Property&#xA;&#x9;Public Property Let ValidatedItem(value)&#xA;&#x9;  set m_ValidatedItem = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' IsValid property&#xA;&#x9;Public Property Get IsValid&#xA;&#x9;  IsValid = m_IsValid&#xA;&#x9;End Property&#xA;&#x9;Public Property Let IsValid(value)&#xA;&#x9;  m_IsValid = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Rule property&#xA;&#x9;Public Property Get Rule&#xA;&#x9;  set Rule = m_Rule&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Rule(value)&#xA;&#x9;  set m_Rule = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'Headers property&#xA;&#x9;Public Property Get Headers&#xA;&#x9;&#x9;Set Headers = m_Headers&#xA;&#x9;end Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  if len(m_ProblemStatement) = 0 then&#xA;&#x9;&#x9;ProblemStatement = me.Rule.ProblemStatement&#xA;&#x9;  else&#xA;&#x9;&#x9;ProblemStatement = m_ProblemStatement&#xA;&#x9;  end if&#xA;&#x9;End Property&#xA;&#x9;Public Property Let ProblemStatement(value)&#xA;&#x9;  m_ProblemStatement = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Resolution property&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  if len(m_Resolution) = 0 then&#xA;&#x9;&#x9;Resolution = me.Rule.Resolution&#xA;&#x9;  else&#xA;&#x9;&#x9;Resolution = m_Resolution&#xA;&#x9;  end if&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Resolution(value)&#xA;&#x9;  m_Resolution = value&#xA;&#x9;End Property&#xA;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'Returns an ArrayList containing the headers of the results&#xA;&#x9;public function getResultFields()&#xA;&#x9;&#x9;dim resultFields&#xA;&#x9;&#x9;set resultFields = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;resultFields.Add me.ValidatedItem.ElementGUID&#xA;&#x9;&#x9;resultFields.Add me.ValidatedItem.Type&#xA;&#x9;&#x9;resultFields.Add me.ValidatedItem.Name&#xA;&#x9;&#x9;resultFields.Add me.Rule.Name&#xA;&#x9;&#x9;if me.IsValid then&#xA;&#x9;&#x9;&#x9;resultFields.Add &quot;True&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;resultFields.Add &quot;False&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;resultFields.Add me.ProblemStatement&#xA;&#x9;&#x9;resultFields.Add me.Resolution&#xA;&#x9;&#x9;resultFields.Add getFullyQualifiedName(me.ValidatedItem)&#xA;'&#x9;&#x9;resultFields.Add &quot;Qualified Name takes too long&quot;&#xA;&#x9;&#x9;set getResultFields = resultFields&#xA;&#x9;end function&#xA;&#x9;&#xA;&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="71"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{DC73E81D-B8DB-4182-8013-2236A964234D}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Docgen HTML"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="72"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{56D85739-3EF9-4ABF-9775-A3E3EF5CF3F2}"/>
			<Column name="ScriptAuthor" value="{DC73E81D-B8DB-4182-8013-2236A964234D}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ExportHTML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Publish]&#xA;'[group=Publish]&#xA;&#xA;option explicit&#xA;&#xA;'&#xA;' Script Name: ExportHTML&#xA;' Author: Geert Bellekens&#xA;' Purpose: Export the model HTML format. This script is suitable to be executed as a scheduled task in order to export the model&#xA;'&#x9;&#x9;to HTML and publish it on a webserver or sharepoint site.&#xA;' Date: 09/06/2016&#xA;'&#xA;sub main&#xA;&#x9;dim repository&#xA;&#x9;dim projectInterface&#xA;&#x9;set repository = CreateObject(&quot;EA.Repository&quot;)&#xA;&#x9;&#xA;&#x9;'the path to put the inital export to&#xA;&#x9;dim exportPath &#xA;&#x9;exportPath = &quot;C:\temp\EAExport&quot;&#xA;&#x9;&#xA;&#x9;' the path where the exported model should be copied to (sharepoint location, or webserver)&#xA;&#x9;' in case of a sharepoint location make sure to use the UNC path (\\sharepoint-site\location\) &#xA;&#x9;' and make sure that section of sharepoint not version controlled (no check-in/checkout)&#xA;&#x9;dim publishPath&#xA;&#x9;publishPath = &quot;C:\temp\copiedFolder&quot;&#xA;&#x9;&#xA;&#x9;'the path to the eap file&#xA;&#x9;dim eapPath&#xA;&#x9;eapPath = &quot;C:\temp\TMF SQL Server shortcut.EAP&quot;&#xA;&#x9;&#xA;&#x9;'open the model&#xA;&#x9;repository.OpenFile eapPath&#xA;&#xA;&#x9;'get project interface&#xA;&#x9;set projectInterface = repository.GetProjectInterface()&#xA;&#x9;&#xA;&#x9;dim packageGUID&#xA;&#x9;dim rootPackage &#xA;&#x9;for each rootPackage in repository.Models&#xA;&#x9;&#x9;packageGUID = projectInterface.GUIDtoXML(rootPackage.PackageGUID)&#xA;&#x9;&#x9;projectInterface.RunHTMLReport packageGUID, exportPath, &quot;.png&quot;, &quot;&lt;default&gt;&quot; , &quot;.html&quot;&#xA;&#x9;&#x9;exit for&#xA;&#x9;next&#xA;&#x9;'close the model&#xA;&#x9;repository.CloseFile&#xA;&#x9;repository.Exit&#xA;&#x9;&#xA;&#x9;'copy the export to sharepoint or webserver location&#xA;&#x9;dim fileSystemObject&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;fileSystemObject.CopyFolder exportPath, publishPath&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="73"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EF1AB77C-9144-48BE-8057-BDD16BF19DB4}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ExportAllShapeScripts&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;'&#xA;' Script Name: ExportAllShapeScripts&#xA;' Author: Geert Bellekens&#xA;' Purpose: Export all shapescripts to files on the file system&#xA;' Date: 2016-06-18&#xA;'&#xA;sub main&#xA;&#x9;'get all attributes with name _image that have shapescript in the default field and a parent with stereotype «stereotype»&#xA;&#x9;dim sqlGetShapescriptAttributes&#xA;&#x9;sqlGetShapescriptAttributes = &quot;select a.ID from (t_attribute a &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; inner join t_object o on (o.Object_ID = a.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and o.Stereotype = 'stereotype')) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; where a.Name = '_image' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; and a.[Default] like '&lt;Image type=&quot;&quot;EAShapeScript&quot; &amp; getWC &amp; &quot;'&quot;&#xA;&#x9;dim shapeScriptAttributes&#xA;&#x9;set shapeScriptAttributes = getAttributesByQuery(sqlGetShapescriptAttributes)&#xA;&#x9;dim shapeScriptAttribute as EA.Attribute&#xA;&#x9;'get the user selected folder&#xA;&#x9;dim selectedFolder&#xA;&#x9;set selectedFolder = new FileSystemFolder&#xA;&#x9;set selectedFolder = selectedFolder.getUserSelectedFolder(&quot;&quot;)&#xA;&#xA;&#x9;'loop the shape script attributes&#xA;&#x9;for each shapeScriptAttribute in shapeScriptAttributes&#xA;&#x9;&#x9;'get the stereotype&#xA;&#x9;&#x9;dim stereotype as EA.Element&#xA;&#x9;&#x9;set stereotype = Repository.GetElementByID(shapeScriptAttribute.ParentID)&#xA;&#x9;&#x9;dim profile as EA.Package&#xA;&#x9;&#x9;set profile = findProfilePackage(stereotype)&#xA;&#x9;&#x9;'load the resultset in the xml document&#xA;&#x9;&#x9;dim shapeScript&#xA;&#x9;&#x9;shapeScript = decodeBase64zippedXML(shapeScriptAttribute.Default,&quot;Image&quot;)&#xA;&#x9;&#x9;if len(shapeScript) &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim scriptFile&#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = shapeScript&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = selectedFolder.FullPath &amp; &quot;\&quot; &amp; profile.Name &amp; &quot;\&quot; &amp; stereotype.Name &amp; &quot;.shapeScript&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;Session.Output &quot;saving script: &quot; &amp; scriptFile.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;'finds the owning package with stereotype Profile.&#xA;'if not found returns the owning package of the attribute&#xA;function findProfilePackage(stereotype)&#xA;&#x9;dim profile as EA.Package&#xA;&#x9;set profile = Repository.GetPackageByID(stereotype.PackageID)&#xA;&#x9;if profile.StereotypeEx &lt;&gt; &quot;profile&quot; then&#xA;&#x9;&#x9;dim parentProfile as EA.Package&#xA;&#x9;&#x9;set parentProfile = getParentProfilePackage(profile)&#xA;&#x9;&#x9;if not parentProfile is nothing then&#xA;&#x9;&#x9;&#x9;set profile = parentProfile&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;set findProfilePackage = profile&#xA;end Function&#xA;&#xA;'recurse up the tree until the profile package is found&#xA;function getParentProfilePackage(profile)&#xA;&#x9;dim parentProfile as EA.Package&#xA;&#x9;set parentProfile = nothing&#xA;&#x9;if profile.ParentID &gt; 0 then&#xA;&#x9;&#x9;set parentProfile = Repository.GetPackageByID(profile.ParentID)&#xA;&#x9;&#x9;if parentProfile.StereotypeEx &lt;&gt; &quot;profile&quot; then&#xA;&#x9;&#x9;&#x9;set parentProfile = getParentProfilePackage(parentProfile)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;set getParentProfilePackage = parentProfile&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="74"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B4737F46-050A-483F-ADCD-AD0A50860945}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ExtractShapescriptsFromMDG&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;'&#xA;' Script Name: ExtractShapescriptsFromMDG&#xA;' Author: Geert Bellekens&#xA;' Purpose: Export all shapescripts to files on the file system&#xA;' Date: 2016-06-28&#xA;'&#xA;sub main&#xA;&#x9;'get the MDG file&#xA;&#x9;dim mdgFile&#xA;&#x9;set mdgFile = new TextFile&#xA;&#x9;if mdgFile.UserSelect(&quot;C:\Temp&quot;,&quot;MDG Files (*.xml)|*.xml&quot;) then&#xA;&#x9;&#x9;'get the user selected folder&#xA;&#x9;&#x9;dim selectedFolder&#xA;&#x9;&#x9;set selectedFolder = new FileSystemFolder&#xA;&#x9;&#x9;set selectedFolder = selectedFolder.getUserSelectedFolder(&quot;&quot;)&#xA;&#x9;&#x9;'read the mdg file xml&#xA;&#x9;&#x9;Dim xDoc &#xA;&#x9;&#x9;Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;&#x9;&#x9;If xDoc.LoadXML(mdgFile.Contents) Then    &#xA;&#x9;&#x9;&#x9;'get the profile nodes&#xA;&#x9;&#x9;&#x9;dim profiles&#xA;&#x9;&#x9;&#x9;set profiles = xDoc.SelectNodes(&quot;//UMLProfile&quot;)&#xA;&#x9;&#x9;&#x9;dim profile&#xA;&#x9;&#x9;&#x9;for each profile in profiles&#xA;&#x9;&#x9;&#x9;&#x9;'get the documentation tag&#xA;&#x9;&#x9;&#x9;&#x9;dim documentationTag&#xA;&#x9;&#x9;&#x9;&#x9;set documentationTag = profile.SelectSingleNode(&quot;./Documentation&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;'get the profile name&#xA;&#x9;&#x9;&#x9;&#x9;dim profileName&#xA;&#x9;&#x9;&#x9;&#x9;profileName = documentationTag.Attributes.GetNamedItem(&quot;name&quot;).Text&#xA;&#x9;&#x9;&#x9;&#x9;'loop the stereotype nodes nodes&#xA;&#x9;&#x9;&#x9;&#x9;dim stereotypeNodes&#xA;&#x9;&#x9;&#x9;&#x9;set stereotypeNodes = profile.SelectNodes(&quot;./Content/Stereotypes/Stereotype&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;dim stereotypeNode&#xA;&#x9;&#x9;&#x9;&#x9;for each stereotypeNode in stereotypeNodes&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the name fo the stereotype&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim stereotypeName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;stereotypeName = stereotypeNode.Attributes.GetNamedItem(&quot;name&quot;).Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the shapescript&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim shapeScript&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;shapeScript = decodeBase64zippedXML(stereotypeNode.xml,&quot;Image&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(shapeScript) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim scriptFile&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;scriptfile.Contents = shapeScript&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;scriptFile.FullPath = selectedFolder.FullPath &amp; &quot;\&quot; &amp; profileName &amp; &quot;\&quot; &amp; stereotypeName &amp; &quot;.shapeScript&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;saving script: &quot; &amp; scriptFile.FullPath&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="75"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{85397CCE-33B4-4E25-9CBE-EDBDE9AC8B54}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ImportSearches&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: ImportSearches&#xA;' Author: Geert Bellekens&#xA;' Purpose: Import searches from a folder containing search exports&#xA;' Date: 2018-08-10&#xA;'&#xA;const outPutName = &quot;Import SQL Searches&quot;&#xA;&#xA;sub main&#xA;&#x9;'first get the searches file located at %appdata%\Sparx Systems\EA\Search Data\EA\EA_Search.xml&#xA;&#x9;dim shell,appData&#xA;&#x9;Set shell = CreateObject( &quot;WScript.Shell&quot; )&#xA;&#x9;appData = shell.ExpandEnvironmentStrings(&quot;%APPDATA%&quot;)&#xA;&#x9;dim eaSearchesFile&#xA;&#x9;set eaSearchesFile = new TextFile&#xA;&#x9;eaSearchesFile.FullPath = appData &amp; &quot;\Sparx Systems\EA\Search Data\EA_Search.xml&quot;&#xA;&#x9;eaSearchesFile.loadContents&#xA;&#x9;Dim xSearchesDoc &#xA;&#x9;Set xSearchesDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;&#x9;If xSearchesDoc.LoadXML(eaSearchesFile.Contents) Then&#xA;&#x9;&#x9;'then get the user selected folder and loop each file in it&#xA;&#x9;&#x9;dim selectedFolder&#xA;&#x9;&#x9;set selectedFolder = new FileSystemFolder&#xA;&#x9;&#x9;set selectedFolder = selectedFolder.getUserSelectedFolder(&quot;&quot;)&#xA;&#x9;&#x9;if not selectedFolder is nothing then&#xA;&#x9;&#x9;&#x9;'create output tab&#xA;&#x9;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;&#x9;dim searchFile&#xA;&#x9;&#x9;&#x9;for each searchFile in selectedFolder.TextFiles&#xA;&#x9;&#x9;&#x9;&#x9;dim xSearchDoc&#xA;&#x9;&#x9;&#x9;&#x9;Set xSearchDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;if xSearchDoc.LoadXML(searchFile.Contents) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'now get the searches from the xSearchDoc and add or replace them into the xSearchesDoc&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addOrReplaceSearches xSearchesDoc, xSearchDoc&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;eaSearchesFile.Contents = xSearchesDoc.xml&#xA;&#x9;&#x9;&#x9;eaSearchesFile.Save&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Finished! Please restart EA for the searches to be reloaded&quot;, 0&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;msgbox &quot;Please create at least one custom search&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function addOrReplaceSearches(xSearchesDoc,xSearchDoc)&#xA;&#x9;dim newSearchNodes, newSearchNode&#xA;&#x9;dim existingSearchesParentNode&#xA;&#x9;set existingSearchesParentNode = xSearchesDoc.SelectSingleNode(&quot;//RootSearch&quot;)&#xA;&#x9;set newSearchNodes = xSearchDoc.SelectNodes(&quot;//Search&quot;)&#xA;&#x9;if not existingSearchesParentNode is nothing then&#xA;&#x9;&#x9;for each newSearchNode in newSearchNodes&#xA;&#x9;&#x9;&#x9;'get the GUID atrribute value&#xA;&#x9;&#x9;&#x9;dim guidAttribute&#xA;&#x9;&#x9;&#x9;set guidAttribute = newSearchNode.Attributes.GetNamedItem(&quot;GUID&quot;)&#xA;&#x9;&#x9;&#x9;'find the equivalent node in the xSearchesDoc and remove it&#xA;&#x9;&#x9;&#x9;dim equivalentSearchNode&#xA;&#x9;&#x9;&#x9;set equivalentSearchNode = xSearchesDoc.SelectSingleNode(&quot;//Search[@GUID='&quot;&amp; guidAttribute.Value &amp;&quot;']&quot;)&#xA;&#x9;&#x9;&#x9;if not equivalentSearchNode is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Replacing search: &quot; &amp; newSearchNode.Attributes.GetNamedItem(&quot;Name&quot;).Value, 0&#xA;&#x9;&#x9;&#x9;&#x9;existingSearchesParentNode.RemoveChild equivalentSearchNode &#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Adding search: &quot; &amp; newSearchNode.Attributes.GetNamedItem(&quot;Name&quot;).Value, 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'add the new search&#xA;&#x9;&#x9;&#x9;existingSearchesParentNode.AppendChild newSearchNode&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="76"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2E16E7CE-B4BE-486F-9E57-BB306BC1EE48}"/>
			<Column name="ScriptAuthor" value="{5A7B7EEC-0688-492f-9A2B-E3CCD8095A15}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LoadScriptsBootstrap&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;'[path=\Framework\Tools\Script Management]&#xA;'[group=Script Management]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-GUID&#xA;&#xA;' Author: Barrie Treloar&#xA;' Purpose: An all-in-one script, copied from the originals, to bootstrap the loads processes.&#xA;' &#x9;&#x9;   This should be a once-off-script, as it is not kept up-to-date.&#xA;'          Afterward use the LoadScripts script.&#xA;' Date: 2017-02-14&#xA;&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function escapeSQLString(inputString)&#xA;&#x9;'replace the single quotes with two single quotes for all db types&#xA;&#x9;escapeSQLString = replace(inputString, &quot;'&quot;,&quot;''&quot;)&#xA;&#x9;'dbspecifics&#xA;&#x9;select case Repository.RepositoryType&#xA;&#x9;&#x9;case &quot;POSTGRES&quot;&#xA;&#x9;&#x9;&#x9;' replace backslash &quot;\&quot; by double backslash &quot;\\&quot;&#xA;&#x9;&#x9;&#x9;escapeSQLString = replace(escapeSQLString,&quot;\&quot;,&quot;\\&quot;)&#xA;&#x9;&#x9;case &quot;JET&quot;&#xA;&#x9;&#x9;&#x9;'replace pipe character | by '&amp; chr(124) &amp;'&#xA;&#x9;&#x9;&#x9;escapeSQLString = replace(escapeSQLString,&quot;|&quot;, &quot;'&amp; chr(124) &amp;'&quot;)&#xA;&#x9;end select&#xA;end function&#xA;&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;Const ForReading = 1, ForWriting = 2, ForAppending = 8&#xA;Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0&#xA;&#xA;Class FileSystemFolder&#xA;&#x9;Private m_ParentPath&#xA;&#x9;Private m_Name&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = m_ParentPath &amp; &quot;\&quot; &amp; Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FullPath(value)&#xA;&#x9;  dim nameStart&#xA;&#x9;  nameStart = InstrRev(value, &quot;\&quot;, -1, 0) &#xA;&#x9;  m_ParentPath = left(value,nameStart -1)&#xA;&#x9;  m_Name = mid(value,NameStart +1)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'parentFolder&#xA;&#x9;Public Property Get ParentFolder&#xA;&#x9;&#x9;set ParentFolder = nothing&#xA;&#x9;&#x9;if len(m_ParentPath) &gt; 0 and right(m_ParentPath,2) &lt;&gt; &quot;:\&quot; then&#xA;&#x9;&#x9;&#x9;set ParentFolder = new FileSystemFolder&#xA;&#x9;&#x9;&#x9;ParentFolder.FullPath = m_ParentPath&#xA;&#x9;&#x9;end if&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' TextFiles property&#xA;&#x9;Public Property Get TextFiles&#xA;&#x9;&#x9;dim fso, fsoFolder, files, file, result, v_textFile, ts&#xA;&#x9;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FolderExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;Set fsoFolder = fso.GetFolder(me.FullPath)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Set files = fsoFolder.Files&#xA;&#x9;&#x9;&#x9;For Each file in files&#xA;&#x9;&#x9;&#x9;&#x9;set v_textFile = new TextFile&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.Folder = me&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.FileName = file.Name&#xA;&#x9;&#x9;&#x9;&#x9;set ts = file.OpenAsTextStream(ForReading, TristateUseDefault)&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.Contents = ts.ReadAll&#xA;&#x9;&#x9;&#x9;&#x9;ts.Close&#xA;&#x9;&#x9;&#x9;&#x9;result.add v_textFile&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;set TextFiles = result&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'SubFolders property&#xA;&#x9;public property Get SubFolders&#xA;&#x9;&#x9;Dim fso, result, folder, folders, tempfolder, subfolder&#xA;&#x9;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;Set tempfolder = fso.GetFolder(me.FullPath)&#xA;&#x9;&#x9;Set folders = tempfolder.SubFolders&#xA;&#x9;&#x9;For Each folder in folders&#xA;&#x9;&#x9;&#x9;set subfolder = new FileSystemFolder&#xA;&#x9;&#x9;&#x9;subFolder.FullPath = folder.Path&#xA;&#x9;&#x9;&#x9;result.Add subFolder&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;set SubFolders = result&#xA;&#x9;End Property&#xA;&#x9;'let the user select a folder, optionally from a given starting path.&#xA;&#x9;public function getUserSelectedFolder(startPath)&#xA;&#x9;&#x9;dim folder, shell&#xA;&#x9;&#x9;Set shell  = CreateObject( &quot;Shell.Application&quot; )&#xA;&#x9;&#x9;if len(startPath) &gt; 0 then&#xA;&#x9;&#x9;&#x9;Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0,startPath)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not folder is nothing then&#xA;&#x9;&#x9;&#x9;set getUserSelectedFolder = New FileSystemFolder&#xA;&#x9;&#x9;&#x9;getUserSelectedFolder.FullPath = folder.Self.Path &#xA;&#x9;&#x9;&#x9;Session.Output &quot;folder.Self.Path: &quot; &amp; folder.Self.Path&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set getUserSelectedFolder = Nothing&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;'save the folder&#xA;&#x9;public sub Save()&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;'first check if the path doesn't exist yet&#xA;&#x9;&#x9;if not fso.FolderExists(me.FullPath) and len(me.FullPath) &gt; 1 then&#xA;&#x9;&#x9;&#x9;if not me.ParentFolder is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;me.ParentFolder.Save&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;fso.CreateFolder me.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;&#x9;'delete the folder&#xA;&#x9;public sub Delete()&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FolderExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;fso.DeleteFolder me.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;End Class&#xA;&#xA;Const scriptCategory = &quot;605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F&quot;&#xA;&#xA;Class TextFile&#xA;&#x9;Private m_FullPath&#xA;&#x9;Private m_Contents&#xA;&#x9;Private m_Folder&#xA;&#x9;Private m_FileName&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  set m_Folder = Nothing&#xA;&#x9;  m_FileName = &quot;&quot;&#xA;&#x9;  m_Contents = &quot;&quot;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = me.Folder.FullPath &amp; &quot;\&quot; &amp; me.FileName&#xA;&#x9;End Property&#x9;&#xA;&#x9;public Property Let FullPath(value)&#xA;&#x9;  dim startBackslash&#xA;&#x9;  startBackslash = InstrRev(value, &quot;\&quot;, -1, 1)&#xA;&#x9;  dim folderPath&#xA;&#x9;  folderPath = left(value, startBackslash -1) 'get everything before the last &quot;\&quot;&#xA;&#x9;  if ucase(folderPath) &lt;&gt; ucase(me.Folder.FullPath) then&#xA;&#x9;&#x9;'make new folder object to avoid side effects on the folder object&#xA;&#x9;&#x9;me.Folder = New FileSystemFolder&#xA;&#x9;&#x9;me.Folder.FullPath = left(value, startBackslash -1) 'get everything before the last &quot;\&quot;&#xA;&#x9;  end if&#xA;&#x9;  me.FileName = mid(value, startBackslash + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;end Property&#xA;&#x9;&#x9;&#xA;&#x9;' Contents property.&#xA;&#x9;Public Property Get Contents&#xA;&#x9;  Contents = m_Contents&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Contents(value)&#xA;&#x9;  m_Contents = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;' FileNameWithoutExtension property.&#xA;&#x9;Public Property Get FileNameWithoutExtension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  FileNameWithoutExtension = left(me.FileName, startExtension -1) 'get everything before the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;' Extension property.&#xA;&#x9;Public Property Get Extension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  Extension = mid(me.FileName, startExtension + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Folder property.&#xA;&#x9;Public Property Get Folder&#xA;&#x9;  if m_Folder is nothing then&#xA;&#x9;&#x9;set m_Folder = new FileSystemFolder&#xA;&#x9;  end if&#xA;&#x9;  set Folder = m_Folder&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Folder(value)&#xA;&#x9;  set m_Folder = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'save the file&#xA;&#x9;sub Save&#xA;&#x9;&#x9;Dim fso, MyFile&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;'first make sure the directory exists&#xA;&#x9;&#x9;me.Folder.Save&#xA;&#x9;&#x9;'then create file&#xA;&#x9;&#x9;Set MyFile = fso.CreateTextFile(me.FullPath, True)&#xA;&#x9;&#x9;MyFile.Write(Contents)&#xA;&#x9;&#x9;MyFile.close&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'delete the file&#xA;&#x9;sub Delete&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FileExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;fso.DeleteFile me.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;&#x9;'let the user select a file from the file system&#xA;&#x9;public function UserSelect(initialDir,filter)&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;selectedFileName = ChooseFile(initialDir,filter)&#xA;&#x9;&#x9;'check if anything was selected&#xA;&#x9;&#x9;if len(selectedFileName) &gt; 0 then&#xA;&#x9;&#x9;&#x9;me.FullPath = selectedFileName&#xA;&#x9;&#x9;&#x9;UserSelect = true&#xA;&#x9;&#x9;&#x9;me.LoadContents&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;UserSelect = false&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;'load the contents of the file from the file system&#xA;&#x9;public function loadContents()&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;dim fsoFile&#xA;&#x9;&#x9;dim ts&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FileExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;set fsoFile = fso.GetFile(me.FullPath)&#xA;&#x9;&#x9;&#x9;set ts = fsoFile.OpenAsTextStream(ForReading, TristateUseDefault)&#xA;&#x9;&#x9;&#x9;me.Contents = ts.ReadAll&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;end class&#xA;Class Script &#xA;&#x9;Private m_Name&#xA;&#x9;Private m_Code&#xA;&#x9;Private m_Group&#xA;&#x9;Private m_Id&#xA;&#x9;Private m_GUID&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  m_Name = &quot;&quot;&#xA;&#x9;  m_Code = &quot;&quot;&#xA;&#x9;  m_Id = &quot;&quot;&#xA;&#x9;  set m_Group = Nothing&#xA;&#x9;End Sub&#xA;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' Code property.&#xA;&#x9;Public Property Get Code&#xA;&#x9;  Code = m_Code&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Code(value)&#xA;&#x9;  m_Code = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Id property.&#xA;&#x9;Public Property Get Id&#xA;&#x9;  Id = m_Id&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Id(value)&#xA;&#x9;  m_Id = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' GUID property.&#xA;&#x9;Public Property Get GUID&#xA;&#x9;  GUID = m_GUID&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GUID(value)&#xA;&#x9;  m_GUID = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Path property.&#xA;&#x9;Public Property Get Path&#xA;&#x9;  Path = getPathFromCode&#xA;&#x9;  if len(Path) &lt; 1 then&#xA;&#x9;&#x9;Path = &quot;\&quot; &amp; me.Group.Name&#xA;&#x9;  end if&#xA;&#x9;End Property&#xA;&#xA;&#x9;' Group property.&#xA;&#x9;Public Property Get Group&#xA;&#x9;  set Group = m_Group&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Group(value)&#xA;&#x9;  set m_Group = value&#xA;&#x9;  'add the script to the group&#xA;&#x9;   m_Group.Scripts.Add me&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' GroupNameInCode property&#xA;&#x9;Public Property Get GroupInNameCode&#xA;&#x9;  GroupInNameCode = getGroupFromCode()&#xA;&#x9;End Property&#xA;&#xA;&#x9;&#xA;&#x9;' Gets all scripts stored in the model&#xA;&#x9;Public function getAllScripts(allGroups)&#xA;&#x9;&#x9;dim resultArray, scriptGroup,row,queryResult&#xA;&#x9;&#x9;set scriptGroup = new scriptGroup&#xA;&#x9;&#x9;set allGroups = scriptGroup.getAllGroups()&#xA;&#x9;&#x9;dim allScripts&#xA;&#x9;&#x9;set allScripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;dim sqlGet&#xA;&#x9;&#x9;sqlGet = &quot;select s.ScriptID, s.Notes, s.Script,ps.Script as SCRIPTGROUP, ps.Notes as GROUPNOTES, ps.ScriptID as GroupID, ps.ScriptName as GroupGUID, s.ScriptName as ScriptGUID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; from t_script s &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; inner join t_script ps on s.ScriptAuthor = ps.ScriptName &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; where s.notes like '&lt;Script Name=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;        queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim id, notes, code, group, name, groupNotes, groupID, groupGUID, scriptGUID&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray)&#xA;&#x9;&#x9;&#x9;id = resultArray(i,0)&#xA;&#x9;&#x9;&#x9;notes = resultArray(i,1)&#xA;&#x9;&#x9;&#x9;code = resultArray(i,2) &#xA;&#x9;&#x9;&#x9;group = resultArray(i,3)&#xA;&#x9;&#x9;&#x9;groupNotes = resultArray(i,4)&#xA;&#x9;&#x9;&#x9;groupID = resultArray(i,5)&#xA;&#x9;&#x9;&#x9;groupGUID = resultArray(i,6)&#xA;&#x9;&#x9;&#x9;scriptGUID = resultArray(i,7)&#xA;&#x9;&#x9;&#x9;if len(notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'first get or create the group&#xA;&#x9;&#x9;&#x9;&#x9;if allGroups.Exists(groupID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = allGroups(groupID)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Name = group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Id = groupID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.GUID = groupGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.setGroupTypeFromNotes groupNotes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;allGroups.Add groupID, scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'then make the script&#xA;&#x9;&#x9;&#x9;&#x9;name = getNameFromNotes(notes)&#xA;&#x9;&#x9;&#x9;&#x9;dim script&#xA;&#x9;&#x9;&#x9;&#x9;set script = New Script&#xA;&#x9;&#x9;&#x9;&#x9;script.Id = id&#xA;&#x9;&#x9;&#x9;&#x9;script.Name = name&#xA;&#x9;&#x9;&#x9;&#x9;script.Code = code&#xA;&#x9;&#x9;&#x9;&#x9;script.GUID = scriptGUID&#xA;&#x9;&#x9;&#x9;&#x9;'add the group to the script&#xA;&#x9;&#x9;&#x9;&#x9;script.Group = scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;'add the script to the list&#xA;&#x9;&#x9;&#x9;&#x9;allScripts.Add script&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set getAllScripts = allScripts&#xA;&#x9;End function&#xA;&#x9;&#xA;&#x9;'the notes contain= &lt;Script Name=&quot;MyScriptName&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;&#x9;'so the name is the second part when splitted by double quotes&#xA;&#x9;private function getNameFromNotes(notes)&#xA;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;getNameFromNotes = parts(1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the path is defined in the code as '[path=\directory\subdirectory]&#xA;&#x9;private function getPathFromCode()&#xA;&#x9;&#x9;getPathFromCode = getKeyValue(&quot;path&quot;)&#xA;&#x9;end function&#xA;&#x9;'the Group is defined in the code as '[group=NameOfTheGroup]&#xA;&#x9;public function getGroupFromCode()&#xA;&#x9;&#x9;getGroupFromCode = getKeyValue(&quot;group&quot;)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the key-value pair is defined in the code as '[keyName=value]&#xA;&#x9;public function getKeyValue(keyName)&#xA;&#x9;&#x9;dim returnValue&#xA;&#x9;&#x9;returnValue = &quot;&quot; 'initialise emtpy&#xA;&#x9;&#x9;dim keyIndicator, startKey, endKey, tempValue&#xA;&#x9;&#x9;keyIndicator = &quot;[&quot; &amp; keyName &amp; &quot;=&quot; &#xA;&#x9;&#x9;startKey = instr(me.Code, keyIndicator) + len(keyIndicator)&#xA;&#x9;&#x9;if startKey &gt; len(keyIndicator) then&#xA;&#x9;&#x9;&#x9;endKey = instr(startKey, me.Code, &quot;]&quot;)&#xA;&#x9;&#x9;&#x9;if endKey &gt; startKey then&#xA;&#x9;&#x9;&#x9;&#x9;tempValue = mid(me.code,startKey, endKey - startKey)&#xA;&#x9;&#x9;&#x9;&#x9;'filter out newline in case someone forgot to add the closing &quot;]&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if instr(tempValue,vbNewLine) = 0 and instr(tempValue,vbLF) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnValue = tempValue&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;getKeyValue = returnValue&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function addGroupToCode()&#xA;&#x9;&#x9;dim groupFromCode&#xA;&#x9;&#x9;groupFromCode = me.getGroupFromCode()&#xA;&#x9;&#x9;if not len(groupFromCode) &gt; 0 then&#xA;&#x9;&#x9;&#x9;'add the group indicator&#xA;&#x9;&#x9;&#x9;me.Code = &quot;'[group=&quot; &amp; me.Group.Name &amp; &quot;]&quot; &amp; vbNewLine &amp; me.Code&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'Insert the script in the database&#xA;&#x9;public sub Create&#xA;&#x9;&#x9;dim sqlInsert&#xA;&#x9;&#x9;sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName, ScriptAuthor, Notes, Script) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Values ('&quot; &amp; scriptCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&quot; &amp; me.Group.GUID &amp; &quot;','&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;','&quot; &amp; escapeSQLString(me.Code) &amp; &quot;')&quot;&#xA;'&#x9;&#x9;Session.Output &quot;***********************************************&quot;&#xA;'&#x9;&#x9;Session.Output &quot;sql = &quot; &amp; sqlInsert&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.Execute sqlInsert&#xA;&#x9;&#x9;If Err.Number &lt;&gt; 0 Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Error: &quot; &amp; Err.Number&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Error (Hex): &quot; &amp; Hex(Err.Number)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Source: &quot; &amp;  Err.Source&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Description: &quot; &amp;  Err.Description&#xA;&#x9;&#x9;&#x9;Err.Clear&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'update the script in the database&#xA;&#x9;public sub Update&#xA;&#x9;&#x9;dim sqlUpdate&#xA;&#x9;&#x9;sqlUpdate = &quot;update t_script set script = '&quot; &amp; escapeSQLString(me.Code) &amp; &quot;', ScriptAuthor = '&quot; &amp; me.Group.GUID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;', Notes = '&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;' where ScriptName = '&quot; &amp; me.GUID &amp; &quot;'&quot;&#xA;&#x9;&#x9;Repository.Execute sqlUpdate&#xA;&#x9;&#x9;If Err.Number &lt;&gt; 0 Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Error: &quot; &amp; Err.Number&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Error (Hex): &quot; &amp; Hex(Err.Number)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Source: &quot; &amp;  Err.Source&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Description: &quot; &amp;  Err.Description&#xA;&#x9;&#x9;&#x9;Err.Clear&#xA;&#x9;&#x9;End If&#xA;&#xA;&#x9;end sub&#xA;&#x9;&#xA;end Class&#xA;&#xA;Const gtNormal = &quot;NORMAL&quot;, gtProjectBrowser = &quot;PROJBROWSER&quot;, gtDiagram = &quot;DIAGRAM&quot;, gtWorkflow = &quot;WORKFLOW&quot;, _&#xA;  gtSearch = &quot;SEARCH&quot;, gtModelSearch = &quot;MODELSEARCH&quot;, gtContextElement = &quot;CONTEXTELEMENT&quot;, _&#xA;  gtContextPackage = &quot;CONTEXTPACKAGE&quot;, gtContextDiagram = &quot;CONTEXTDIAGRAM&quot;, gtContextLink = &quot;CONTEXTLINK&quot;&#xA;&#xA;'for some reason all groups have this value in column scriptCategory&#xA;Const scriptGroupCategory = &quot;3955A83E-9E54-4810-8053-FACC68CD4782&quot;&#xA;&#xA;Class ScriptGroup &#xA;&#x9;Private m_Id&#xA;&#x9;Private m_GUID&#xA;&#x9;Private m_Name&#xA;&#x9;Private m_GroupType&#xA;&#x9;Private m_Scripts&#xA;&#x9;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  m_Id = &quot;&quot;&#xA;&#x9;  m_Name = &quot;&quot;&#xA;&#x9;  m_GroupType = &quot;&quot;&#xA;&#x9;  set m_Scripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' Id property.&#xA;&#x9;Public Property Get Id&#xA;&#x9;  Id = m_Id&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Id(value)&#xA;&#x9;  m_Id = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' GUID property.&#xA;&#x9;Public Property Get GUID&#xA;&#x9;  GUID = m_GUID&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GUID(value)&#xA;&#x9;  m_GUID = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' GroupType property.&#xA;&#x9;Public Property Get GroupType&#xA;&#x9;  GroupType = m_GroupType&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GroupType(value)&#xA;&#x9;  m_GroupType = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Scripts property.&#xA;&#x9;Public Property Get Scripts&#xA;&#x9;  set Scripts = m_Scripts&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'the notes contain something like &lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;&#x9;'so the group type is the second part when splitted by double quotes&#xA;&#x9;private function getGroupTypeFromNotes(notes)&#xA;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;getGroupTypeFromNotes = parts(1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'sets the GroupType based on the given notes&#xA;&#x9;public sub setGroupTypeFromNotes(notes)&#xA;&#x9;&#x9;GroupType = getGroupTypeFromNotes(notes)&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'gets a dictionary of all groups without the scripts&#xA;&#x9;public function getAllGroups()&#xA;&#x9;&#x9;dim allGroups, sqlGet&#xA;&#x9;&#x9;dim queryResult&#xA;&#x9;&#x9;dim resultArray&#xA;&#x9;&#x9;set allGroups = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;sqlGet = &quot;select s.[ScriptID], s.[ScriptName] AS GroupGUID, s.[Notes], s.[Script] as GroupName &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_script s &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where s.Notes like '&lt;Group Type=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;&#x9;&#x9;queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim groupId, groupGUID, groupName, notes, scriptGroup&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray)&#xA;&#x9;&#x9;&#x9;groupId = resultArray(i,0)&#xA;&#x9;&#x9;&#x9;groupGUID = resultArray(i,1)&#xA;&#x9;&#x9;&#x9;notes = resultArray(i,2) &#xA;&#x9;&#x9;&#x9;groupName = resultArray(i,3)&#xA;&#x9;&#x9;&#x9;if len(notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'first get or create the group&#xA;&#x9;&#x9;&#x9;&#x9;if not allGroups.Exists(groupID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Name = groupName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Id = groupId&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.GUID = groupGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.setGroupTypeFromNotes notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;allGroups.Add groupID, scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set getAllGroups = allGroups&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'Insert the group in the database&#xA;&#x9;public sub Create&#xA;&#x9;&#x9;dim sqlInsert&#xA;&#x9;&#x9;sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName,Notes, Script) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Values ('&quot; &amp; scriptGroupCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&lt;Group Type=&quot;&quot;&quot; &amp; me.GroupType &amp; &quot;&quot;&quot; Notes=&quot;&quot;&quot;&quot;/&gt;','&quot; &amp; me.Name &amp; &quot;')&quot;&#xA;&#x9;&#x9;Repository.Execute sqlInsert&#xA;&#x9;&#x9;If Err.Number &lt;&gt; 0 Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Error: &quot; &amp; Err.Number&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Error (Hex): &quot; &amp; Hex(Err.Number)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Source: &quot; &amp;  Err.Source&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Description: &quot; &amp;  Err.Description&#xA;&#x9;&#x9;&#x9;Err.Clear&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#xA;end Class&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: Loads scripts from the file systems and stores them in Enterprise Architect&#xA;' Date: 2015-12-07&#xA;'&#xA;&#xA;'gets all the scripts from the given folder and its subfolders (if any)&#xA;function getScriptsFromFolder(selectedFolder, allGroups, allScripts, overwriteExisting)&#xA;&#x9;dim script, subFolder, file&#xA;&#x9;for each file in selectedFolder.TextFiles&#xA;&#x9;&#x9;Session.Output &quot;FileName: &quot; &amp; file.FileName&#xA;&#x9;&#x9;'Session.Output &quot;Code: &quot; &amp; file.Contents&#xA;&#x9;&#x9;set script = getScriptFromFile(file, allGroups, allScripts,overwriteExisting)&#xA;&#x9;&#x9;if overwriteExisting = vbCancel then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'then process subfolders&#xA;&#x9;if not overwriteExisting = vbCancel then&#xA;&#x9;&#x9;for each subFolder in selectedFolder.SubFolders&#xA;&#x9;&#x9;&#x9;getScriptsFromFolder subFolder, allGroups, allScripts, overwriteExisting&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getScriptFromFile(file, allGroups, allScripts,overwriteExisting)&#xA;&#x9;dim script, newScript, foundMatch, newScriptGroupName, group, foundGroup&#xA;&#x9;foundMatch = false&#xA;&#x9;foundGroup = false&#xA;&#x9;set group = nothing&#xA;&#x9;set script = Nothing&#xA;&#x9;if file.Extension = &quot;vbs&quot; then&#xA;&#x9;&#x9;for each script in allScripts&#xA;&#x9;&#x9;&#x9;set newScript = new Script&#xA;&#x9;&#x9;&#x9;newScript.Name = file.FileNameWithoutExtension&#xA;&#x9;&#x9;&#x9;newScript.Code = file.Contents&#xA;&#x9;&#x9;&#x9;newScriptGroupName = newScript.GroupInNameCode &#xA;&#x9;&#x9;&#x9;'if the groupname was not found in the code we use the name of the package&#xA;&#x9;&#x9;&#x9;if len(newScriptGroupName) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;newScriptGroupName = file.Folder.Name&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'check the name of the script&#xA;&#x9;&#x9;&#x9;if script.Name = newScript.Name then&#xA;&#x9;&#x9;&#x9;&#x9;'check if there is a groupname defined in the file&#xA;&#x9;&#x9;&#x9;&#x9;if script.Group.Name = newScriptGroupName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'we have a match&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foundMatch = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set group = script.Group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if not foundMatch then &#xA;&#x9;&#x9;&#x9;'script did not exist yet&#xA;&#x9;&#x9;&#x9;'figure out if the group exists already&#xA;&#x9;&#x9;&#x9;for each group in allGroups.Items&#xA;&#x9;&#x9;&#x9;&#x9;if group.Name = newScriptGroupName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'found the group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the new script&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newScript.Group = group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foundGroup = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'if the group doesnt exist yet we have to create it&#xA;&#x9;&#x9;&#x9;if not foundGroup then&#xA;&#x9;&#x9;&#x9;&#x9;set group = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;group.Name = newScriptGroupName&#xA;&#x9;&#x9;&#x9;&#x9;group.GUID = GUIDGenerateGUID()&#xA;&#x9;&#x9;&#x9;&#x9;group.GroupType = gtNormal&#xA;&#x9;&#x9;&#x9;&#x9;'create the Group in the database&#xA;&#x9;&#x9;&#x9;&#x9;group.Create&#xA;&#x9;&#x9;&#x9;&#x9;'refresh allGroups&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;allGroups.Count before: &quot; &amp; allGroups.Count&#xA;&#x9;&#x9;&#x9;&#x9;set allGroups = group.GetAllGroups()&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;allGroups.Count after: &quot; &amp; allGroups.Count&#xA;&#x9;&#x9;&#x9;&#x9;'add the group to the script&#xA;&#x9;&#x9;&#x9;&#x9;newScript.Group = group&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'Now we have to create the script&#xA;&#x9;&#x9;&#x9;newScript.GUID = GUIDGenerateGUID()&#xA;&#x9;&#x9;&#x9;newScript.Create&#xA;&#x9;&#x9;&#x9;set script = newScript&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if overwriteExisting = &quot;undecided&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;overwriteExisting = Msgbox(&quot;Do you want to update existing scripts?&quot;, vbYesNoCancel+vbQuestion, &quot;Update existing scripts&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if overwriteExisting = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;script.Code = newScript.Code&#xA;&#x9;&#x9;&#x9;&#x9;script.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#x9;set getScriptFromFile = script&#xA;end function&#xA;&#xA;sub main&#xA;&#x9;dim selectedFolder,file, allScripts, allGroups,script, overwriteExisting&#xA;&#x9;set selectedFolder = new FileSystemFolder&#xA;&#x9;set selectedFolder = selectedFolder.getUserSelectedFolder(&quot;C:\SparxEA-Scripts\Enterprise-Architect-VBScript-Library\Framework&quot;)&#xA;&#x9;overwriteExisting = &quot;undecided&quot;&#xA;&#x9;if not selectedFolder is nothing then&#xA;&#x9;&#x9;set allGroups = Nothing&#xA;&#x9;&#x9;set script = new Script&#xA;&#x9;&#x9;'first get all existing scripts and groups&#xA;&#x9;&#x9;set allScripts = Script.getAllScripts(allGroups)&#xA;&#x9;&#x9;'get the scripts from the folder and its subfolders&#xA;&#x9;&#x9;getScriptsFromFolder selectedFolder, allGroups, allScripts, overwriteExisting&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub main1&#xA;&#x9;dim a_script, folder, file, files, scriptGroup, allGroups, allScripts, overwriteExisting&#xA;&#x9;&#xA;&#x9;set scriptGroup = new scriptGroup&#xA;    set allGroups = scriptGroup.getAllGroups()&#xA;&#x9;set a_script = new Script&#xA;&#x9;set allScripts = a_script.getAllScripts(allGroups)&#xA;&#x9;overwriteExisting = vbYes&#xA;&#xA;&#x9;set folder = New FileSystemFolder&#xA;&#x9;folder.FullPath = &quot;C:\SparxEA-Scripts\Enterprise-Architect-VBScript-Library\Framework\Tools\Script Management&quot;&#xA;&#x9;&#xA;&#x9;set files = folder.TextFiles&#xA;&#x9;for each file in files&#xA;'&#x9;&#x9;Session.Output &quot;------------------------------------------&quot;&#xA;'&#x9;&#x9;Session.Output &quot;FileName: &quot; &amp; file.FileName&#xA;'&#x9;&#x9;Session.Output &quot;File Contents&quot;&#xA;'&#x9;&#x9;Session.Output file.Contents&#xA;'&#x9;&#x9;Session.Output &quot;==========================================&quot;&#xA;'&#x9;&#x9;Session.Output &quot;Escaped Contents&quot;&#xA;'&#x9;&#x9;Session.Output escapeSQLString(file.Contents)&#xA;'&#x9;&#x9;Session.Output &quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot;&#xA;&#x9;&#x9;set a_script = getScriptFromFile(file, allGroups, allScripts, overwriteExisting)&#xA;'&#x9;&#x9;Session.Output &quot;------------------------------------------&quot;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;If Err.Number &lt;&gt; 0 Then&#xA;&#x9;    Session.Output &quot;Error: &quot; &amp; Err.Number&#xA;&#x9;&#x9;Session.Output &quot;Error (Hex): &quot; &amp; Hex(Err.Number)&#xA;&#x9;&#x9;Session.Output &quot;Source: &quot; &amp;  Err.Source&#xA;&#x9;&#x9;Session.Output &quot;Description: &quot; &amp;  Err.Description&#xA;&#x9;&#x9;Err.Clear&#xA;&#x9;End If&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="77"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF UML Profile"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="78"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D767E9F1-919A-4FB5-A974-0410855BC6E8}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Synchronize Steretoypes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Tools\UML Profile]&#xA;'[group=UML Profile]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Synchronize stereotypes&#xA;' Author: Geert Bellekens&#xA;' Purpose: Synchronizes all stereotypes in the list&#xA;' Date: 2016-01-12&#xA;'&#xA;dim outputTabName&#xA;outputTabName = &quot;Synchronize stereotypes&quot;&#xA;&#xA;sub main&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'tell the user we are starting&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting synchronizing stereotypes&quot;,0&#xA;&#x9;dim stereotypes, stereotype&#xA;&#x9;dim profile &#xA;&#x9;set stereotypes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'*********** Set profile and stereotype names here Start *********************&#xA;&#x9;profile = &quot;MyProfileName&quot;&#xA;&#x9;stereotypes.Add &quot;Stereotype1&quot;&#xA;&#x9;stereotypes.Add &quot;Stereotype2&quot;&#xA;'&#x9;stereotypes.Add &quot;Stereotype3&quot;&#xA;&#x9;stereotypes.Add &quot;Stereotype4&quot;&#xA;&#x9;'*********** Add all stereotypes here End ***********************&#xA;&#x9;for each stereotype in stereotypes&#xA;&#x9;&#x9;SynchronizeSteretoype profile, stereotype&#xA;&#x9;next&#xA;&#x9;'tell the user we are finished&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished synchronizing stereotypes&quot;,0&#xA;end sub&#xA;&#xA;function SynchronizeSteretoype(profile, stereotype)&#xA;&#x9;Repository.WriteOutput outputTabName, &quot;Processing stereotype &quot; &amp; profile &amp; &quot;::&quot; &amp; stereotype,0&#xA;&#x9;Repository.CustomCommand &quot;Repository&quot;, &quot;SynchProfile&quot;, &quot;Profile=&quot; &amp; profile &amp; &quot;;Stereotype=&quot; &amp; stereotype &amp; &quot;;&quot; &#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="79"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{15F3E2FC-F938-46D0-9FAB-70BC6A971DAB}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;BinaryFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;!INC Utils.Include&#xA;&#xA;Const adTypeBinary = 1&#xA;Const adSaveCreateOverWrite = 2&#xA;&#xA;Class BinaryFile&#xA;&#x9;Private m_FullPath&#xA;&#x9;Private m_Contents&#xA;&#x9;Private m_Folder&#xA;&#x9;Private m_FileName&#xA;&#x9;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  set m_Folder = Nothing&#xA;&#x9;  m_FileName = &quot;&quot;&#xA;&#x9;  m_Contents = &quot;&quot;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = me.Folder.FullPath &amp; &quot;\&quot; &amp; me.FileName&#xA;&#x9;End Property&#x9;&#xA;&#x9;public Property Let FullPath(value)&#xA;&#x9;  dim startBackslash&#xA;&#x9;  startBackslash = InstrRev(value, &quot;\&quot;, -1, 1)&#xA;&#x9;  me.Folder.FullPath = left(value, startBackslash -1) 'get everything before the last &quot;\&quot;&#xA;&#x9;  me.FileName = mid(value, startBackslash + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;end Property&#xA;&#x9;&#x9;&#xA;&#x9;' Contents property, should be a array of bytes.&#xA;&#x9;Public Property Get Contents&#xA;&#x9;  Contents = m_Contents&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Contents(value)&#xA;&#x9;  m_Contents = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;' FileNameWithoutExtension property.&#xA;&#x9;Public Property Get FileNameWithoutExtension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  FileNameWithoutExtension = left(me.FileName, startExtension -1) 'get everything before the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;' Extension property.&#xA;&#x9;Public Property Get Extension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  Extension = mid(me.FileName, startExtension + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Folder property.&#xA;&#x9;Public Property Get Folder&#xA;&#x9;  if m_Folder is nothing then&#xA;&#x9;&#x9;set m_Folder = new FileSystemFolder&#xA;&#x9;  end if&#xA;&#x9;  set Folder = m_Folder&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Folder(value)&#xA;&#x9;  set m_Folder = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'save the file to disk&#xA;&#x9;sub Save&#xA;&#x9;&#x9;'first make sure the directory exists&#xA;&#x9;&#x9;me.Folder.Save&#xA;&#x9;&#x9;'then create file&#x9;&#xA;&#x9;&#x9;'Create Stream object&#xA;&#x9;&#x9;Dim BinaryStream&#xA;&#x9;&#x9;Set BinaryStream = CreateObject(&quot;ADODB.Stream&quot;)&#xA;&#x9;&#x9;'Specify stream type – we want To save binary data.&#xA;&#x9;&#x9;BinaryStream.Type = adTypeBinary&#xA;&#x9;&#x9;'Open the stream And write binary data To the object&#xA;&#x9;&#x9;BinaryStream.Open&#xA;&#x9;&#x9;BinaryStream.Write Contents&#xA;&#x9;&#x9;'Save binary data To disk&#xA;&#x9;&#x9;BinaryStream.SaveToFile me.FullPath, adSaveCreateOverWrite&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'delete the file&#xA;&#x9;sub Delete&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FileExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;fso.DeleteFile me.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;&#xA;end class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="80"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{75D0827E-48C9-444D-B1F5-AE2A29E1F79C}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CSVFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Name: CSVFile&#xA;'Author: Geert Bellekens&#xA;'Purpose: Wrapper script class for CSV files&#xA;'Date: 2017-03-20&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'TODO: finish when actually needed...&#xA;&#xA;Class CSVFile&#xA;&#x9;'private variables&#xA;&#x9;Private m_TextFile&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;set m_TextFile = new TextFile&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_TextFile.FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_TextFile.FileName = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Contents property. An ArrayList ArrayLists of strings&#xA;&#x9;Public Property Get Contents&#xA;&#x9;  Contents = m_TextFile.Contents&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Contents(value)&#xA;&#x9;  m_TextFile.Contents = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="81"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5B987A12-B18A-4B32-980F-8BC13869A7A1}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DocGenHelpers&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;' Script Name: DocGenHelpers&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts for document generation&#xA;' Date: 2017-02-16&#xA;&#xA;&#xA;function addMasterDocument (packageGUID, documentName)&#xA;&#x9;dim domainName&#xA;&#x9;dim splittedDocumentName&#xA;&#x9;splittedDocumentName = Split(documentName)&#xA;&#x9;domainName = splittedDocumentName(Ubound(splittedDocumentName))&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(documentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Alias = domainName&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocument = masterDocumentPackage&#xA;end function&#xA;&#xA;'improved version of the addMasterDocumentWithDetails usign the tagged values&#xA;function addMasterDocumentWithDetailTags (packageGUID,masterDocumentName,documentAlias,documentName,documentTitle,documentVersion,documentStatus)&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;if isRequireUserLockEnabled then&#xA;&#x9;&#x9;ownerPackage.ApplyUserLock&#xA;&#x9;end if&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(masterDocumentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;select case templateTag.Name &#xA;&#x9;&#x9;&#x9;case &quot;RTFTemplate&quot; &#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;case &quot;ReportAlias&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentAlias&#xA;&#x9;&#x9;&#x9;case &quot;ReportAuthor&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = masterDocumentPackage.Element.Author&#xA;&#x9;&#x9;&#x9;case &quot;ReportName&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentName&#xA;&#x9;&#x9;&#x9;case &quot;ReportTitle&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentTitle&#xA;&#x9;&#x9;&#x9;case &quot;ReportVersion&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentVersion&#xA;&#x9;&#x9;&#x9;case &quot;ReportStatus&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentStatus&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;'save changed&#xA;&#x9;&#x9;templateTag.Update&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocumentWithDetailTags = masterDocumentPackage&#xA;end function&#xA;&#xA;function addMasterDocumentWithDetails (packageGUID, documentName,documentVersion,documentAlias)&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(documentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Alias = documentAlias&#xA;&#x9;masterDocumentPackage.Version = documentVersion&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocumentWithDetails = masterDocumentPackage&#xA;end function&#xA;&#xA;function addModelDocumentForDiagram(masterDocument,diagram, treepos, template)&#xA;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;set diagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;addModelDocumentForPackage masterDocument,diagramPackage,diagram.Name &amp; &quot; diagram&quot;, treepos, template&#xA;end function&#xA;&#xA;function addModelDocumentForPackage(masterDocument,package,name, treepos, template)&#xA;&#x9;dim modelDocElement as EA.Element&#xA;&#x9;set modelDocElement = masterDocument.Elements.AddNew(name, &quot;Class&quot;)&#xA;&#x9;'set the position&#xA;&#x9;modelDocElement.TreePos = treepos&#xA;&#x9;modelDocElement.StereotypeEx = &quot;model document&quot;&#xA;&#x9;modelDocElement.Update&#xA;&#x9;'add tagged values&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add attribute&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;set attribute = modelDocElement.Attributes.AddNew(package.Name, &quot;Package&quot;)&#xA;&#x9;attribute.ClassifierID = package.Element.ElementID&#xA;&#x9;attribute.Update&#xA;end function&#xA;&#xA;function addModelDocument(masterDocument, template,elementName, elementGUID, treepos)&#xA;&#x9;addModelDocumentWithSearch masterDocument, template,elementName, elementGUID, treepos,&quot;ZDG_ElementByGUID&quot;&#xA;end function&#xA;&#xA;&#xA;function addModelDocumentWithSearch(masterDocument, template,elementName, elementGUID, treepos, searchName)&#xA;&#x9;dim modelDocElement as EA.Element;&#xA;&#x9;set modelDocElement = masterDocument.Elements.AddNew(elementName, &quot;Class&quot;)&#xA;&#x9;'set the position&#xA;&#x9;modelDocElement.TreePos = treepos&#xA;&#x9;modelDocElement.StereotypeEx = &quot;model document&quot;&#xA;&#x9;modelDocElement.Update&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;if len(elementGUID) &gt; 0 then&#xA;&#x9;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;elseif templateTag.Name = &quot;SearchName&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = searchName&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;elseif templateTag.Name = &quot;SearchValue&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = elementGUID&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add tagged values&#xA;&#x9;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'no GUID provided. Set masterdocument package ID as dummy attribute to make the template work&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;set attribute = modelDocElement.Attributes.AddNew(masterDocument.Name, &quot;Package&quot;)&#xA;&#x9;&#x9;attribute.ClassifierID = masterDocument.Element.ElementID&#xA;&#x9;&#x9;attribute.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getApplication(selectedElement)&#xA;&#x9;getApplication = &quot;CMS&quot; 'default name&#xA;&#x9;dim rootPackage as EA.Package&#xA;&#x9;set rootPackage = getRootPackage(selectedElement)&#xA;&#x9;if not rootPackage is nothing then&#xA;&#x9;&#x9;dim applicationName&#xA;&#x9;&#x9;applicationName = Replace(rootPackage.Name,&quot;Application &quot;,&quot;&quot;)&#xA;&#x9;&#x9;if len(applicationName) &gt; 0 then&#xA;&#x9;&#x9;&#x9;getApplication = applicationName&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="82"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{03EDFD3B-FA1D-4372-B7EE-3E21DB30AC54}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ExcelFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Name: ExcelFile&#xA;'Author: Geert Bellekens&#xA;'Purpose: Wrapper script class for Excel files&#xA;'Date: 2017-03-20&#xA;&#xA;!INC Utils.Include&#xA;&#xA;Class ExcelFile&#xA;&#x9;'private variables&#xA;&#x9;Private m_ExcelApp&#xA;&#x9;Private m_FileName&#xA;&#x9;Private m_WorkBook&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_FileName = &quot;&quot;&#xA;&#x9;&#x9;set m_ExcelApp = CreateObject(&quot;Excel.Application&quot;)&#xA;&#x9;&#x9;set m_WorkBook = nothing&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;public Property Get worksheets&#xA;&#x9;&#x9;set worksheets = m_WorkBook.Sheets&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;'public operations&#xA;&#x9;'create a tab with the given name. The contents should parameter should be a two dimensional array&#xA;&#x9;public Function createTab(tabName, contents,formatAsTable, tableStyle)&#xA;&#x9;&#x9;'check if the workbook has been created already&#xA;&#x9;&#x9;if m_WorkBook is nothing then&#xA;&#x9;&#x9;&#x9;set m_WorkBook = m_ExcelApp.Workbooks.Add()&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'create the tab at the end&#xA;&#x9;&#x9;Dim ws&#xA;&#x9;&#x9;Set ws = m_WorkBook.Sheets.Add()&#xA;&#x9;&#x9;ws.Name = tabName&#xA;&#x9;&#x9;'fill the contents&#xA;&#x9;&#x9;dim targetRange&#xA;&#x9;&#x9;set targetRange = ws.Range(ws.Cells(1,1), ws.Cells(Ubound(contents,1), Ubound(Contents,2)))&#xA;&#x9;&#x9;targetRange.Value2 = contents&#xA;&#x9;&#x9;'format as table if needed&#xA;&#x9;&#x9;if formatAsTable then&#xA;&#x9;&#x9;&#x9;formatSheetAsTable ws, targetRange, tableStyle&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function formatSheetAsTable(worksheet, targetRange, tableStyle)&#xA;&#x9;&#x9;dim table&#xA;&#x9;&#x9;Set table = worksheet.ListObjects.Add(1, targetRange, 1, 1)&#xA;&#x9;&#x9;table.TableStyle = tableStyle&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function getUserSelectedFileName()&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;dim project&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;me.FileName = project.GetFileNameDialog (&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 2 ,&quot;&quot;, 1) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function openUserSelectedFile()&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;dim project&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;me.FileName = project.GetFileNameDialog (&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 0 ,&quot;&quot;, 0) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;&#x9;me.Open me.FileName&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function Open(filePath)&#xA;&#x9;&#x9;me.FileName = filePath&#xA;&#x9;&#x9;set m_WorkBook = m_ExcelApp.Workbooks.Open(me.FileName)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getContents(sheet)&#xA;&#x9;&#x9;getContents = sheet.UsedRange.Value2&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function save()&#xA;&#x9;&#x9;'make sure we have a filename&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;getUserSelectedFileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'if the file name is still empty then exit&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'Delete the existing file if it exists&#xA;&#x9;&#x9;dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FileExists(me.FileName) then&#xA;&#x9;&#x9;&#x9;fso.DeleteFile me.FileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'save the workbook at the given filename&#xA;&#x9;&#x9;m_WorkBook.Saveas me.FileName&#xA;&#x9;&#x9;'make excel visible&#xA;&#x9;&#x9;m_ExcelApp.visible = True&#xA;&#x9;&#x9;m_ExcelApp.WindowState = -4137 'xlMaximized&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="83"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D0EE6E6C-EA82-4668-AD43-6E44A28A489C}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FileSystem&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'&#xA;' Script Name: FileSystem&#xA;' Author: Geert Bellekens&#xA;' Purpose: A collection of useful functions related to the file system&#xA;' Date: 2016-06-18&#xA;'&#xA;function getTempFilename()&#xA;&#x9;Dim fso&#xA;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;Dim tfolder, tname&#xA;&#x9;Const TemporaryFolder = 2&#xA;&#x9;Set tfolder = fso.GetSpecialFolder(TemporaryFolder)&#xA;&#x9;tname = fso.GetTempName    &#xA;&#x9;getTempFilename = tfolder &amp;&quot;\&quot;&amp; tname&#xA;End Function&#xA;&#xA;function unzip (zipfile)&#xA;&#x9;'The folder the contents should be extracted to.&#xA;&#x9;dim extractTo, fso, filename, foldername&#xA;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;filename = fso.GetFileName(zipfile)&#xA;&#x9;foldername = Replace(FileName, &quot;.zip&quot;, &quot;&quot;)&#xA;&#x9;extractTo = fso.GetParentFolderName(zipfile) &amp; &quot;\&quot; &amp; foldername&#xA;&#x9;&#xA;&#x9;'If the extraction location does not exist create it.&#xA;&#x9;If NOT fso.FolderExists(extractTo) Then&#xA;&#x9;   fso.CreateFolder(extractTo)&#xA;&#x9;End If&#xA;&#xA;&#x9;'Extract the contents of the zip file.&#xA;&#x9;set objShell = CreateObject(&quot;Shell.Application&quot;)&#xA;&#x9;dim filesInZip&#xA;&#x9;set FilesInZip = objShell.NameSpace(zipfile).items&#xA;&#x9;objShell.NameSpace(extractTo).CopyHere(filesInZip)&#xA;&#x9;&#xA;&#x9;'clear objects&#xA;&#x9;Set fso = Nothing&#xA;&#x9;Set objShell = Nothing&#xA;&#x9;&#xA;&#x9;'return folder name&#xA;&#x9;unzip = extractTo&#xA;end function&#xA;&#xA;Function ChooseFile (ByVal initialDir, filter)&#xA;&#xA;&#x9;dim shel, fso, tempdir, tempfile, powershellfile, powershellOutputFile,psScript, textFile&#xA;&#x9;Set shell = CreateObject(&quot;WScript.Shell&quot;)&#xA;&#xA;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#xA;&#x9;tempDir = shell.ExpandEnvironmentStrings(&quot;%TEMP%&quot;)&#xA;&#xA;&#x9;tempFile = tempDir &amp; &quot;\&quot; &amp; fso.GetTempName&#xA;&#xA;&#x9;' temporary powershell script file to be invoked&#xA;&#x9;powershellFile = tempFile &amp; &quot;.ps1&quot;&#xA;&#xA;&#x9;' temporary file to store standard output from command&#xA;&#x9;powershellOutputFile = tempFile &amp; &quot;.txt&quot;&#xA;&#xA;&#x9;'if the filter is empty we use all files&#xA;&#x9;if len(filter) = 0 then&#xA;&#x9;filter = &quot;All Files (*.*)|*.*&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;'input script&#xA;&#x9;psScript = psScript &amp; &quot;[System.Reflection.Assembly]::LoadWithPartialName(&quot;&quot;System.windows.forms&quot;&quot;) | Out-Null&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;$dlg = New-Object System.Windows.Forms.OpenFileDialog&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;$dlg.initialDirectory = &quot;&quot;&quot; &amp;initialDir &amp; &quot;&quot;&quot;&quot; &amp; vbCRLF&#xA;&#x9;'psScript = psScript &amp; &quot;$dlg.filter = &quot;&quot;ZIP files|*.zip|Text Documents|*.txt|Shell Scripts|*.*sh|All Files|*.*&quot;&quot;&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;$dlg.filter = &quot;&quot;&quot; &amp; filter &amp; &quot;&quot;&quot;&quot; &amp; vbCRLF&#xA;&#x9;' filter index 4 would show all files by default&#xA;&#x9;' filter index 1 would should zip files by default&#xA;&#x9;psScript = psScript &amp; &quot;$dlg.FilterIndex = 1&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;$dlg.Title = &quot;&quot;Select a file&quot;&quot;&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;$dlg.ShowHelp = $True&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;$dlg.ShowDialog() | Out-Null&quot; &amp; vbCRLF&#xA;&#x9;psScript = psScript &amp; &quot;Set-Content &quot;&quot;&quot; &amp;powershellOutputFile &amp; &quot;&quot;&quot; $dlg.FileName&quot; &amp; vbCRLF&#xA;&#x9;'MsgBox psScript&#xA;&#xA;&#x9;Set textFile = fso.CreateTextFile(powershellFile, True)&#xA;&#x9;textFile.WriteLine(psScript)&#xA;&#x9;textFile.Close&#xA;&#x9;Set textFile = Nothing&#xA;&#xA;&#x9;' objShell.Run (strCommand, [intWindowStyle], [bWaitOnReturn]) &#xA;&#x9;' 0 Hide the window and activate another window.&#xA;&#x9;' bWaitOnReturn set to TRUE - indicating script should wait for the program &#xA;&#x9;' to finish executing before continuing to the next statement&#xA;&#xA;&#x9;Dim appCmd&#xA;&#x9;appCmd = &quot;powershell -ExecutionPolicy unrestricted &amp;'&quot; &amp; powershellFile &amp; &quot;'&quot;&#xA;&#x9;'MsgBox appCmd&#xA;&#x9;shell.Run appCmd, 0, TRUE&#xA;&#xA;&#x9;' open file for reading, do not create if missing, using system default format&#xA;&#x9;Set textFile = fso.OpenTextFile(powershellOutputFile, 1, 0, -2)&#xA;&#x9;ChooseFile = textFile.ReadLine&#xA;&#x9;textFile.Close&#xA;&#x9;Set textFile = Nothing&#xA;&#x9;fso.DeleteFile(powershellFile)&#xA;&#x9;fso.DeleteFile(powershellOutputFile)&#xA;&#xA;End Function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="84"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DF7C6076-CCC1-4133-BEB6-C9419C9DFD51}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ModelInfo&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2016-01-08&#xA;&#xA;'sub test&#xA;'&#x9;dim selectedElement, fqn&#xA;'&#x9;set selectedElement = Repository.GetContextObject()&#xA;'&#x9;fqn = getFullyQualifiedName(selectedElement)&#xA;'&#x9;Session.Output &quot;FQN: &quot; &amp; fqn&#xA;'end sub&#xA;'test&#xA;&#xA;'TODO: use caching to speed up the process&#xA;Dim elementCache &#x9;&#xA;dim packageCache&#xA;'initialise the cache objects&#xA;init&#xA;&#xA;Private Sub Module_Initialize()&#xA;&#x9;'the cache contains the ID (package or element ID) and the fully qualified name of the element or package.&#xA;&#x9;'this only seems to work in debug mode for some reason?&#xA;'&#x9;set elementCache = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;'&#x9;set packageCache = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;init&#xA;End Sub&#xA;&#xA;Private Sub Module_Terminate()&#xA;&#x9;set elementCache = nothing&#xA;&#x9;set packageCache = nothing&#xA;End Sub&#xA;&#xA;private sub init()&#xA;&#x9;if not IsObject(elementCache) then&#xA;&#x9;&#x9;set elementCache = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;end if&#xA;&#x9;if not IsObject(packageCache) then&#xA;&#x9;&#x9;set packageCache = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;end if&#xA;end sub&#xA;'Group of functions related to information from the model&#xA;&#xA;'returns the fully qualified name for the given item.&#xA;'this is the full path of the element divided by dots e.g. &quot;Root.GrandParent.Parent.Item&quot;&#xA;function getFullyQualifiedName(item)&#xA;&#x9;dim fqn, parentfqn&#xA;&#x9;fqn = &quot;&quot;&#xA;&#x9;'add the parent part&#xA;&#x9;parentFQN = getParentFQN(item)&#xA;&#x9;if len(parentFQN) &gt; 0 then&#xA;&#x9;&#x9;fqn = parentFQN &amp; &quot;.&quot;&#xA;&#x9;end&#x9;if&#xA;&#x9;fqn = fqn &amp; getItemName(item)&#xA;&#x9;getFullyQualifiedName = fqn&#xA;end function&#xA;&#xA;'returns the parent object for the given object&#xA;function getParentFQN(item)&#xA;&#x9;dim itemType, parentID, parent, parentFQN, packageID&#xA;&#x9;parentID = 0&#xA;&#x9;packageID = 0&#xA;&#x9;parentFQN = &quot;&quot;&#xA;&#x9;set parent = nothing&#xA;&#x9;itemType = TypeName(item)&#xA;&#x9;select case itemType&#xA;&#x9;&#x9;case &quot;IDualElement&quot;&#xA;&#x9;&#x9;&#x9;parentID = item.ParentID&#xA;&#x9;&#x9;&#x9;packageID = item.PackageID&#xA;&#x9;&#x9;case &quot;IDualConnector&quot;&#xA;&#x9;&#x9;&#x9;parentID = item.ClientID&#xA;&#x9;&#x9;case &quot;IDualAttribute&quot;&#xA;&#x9;&#x9;&#x9;parentID = (item.parentID)&#xA;&#x9;&#x9;case &quot;IDualDiagram&quot;&#xA;&#x9;&#x9;&#x9;parentID = item.ParentID&#xA;&#x9;&#x9;&#x9;packageID = item.PackageID&#xA;&#x9;&#x9;case &quot;IDualPackage&quot;&#xA;&#x9;&#x9;&#x9;packageID = item.ParentID&#xA;&#x9;end select&#xA;&#x9;if parentID &gt; 0 then&#xA;&#x9;&#x9;'the item is owned by an element&#xA;&#x9;&#x9;'first check if the element is in the cache already&#xA;&#x9;&#x9;if elementCache.Exists(parentID) then&#xA;&#x9;&#x9;&#x9;'get the FQN from the cache&#xA;&#x9;&#x9;&#x9;parentFQN = elementCache(parentID)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'not in the cache, get the element and its FQN&#xA;&#x9;&#x9;&#x9;set parent = Repository.GetElementByID(parentID)&#xA;&#x9;&#x9;&#x9;parentFQN = getFullyQualifiedName(parent)&#xA;&#x9;&#x9;&#x9;'add it to the cache&#xA;&#x9;&#x9;&#x9;elementCache.Add parentID, parentFQN&#xA;&#x9;&#x9;end if&#xA;&#x9;elseif packageID &gt; 0 then&#xA;&#x9;&#x9;'the item is owned by a package&#xA;&#x9;&#x9;'first check if it is in the cache already&#xA;&#x9;&#x9;if packageCache.Exists(packageID) then&#xA;&#x9;&#x9;&#x9;'get the FQN from the cache&#xA;&#x9;&#x9;&#x9;parentFQN = packageCache(packageID)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'not in the cache&#xA;&#x9;&#x9;&#x9;set parent = Repository.GetPackageByID(packageID)&#xA;&#x9;&#x9;&#x9;parentFQN = getFullyQualifiedName(parent)&#xA;&#x9;&#x9;&#x9;'add it to the cache&#xA;&#x9;&#x9;&#x9;packageCache.Add packageID, parentFQN&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;getParentFQN = parentFQN&#xA;end function&#xA;&#xA;function getItemName(item)&#xA;&#x9;dim itemName&#xA;&#x9;itemName = item.Name&#xA;&#x9;if len(itemName) = 0 then&#xA;&#x9;&#x9;itemName = &quot;[Anonymous]&quot;&#xA;&#x9;end if&#xA;&#x9;getItemName = itemName&#xA;end function&#xA;&#xA;'gets the attributes by the id's returned by the given query&#xA;function getAttributesByQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim attributeIDs&#xA;&#x9;attributeIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim attributes &#xA;&#x9;set attributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim attributeID&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attributeID in attributeIDs&#xA;&#x9;&#x9;if attributeID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;attributes.Add(attribute)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getAttributesByQuery = attributes&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;&#xA;&#xA;function selectObjectFromQualifiedName(rootPackage,rootElement, qualifiedName, seperator)&#xA;&#x9;dim foundObject&#xA;&#x9;set foundObject = nothing&#xA;&#x9;'devide qualified name into parts&#xA;&#x9;dim parts&#xA;&#x9;parts = Split(qualifiedName,seperator)&#xA;&#x9;if ubound(parts) &gt;= 0 then&#xA;&#x9;&#x9;dim rootPart&#xA;&#x9;&#x9;dim rootOK, rootName&#xA;&#x9;&#x9;rootOK = false&#xA;&#x9;&#x9;dim hasElement&#xA;&#x9;&#x9;hasElement = false&#xA;&#x9;&#x9;rootPart = parts(0)&#xA;&#x9;&#x9;'check if we have a root element&#xA;&#x9;&#x9;if not rootElement is nothing then&#xA;&#x9;&#x9;&#x9;rootName = rootElement.Name&#xA;&#x9;&#x9;&#x9;hasElement = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;rootName = rootPackage.Name&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'check the rootname&#xA;&#x9;&#x9;if lcase(rootName) = lcase(rootPart) then&#xA;&#x9;&#x9;&#x9;rootOK = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if rootOK then&#xA;&#x9;&#x9;&#x9;if ubound(parts) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;dim childPart&#xA;&#x9;&#x9;&#x9;&#x9;childPart = parts(1)&#xA;&#x9;&#x9;&#x9;&#x9;'check attributes if the childpart is the last part&#xA;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;Searching root = &quot; &amp; rootName &amp; &quot; child = &quot; &amp; childPart &amp; &quot; qualifiedName = &quot; &amp; qualifiedName&#xA;&#x9;&#x9;&#x9;&#x9;if hasElement AND ubound(parts) = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set foundObject = getAttributeByName(rootElement, childPart)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if no attribute found we try to find an operation&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if foundObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set foundObject = getOperationByName(rootElement, childPart)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'nothing found we go deeper&#xA;&#x9;&#x9;&#x9;&#x9;if foundObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim subElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set subPackage  = nothing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if hasElement then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set subElement = getSubElementByName(rootElement,childPart)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set subElement = getSubElementByName(rootPackage,childPart)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set subPackage = getSubPackageByName(rootPackage, childPart)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'go deeper&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim substring&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;substring = mid(qualifiedName, len(rootPart) + len(seperator) +1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not subElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set foundObject = selectObjectFromQualifiedName(nothing,subElement, substring, seperator)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elseif not subPackage is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set foundObject = selectObjectFromQualifiedName(subPackage,nothing, substring, seperator)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'only one part is given, return root&#xA;&#x9;&#x9;&#x9;&#x9;if hasElement then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set foundObject = rootElement&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set foundObject = rootPackage&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;set selectObjectFromQualifiedName = foundObject&#xA;end function&#xA;&#xA;function getAttributeByName(element, attributeName)&#xA;&#x9;set getAttributeByName = nothing&#xA;&#x9;if not element is nothing then&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;&#x9;if lcase(attribute.Name) = lcase(attributeName) then&#xA;&#x9;&#x9;&#x9;&#x9;set getAttributeByName = attribute&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getOperationByName(element, operationName)&#xA;&#x9;set getOperationByName = nothing&#xA;&#x9;if not element is nothing then&#xA;&#x9;&#x9;dim operation as EA.Method&#xA;&#x9;&#x9;for each operation in element.Methods&#xA;&#x9;&#x9;&#x9;if lcase(operation.Name) = lcase(operationName) then&#xA;&#x9;&#x9;&#x9;&#x9;set getOperationByName = operation&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getSubElementByName(owner, elementName)&#xA;&#x9;set getSubElementByName = nothing&#xA;&#x9;if not owner is nothing then&#xA;&#x9;&#x9;dim subElement as EA.Element&#xA;&#x9;&#x9;for each subElement in owner.Elements&#xA;&#x9;&#x9;&#x9;if lcase(subElement.Name) = lcase(elementName) then&#xA;&#x9;&#x9;&#x9;&#x9;set getSubElementByName = subElement&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getSubPackageByName(package, packageName)&#xA;&#x9;set getSubPackageByName = nothing&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;&#x9;if lcase(subPackage.Name) = lcase(packageName) then&#xA;&#x9;&#x9;&#x9;&#x9;set getSubPackageByName = subPackage&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'returns a comma separated string with the package id's the given package and all subpackages recusively&#xA;function getPackageTreeIDString(package)&#xA;&#x9;dim packageTree&#xA;&#x9;set packageTree = getPackageTree(package)&#xA;&#x9;getPackageTreeIDString = makePackageIDString(packageTree)&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'Returns the value of the tagged value with the given name (case insensitive)&#xA;'If there is no tagged value with the given name, an empty string is returned&#xA;'This function can be used with anything that can have tagged values&#xA;function getTaggedValueValue(owner, taggedValueName)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;getTaggedValueValue = &quot;&quot;&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if lcase(taggedValueName) = lcase(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;getTaggedValueValue = taggedValue.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getOrCreateTaggedValue(owner,taggedValueName)&#xA;&#x9;'Initialize&#xA;&#x9;set getOrCreateTaggedValue = nothing&#xA;&#x9;'check if tagged value exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if lcase(taggedValueName) = lcase(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;set getOrCreateTaggedValue = taggedValue&#xA;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if not found create new one&#xA;&#x9;set getOrCreateTaggedValue = owner.TaggedValues.addNew(taggedValueName,&quot;&quot;)&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="85"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E79DDC97-D5C0-4EB9-8A64-9227810DC9AD}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-VBScript&#xA;'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'&#xA;' Script Name: Util&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts&#xA;' Date: 28/09/2015&#xA;'&#xA;' Synchronises the names of the selected objects or BPMN Activities with their classifier/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;function synchronizeElement (element)&#xA;&#x9;'first check if this is an object or an action&#xA;&#x9;if not element is Nothing then&#xA;&#x9;&#x9;if (element.Type = &quot;Object&quot; OR element.Type = &quot;Action&quot;) _&#xA;&#x9;&#x9;AND element.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;&#x9;set classifier = Repository.GetElementByID(element.ClassifierID)&#xA;&#x9;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;element.Name = classifier.Name&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = classifier.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(element.ElementID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'elements of type object should also point to the composite diagram of the classifier&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;set compositeDiagram = classifier.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; AND element.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'BPMN activities that call another BPMN activity need to get the same name and same composite diagram&#xA;&#x9;&#x9;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set calledActivityTV = element.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;&#x9;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set referenceActivityTV = element.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;&#x9;&#x9;if not calledActivityTV is nothing and not referenceActivityTV is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'only do something when the Activity is types a CalledActivity&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;calledActivityTV.Value : &quot; &amp; calledActivityTV.Value &#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;referenceActivityTV.Value :&quot; &amp; referenceActivityTV.Value&#xA;&#x9;&#x9;&#x9;&#x9;if calledActivityTV.Value = &quot;true&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim calledActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set calledActivity = Repository.GetElementByGuid(referenceActivityTV.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not calledActivity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set name to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Name = calledActivity.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Set composite diagram to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, calledActivity.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;'set the given diagram as composite diagram for this element&#xA;function setCompositeDiagram (element, diagram)&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;'Tell EA this element is composite&#xA;&#x9;&#x9;dim objectQuery&#xA;&#x9;&#x9;objectQuery = &quot;update t_object set NType = 8 where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;Repository.Execute objectQuery&#xA;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;'Tell EA which diagram is the composite diagram&#xA;&#x9;&#x9;&#x9;dim xrefQuery&#xA;&#x9;&#x9;&#x9;xrefquery = &quot;insert into t_xref (XrefID, Name, Type, Visibility, Partition, Client, Supplier) values ('&quot;&amp;CreateGuid&amp;&quot;', 'DefaultDiagram', 'element property', 'Public', '0', '&quot;&amp; element.ElementGUID &amp; &quot;', '&quot;&amp; diagram.DiagramGUID &amp;&quot;')&quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute xrefquery&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'for activities we need to update PDATA1 with the diagramID&#xA;&#x9;&#x9;&#x9;dim updatequery&#xA;&#x9;&#x9;&#x9;updatequery = &quot;update t_object set PDATA1 = &quot;&amp; diagram.DiagramID &amp; &quot; where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;Repository.Execute updatequery&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' Returns a unique Guid on every call. Removes any cruft.&#xA;Function CreateGuid()&#xA;    CreateGuid = Left(CreateObject(&quot;Scriptlet.TypeLib&quot;).Guid,38)&#xA;End Function&#xA;&#xA;&#xA;'make an action into a calling activity&#xA;function makeCallingActivity(action, activity)&#xA;&#x9;action.Type = &quot;Activity&quot;&#xA;&#x9;action.ClassfierID = 0&#xA;&#x9;action.Stereotype = &quot;Activity&quot;&#xA;&#x9;action.Update&#xA;&#x9;action.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;Activity&quot;&#xA;&#x9;action.TaggedValues.Refresh&#xA;&#x9;'first copy the tagged values values&#xA;&#x9;copyTaggedValuesValues activity, action&#xA;&#x9;'set tagged values correctly&#xA;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;set calledActivityTV = action.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;calledActivityTV.Value = &quot;true&quot;&#xA;&#x9;calledActivityTV.Update&#xA;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;set referenceActivityTV = action.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;referenceActivityTV.Value = activity.ElementGUID&#xA;&#x9;referenceActivityTV.Update&#xA;&#x9;action.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setFontOnDiagramObject(diagramObject, font, size )&#xA;&#x9;dim styleParts&#xA;&#x9;styleParts = Split (diagramObject.Style , &quot;;&quot;) &#xA;&#x9;dim i&#xA;&#x9;dim stylepart&#xA;&#x9;dim fontpart &#xA;&#x9;fontpart = &quot;font=&quot; &amp; font&#xA;&#x9;dim fontSet&#xA;&#x9;fontSet = false&#xA;&#x9;dim sizePart&#xA;&#x9;sizePart = &quot;fontsz=&quot; &amp; size * 10&#xA;&#x9;dim sizeSet&#xA;&#x9;sizeSet = false&#xA;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;font=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = fontpart&#xA;&#x9;&#x9;&#x9;fontSet = true&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;fontsz=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = sizePart&#xA;&#x9;&#x9;&#x9;sizeSet = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;diagramObject.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;if not fontSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; fontpart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;&#x9;if not sizeSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; sizePart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if not result.Exists(element.Name) then&#xA;&#x9;&#x9;result.Add element.Name, element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;'get the package id string of the currently selected package tree&#xA;function getCurrentPackageTreeIDString()&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getCurrentPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;'get selected package&#xA;&#x9;set currentPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;if not currentPackage is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(currentPackage)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getCurrentPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'get the package id string of the given package tree&#xA;function getPackageTreeIDString(package)&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(package)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'make an id string out of the ID's of the given elements&#xA;function makeIDString(elements)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; element.ElementID&#xA;&#x9;next &#xA;&#x9;'if there are no elements then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makeIDString = idString&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;function getElementsFromDiagram(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagram = selectedElements&#xA;end function&#xA;&#xA;'returns the diagram objects in an ArrayList for elements of the given type from the given diagram&#xA;function getDiagramObjects(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add diagramObject&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getDiagramObjects = selectedElements&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;'the boundary element should be passed as a DiagramObject&#xA;function getElementsFromDiagramInBoundary(diagram, elementType,boundary)&#xA;&#x9;'dim boundary as EA.DiagramObject&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if (diagramObject.left &gt;= boundary.left and _&#xA;&#x9;&#x9;&#x9;diagramObject.left =&lt; boundary.right and _&#xA;&#x9;&#x9;&#x9;diagramObject.top =&lt; boundary.top and _&#xA;&#x9;&#x9;&#x9;diagramObject.top &gt;= boundary.bottom) then&#xA;&#x9;&#x9;&#x9;'get the element and check the type&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagramInBoundary = selectedElements&#xA;end function&#xA;&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim positionString&#xA;&#x9;'determine height and width&#xA;&#x9;dim width &#xA;&#x9;dim height&#xA;&#x9;dim elementType&#xA;&#x9;dim setVPartition &#xA;&#x9;setVPartition = false&#xA;&#x9;elementType = element.Type&#xA;&#x9;select case elementType       &#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#x9;&#x9;case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 90&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;'default width and height&#x9;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#x9;end select&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#x9;x = x - width/2&#xA;&#x9;'set the position of the diagramObject&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#x9;Session.Output &quot;positionString voor element &quot;&amp; element.Name &amp; &quot; : &quot; &amp;  positionString&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;if setVPartition then&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;end function&#xA;&#xA;'gets the content of the linked document in the given format (TXT, RTF or EA)&#xA;function getLinkedDocumentContent(element, format)&#xA;&#x9;dim linkedDocumentRTF&#xA;&#x9;dim linkedDocumentEA&#xA;&#x9;dim linkedDocumentPlainText&#xA;&#x9;linkedDocumentRTF = element.GetLinkedDocument()&#xA;&#x9;if format = &quot;RTF&quot; then&#xA;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentRTF&#xA;&#x9;else&#xA;&#x9;&#x9;linkedDocumentEA = Repository.GetFieldFromFormat(&quot;RTF&quot;,linkedDocumentRTF)&#xA;&#x9;&#x9;if format = &quot;EA&quot; then&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentEA&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;linkedDocumentPlainText = Repository.GetFormatFromField(&quot;TXT&quot;,linkedDocumentEA)&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentPlainText&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns the currently logged in user&#xA;'if security is not enabled then the logged in user is defaulted to me&#xA;function getUserLogin()&#xA;&#x9;'get the currently logged in user&#xA;&#x9;Dim userLogin&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;userLogin = Repository.GetCurrentLoginUser(false)&#xA;&#x9;else&#xA;&#x9;&#x9;userLogin = &quot;SYSTEMAT-TCC\BellekensG&quot;&#xA;&#x9;end if&#xA;&#x9;getUserLogin = userLogin&#xA;end function&#x9;&#xA;&#xA;function getArrayFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;getArrayFromQuery = convertQueryResultToArray(xmlResult)&#xA;end function&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;'make sure the array has a dimension even is we don't have any results&#xA;&#x9;&#x9;if not arrayCreated then&#xA;&#x9;&#x9;&#x9;ReDim result(0, 0)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;'let the user select a package&#xA;function selectPackage()&#xA;&#x9;'start from the selected package in the project browser&#xA;&#x9;dim constructpickerString&#xA;&#x9;constructpickerString = &quot;IncludedTypes=Package&quot;&#xA;&#x9;dim treeselectedPackage as EA.Package&#xA;&#x9;set treeselectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;if not treeselectedPackage is nothing then&#xA;&#x9;&#x9;constructpickerString = constructpickerString &amp;&#x9;&quot;;Selection=&quot; &amp; treeselectedPackage.PackageGUID&#xA;&#x9;end if&#xA;&#x9;dim packageElementID &#x9;&#x9;&#xA;&#x9;packageElementID = Repository.InvokeConstructPicker(constructpickerString) &#xA;&#x9;if packageElementID &gt; 0 then&#xA;&#x9;&#x9;dim packageElement as EA.Element&#xA;&#x9;&#x9;set packageElement = Repository.GetElementByID(packageElementID)&#xA;&#x9;&#x9;dim package as EA.Package&#xA;&#x9;&#x9;set package = Repository.GetPackageByGuid(packageElement.ElementGUID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package = nothing&#xA;&#x9;end if &#xA;&#x9;set selectPackage = package&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;function getDiagramsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim diagramIDs&#xA;&#x9;diagramIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim diagrams &#xA;&#x9;set diagrams = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramID&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;for each diagramID in diagramIDs&#xA;&#x9;&#x9;if diagramID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set diagram = Repository.GetdiagramByID(diagramID)&#xA;&#x9;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;diagrams.Add(diagram)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getDiagramsFromQuery = diagrams&#xA;end function&#xA;&#xA;function getattributesFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim attributeIDs&#xA;&#x9;attributeIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim attributes &#xA;&#x9;set attributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim attributeID&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attributeID in attributeIDs&#xA;&#x9;&#x9;if attributeID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;attributes.Add(attribute)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getattributesFromQuery = attributes&#xA;end function&#xA;&#xA;'get the description from the given notes &#xA;'that is the text between &lt;NL&gt; and &lt;/NL&gt; or &lt;FR&gt; and &lt;/FR&gt;&#xA;function getTagContent(notes, tag)&#xA;&#x9;if tag = &quot;&quot; then&#xA;&#x9;&#x9;getTagContent = notes&#xA;&#x9;else&#xA;&#x9;&#x9;getTagContent = &quot;&quot;&#xA;&#x9;&#x9;dim startTagPosition&#xA;&#x9;&#x9;dim endTagPosition&#xA;&#x9;&#x9;startTagPosition = InStr(notes,&quot;&amp;lt;&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;endTagPosition = InStr(notes,&quot;&amp;lt;/&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;'Session.Output &quot;notes: &quot; &amp; notes &amp; &quot; startTagPosition: &quot; &amp; startTagPosition &amp; &quot; endTagPosition: &quot; &amp;endTagPosition&#xA;&#x9;&#x9;if startTagPosition &gt; 0 and endTagPosition &gt; startTagPosition then&#xA;&#x9;&#x9;&#x9;dim startContent&#xA;&#x9;&#x9;&#x9;startContent = startTagPosition + len(tag) + 8&#xA;&#x9;&#x9;&#x9;dim length &#xA;&#x9;&#x9;&#x9;length = endTagPosition - startContent&#xA;&#x9;&#x9;&#x9;getTagContent = mid(notes, startContent, length)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'Returns the value of the tagged value with the given name (case insensitive)&#xA;'If there is no tagged value with the given name, an empty string is returned&#xA;'This function can be used with anything that can have tagged values&#xA;function getTaggedValueValue(owner, taggedValueName)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;getTaggedValueValue = &quot;&quot;&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if lcase(taggedValueName) = lcase(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;getTaggedValueValue = taggedValue.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim returnTag as EA.TaggedValue&#xA;&#x9;set returnTag = nothing&#xA;&#x9;'check if a tag with that name alrady exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = tagName then&#xA;&#x9;&#x9;&#x9;set returnTag = taggedValue&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create new one if not found&#xA;&#x9;if returnTag is nothing then&#xA;&#x9;&#x9;set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function isRequireUserLockEnabled()&#xA;&#x9;dim reqUserLockToEdit&#xA;&#x9;'default is false&#xA;&#x9;reqUserLockToEdit = false&#xA;&#x9;'check if security is enabled&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;dim getReqUserLockSQL&#xA;&#x9;&#x9;getReqUserLockSQL =&#x9;&quot;select sc.Value from t_secpolicies sc &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where sc.Property = 'RequireLock' &quot;&#xA;&#x9;&#x9;dim xmlQueryResult&#xA;&#x9;&#x9;xmlQueryResult = Repository.SQLQuery(getReqUserLockSQL)&#xA;&#x9;&#x9;dim reqUserLockResults&#xA;&#x9;&#x9;reqUserLockResults = convertQueryResultToArray(xmlQueryResult)&#xA;&#x9;&#x9;if Ubound(reqUserLockResults) &gt; 0 then&#xA;&#x9;&#x9;&#x9;if reqUserLockResults(0,0) = &quot;1&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;reqUserLockToEdit = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;isRequireUserLockEnabled = reqUserLockToEdit&#xA;end function&#xA;&#xA;function copyDiagram(diagram, targetOwner)&#xA;&#x9;dim copiedDiagram as EA.Diagram&#xA;&#x9;'initialize at nothing&#xA;&#x9;set copiedDiagram = nothing&#xA;&#x9;'get the owner package&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;'check if we need to lock the package to clone it&#xA;&#x9;if isRequireUserLockEnabled() then&#xA;&#x9;&#x9;dim ownerOfOwnerPackage as EA.Package&#xA;&#x9;&#x9;if ownerPackage.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set ownerOfOwnerPackage = Repository.GetPackageByID(ownerPackage.ParentID)&#xA;&#x9;&#x9;&#x9;if not ownerOfOwnerPackage.ApplyUserLock() then&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we couldn't do it and then exit the function&#xA;&#x9;&#x9;&#x9;&#x9;msgbox &quot;Could not lock package &quot; &amp;  ownerPackage.Name &amp; &quot; in order to copy the diagram &quot; &amp; diagram.Name,vbError,&quot;Could not lock Package&quot;&#xA;&#x9;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'then actually clone the owner package&#xA;&#x9;dim clonedPackage as EA.Package&#xA;&#x9;set clonedPackage = ownerPackage.Clone()&#xA;'&#x9;if isRequireUserLockEnabled() then&#xA;'&#x9;&#x9;clonedPackage.ApplyUserLockRecursive true,true,true&#xA;'&#x9;end if&#xA;&#x9;'then get the diagram corresponding to the diagram to copy&#xA;&#x9;set copiedDiagram = getCorrespondingDiagram(clonedPackage,diagram)&#xA;&#x9;'set the owner of the copied diagram&#xA;&#x9;if targetOwner.ObjectType = otElement then&#xA;&#x9;&#x9;copiedDiagram.ParentID = targetOwner.ElementID&#xA;&#x9;else&#xA;&#x9;&#x9;copiedDiagram.PackageID = targetOwner.PackageID&#xA;&#x9;end if&#xA;&#x9;'save the update to the owner&#xA;&#x9;copiedDiagram.Update&#xA;&#x9;'delete the cloned package&#xA;&#x9;deletePackage(clonedPackage)&#xA;&#x9;'return the copied diagram&#xA;&#x9;set copyDiagram = copiedDiagram&#xA;end function&#xA;&#xA;function deletePackage(package)&#xA;&#x9;if package.ParentID &gt; 0 then&#xA;&#x9;&#x9;'get parent package&#xA;&#x9;&#x9;dim parentPackage as EA.Package&#xA;&#x9;&#x9;set parentPackage = Repository.GetPackageByID(package.ParentID )&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;'delete the pacakge&#xA;&#x9;&#x9;for i = parentPackage.Packages.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set currentPackage = parentPackage.Packages(i)&#xA;&#x9;&#x9;&#x9;if currentPackage.PackageID = package.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;parentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getCorrespondingDiagram(clonedPackage,diagram)&#xA;&#x9;dim correspondingDiagram as EA.Diagram&#xA;&#x9;dim candidateDiagrams&#xA;&#x9;dim getCandidateDiagramsSQL&#xA;&#x9;dim packageIDs&#xA;&#x9;packageIDs = getPackageTreeIDString(clonedPackage)&#xA;&#x9;getCandidateDiagramsSQL = &#x9;&quot;select d.Diagram_ID from t_diagram d &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where d.name = '&quot; &amp; diagram.Name &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and d.Package_ID in (&quot; &amp; packageIDs&amp; &quot;) &quot;&#xA;&#x9;set candidateDiagrams = getDiagramsFromQuery(getCandidateDiagramsSQL)&#xA;&#x9;'if there is only one candidate then that is the one we take&#xA;&#x9;if candidateDiagrams.Count = 1 then&#xA;&#x9;&#x9;set correspondingDiagram = candidateDiagrams(0)&#xA;&#x9;end if&#xA;&#x9;'if there are multiple candidates then we have to filter them&#xA;&#x9;'first create a dictionary with the diagrams and their owner&#xA;&#x9;dim candidateDiagramsDictionary&#xA;&#x9;set candidateDiagramsDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim currentDiagram&#xA;&#x9;for each currentDiagram in candidateDiagrams&#xA;&#x9;&#x9;'add the diagram and its owner to the dictionary&#xA;&#x9;&#x9;candidateDiagramsDictionary.Add currentDiagram, getOwner(diagram)&#xA;&#x9;next&#xA;&#x9;dim currentowner&#xA;&#x9;set currentOwner = nothing&#xA;&#x9;'filter the diagrams until we have only one diagram left&#xA;&#x9;set correspondingDiagram = filterDiagrams(candidateDiagramsDictionary,diagram, clonedPackage, currentOwner)&#xA;&#x9;'return the diagram&#xA;&#x9;set getCorrespondingDiagram = correspondingDiagram&#xA;end function&#xA;&#xA;function filterDiagrams(candidateDiagramsDictionary,diagram, clonedPackage, currentOwner)&#xA;&#x9;dim filteredDiagrams&#xA;&#x9;dim filteredDiagram as EA.Diagram&#xA;&#x9;'initialize at nothing&#xA;&#x9;set filteredDiagram = nothing&#xA;&#x9;set filteredDiagrams = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;if currentOwner is nothing then&#xA;&#x9;&#x9;set currentOwner = getOwner(diagram)&#xA;&#x9;end if&#xA;&#x9;'compare the diagrams and their owner with the current owner&#xA;&#x9;dim candidateDiagram as EA.Diagram&#xA;&#x9;dim candidateOwner&#xA;&#x9;for each candidateDiagram in candidateDiagramsDictionary.Keys&#xA;&#x9;&#x9;set candidateOwner = candidateDiagramsDictionary(candidateDiagram)&#xA;&#x9;&#x9;if candidateOwner.Name = currentOwner.Name then&#xA;&#x9;&#x9;&#x9;'add the diagram to the new list &#xA;&#x9;&#x9;&#x9;filteredDiagrams.Add candidateDiagram, getOwner(candidateOwner)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'check the number if we have reached he level of the cloned package, or if there is only one diagram left&#xA;&#x9;if filteredDiagrams.Count = 1 _&#xA;&#x9;OR currentOwner.ObjectType = otPackage AND currentOwner.ParentID = clonedPackage.PackageID then&#xA;&#x9;&#x9;'return the first one&#xA;&#x9;&#x9;set filteredDiagram = filteredDiagrams.Keys()(0)&#xA;&#x9;else&#xA;&#x9;&#x9;'go one level deeper to filter the diagrams&#xA;&#x9;&#x9;set currentOwner = getOwner(currentOwner)&#xA;&#x9;&#x9;set filteredDiagram = filterDiagrams(filteredDiagrams,diagram, clonedPackage, currentOwner)&#xA;&#x9;end if&#xA;&#x9;'return filtered diagram&#xA;&#x9;set filterDiagrams = filteredDiagram&#xA;end function&#xA;&#xA;function getOwner(item)&#xA;&#x9;dim owner&#xA;&#x9;select case item.ObjectType&#xA;&#x9;&#x9;case otElement,otDiagram,otPackage&#xA;&#x9;&#x9;&#x9;'if it has an element as owner then we return the element&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if item.ObjectType &lt;&gt; otPackage then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else we return the package (not for packages because then we have a root package that doesn't have an owner)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;'TODO: add other cases such as attributes and operations&#xA;&#x9;end select&#xA;&#x9;'return owner&#xA;&#x9;set getOwner = owner&#xA;end function&#xA;&#xA;Function lpad(strInput, length, character)&#xA;  lpad = Right(String(length, character) &amp; strInput, length)&#xA;end function&#xA;&#xA;function makeArrayFromArrayLists(arrayLists)&#xA;&#x9;dim returnArray()&#xA;&#x9;'get the dimensions&#xA;&#x9;dim x&#xA;&#x9;dim y&#xA;&#x9;x = arrayLists.Count&#xA;&#x9;y = arrayLists(0).Count&#xA;&#x9;'redim the array to the correct dimensions&#xA;&#x9;redim returnArray(x,y)&#xA;&#x9;dim i,j&#xA;&#x9;i = 0&#xA;&#x9;dim row&#xA;&#x9;dim field&#xA;&#x9;for each row in arrayLists&#xA;&#x9;&#x9;'reset j&#xA;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;for each field in row&#xA;&#x9;&#x9;&#x9;if IsObject(field) then&#xA;&#x9;&#x9;&#x9;&#x9;set returnArray(i,j) = field&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;returnArray(i,j) = field&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'return the array&#xA;&#x9;makeArrayFromArrayLists = returnArray&#xA;end function&#xA;&#xA;'EA uses a lot of key=value pairs in different types of fields (such as StyleEx etc.)&#xA;' each of them separated by a &quot;;&quot;&#xA;' this function will search for the value of the key and return the value if it is present in the given search string&#xA;function getValueForkey(searchString, key)&#xA;&#x9;dim returnValue&#xA;&#x9;returnValue = &quot;&quot;&#xA;&#x9;'first split int keyvalue pairs using &quot;;&quot;&#xA;&#x9;dim keyValuePairs&#xA;&#x9;keyValuePairs = split(searchString,&quot;;&quot;)&#xA;&#x9;'then loop the key value pairs&#xA;&#x9;dim keyValuePairString&#xA;&#x9;for each keyValuePairString in keyValuePairs&#xA;&#x9;&#x9;'and split them usign &quot;=&quot; as delimiter&#xA;&#x9;&#x9;dim keyValuePair&#xA;&#x9;&#x9;if instr(keyValuePairString,&quot;=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;keyValuePair = split(keyValuePairString,&quot;=&quot;)&#xA;&#x9;&#x9;&#x9;if UBound(keyValuePair) = 2 then&#xA;&#x9;&#x9;&#x9;&#x9;if keyValuePair(1) = key then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnValue = keyValuePair(1)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return the value&#xA;&#x9;getValueForkey = returnValue&#xA;end function&#xA;&#xA;function copyDiagram(diagram, targetOwner)&#xA;&#x9;if targetOwner.Objecttype = otPackage then&#xA;&#x9;&#x9;'create the new diagram&#xA;&#x9;&#x9;dim copiedDiagram as EA.Diagram&#xA;&#x9;&#x9;set copiedDiagram = targetOwner.Diagrams.AddNew(diagram.Name, diagram.Type)&#xA;&#x9;&#x9;copiedDiagram.Stereotype = diagram.Stereotype&#xA;&#x9;&#x9;copiedDiagram.StyleEx = diagram.StyleEx&#xA;&#x9;&#x9;copiedDiagram.Notes = diagram.Notes&#xA;&#x9;&#x9;copiedDiagram.ExtendedStyle = diagram.ExtendedStyle&#xA;&#x9;&#x9;copiedDiagram.ShowDetails = diagram.ShowDetails&#xA;&#x9;&#x9;copiedDiagram.ShowPackageContents = diagram.ShowPackageContents&#xA;&#x9;&#x9;copiedDiagram.Version = diagram.Version&#xA;&#x9;&#x9;copiedDiagram.Update 'hopefully this is enough&#xA;&#x9;&#x9;'recreate all diagramObjects&#xA;&#x9;&#x9;copyDiagramObjects copiedDiagram, diagram&#xA;&#x9;&#x9;'recreate all diagramLinks&#xA;&#x9;&#x9;copyDiagramLinks copiedDiagram, diagram&#xA;&#x9;else&#xA;&#x9;&#x9;msgbox &quot;copy diagram currently only supported for copying to packages&quot;&#xA;&#x9;end if&#xA;&#x9;'do we need to save the diagram here?&#xA;&#x9;'diagram.Update&#xA;&#x9;'return diagram&#xA;&#x9;set copyDiagram = copiedDiagram&#xA;end function &#xA;&#xA;function copyDiagramObjects(copiedDiagram, diagram)&#xA;&#x9;dim currentElement as EA.Element&#xA;&#x9;dim currentDiagramObject as EA.DiagramObject&#xA;&#x9;dim targetPackage as EA.Element&#xA;&#x9;set targetPackage = Repository.GetPackageByID(copiedDiagram.PackageID)&#xA;&#x9;for each currentDiagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentDiagramObject.ElementID)&#xA;&#x9;&#x9;'in case of diagram owned objects we need to copy them as well&#xA;&#x9;&#x9;select case currentElement.Type&#xA;&#x9;&#x9;&#x9;case &quot;Note&quot;,&quot;Boundary&quot;,&quot;Text&quot;&#xA;&#x9;&#x9;&#x9;set currentElement = copyOwnedElement(currentElement,targetPackage)&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;'copy the diagram object&#xA;&#x9;&#x9;dim newDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;set newDiagramObject = copiedDiagram.DiagramObjects.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;newDiagramObject.ElementID = currentDiagramObject.ElementID&#xA;&#x9;&#x9;newDiagramObject.top = currentDiagramObject.top&#xA;&#x9;&#x9;newDiagramObject.bottom = currentDiagramObject.bottom&#xA;&#x9;&#x9;newDiagramObject.left = currentDiagramObject.left&#xA;&#x9;&#x9;newDiagramObject.right = currentDiagramObject.right&#xA;&#x9;&#x9;newDiagramObject.fontSize = currentDiagramObject.fontSize&#xA;&#x9;&#x9;newDiagramObject.fontName = currentDiagramObject.fontName&#xA;&#x9;&#x9;newDiagramObject.FontBold = currentDiagramObject.FontBold&#xA;&#x9;&#x9;newDiagramObject.FontColor = currentDiagramObject.FontColor&#xA;&#x9;&#x9;newDiagramObject.FontItalic = currentDiagramObject.FontItalic&#xA;&#x9;&#x9;newDiagramObject.FontUnderline = currentDiagramObject.FontUnderline&#xA;&#x9;&#x9;newDiagramObject.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function copyDiagramLinks(copiedDiagram, diagram)&#xA;&#x9;dim currentDiagramLink as EA.DiagramLink&#xA;&#x9;for each currentDiagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;'copy each diagram link&#xA;&#x9;&#x9;dim newDiagramLink as EA.DiagramLink&#xA;&#x9;&#x9;set newDiagramLink = copiedDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;newDiagramLink.ConnectorID = currentDiagramLink.ConnectorID&#xA;&#x9;&#x9;newDiagramLink.Geometry = currentDiagramLink.Geometry&#xA;&#x9;&#x9;newDiagramLink.IsHidden = currentDiagramLink.IsHidden&#xA;&#x9;&#x9;newDiagramLink.LineStyle = currentDiagramLink.LineStyle&#xA;&#x9;&#x9;newDiagramLink.LineColor = currentDiagramLink.LineColor&#xA;&#x9;&#x9;newDiagramLink.LineWidth = currentDiagramLink.LineWidth&#xA;&#x9;&#x9;newDiagramLink.Path = currentDiagramLink.Path&#xA;&#x9;&#x9;newDiagramLink.HiddenLabels = currentDiagramLink.HiddenLabels&#xA;&#x9;&#x9;newDiagramLink.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function copyOwnedElement(currentElement, targetPackage)&#xA;&#x9;dim newOwnedElement as EA.Element&#xA;&#x9;set newOwnedElement = targetPackage.Elements.AddNew(currentElement.Name,currentElement.Type)&#xA;&#x9;newOwnedElement.Notes = currentElement.Notes&#xA;&#x9;newOwnedElement.Subtype = currentElement.Subtype&#xA;&#x9;newOwnedElement.StyleEx = currentElement.StyleEx&#xA;&#x9;newOwnedElement.Alias = currentElement.Alias&#xA;&#x9;newOwnedElement.Update 'hopefully this is enough&#xA;&#x9;'return the object&#xA;&#x9;set copyOwnedElement = newOwnedElement&#xA;end function&#xA;&#xA;function deletePackage(package)&#xA;&#x9;if package.ParentID &gt; 0 then&#xA;&#x9;&#x9;'get parent package&#xA;&#x9;&#x9;dim parentPackage as EA.Package&#xA;&#x9;&#x9;set parentPackage = Repository.GetPackageByID(package.ParentID )&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;'delete the pacakge&#xA;&#x9;&#x9;for i = parentPackage.Packages.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set currentPackage = parentPackage.Packages(i)&#xA;&#x9;&#x9;&#x9;if currentPackage.PackageID = package.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;parentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getOwner(item)&#xA;&#x9;dim owner&#xA;&#x9;select case item.ObjectType&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;case otElement,otDiagram&#xA;&#x9;&#x9;&#x9;'if it has an element as owner then we return the element&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if item.ObjectType &lt;&gt; otPackage then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else we return the package (not for packages because then we have a root package that doesn't have an owner)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;'TODO: add other cases such as attributes and operations&#xA;&#x9;end select&#xA;&#x9;'return owner&#xA;&#x9;set getOwner = owner&#xA;end function&#xA;&#xA;&#xA;'put the given value onto the clipboard&#xA;function putOnClipBoard(stringValue)&#xA;&#x9;dim WshShell&#xA;&#x9;Set WshShell = CreateObject(&quot;WScript.Shell&quot;)&#xA;&#x9;WshShell.Run &quot;cmd.exe /c echo &quot; &amp; stringValue &amp; &quot; | clip&quot;, 0, TRUE&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="86"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{38AEA982-B913-40FE-B65E-7C24C315E021}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Messaging"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="87"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AF747763-5EBC-4255-BF8A-08909562F21B}"/>
			<Column name="ScriptAuthor" value="{38AEA982-B913-40FE-B65E-7C24C315E021}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Messaging]&#xA;'[group=Messaging]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;!INC Messaging.Message&#xA;!INC Messaging.MessageNode&#xA;!INC Messaging.MessageValidationRule"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="88"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A5D437F0-3C4F-4199-9462-D5115D148DB1}"/>
			<Column name="ScriptAuthor" value="{38AEA982-B913-40FE-B65E-7C24C315E021}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Message&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Messaging]&#xA;'[group=Messaging]&#xA;&#xA;!INC Utils.Include&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: A wrapper class for a message node in a messaging structure&#xA;' Date: 2017-03-14&#xA;&#xA;Class Message&#xA;&#x9;'private variables&#xA;&#x9;Private m_Name&#xA;&#x9;Private m_RootNode&#xA;&#x9;Private m_MessageDepth&#xA;&#x9;Private m_BaseTypes&#xA;&#x9;Private m_Enumerations&#xA;&#x9;Private m_Prefix&#xA;&#x9;private m_ValidationRules&#xA;&#xA;&#x9;'constructor&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;&quot;&#xA;&#x9;&#x9;set m_RootNode = nothing&#xA;&#x9;&#x9;m_MessageDepth = 0&#xA;&#x9;&#x9;set m_BaseTypes = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;set m_Enumerations = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;m_Prefix = &quot;&quot;&#xA;&#x9;&#x9;set m_ValidationRules = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;'public properties&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' RootNode property.&#xA;&#x9;Public Property Get RootNode&#xA;&#x9;  set RootNode = m_RootNode&#xA;&#x9;End Property&#xA;&#x9;Public Property Let RootNode(value)&#xA;&#x9;  set m_RootNode = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' MessageDepth property.&#xA;&#x9;Public Property Get MessageDepth&#xA;&#x9;&#x9;if m_MessageDepth = 0 then&#xA;&#x9;&#x9;&#x9;m_MessageDepth = getMessageDepth()&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;MessageDepth = m_MessageDepth&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' BaseTypes property.&#xA;&#x9;Public Property Get BaseTypes&#xA;&#x9;  set BaseTypes = m_BaseTypes&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Enumerations property.&#xA;&#x9;Public Property Get Enumerations&#xA;&#x9;  set Enumerations = m_Enumerations&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Prefix property.&#xA;&#x9;Public Property Get Prefix&#xA;&#x9;  Prefix = m_Prefix&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ValidationRules property.&#xA;&#x9;Public Property Get ValidationRules&#xA;&#x9;  set ValidationRules = m_ValidationRules&#xA;&#x9;End Property&#xA;&#x9;Public Property Let ValidationRules(value)&#xA;&#x9;  set m_ValidationRules = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;public function loadMessage(eaRootNodeElement)&#xA;&#x9;&#x9;'set the name of the message&#xA;&#x9;&#x9;'the name of the message is equal to the name of the owning package&#xA;&#x9;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;&#x9;set ownerPackage = Repository.GetPackageByID(eaRootNodeElement.PackageID)&#xA;&#x9;&#x9;me.Name = ownerPackage.Name&#xA;&#x9;&#x9;'set the prefix&#xA;&#x9;&#x9;m_Prefix = getPrefix(ownerPackage)&#xA;&#x9;&#x9;'create the root node&#xA;&#x9;&#x9;me.RootNode = new MessageNode&#xA;&#x9;&#x9;me.RootNode.intitializeWithSource eaRootNodeElement, nothing, &quot;1..1&quot;, nothing, nothing&#xA;&#x9;&#x9;setBaseTypesAndEnumerations(me.RootNode)&#xA;&#x9;&#x9;'link the message validation rules&#xA;&#x9;&#x9;getMessageValidationRules()&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getPrefix(ownerPackage)&#xA;&#x9;&#x9;getPrefix = &quot;&quot;&#xA;&#x9;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#x9;for each taggedValue in ownerPackage.Element.TaggedValues&#xA;&#x9;&#x9;&#x9;if taggedValue.Name = &quot;targetNamespacePrefix&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;getPrefix = taggedValue.Value&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getMessageValidationRules()&#xA;&#x9;&#x9;dim getRulesElementsSQL&#xA;&#x9;&#x9;getRulesElementsSQL = &#x9;&quot;select r.* from ((t_object o                                     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector c on (c.End_Object_ID = o.Object_ID      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and c.Connector_Type = 'Dependency' ))&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object r on (c.Start_Object_ID = r.Object_ID       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and r.Object_Type = 'Test'                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and r.Stereotype = 'Message Test Rule'))  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Object_ID = &quot; &amp; me.RootNode.ElementID&#xA;&#x9;&#x9;dim rulesElements&#xA;&#x9;&#x9;set rulesElements = getElementsFromQuery(getRulesElementsSQL)&#xA;&#x9;&#x9;dim rulesElement&#xA;&#x9;&#x9;for each rulesElement in rulesElements&#xA;&#x9;&#x9;&#x9;dim validationRule&#xA;&#x9;&#x9;&#x9;set validationRule = new MessageValidationRule&#xA;&#x9;&#x9;&#x9;validationRule.initialiseWithTestElement(rulesElement)&#xA;&#x9;&#x9;&#x9;m_ValidationRules.Add validationRule&#xA;&#x9;&#x9;&#x9;'find the node this rule applies to ad add it to that node&#xA;&#x9;&#x9;&#x9;me.RootNode.linkRuletoNode validationRule, validationRule.Path&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;private function setBaseTypesAndEnumerations(messageNode)&#xA;&#x9;&#x9;'check if messageNode is leafNode&#xA;&#x9;&#x9;if messageNode.IsLeafNode then&#xA;&#x9;&#x9;&#x9;dim foundEnumeration&#xA;&#x9;&#x9;&#x9;foundEnumeration = false&#xA;&#x9;&#x9;&#x9;'check if the typeElement is an enumeration&#xA;&#x9;&#x9;&#x9;if not messageNode.TypeElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;if messageNode.TypeElement.Type = &quot;Enumeration&quot;_&#xA;&#x9;&#x9;&#x9;&#x9;OR messageNode.TypeElement.Stereotype = &quot;Enumeration&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;foundEnumeration = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not me.Enumerations.Exists(messageNode.TypeName) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add to enumerations list&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;me.Enumerations.Add messageNode.TypeName, messageNode.TypeElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'if we haven't found an enumeration we add the type to the basetypes&#xA;&#x9;&#x9;&#x9;if not foundEnumeration _&#xA;&#x9;&#x9;&#x9;AND not me.BaseTypes.Exists(messageNode.TypeName) then&#xA;&#x9;&#x9;&#x9;&#x9;'add to BaseTypes list&#xA;&#x9;&#x9;&#x9;&#x9;me.BaseTypes.Add messageNode.TypeName, messageNode.TypeElement&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'not a leafnode, check the childnodes&#xA;&#x9;&#x9;&#x9;dim childNode&#xA;&#x9;&#x9;&#x9;for each childNode in messageNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;setBaseTypesAndEnumerations childNode &#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'create an arraylist of arraylists with the details of this message&#xA;&#x9;public function createOuput()&#xA;&#x9;&#x9;dim outputList&#xA;&#x9;&#x9;'create empty list for current path&#xA;&#x9;&#x9;dim currentPath&#xA;&#x9;&#x9;set currentPath = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'start with the rootnode&#xA;&#x9;&#x9;set outputList = me.RootNode.getOuput(1,currentPath,me.MessageDepth)&#xA;&#x9;&#x9;'return outputlist&#xA;&#x9;&#x9;set createOuput = outputList&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'create an arraylist of arraylists with the details of this message including he headers&#xA;&#x9;public function createFullOutput()&#xA;&#x9;&#x9;dim fullOutput&#xA;&#x9;&#x9;dim headers&#xA;&#x9;&#x9;set fullOutput = me.createOuput()&#xA;&#x9;&#x9;set headers = getHeaders()&#xA;&#x9;&#x9;'insert the headers before the rest of the output&#xA;&#x9;&#x9;fullOutput.Insert 0, headers&#xA;&#x9;&#x9;set createFullOutput = fullOutput&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'gets the maximum depth of this message&#xA;&#x9;private function getMessageDepth()&#xA;&#x9;&#x9;dim message_depth&#xA;&#x9;&#x9;message_depth = 0&#xA;&#x9;&#x9;message_depth = me.RootNode.getDepth(message_depth)&#xA;&#x9;&#x9;getMessageDepth = message_depth&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getHeaders()&#xA;&#x9;&#x9;dim headers&#xA;&#x9;&#x9;set headers = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'first order&#xA;&#x9;&#x9;headers.add(&quot;Order&quot;)&#xA;&#x9;&#x9;'then Message&#xA;&#x9;&#x9;headers.Add(&quot;Message&quot;)&#xA;&#x9;&#x9;'add the levels&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;for i = 1 to me.MessageDepth -1 step +1&#xA;&#x9;&#x9;&#x9;headers.add(&quot;L&quot; &amp; i)&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'Cardinality&#xA;&#x9;&#x9;headers.Add(&quot;Cardinality&quot;)&#xA;&#x9;&#x9;'Type&#xA;&#x9;&#x9;headers.Add(&quot;Type&quot;)&#xA;&#x9;&#x9;'Test Rule ID&#xA;&#x9;&#x9;headers.Add(&quot;Test Rule ID&quot;)&#xA;&#x9;&#x9;'Test Rule&#xA;&#x9;&#x9;headers.Add(&quot;Test Rule&quot;)&#xA;&#x9;&#x9;'Error Reason&#xA;&#x9;&#x9;headers.Add(&quot;Error Reason&quot;)&#xA;&#x9;&#x9;'return the headers&#xA;&#x9;&#x9;set getHeaders = headers&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getTypesHeaders()&#xA;&#x9;&#x9;dim headers&#xA;&#x9;&#x9;set headers = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'Category&#xA;&#x9;&#x9;headers.Add(&quot;Category&quot;) 'Enumeration or BaseType '0&#xA;&#x9;&#x9;'Type&#xA;&#x9;&#x9;headers.Add(&quot;Type&quot;) '1&#xA;&#x9;&#x9;'Code&#xA;&#x9;&#x9;headers.Add(&quot;Code&quot;) '2&#xA;&#x9;&#x9;'Description&#xA;&#x9;&#x9;headers.Add(&quot;Description&quot;) '3&#xA;&#x9;&#x9;'Restriction Base&#xA;&#x9;&#x9;headers.Add(&quot;Restriction Base&quot;) '4&#xA;&#x9;&#x9;'fractionDigits&#xA;&#x9;&#x9;headers.Add(&quot;fractionDigits&quot;) '5&#xA;&#x9;&#x9;'length&#xA;&#x9;&#x9;headers.Add(&quot;length&quot;) '6&#xA;&#x9;&#x9;'maxExclusive&#xA;&#x9;&#x9;headers.Add(&quot;maxExclusive&quot;) '7&#xA;&#x9;&#x9;'maxInclusive&#xA;&#x9;&#x9;headers.Add(&quot;maxInclusive&quot;) '8&#xA;&#x9;&#x9;'maxLength&#xA;&#x9;&#x9;headers.Add(&quot;maxLength&quot;)'9&#xA;&#x9;&#x9;'minExclusive&#xA;&#x9;&#x9;headers.Add(&quot;minExclusive&quot;) '10&#xA;&#x9;&#x9;'minInclusive&#xA;&#x9;&#x9;headers.Add(&quot;minInclusive&quot;) '11&#xA;&#x9;&#x9;'minLength&#xA;&#x9;&#x9;headers.Add(&quot;minLength&quot;) '12&#xA;&#x9;&#x9;'pattern&#xA;&#x9;&#x9;headers.Add(&quot;pattern&quot;) '13&#xA;&#x9;&#x9;'totalDigits&#xA;&#x9;&#x9;headers.Add(&quot;totalDigits&quot;) '14&#xA;&#x9;&#x9;'whiteSpace&#xA;&#x9;&#x9;headers.Add(&quot;whiteSpace&quot;) '15&#xA;&#x9;&#x9;'return the headers&#xA;&#x9;&#x9;set getTypesHeaders = headers&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;Public function getMessageTypes()&#xA;&#x9;&#x9;dim types&#xA;&#x9;&#x9;set types = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'first add the headers&#xA;&#x9;&#x9;dim typeHeaders&#xA;&#x9;&#x9;set typeHeaders = getTypesHeaders()&#xA;&#x9;&#x9;types.add typeHeaders&#xA;&#x9;&#x9;'add base types&#xA;&#x9;&#x9;dim baseTypeName&#xA;&#x9;&#x9;dim baseTypeElement&#xA;&#x9;&#x9;dim elementOrder&#xA;&#x9;&#x9;elementOrder = 0&#xA;&#x9;&#x9;for each baseTypeName in me.BaseTypes.Keys&#xA;&#x9;&#x9;&#x9;elementOrder = elementOrder + 1&#xA;&#x9;&#x9;&#x9;set baseTypeElement = me.BaseTypes.Item(baseTypeName)&#xA;&#x9;&#x9;&#x9;'first add the properties for the base type itself&#xA;&#x9;&#x9;&#x9;dim baseTypeProperties&#xA;&#x9;&#x9;&#x9;set baseTypeProperties = getBaseTypeProperties(baseTypeElement)&#xA;&#x9;&#x9;&#x9;types.add baseTypeProperties&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'add enumerations&#xA;&#x9;&#x9;dim enumName&#xA;&#x9;&#x9;dim enumElement&#xA;&#x9;&#x9;for each enumName in me.Enumerations.Keys&#xA;&#x9;&#x9;&#x9;elementOrder = elementOrder + 1&#xA;&#x9;&#x9;&#x9;set enumElement = me.Enumerations.Item(enumName)&#xA;&#x9;&#x9;&#x9;'add all the literal values&#xA;&#x9;&#x9;&#x9;dim enumLiteral as EA.Attribute&#xA;&#x9;&#x9;&#x9;for each enumLiteral in enumElement.Attributes&#xA;&#x9;&#x9;&#x9;&#x9;elementOrder = elementOrder + 1&#xA;&#x9;&#x9;&#x9;&#x9;dim enumLiteralProperties&#xA;&#x9;&#x9;&#x9;&#x9;set enumLiteralProperties = getEnumLiteralProperties(enumElement,enumLiteral)&#xA;&#x9;&#x9;&#x9;&#x9;types.add enumLiteralProperties&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'return the types&#xA;&#x9;&#x9;set getMessageTypes = types&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;Private function getEnumLiteralProperties(enumElement,enumLiteral)&#xA;&#x9;&#x9;dim enumLiteralProperties &#xA;&#x9;&#x9;set enumLiteralProperties = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'first fill the array with empty strings&#xA;&#x9;&#x9;fillArrayList enumLiteralProperties, &quot;&quot;, 16&#xA;&#x9;&#x9;'category&#xA;&#x9;&#x9;enumLiteralProperties(0) = &quot;Enumeration&quot;&#xA;&#x9;&#x9;'Type&#xA;&#x9;&#x9;enumLiteralProperties(1) = enumElement.Name&#xA;&#x9;&#x9;'Code&#xA;&#x9;&#x9;enumLiteralProperties(2) = enumLiteral.Name&#xA;&#x9;&#x9;'Description&#xA;&#x9;&#x9;enumLiteralProperties(3) = enumLiteral.Alias&#xA;&#x9;&#x9;'return the properties&#xA;&#x9;&#x9;set getEnumLiteralProperties = enumLiteralProperties&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;Private function getBaseTypeProperties(baseType)&#xA;&#x9;&#x9;dim baseTypeProperties &#xA;&#x9;&#x9;set baseTypeProperties = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'first fill the array with empty strings&#xA;&#x9;&#x9;fillArrayList baseTypeProperties, &quot;&quot;, 16&#xA;&#x9;&#x9;'category&#xA;&#x9;&#x9;baseTypeProperties(0) = &quot;BaseType&quot;&#xA;&#x9;&#x9;'Type&#xA;&#x9;&#x9;baseTypeProperties(1) = baseType.Name&#xA;&#x9;&#x9;'Code&#xA;&#x9;&#x9;baseTypeProperties(2) = &quot;&quot; 'emtpty for the base type&#xA;&#x9;&#x9;'Description&#xA;&#x9;&#x9;baseTypeProperties(3) = &quot;&quot; 'emtpty for the base type&#xA;&#x9;&#x9;'Restriction Base&#xA;&#x9;&#x9;dim derivedFrom&#xA;&#x9;&#x9;derivedFrom = getDerivedFrom(baseType)&#xA;&#x9;&#x9;baseTypeProperties(4) = derivedFrom&#xA;&#x9;&#x9;'add properties based on the tagged values&#xA;&#x9;&#x9;dim tv as EA.TaggedValue&#xA;&#x9;&#x9;for each tv in baseType.TaggedValues&#xA;&#x9;&#x9;&#x9;select case tv.Name&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;fractionDigits&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(5) = tv.Value'5&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;length&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(6) = tv.Value '6&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;maxExclusive&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(7) = tv.Value '7&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;maxInclusive&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(8) = tv.Value '8&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;maxLength&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(9) = tv.Value '8&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;minExclusive&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(10) = tv.Value '10&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;minInclusive&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(11) = tv.Value '11&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;minLength&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(12) = tv.Value '12&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;pattern&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(13) = tv.Value '13&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;totalDigits&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(14) = tv.Value '14&#xA;&#x9;&#x9;&#x9;&#x9;case &quot;whiteSpace&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;baseTypeProperties(15) = tv.Value'15&#xA;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'return the base type properties&#xA;&#x9;&#x9;set getBaseTypeProperties = baseTypeProperties&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function fillArrayList(listToFill, fillValue, count)&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;for i = 0 to count -1 step +1&#xA;&#x9;&#x9;&#x9;listToFill.Add fillValue&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getDerivedFrom(baseType)&#xA;&#x9;&#x9;'the base type either inherits from a standard XSD type, or has it stored separately (gentype?)&#xA;&#x9;&#x9;dim baseTypeBaseTypes &#xA;&#x9;&#x9;set baseTypeBaseTypes = baseType.BaseClasses&#xA;&#x9;&#x9;dim derivedFrom as EA.Element&#xA;&#x9;&#x9;set derivedFrom = nothing&#xA;&#x9;&#x9;'get the first base class&#xA;&#x9;&#x9;for each derivedFrom in baseType.BaseClasses&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if not derivedFrom is nothing then&#xA;&#x9;&#x9;&#x9;getDerivedFrom = derivedFrom.Name&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'if there is no real inheritance link then the link is stored in the genLinks property as parent=&lt;name&gt;;&#xA;&#x9;&#x9;&#x9;getDerivedFrom = getValueForkey(baseType.Genlinks, &quot;parent&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if getDerivedFrom = &quot;anySimpleType&quot; then&#xA;&#x9;&#x9;&#x9;'we are not interested in &quot;anySimpletype&quot;&#xA;&#x9;&#x9;&#x9;getDerivedFrom = &quot;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="89"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{77280461-41E1-4111-97E1-EF7CB9175088}"/>
			<Column name="ScriptAuthor" value="{38AEA982-B913-40FE-B65E-7C24C315E021}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MessageNode&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Messaging]&#xA;'[group=Messaging]&#xA;&#xA;!INC Utils.Include&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;' Author: Geert Bellekens&#xA;' Purpose: A wrapper class for a message node in a messaging structure&#xA;' Date: 2017-03-14&#xA;&#xA;Class MessageNode &#xA;&#x9;'private variables&#xA;&#x9;Private m_Name&#xA;&#x9;Private m_TypeElement&#xA;&#x9;Private m_TypeName&#xA;&#x9;Private m_Multiplicity&#xA;&#x9;Private m_ParentNode&#xA;&#x9;Private m_ChildNodes&#xA;&#x9;Private m_SourceAttribute&#xA;&#x9;Private m_SourceAssociationEnd&#xA;&#x9;Private m_SourceElement&#xA;&#x9;Private m_ValidationRules&#xA;&#x9;Private m_IsLeafNode&#xA;&#xA;&#x9;'constructor&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;&quot;&#xA;&#x9;&#x9;set m_TypeElement = nothing&#xA;&#x9;&#x9;m_TypeName = &quot;&quot;&#xA;&#x9;&#x9;m_Multiplicity = &quot;&quot;&#xA;&#x9;&#x9;set m_ParentNode = nothing&#xA;&#x9;&#x9;set m_ChildNodes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;set m_SourceAttribute = nothing&#xA;&#x9;&#x9;set m_SourceAssociationEnd = nothing&#xA;&#x9;&#x9;set m_SourceElement = nothing&#xA;&#x9;&#x9;set m_ValidationRules = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;m_IsLeafNode = false&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;'public properties&#xA;&#x9;&#xA;&#x9;' IsLeafNode property.&#xA;&#x9;Public Property Get IsLeafNode&#xA;&#x9;&#x9;IsLeafNode = m_IsLeafNode&#xA;&#x9;End Property&#xA;&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;&#x9;Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;&#x9;m_Name = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' TypeElement property.&#xA;&#x9;Public Property Get TypeElement&#xA;&#x9;&#x9;set TypeElement = m_TypeElement&#xA;&#x9;End Property&#xA;&#x9;Public Property Let TypeElement(value)&#xA;&#x9;&#x9;set m_TypeElement = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' ElementID property.&#xA;&#x9;Public Property Get ElementID&#xA;&#x9;&#x9;if not me.TypeElement is nothing then&#xA;&#x9;&#x9;&#x9;ElementID = me.TypeElement.ElementID&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ElementID = 0&#xA;&#x9;&#x9;end if&#xA;&#x9;End Property&#xA;&#xA;&#x9;' TypeName property&#xA;&#x9;&#xA;&#x9;Public Property Get TypeName&#xA;&#x9;&#x9;if not me.TypeElement is nothing then&#xA;&#x9;&#x9;&#x9;TypeName = me.TypeElement.Name&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;TypeName = m_TypeName&#xA;&#x9;&#x9;end if &#xA;&#x9;End Property&#xA;&#x9;Public Property Let TypeName(value)&#xA;&#x9;&#x9;m_TypeName = value&#xA;&#x9;&#x9;'if the typename if different from the TypeElement name then we remove the type Element&#xA;&#x9;&#x9;if not me.TypeElement is nothing then&#xA;&#x9;&#x9;&#x9;if value &lt;&gt; me.TypeElement then&#xA;&#x9;&#x9;&#x9;&#x9;me.TypeElement = nothing&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Multiplicity property.&#xA;&#x9;' only directly used if the source is element, else we use the Attribute or AssociationEnd multiplicity&#xA;&#x9;Public Property Get Multiplicity&#xA;&#x9;&#x9;dim lower&#xA;&#x9;&#x9;dim upper&#xA;&#x9;&#x9;dim returnedMultiplicity&#xA;&#x9;&#x9;if not me.SourceElement is nothing then&#xA;&#x9;&#x9;&#x9;returnedMultiplicity = m_Multiplicity&#xA;&#x9;&#x9;elseif not me.sourceAttribute is nothing then&#xA;&#x9;&#x9;&#x9;returnedMultiplicity = determineMultiplicity(me.sourceAttribute.LowerBound,me.sourceAttribute.UpperBound, &quot;1&quot;, &quot;1&quot;)&#xA;&#x9;&#x9;elseif not me.sourceAssociationEnd is nothing then&#xA;&#x9;&#x9;&#x9;returnedMultiplicity = sourceAssociationEnd.Cardinality&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'return the actual value&#xA;&#x9;&#x9;Multiplicity = returnedMultiplicity&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Multiplicity(value)&#xA;&#x9;&#x9;if not me.SourceElement is nothing then&#xA;&#x9;&#x9;&#x9;m_Multiplicity = value&#xA;&#x9;&#x9;end if&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;private function determineMultiplicity(lower,upper,defaultLower, defaultUpper)&#xA;&#x9;&#x9;'check to make sur the values are filled in and replace them with the default values if not the case&#xA;&#x9;&#x9;if len(lower) = 0 then&#xA;&#x9;&#x9;&#x9;lower = defaultLower&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if len(upper) = 0 then&#xA;&#x9;&#x9;&#x9;upper = defaultUpper&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'create the multiplicity string&#xA;&#x9;&#x9;determineMultiplicity = lower &amp; &quot;..&quot; &amp; upper&#xA;&#x9;end function&#xA;&#x9;' ParentNode property.&#xA;&#x9;Public Property Get ParentNode&#xA;&#x9;&#x9;set ParentNode = m_ParentNode&#xA;&#x9;End Property&#xA;&#x9;Public Property Let ParentNode(value)&#xA;&#x9;&#x9;set m_ParentNode = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' ChildNodes property.&#xA;&#x9;Public Property Get ChildNodes&#xA;&#x9;&#x9;set ChildNodes = m_ChildNodes&#xA;&#x9;End Property&#xA;&#x9;Public Property Let ChildNodes(value)&#xA;&#x9;&#x9;set m_ChildNodes = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' SourceAttribute property.&#xA;&#x9;Public Property Get SourceAttribute&#xA;&#x9;&#x9;set SourceAttribute = m_SourceAttribute&#xA;&#x9;End Property&#xA;&#x9;Public Property Let SourceAttribute(value)&#xA;&#x9;&#x9;set m_SourceAttribute = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' SourceAssociationEnd property.&#xA;&#x9;Public Property Get SourceAssociationEnd&#xA;&#x9;&#x9;set SourceAssociationEnd = m_SourceAssociationEnd&#xA;&#x9;End Property&#xA;&#x9;Public Property Let SourceAssociationEnd(value)&#xA;&#x9;&#x9;set m_SourceAssociationEnd = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' SourceElement property.&#xA;&#x9;Public Property Get SourceElement&#xA;&#x9;&#x9;set SourceElement = m_SourceElement&#xA;&#x9;End Property&#xA;&#x9;Public Property Let SourceElement(value)&#xA;&#x9;&#x9;set m_SourceElement = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ValidationRules property.&#xA;&#x9;Public Property Get ValidationRules&#xA;&#x9;&#x9;set ValidationRules = m_ValidationRules&#xA;&#x9;End Property&#xA;&#x9;Public Property Let ValidationRules(value)&#xA;&#x9;&#x9;set m_ValidationRules = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;Public function linkRuletoNode(validationRule, path)&#xA;&#x9;&#x9;if path.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;if path.Count = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;'link it to this node&#xA;&#x9;&#x9;&#x9;&#x9;m_ValidationRules.Add validationRule&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'go deeper&#xA;&#x9;&#x9;&#x9;&#x9;dim childNode&#xA;&#x9;&#x9;&#x9;&#x9;for each childNode in me.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim newPath&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set newPath = nothing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if path(1) = childNode.Name then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if newPath is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newPath = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'create new path removing the first part&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for i = 1 to path.Count -1 step +1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newPath.Add path(i)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'go one level deeper&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childNode.linkRuletoNode validationRule, newPath&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'public functions&#xA;&#x9;public function intitializeWithSource(source,sourceConnector,in_multiplicity,in_validationRule,in_parentNode)&#xA;&#x9;&#x9;'set validationRule&#xA;&#x9;&#x9;if not in_validationRule is nothing then&#xA;&#x9;&#x9;&#x9;me.ValidationRule = in_validationRule&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set parentNode&#xA;&#x9;&#x9;if not in_parentNode is nothing then&#xA;&#x9;&#x9;&#x9;me.ParentNode = in_parentNode&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'check if source is Element, Atttribute, or AssociationEnd&#xA;&#x9;&#x9;select case source.ObjectType&#xA;&#x9;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;&#x9;me.SourceElement = source&#xA;&#x9;&#x9;&#x9;&#x9;me.Name = source.Name&#xA;&#x9;&#x9;&#x9;&#x9;me.TypeElement = source&#xA;&#x9;&#x9;&#x9;&#x9;me.Multiplicity = in_multiplicity&#xA;&#x9;&#x9;&#x9;case otAttribute&#xA;&#x9;&#x9;&#x9;&#x9;me.SourceAttribute = source&#xA;&#x9;&#x9;&#x9;&#x9;me.Name = source.Name&#xA;&#x9;&#x9;&#x9;&#x9;dim attributeTypeObject&#xA;&#x9;&#x9;&#x9;&#x9;set attributeTypeObject = nothing&#xA;&#x9;&#x9;&#x9;&#x9;if source.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set attributeTypeObject = Repository.GetElementByID(source.ClassifierID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;me.TypeElement = attributeTypeObject&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;me.TypeName = source.Type&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;case otConnectorEnd&#xA;&#x9;&#x9;&#x9;&#x9;me.SourceAssociationEnd = source&#xA;&#x9;&#x9;&#x9;&#x9;if len(source.Role) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;me.Name = source.Role&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim endObject as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the end object and use that name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if source.End = &quot;Supplier&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set endObject = Repository.GetElementByID(sourceConnector.SupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set endObject = Repository.GetElementByID(sourceConnector.ClientID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not endObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;me.Name = endObject.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;me.TypeElement = endObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;'set the isLeafNode property&#xA;&#x9;&#x9;setIsLeafNode&#xA;&#x9;&#x9;'then load the child nodes&#xA;&#x9;&#x9;if not me.IsLeafNode then&#xA;&#x9;&#x9;&#x9;loadChildNodes&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'Loads the child nodes for this message (resursively until we have reached all the leaves)&#xA;&#x9;public function loadChildNodes()&#xA;&#x9;&#x9;'first remember the list of parent elements&#xA;&#x9;&#x9;dim parents&#xA;&#x9;&#x9;set parents = getParents(nothing)&#xA;&#x9;&#x9;'TODO: load in correct order?&#xA;&#x9;&#x9;'load attributes&#xA;&#x9;&#x9;loadAllAttributeNodes parents &#xA;&#x9;&#x9;'load associations&#xA;&#x9;&#x9;'load nested classes?&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'gets the maximum depth of this node and add that to the given depth&#xA;&#x9;public function getDepth(in_depth)&#xA;&#x9;&#x9;dim childNode&#xA;&#x9;&#x9;dim maxDebth&#xA;&#x9;&#x9;maxDebth = in_depth + 1&#xA;&#x9;&#x9;for each childNode in me.ChildNodes&#xA;&#x9;&#x9;&#x9;dim currentDepth&#xA;&#x9;&#x9;&#x9;currentDepth = childNode.getDepth(in_depth +1)&#xA;&#x9;&#x9;&#x9;if currentDepth &gt; maxDebth then&#xA;&#x9;&#x9;&#x9;&#x9;maxDebth = currentDepth&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;getDepth = maxDebth&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'gets the output format for this node and its childnodes&#xA;&#x9;public function getOuput(current_order,currentPath,messageDepth)&#xA;&#x9;&#x9;'create the output&#xA;&#x9;&#x9;dim nodeOutputList&#xA;&#x9;&#x9;set nodeOutputList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;dim currentNodeList&#xA;&#x9;&#x9;'get the list for this node&#xA;&#x9;&#x9;if me.ValidationRules.Count = 0 then&#xA;&#x9;&#x9;&#x9;set currentNodeList = getThisNodeOutput(current_order,currentPath, messageDepth,nothing)&#xA;&#x9;&#x9;&#x9;'up or the order number&#xA;&#x9;&#x9;&#x9;current_order = current_order + 1&#xA;&#x9;&#x9;&#x9;'add the list for this node to the output&#xA;&#x9;&#x9;&#x9;nodeOutputList.Add currentNodeList&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;dim currentRule&#xA;&#x9;&#x9;&#x9;for each currentRule in me.ValidationRules&#xA;&#x9;&#x9;&#x9;&#x9;set currentNodeList = getThisNodeOutput(current_order,currentPath, messageDepth,currentRule)&#xA;&#x9;&#x9;&#x9;&#x9;'up or the order number&#xA;&#x9;&#x9;&#x9;&#x9;current_order = current_order + 1&#xA;&#x9;&#x9;&#x9;&#x9;'add the list for this node to the output&#xA;&#x9;&#x9;&#x9;&#x9;nodeOutputList.Add currentNodeList&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add this node to the currentPath&#xA;&#x9;&#x9;dim mycurrentpath&#xA;&#x9;&#x9;set myCurrentPath = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;myCurrentPath.AddRange(currentPath)&#xA;&#x9;&#x9;myCurrentPath.Add me.Name&#xA;&#x9;&#x9;'get the output for the child nodes&#xA;&#x9;&#x9;dim childNode&#xA;&#x9;&#x9;for each childNode in me.ChildNodes&#xA;&#x9;&#x9;&#x9;dim childOutPut&#xA;&#x9;&#x9;&#x9;set childOutPut = childNode.getOuput(current_order,myCurrentPath,messageDepth)&#xA;&#x9;&#x9;&#x9;nodeOutputList.AddRange(childOutPut)&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'return list&#xA;&#x9;&#x9;set getOuput = nodeOutputList&#xA;&#x9;end function&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;&#x9;private function getThisNodeOutput(current_order,currentPath, messageDepth,validationRule)&#xA;&#x9;&#x9;'get the list for this node&#xA;&#x9;&#x9;dim currentNodeList&#xA;&#x9;&#x9;set currentNodeList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'add the order to the list&#xA;&#x9;&#x9;currentNodeList.Add lpad(current_order,4,&quot;0&quot;)&#xA;&#x9;&#x9;'add the current Path tot he node list&#xA;&#x9;&#x9;currentNodeList.AddRange(currentPath)&#xA;&#x9;&#x9;'add this name of to the list&#xA;&#x9;&#x9;currentNodeList.Add me.Name&#xA;&#x9;&#x9;'add empty fields until the messageDepth&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;for i = currentNodeList.Count -1 to messageDepth -1  step +1&#xA;&#x9;&#x9;&#x9;currentNodeList.Add &quot;&quot;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'then add the other fields&#xA;&#x9;&#x9;currentNodeList.Add me.Multiplicity&#xA;&#x9;&#x9;'only add the name of the type if this is a leaf node&#xA;&#x9;&#x9;if me.IsLeafNode then&#xA;&#x9;&#x9;&#x9;currentNodeList.Add me.TypeName&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;currentNodeList.Add &quot;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add the rules section&#xA;&#x9;&#x9;if not validationRule is nothing then&#xA;&#x9;&#x9;&#x9;currentNodeList.Add validationRule.RuleId&#xA;&#x9;&#x9;&#x9;currentNodeList.Add validationRule.Name&#xA;&#x9;&#x9;&#x9;currentNodeList.Add validationRule.Reason&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;currentNodeList.Add &quot;&quot;&#xA;&#x9;&#x9;&#x9;currentNodeList.Add &quot;&quot;&#xA;&#x9;&#x9;&#x9;currentNodeList.Add &quot;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'return output&#xA;&#x9;&#x9;set getThisNodeOutput = currentNodeList&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'returns a list of all generalized elements of this elemnt&#xA;&#x9;private function getParents(childElement)&#xA;&#x9;&#x9;dim directParents &#xA;&#x9;&#x9;dim sqlGetParents&#xA;&#x9;&#x9;dim allParents&#xA;&#x9;&#x9;set allParents = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;dim childElementID&#xA;&#x9;&#x9;if not childElement is nothing then&#xA;&#x9;&#x9;&#x9;childElementID = childElement.ElementID&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;childElementID = me.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;sqlGetParents = &quot;select c.End_Object_ID as Object_ID from t_connector c&#x9;&#x9;&#x9; &quot;  &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where c.Connector_Type in ('Generalization','Generalisation')&#x9; &quot;  &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and c.Start_Object_ID =&quot; &amp; childElementID&#xA;&#x9;&#x9;set directParents = getElementsFromQuery(sqlGetParents)&#xA;&#x9;&#x9;'add the direct parent to the list of all parents&#xA;&#x9;&#x9;allParents.AddRange(directParents)&#xA;&#x9;&#x9;'loop the parent and get their parents&#xA;&#x9;&#x9;dim parent&#xA;&#x9;&#x9;for each parent in directParents&#xA;&#x9;&#x9;&#x9;allParents.AddRange(getParents(parent))&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'return&#xA;&#x9;&#x9;set getParents = allParents&#xA;&#x9;end function&#xA;&#x9;'loads all Attribute notes both from this eleemnt as from its parents&#xA;&#x9;private function loadAllAttributeNodes(parents)&#xA;&#x9;&#x9;'first load fro this element&#xA;&#x9;&#x9;dim allAttributeNodes&#xA;&#x9;&#x9;set allAttributeNodes = loadAttributeChildNodes(nothing)&#xA;&#x9;&#x9;'then the one from the parents&#xA;&#x9;&#x9;dim parent&#xA;&#x9;&#x9;for each parent in parents&#xA;&#x9;&#x9;&#x9;allAttributeNodes.AddRange loadAttributeChildNodes(parent)&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;&#x9;private function loadAttributeChildNodes(currentElement)&#xA;&#x9;&#x9;set loadAttributeChildNodes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;dim ownerElementID&#xA;&#x9;&#x9;if not currentElement is nothing then&#xA;&#x9;&#x9;&#x9;ownerElementID = currentElement.ElementID&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ownerElementID = me.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'get attributes in the correct order (not for enum values&#xA;&#x9;&#x9;dim SQLGetAttributes&#xA;&#x9;&#x9;SQLGetAttributes = &#x9;&quot;select a.ID from (t_attribute a                             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on a.Object_ID = o.Object_ID)        &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Object_Type &lt;&gt; 'Enumeration'                       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and (o.Stereotype is null or o.Stereotype &lt;&gt; 'Enumeration')&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and a.Object_ID = &quot; &amp; ownerElementID &amp; &quot;                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by a.Pos, a.Name                                     &quot;&#xA;&#x9;&#x9;dim attributes&#xA;&#x9;&#x9;set attributes = getattributesFromQuery(SQLGetAttributes)&#xA;&#x9;&#x9;'loop the attributes&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;for each attribute in attributes&#xA;&#x9;&#x9;&#x9;'create the next messageNode&#xA;&#x9;&#x9;&#x9;dim newMessageNode&#xA;&#x9;&#x9;&#x9;set newMessageNode = new MessageNode&#xA;&#x9;&#x9;&#x9;'initialize&#xA;&#x9;&#x9;&#x9;newMessageNode.intitializeWithSource attribute, nothing, &quot;&quot;, nothing, me&#xA;&#x9;&#x9;&#x9;'add to the childnodes list&#xA;&#x9;&#x9;&#x9;me.ChildNodes.Add newMessageNode&#xA;&#x9;&#x9;&#x9;'add to the output&#xA;&#x9;&#x9;&#x9;loadAttributeChildNodes.Add newMessageNode&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function setIsLeafNode()&#xA;&#x9;&#x9;if not me.TypeElement is nothing then&#xA;&#x9;&#x9;&#x9;if me.TypeElement.Type = &quot;Enumeration&quot;_&#xA;&#x9;&#x9;&#x9;OR me.TypeElement.Stereotype = &quot;Enumeration&quot; _&#xA;&#x9;&#x9;&#x9;OR me.TypeElement.Stereotype = &quot;XSDsimpleType&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'enumerations and simple types are always leaf nodes&#xA;&#x9;&#x9;&#x9;&#x9;m_IsLeafNode = true&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;m_IsLeafNode = false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;m_IsLeafNode = true&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="90"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7A4476E4-AC44-4BD5-89B8-F18022D5FE36}"/>
			<Column name="ScriptAuthor" value="{38AEA982-B913-40FE-B65E-7C24C315E021}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MessageValidationRule&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Messaging]&#xA;'[group=Messaging]&#xA;&#xA;' Author: Geert Bellekens&#xA;' Purpose: A wrapper class for a message validation rule&#xA;' Date: 2017-03-20&#xA;&#xA;Class MessageValidationRule&#xA;&#x9;'private variables&#xA;&#x9;Private m_Name&#xA;&#x9;Private m_RuleID&#xA;&#x9;private m_Reason&#xA;&#x9;private m_TestElement&#xA;&#x9;private m_Path&#xA;&#x9;&#xA;&#x9;'constructor&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;&quot;&#xA;&#x9;&#x9;m_RuleID = &quot;&quot;&#xA;&#x9;&#x9;m_Reason = &quot;&quot;&#xA;&#x9;&#x9;set m_TestElement = nothing&#xA;&#x9;&#x9;set m_Path = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;'public properties&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' RuleId property.&#xA;&#x9;Public Property Get RuleId&#xA;&#x9;  RuleId = m_RuleId&#xA;&#x9;End Property&#xA;&#x9;Public Property Let RuleId(value)&#xA;&#x9;  m_RuleId = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Reason property.&#xA;&#x9;Public Property Get Reason&#xA;&#x9;  Reason = m_Reason&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Reason(value)&#xA;&#x9;  m_Reason = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Path property.&#xA;&#x9;Public Property Get Path&#xA;&#x9;  set Path = m_Path&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Path(value)&#xA;&#x9;  set m_Path = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;&#xA;&#x9;'public operations&#xA;&#x9;public function initialiseWithTestElement(testElement)&#xA;&#x9;&#x9;set m_testElement = testElement&#xA;&#x9;&#x9;me.Name = m_testElement.Name&#xA;&#x9;&#x9;me.RuleId = m_testElement.Alias&#xA;&#x9;&#x9;me.Reason = Repository.GetFormatFromField(&quot;TXT&quot;,m_testElement.Notes)&#xA;&#x9;&#x9;'get the value of the path tagged value&#xA;&#x9;&#x9;dim pathString&#xA;&#x9;&#x9;pathString = getTaggedValueValue(m_testElement, &quot;Constraint Path&quot;)&#xA;&#x9;&#x9;if len(pathString) &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim part&#xA;&#x9;&#x9;&#x9;for each part in Split(pathString,&quot;.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;m_Path.Add part&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;end function&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="91"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8D4FB9AC-CD42-4D03-AB27-D7CD44AD1D66}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SearchResults&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;'dim outputTabName&#xA;'outputTabName = &quot;ModelValidation&quot;&#xA;&#xA;Class SearchResults&#xA;'#region private attributes&#xA;&#x9;private m_Fields&#xA;&#x9;private m_Results&#xA;&#x9;private m_Name&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;me.Fields = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;me.Results = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;me.Name = &quot;&quot;&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#xA;&#x9;' Fields property&#xA;&#x9;Public Property Get Fields&#xA;&#x9;  set Fields = m_Fields&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Fields(value)&#xA;&#x9;  set m_Fields = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Results property&#xA;&#x9;Public Property Get Results&#xA;&#x9;  set Results = m_Results&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Results(value)&#xA;&#x9;  set m_Results = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'Show this resultset in the model search window&#xA;&#x9;public function Show()&#xA;&#x9;&#x9;dim dataString&#xA;'&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; starting makeDataString&quot;,0&#xA;&#x9;&#x9;dataString = makeSearchDataString()&#xA;'&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Datastring: &quot; &amp; dataString,0&#xA;'&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; finished makeDataString&quot;,0&#xA;&#x9;&#x9;Repository.RunModelSearch &quot;&quot;,&quot;&quot;,&quot;&quot;, dataString&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function makeSearchDataString()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlDOM &#xA;&#x9;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;&#x9;xmlDOM.async = false&#xA;&#x9;&#x9; &#xA;&#x9;&#x9;dim xmlRoot &#xA;&#x9;&#x9;set xmlRoot = xmlDOM.createElement( &quot;ReportViewData&quot; )&#xA;&#x9;&#x9;dim uidAttr &#xA;&#x9;&#x9;set uidAttr = xmlDOM.createAttribute(&quot;UID&quot;)&#xA;&#x9;&#x9;uidAttr.nodeValue = me.Name&#xA;&#x9;&#x9;xmlRoot.setAttributeNode(uidAttr)&#xA;&#x9;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;&#x9;dim xmlFields&#xA;&#x9;&#x9;set xmlFields = xmlDOM.createElement( &quot;Fields&quot; )&#xA;&#x9;&#x9;xmlRoot.appendChild xmlFields&#xA;&#x9;&#x9;'loop the fields&#xA;&#x9;&#x9;dim field&#xA;&#x9;&#x9;for each field in me.Fields&#xA;&#x9;&#x9;&#x9;dim xmlField &#xA;&#x9;&#x9;&#x9;set xmlField = xmlDOM.createElement( &quot;Field&quot; )&#xA;&#x9;&#x9;&#x9;dim nameAttr&#xA;&#x9;&#x9;&#x9;set nameAttr = xmlDOM.createAttribute(&quot;name&quot;)&#xA;&#x9;&#x9;&#x9;nameAttr.nodeValue = field&#xA;&#x9;&#x9;&#x9;xmlField.setAttributeNode(nameAttr)&#xA;&#x9;&#x9;&#x9;xmlFields.appendChild xmlField&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'add rows&#xA;&#x9;&#x9;dim xmlRows&#xA;&#x9;&#x9;set xmlRows = xmlDOM.createElement( &quot;Rows&quot; )&#xA;&#x9;&#x9;xmlRoot.appendChild xmlRows&#xA;&#x9;&#x9;'add row&#xA;&#x9;&#x9;dim result, resultField, i&#xA;&#x9;&#x9;for each result in me.Results&#xA;&#x9;&#x9;&#x9;dim xmlRow&#xA;&#x9;&#x9;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;&#x9;&#x9;xmlRows.appendChild xmlRow&#xA;&#x9;&#x9;&#x9;'add fields&#xA;&#x9;&#x9;&#x9;for i = 0 to result.Count -1&#xA;&#x9;&#x9;&#x9;&#x9;resultField = result(i)&#xA;&#x9;&#x9;&#x9;&#x9;field = m_Fields(i)&#xA;&#x9;&#x9;&#x9;&#x9;'field attribute&#xA;&#x9;&#x9;&#x9;&#x9;set xmlField = xmlDOM.createElement( &quot;Field&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;set nameAttr = xmlDOM.createAttribute(&quot;name&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;nameAttr.nodeValue = field&#xA;&#x9;&#x9;&#x9;&#x9;'value attribute&#xA;&#x9;&#x9;&#x9;&#x9;xmlField.setAttributeNode(nameAttr)&#xA;&#x9;&#x9;&#x9;&#x9;dim valueAttr&#xA;&#x9;&#x9;&#x9;&#x9;set valueAttr = xmlDOM.createAttribute(&quot;value&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;valueAttr.nodeValue = resultField&#xA;&#x9;&#x9;&#x9;&#x9;xmlField.setAttributeNode(valueAttr)&#xA;&#x9;&#x9;&#x9;&#x9;'add the field to the row&#xA;&#x9;&#x9;&#x9;&#x9;xmlRow.appendChild xmlField&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'return&#xA;&#x9;&#x9;makeSearchDataString = xmlDOM.xml&#xA;&#x9;&#x9;&#xA;&#x9;end function&#xA;&#x9;&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="92"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AF51C898-64A9-446E-A251-729CF9CC2E26}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TaggedValue&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\TaggedValues]&#xA;'[group=Wrappers]&#xA;'Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;''' ===========================================================================&#xA;''' TAGGEDVALUE HELPER&#xA;''' ===========================================================================&#xA;''' VERSION&#x9;&#x9;&#x9;: 0.9.6&#xA;'''&#x9;RELEASE DATE&#x9;: 2015-12-10&#xA;''' HISTORY&#x9;&#x9;&#x9;: See History.txt&#x9;&#x9;&#x9;&#x9;First release in 2015-12-07&#xA;'''&#xA;''' DESCRIPTION&#x9;&#x9;: A TaggedValue Helper wrapper, intending to provide access &#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  to TaggedValue properties with consistent (orthogonal)  &#xA;''' &#x9;&#x9;&#x9;&#x9;  property names. More info far below.&#xA;''' &#xA;''' AUTHOR&#x9;&#x9;&#x9;: Rolf Lampa, RIL Partner AB, rolf.lampa@rilnet.com&#xA;'''&#xA;''' COPYRIGHT&#x9;&#x9;: (C) Rolf Lampa, 2015. Free to use for commercial projects &#xA;'''&#x9;&#x9;&#x9;&#x9;  &#x9;  if giving proper attribution to the author and providing &#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  this copyright info visible in your code and product &#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  documentation, including donation info below.&#xA;'''&#xA;''' DONATIONS&#x9;&#x9;: If you find the script being useful you may consider &#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  making a donation. All amounts amounts. For Paypal &#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  donations, use the following url:&#xA;'''&#xA;''' https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=KJCD6N8M8MRWQ&#xA;'''&#xA;''' DEPENDENCIES &#x9;: None. The script should work as is inside Enterprise &#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  Architect. &#xA;''' TESTED&#x9;&#x9;&#x9;: Run on Enterprise Architect 12.1 Beta, using the file&#xA;'''&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;TaggedValue_Test.vbs&quot; for simple property access&#xA;'''&#xA;''' ---------------------------------------------------------------------------&#xA;'''&#xA;''' USAGE: The code below (for example) will provide a &quot;singleton&quot; access to &#xA;'''&#x9;&#x9;   the TaggedValue helper:&#xA;&#xA;Dim m_tagapi &#x9;''' You may want to use this variable directly, the after first &#xA;&#x9;&#x9;&#x9;&#x9;''' access to the TagAPI&#xA;&#xA;Public Function TagAPI()&#xA;&#x9;''' Ensure that the TaggedVaslue helper is created only once.&#xA;&#x9;if m_tagapi is Nothing then&#xA;&#x9;&#x9;Set m_tagapi = New TTaggedValueWrapper&#xA;&#x9;End If&#xA;&#x9;Set TagAPI = m_tagapi&#xA;End Function&#xA;&#xA;Private Sub Module_Initialize()&#xA;&#x9;''' Ensure initialization of the variable as to prepare &#xA;&#x9;''' for the assigment check in the TagAPI() function&#xA;&#x9;Set m_tagapi = Nothing&#xA;End Sub&#xA;&#xA;Private Sub Module_Terminate()&#xA;&#x9;''' Call this explicitly to dispose of the object.&#xA;&#x9;Set m_tagapi = Nothing&#xA;End Sub&#xA;&#xA;''' ---------------------------------------------------------------------------&#xA;''' EXAMPLE OF USAGE:&#xA;'''&#xA;'''&#x9;&#x9;Dim tv As EA.TaggedValue&#xA;'''&#x9;&#x9;For Each tv in Pkg.Element.TaggedValues&#xA;''' &#x9;&#x9;Session.Output TagAPI.Wrap(tv)&#x9;&#x9;&#x9;&#x9;''' Wrap...&#xA;''' &#x9;&#x9;Session.Output TagAPI.Wrap(tv).Value()&#x9;&#x9;''' or Wrap and use directly.&#xA;''' &#x9;&#x9;Session.Output TagAPI.Name()&#x9;&#x9;&#x9;&#x9;''' Now use the helper Obj directly&#xA;''' &#x9;&#x9;Session.Output m_tagapi.Notes()&#x9;&#x9;&#x9;&#x9;''' Or use the module variable&#xA;''' &#x9;&#x9;Session.Output m_tagapi.FQName()&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;Session.Output m_tagapi.PropertyGUID()&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;Session.Output m_tagapi.ParentName()&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;Session.Output m_tagapi.ParentID()&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;Session.Output m_tagapi.ParentGUID()&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;''' Etc&#xA;''' &#x9;Next&#xA;''' &#xA;''' &#x9;One can also use a class, and set the wrapper &quot;ByName&quot;, then the wrapper&#xA;''' &#x9;looks up the TaggedValue, wraps it, and exposes its properties, like so:&#xA;'''&#xA;'''&#x9;&#x9;For Each elem in Pkg.Elements&#xA;'''&#x9;&#x9;&#x9;If TagApi.TryWrapByName(&quot;VBA.FileName&quot;, elem)  then&#xA;''' &#x9;&#x9;&#x9;Session.Output m_tagapi.Name()&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;&#x9;Session.Output m_tagapi.Notes()&#x9;&#x9;&#x9;&#xA;''' &#x9;&#x9;&#x9;Session.Output m_tagapi.PropertyGUID()&#xA;''''&#x9;&#x9;End If&#xA;'''&#x9;&#x9;Next&#xA;'''&#xA;'''&#x9;&#x9;''' Or, if assuming that the TV exists:&#xA;'''&#xA;''' &#x9;S = TagApi.WrapByName(&quot;VBA.FileName&quot;, elem).Notes()&#xA;'''&#x9;&#x9;&#xA;''' ---------------------------------------------------------------------------&#xA;'''&#xA;''' STATISTICS&#xA;''' &#xA;''' Simple statistics is supported but can be &quot;disabled&quot; from the code altogether &#xA;''' by using the following Regex Expression:&#xA;'''&#xA;''' DISABLE all stats code (comment):&#xA;''' &#x9;Regex Search:&#x9;^(?!'//)(.*?\(\(\$stats\)\).*?$)&#xA;'''&#x9;&#x9;Regex Replace:&#x9;'//\1&#xA;''' ENABLE stats code again (uncomment):&#xA;''' &#x9;Regex Search:&#x9;^(?='//)'//(.*?\(\(\$stats\)\).*?$)&#xA;'''&#x9;&#x9;Regex Replace:&#x9;\1&#xA;&#xA;''' ---------------------------------------------------------------------------&#xA;''' TODO:&#xA;''' - Property IsInterfaceTag() - Check Stereotype to distinguish from regular &#xA;'''   Class&#xA;'''&#xA;''' ---------------------------------------------------------------------------&#xA;''' CLASS MEMEBERS&#xA;''' ---------------------------------------------------------------------------&#xA;'''&#xA;'''&#x9;&#x9;''' Most used properties &amp; functions :&#xA;'''&#xA;'''     ''' WrapByName: Direct access to properties assuming the TV exists&#xA;'''&#x9;&#x9;Public Function WrapByName(aName, ByRef aObj) ''': TTaggedValueWrapper&#xA;'''&#x9;&#x9;Public Function TryWrapByName(aName, ByRef aObj) ''': Boolean&#xA;'''&#x9;&#x9;Public Function Wrap(ByRef aTaggedValue) ''': TTaggedValueWrapper&#xA;'''&#x9;&#x9;Public Property Get Value() ''': String&#xA;'''&#x9;&#x9;Public Function TryValue(ByRef S) ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get Name()&#x9;''': String&#xA;'''&#x9;&#x9;Public Property Get Notes()&#x9;''': String&#xA;'''&#x9;&#x9;Public Sub Update() ''': Void&#x9;&#x9;&#x9;''' All PropertyTypes reloaded from Repository. Total reinitialization&#xA;'''&#x9;&#x9;&#xA;'''&#x9;&#x9;'// Statistics control :&#xA;'''&#x9;&#x9;&#xA;'''&#x9;&#x9;Public Sub StatsPause() ''': Void&#x9;&#x9;''' Collects Duration and HitCounts into ditto &quot;Accumulated&quot;&#xA;'''&#x9;&#x9;Public Sub StatsResume() ''': Void&#x9;&#x9;''' Restarts with HitCount=0 (AccumulatedCount continues though)&#xA;'''&#x9;&#x9;Public Sub StatsStart() ''': Void&#x9;&#x9;''' Resets all counters and timers&#xA;'''&#x9;&#x9;Public Sub StatsStop() ''': Void&#x9;&#x9;''' Keeps all count and time info until next StatsStart()&#xA;&#xA;'''&#x9;&#x9;''' Other useful and orthogonal properties.&#xA;'''&#x9;&#x9;''' In case a value isn't actually provided by the underlaying object, &#xA;'''&#x9;&#x9;''' these properties at least provides with a fake value as to allowing &#xA;'''&#x9;&#x9;''' for &quot;type safe&quot; when traversing EA models.&#xA;'''&#x9;&#x9;&#xA;'''&#x9;&#x9;Public Property Get Detail() ''': String&#xA;'''&#x9;&#x9;Public Property Get FQName() ''': String&#xA;'''&#x9;&#x9;Public Property Get HasMemo() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get HasNotes()&#x9;''': String&#xA;'''&#x9;&#x9;Public Property Get HasStats() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsAttributeTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsClassTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsConnectionTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsElementTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsInterfaceTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsMethodTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsPackageTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsRoleTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsTaggedValue() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get IsValueDefault() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get M_Default()&#x9;''': String&#xA;'''&#x9;&#x9;Public Property Get M_GlobalDefault()&#x9;''': String&#xA;'''&#x9;&#x9;Public Property Get M_IsRoleTag() ''': Boolean&#xA;'''&#x9;&#x9;Public Property Get M_ParentObject() ''': EA.&lt;Object&gt;&#xA;'''&#x9;&#x9;Public Property Get M_Value() ''': String&#xA;'''&#x9;&#x9;Public Property Get TvObject() ''': EA.TaggedValue&#x9;&#x9;''' Useful with WrapByName&#xA;'''&#x9;&#x9;Public Property Get ParentID() ''': Integer&#xA;'''&#x9;&#x9;Public Property Get ParentName() ''': String&#xA;'''&#x9;&#x9;Public Property Get ParentObject() ''': EA.&lt;Object&gt;&#xA;'''&#x9;&#x9;Public Property Get ParentObjectType() ''': Integer (ot&lt;ObjectType&gt;)&#xA;'''&#x9;&#x9;Public Property Get ParentType() ''': String (Kind name)&#xA;'''&#x9;&#x9;Public Property Get PropertyGUID() ''': String&#xA;'''&#x9;&#x9;Public Property Get PropertyID() ''': String&#xA;'''&#x9;&#x9;Public Property Get StatsCount() ''': Integer&#xA;'''&#x9;&#x9;Public Property Get StatsCountAcc() ''': Integer&#xA;'''&#x9;&#x9;Public Property Get StatsDuration() ''': Time&#xA;'''&#x9;&#x9;Public Property Get StatsDurationAcc() ''': Time&#xA;'''&#x9;&#x9;Public Property Get StatsHitsPerSecond() ''': Integer&#xA;'''&#x9;&#x9;Public Property Get StatsHitsPerSecondAcc() ''': Integer&#xA;'''&#x9;&#x9;Public Property Get StatsTimePerHits() ''': Time&#xA;'''&#x9;&#x9;Public Property Get StatsTimePerHitsAcc() ''': Integer&#xA;'''&#x9;&#x9;Public Property Get StatsWrapCount() ''': Integer&#xA;'''&#x9;&#x9;&#xA;'''&#x9;&#x9;Private Function ContainsStr(aStr, aChar)&#xA;'''&#x9;&#x9;Private Function ExtractPropertyFromRawStr(ByRef aSubjectStr, ByVal aFieldName) ''': Boolean&#xA;'''&#x9;&#x9;Private Function GetValueByXmlTagName(ByRef aStr, ByRef aTagName, ByRef OutResult) ''': String, Boolean&#xA;'''&#x9;&#x9;Private function PropertyTypeByName(aNameAsKey, ByRef OutProp) ''': PropertyType, Boolean&#xA;'''&#x9;&#x9;Private Function QueryRoleTagForElementID(ByRef OutGUID) ''': Boolean&#xA;'''&#x9;&#x9;Private Function TryExtractRoleTagStereotypeDefault(ByRef S) ''': String, Boolean&#xA;'''&#x9;&#x9;Private Function TryExtractRoleTagValue(ByRef S) ''': Boolean&#xA;'''&#x9;&#x9;Private Function TryExtractStereotypeDefault(ByRef s) ''': Boolean&#x9;&#x9;&#xA;'''&#x9;&#x9;Private function TryGetPropertyTypeDefault(aNameAsKey, ByRef OutResult) ''': String, Boolean&#xA;'''&#x9;&#x9;Private Property Get ConnectionEndForRoleTag()&#xA;'''&#x9;&#x9;Private Property Get ConnectorForRoleTag()&#xA;'''&#x9;&#x9;Private Property Get IsClient() ''': Boolean&#xA;'''&#x9;&#x9;Private Property Get IsSource() ''': Boolean&#xA;'''&#x9;&#x9;Private Property Get IsSupplier() ''': Boolean&#xA;'''&#x9;&#x9;Private Property Get IsTarget() ''': Boolean&#xA;'''&#x9;&#x9;Private Property Get PropertyTypesDefaultDictionary()  ''': Dictionary&#xA;'''&#x9;&#x9;Private Property Get PropertyTypesDictionary&#xA;'''&#x9;&#x9;Private Property Get PropertyTypesRawDataDictionary() ''': Dictionary&#xA;'''&#x9;&#x9;Private Property Get RoleTagConnector()&#xA;'''&#x9;&#x9;Private Property Let UseStats(aBool) ''': Void&#x9;''' (($stats))&#xA;'''&#x9;&#x9;&#xA;'''&#x9;&#x9;Private Sub Class_Initialize() ''': Void&#xA;'''&#x9;&#x9;Private Sub Class_Terminate() ''': Void&#xA;'''&#x9;&#x9;&#xA;'''&#x9;&#x9;Private Sub FormatPropertyTypesText(ByRef aSubjectStr)&#xA;'''&#x9;&#x9;Private Sub IncStats() ''': Void&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;'''&#x9;&#x9;Private Sub LoadPropertyData()&#xA;'''&#x9;&#x9;Private Sub RegisterPropertyTypes() ''': Void&#xA;'''&#x9;&#x9;Private Sub RegisterPropertyTypesDefaults() ''': Void&#xA;'''&#x9;&#x9;Private Sub RegisterPropertyTypesRawData() ''': Void&#xA;'''&#x9;&#x9;Private Sub ResetData() ''': Void&#xA;'''&#x9;&#x9;Private Sub ResetStats() ''': Void&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;''' -----------------------------------------------------------------------&#xA;&#xA;&#xA;''' TAGGEDVALUE TYPES&#xA;&#xA;Public Const EA_TaggedValue &#x9;= 12&#x9;''' Classes &amp; Packages&#xA;Public Const EA_AttributeTag&#x9;= 34&#x9;''' Attributes&#xA;Public Const EA_MethodTag&#x9;&#x9;= 36&#x9;''' Methods&#xA;Public Const EA_ConnectorTag&#x9;= 38&#x9;''' Connectors&#xA;Public Const EA_RoleTag&#x9;&#x9;&#x9;= 41&#x9;''' Role/ConnectorEnd&#xA;&#xA;''' MODEL ELEMENTS&#xA;&#xA;Public Const EA_Element &#x9;&#x9;= 4&#x9;&#x9;''' Class &amp; Interface (see &lt;stereotype&gt;!)&#xA;Public Const EA_Class &#x9;&#x9;&#x9;= 4&#x9;&#x9;''' -&quot;-&#xA;Public Const EA_Interface&#x9;&#x9;= 4&#x9;&#x9;''' -&quot;-&#xA;Public Const EA_Package&#x9;&#x9;&#x9;= 5&#x9;&#x9;''' Package&#xA;Public Const EA_Attribute&#x9;&#x9;= 23&#x9;''' Attributes&#xA;Public Const EA_Method&#x9;&#x9;&#x9;= 24&#x9;''' Methods&#xA;Public Const EA_Connector&#x9;&#x9;= 7&#x9;&#x9;''' Connectors&#xA;Public Const EA_Role&#x9;&#x9;&#x9;= 22&#x9;''' Role/ConnectorEnd&#xA;Public Const EA_ConnectorEnd&#x9;= 22&#x9;''' Role/ConnectorEnd&#xA;&#xA;Public Const EA_ASSOCIATION_SOURCE = &quot;ASSOCIATION_SOURCE&quot;&#xA;Public Const EA_ASSOCIATION_TARGET = &quot;ASSOCIATION_TARGET&quot;&#xA;&#xA;''' ERROR CODES &amp; MESSAGES&#xA;&#xA;Dim err_ElementType : err_ElementType = vbObjectError + 1&#xA;Dim err_TaggedValueType : err_TaggedValueType = vbObjectError + 1&#xA;&#xA;Private Const msg_ElementType = &quot;Invalid Element Type!&quot;&#xA;Private Const msg_TaggedValueType = &quot;Invalid TaggedValue type!&quot;&#xA;&#xA;''' HELPER CLASS&#xA;&#xA;Class TTaggedValueWrapper&#xA;&#x9;&#xA;&#x9;''' The currently wrapped EA.TaggedValue + EA.RoleTag.&#xA;&#x9;Dim m_tv As EA.TaggedValue&#xA;&#x9;&#xA;&#x9;''' EA.RoleTag (special case) introduced for optmization reasons. It is &#xA;&#x9;'''&#x9;being assigned already at the time of Wrap(tv)&#xA;&#x9;Dim m_rt As EA.RoleTag&#xA;&#x9;&#xA;&#x9;''' The owning EA.Connector (only) for visiting EA.RoleTags.&#xA;&#x9;Dim m_roletag_connector As EA.Connector&#xA;&#x9;&#xA;&#x9;''' Optimized Access, Lazy evaluation in ParentObject (but or course, needs a type cast for usage)&#xA;&#x9;Dim m_parentobj As EA.Element&#xA;&#x9;Dim m_parent_typename&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'// For chaching purpose.&#xA;&#x9;Dim m_parent_objecttype&#xA;&#x9;&#xA;&#x9;Dim m_objecttype&#xA;&#x9;&#xA;&#x9;''' Used by InStr() &amp; Mid() when extracting values from text. Avoids repeated allocs.&#xA;&#x9;Dim m_startpos&#xA;&#x9;Dim m_endpos&#xA;&#x9;&#xA;&#x9;''' Dictionary for fast RT access of Property OBJECTS&#xA;&#x9;''' accessed by TaggedValue name&#xA;&#x9;Dim m_PropertyTypesDictionary&#xA;&#x9;&#xA;&#x9;''' Dictionary for fast direct RT access of property Defaults, &#xA;&#x9;''' in String format, accessed directly by TaggedValue Name()&#xA;&#x9;Dim m_PropertyTypesDefaultDictionary&#xA;&#x9;&#xA;&#x9;''' Dictionary for storing property data from .Detail property, &#xA;&#x9;''' in a prepared format making it easier (faster) to extract any&#xA;&#x9;''' individual property value from its multiline text content. &#xA;&#x9;''' Performance and the utilization of Lazy Evaluation motivates&#xA;&#x9;''' these extra dictionaries.&#x9;&#xA;&#x9;Dim m_PropertyTypesRawDataDictionary&#xA;&#xA;&#x9;''' Used by WrapByName to lookup and wrap a TaggedValue by name&#xA;&#x9;Dim m_elem As EA.Element&#xA;&#xA;&#x9;''' STATS                               ''' Keep the &quot;(($stats))&quot; markers (used for Regex enable/disable)&#xA;&#x9;&#xA;&#x9;Dim m_usestats&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats)) Set to false in production code!&#xA;&#x9;Dim m_stats_hitcount&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats)) Counts all essesacc to the properties&#xA;&#x9;Dim m_stats_hitcount_acc&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;Dim m_stats_wrapcount&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats)) Counts all assignments with Wrap method since created&#xA;&#x9;Dim m_stats_starttime&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;Dim m_stats_stoptime&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;Dim m_stats_time_acc&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#xA;&#x9;''' INITIALIZERS&#xA;&#x9;&#xA;&#x9;Private Sub Class_Initialize() ''': Void&#xA;&#x9;&#x9;ResetStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_usestats = False&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats)) Must be set explicitly&#xA;&#x9;&#x9;Update()&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Private Sub Class_Terminate() ''': Void&#xA;&#x9;&#x9;ResetData()&#xA;&#x9;&#x9;m_usestats = False&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats)) Must be set explicitly&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [TryWrapByName]&#xA;&#x9;''' Provide a class, an attribute, a connector etc, and a name for the TaggedValue.&#xA;&#x9;''' If success (result true) then the properties of the TV is immediately available, &#xA;&#x9;''' like so: &#xA;&#x9;''' &#x9;If TagHelp.TryWrapByName(&quot;&lt;TaggedValueName&gt;&quot;, Pkg) then &#xA;&#x9;''' &#x9;&#x9;S = TagHelp.Value() ''' etc&#xA;&#x9;''' &#x9;End If&#xA;&#x9;Public Function TryWrapByName(aName, ByRef aObj) ''': Boolean&#xA;&#x9;&#x9;Dim was_found&#xA;&#x9;&#x9;Dim tv As EA.TaggedValue&#xA;&#x9;&#x9;Set m_elem = aObj&#xA;&#x9;&#x9;Select Case m_elem.ObjectType&#xA;&#x9;&#x9;&#x9;Case EA_Element&#xA;&#x9;&#x9;&#x9;&#x9;''' m_elem was already set on entry, so go ahead&#xA;&#x9;&#x9;&#x9;&#x9;Set tv = m_elem.TaggedValues.GetByName(aName)&#xA;&#x9;&#x9;&#x9;Case EA_Package&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Dim m_pack As EA.Package&#xA;&#x9;&#x9;&#x9;&#x9;Set m_pack = aObj&#xA;&#x9;&#x9;&#x9;&#x9;Set tv = m_pack.Element.TaggedValues.GetByName(aName)&#xA;&#x9;&#x9;&#x9;Case EA_Attribute&#xA;&#x9;&#x9;&#x9;&#x9;Dim m_attr As EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;Set m_attr = aObj&#xA;&#x9;&#x9;&#x9;&#x9;Set tv = m_attr.TaggedValues.GetByName(aName)&#xA;&#x9;&#x9;&#x9;Case EA_Method&#xA;&#x9;&#x9;&#x9;&#x9;Dim m_meth As EA.Method&#xA;&#x9;&#x9;&#x9;&#x9;Set m_meth = aObj&#xA;&#x9;&#x9;&#x9;&#x9;Set tv = m_meth.TaggedValues.GetByName(aName)&#xA;&#x9;&#x9;&#x9;Case EA_Connector&#xA;&#x9;&#x9;&#x9;&#x9;Dim m_conn As EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;Set m_conn = aObj&#xA;&#x9;&#x9;&#x9;&#x9;Set tv = m_conn.TaggedValues.GetByName(aName)&#xA;&#x9;&#x9;&#x9;Case EA_ConnectorEnd&#xA;&#x9;&#x9;&#x9;&#x9;Dim m_role As EA.ConnectorEnd&#xA;&#x9;&#x9;&#x9;&#x9;Set m_role = aObj&#xA;&#x9;&#x9;&#x9;&#x9;Set tv = m_role.TaggedValues.GetByName(aName)&#xA;&#x9;&#x9;&#x9;Case Else&#xA;&#x9;&#x9;&#x9;&#x9;Err.Raise err_ElementType, msg_ElementType&#xA;&#x9;&#x9;End Select&#xA;&#x9;&#x9;was_found = Not tv is Nothing&#xA;&#x9;&#x9;If was_found then&#xA;&#x9;&#x9;&#x9;TryWrapByName = Not Wrap(tv).TvObject Is Nothing&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;TryWrapByName = False&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [WrapByName]&#xA;&#x9;''' Use the result (object) directly when you know for certain that the &#xA;&#x9;''' named TaggedValue will be found, like so:&#xA;&#x9;'''&#x9;S = TagAPI.TagByName(&quot;SomeTagName&quot;, elem).Value()      or,&#xA;&#x9;'''&#x9;S = TagAPI.TagByName(&quot;CopyrightNotice&quot;, elem).Notes()  etc.&#xA;&#x9;Public Function WrapByName(aName, ByRef aObj) ''': TTaggedValueWrapper&#xA;&#x9;&#x9;If TryWrapByName(aName, aObj) then&#xA;&#x9;&#x9;&#x9;Set WrapByName = Me&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Set WrapByName = Nothing&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [Wrap] &#xA;&#x9;''' Assigns the external TaggedValue to the wrapper class &#xA;&#x9;''' for use in the internal processing.&#xA;&#x9;Public Function Wrap(ByRef aTaggedValue) ''': TTaggedValueWrapper&#xA;&#x9;&#x9;''' m_tv is most often used, if not a RoleTag arrives (then m_rt instead)&#xA;&#x9;&#x9;Set m_tv = aTaggedValue&#xA;&#x9;&#x9;m_objecttype = m_tv.ObjectType&#xA;&#x9;&#x9;''' Cast if RoleTag, this extra property of RoleTag tyoe can now be both &#xA;&#x9;&#x9;''' tested for (&quot;is Nothing&quot;) and used directly by any internal properties.&#xA;&#x9;&#x9;If m_objecttype = EA_RoleTag Then&#xA;&#x9;&#x9;&#x9;Set m_rt = m_tv&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Set m_rt = Nothing&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' This is TaggedValue.ParentObj.ObjectType&#xA;&#x9;&#x9;m_parent_objecttype&#x9;= 0&#xA;&#x9;&#x9;m_startpos&#x9;&#x9;&#x9;= 0&#xA;&#x9;&#x9;m_endpos&#x9;&#x9;&#x9;= 0&#xA;&#x9;&#x9;''' Used internally as a ' cache', sorts of&#xA;&#x9;&#x9;m_parent_typename = &quot;&quot;&#xA;&#x9;&#x9;''' Lazy Evaluation in Property Get RoleTagConnector&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;Set m_parentobj = Nothing&#xA;&#x9;&#x9;Set m_roletag_connector = Nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If m_usestats Then &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;&#x9;m_stats_wrapcount = m_stats_wrapcount + 1&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' Return this wrapped object as to provide immediate &#xA;&#x9;&#x9;''' access to the wrapper's functionality, like so:&#xA;&#x9;&#x9;'''&#xA;&#x9;&#x9;''' &#x9;Set tvapi = New TRILTaggedValueApi&#xA;&#x9;&#x9;''' &#x9;S = tvapi.Wrap(aTV).Value(), then&#xA;&#x9;&#x9;'''&#x9;&#x9;S = tvapi.Value()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' Avoid using the wrap function more than once&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Set Wrap = Me&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' Returns the wrapper itself.&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' ----------------------------------------------------------&#xA;&#x9;''' PUBLIC PROPERTIES&#xA;&#x9;''' ----------------------------------------------------------&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [Value]&#xA;&#x9;''' Derives any Default value if the tv Value() is empty. Use TryValue(S) &#xA;&#x9;''' if you want to utilize a Boolean reply whether any value  at all was &#xA;&#x9;''' returned.&#xA;&#x9;''' This property was the main reason why this wrapper was designed in &#xA;&#x9;''' the first place. It attempts to return Value(), and if not exists, &#xA;&#x9;''' it tries to get a Default (from &quot;initial value&quot; in Stereotypes), &#xA;&#x9;''' and if no value was found there either it reads from GlobalDefault, &#xA;&#x9;'''&#x9;which has its default values defined in Repository.PropertyTypes() &#xA;&#x9;''' and stored in common table 't_propertytypes'.&#xA;&#x9;''' If you want &quot;direct values&quot; without any of the below semantics applied, &#xA;&#x9;''' call M_Value or M_Default, or M_GlobalDefault directly.&#xA;&#x9;Public Property Get Value() ''': String&#xA;&#x9;&#x9;Dim S&#xA;&#x9;&#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;If TryValue(S) Then&#xA;&#x9;&#x9;&#x9;Value = S&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Value = &quot;&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [TryValue]&#xA;&#x9;''' Se documentation for Property Value(). See also EA's documentation page&#xA;&#x9;''' on how the value content is to be interpreted (rules which we &quot;hide&quot; and just &#xA;&#x9;''' deliver in this wrapper) :&#xA;&#x9;''' http://sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/taggedvalue.html&#xA;&#x9;Public Function TryValue(ByRef S) ''': String&#xA;&#x9;&#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;S = m_tv.Value&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' SPECIAL CASE (RoleTag)&#xA;&#x9;&#x9;If m_objecttype = EA_RoleTag Then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''' EA.RoleTag type: Strip out value before &quot;$ea_notes=&quot;&#xA;&#x9;&#x9;&#x9;''' The RoleTag must be processed entirely in this block (thus the ElseIf) &#xA;&#x9;&#x9;&#x9;''' since it's not typecompatible with the other properties for retriveing&#xA;&#x9;&#x9;&#x9;''' Default values.&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;If TryExtractRoleTagValue(S) Then&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = True&#xA;&#x9;&#x9;&#x9;ElseIf TryExtractStereotypeDefault(S) Then&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = True&#xA;&#x9;&#x9;&#x9;ElseIf TryGetPropertyTypeDefault(m_rt.Tag, S) Then&#x9;''' (Params = Name, S)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;''' OK to use common method also for this (RoleTag) type, since&#xA;&#x9;&#x9;&#x9;&#x9;''' global Defaults are not store in the (Role) TaggedValue itself,&#xA;&#x9;&#x9;&#x9;&#x9;''' but in the Repository.PropertyTypes, which are common for all.&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = True&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;S = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = False&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;''' NORMAL CASE(S)&#xA;&#x9;&#x9;ElseIf  S = &quot;&quot; Then&#xA;&#x9;&#x9;&#x9;''' Try retrive Default (&quot;Initial value&quot; from Stereotype:&#xA;&#x9;&#x9;&#x9;If TryExtractStereotypeDefault(S) Then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = True&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;ElseIf TryGetPropertyTypeDefault(m_tv.Name, S) Then&#xA;&#x9;&#x9;&#x9;&#x9;''' As a Last resort, try Default from t_PropertyTypes if&#xA;&#x9;&#x9;&#x9;&#x9;''' it (this Global) was not &quot;overrided&quot; in a Stereotype.&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = True&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;''' Neither a Value nor a Default value was found.&#xA;&#x9;&#x9;&#x9;&#x9;TryValue = False&#xA;&#x9;&#x9;&#x9;&#x9;S = &quot;&quot;&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;ElseIf S = &quot;&lt;memo&gt;&quot; Then&#xA;&#x9;&#x9;&#x9;''' If &quot;&lt;memo&gt;&quot; the value shall be retrived from .Notes&#xA;&#x9;&#x9;&#x9;S = m_tv.Notes&#xA;&#x9;&#x9;&#x9;TryValue = True&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;TryValue = True &#x9;&#x9;&#x9;''' S already contains the value&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [Name]&#xA;&#x9;''' Special case RoleTag which stores &quot;Name&quot; in its &quot;Tag&quot; property.&#xA;&#x9;Public Property Get Name()&#x9;''': String&#xA;&#x9;&#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;If m_objecttype = EA_RoleTag Then&#xA;&#x9;&#x9;&#x9;Name = m_rt.Tag()&#xA;&#x9;&#x9;Else &#xA;&#x9;&#x9;&#x9;''' In all other cases; EA_TaggedValue, EA_AttributeTag, EA_MethodTag, EA_ConnectorTag&#xA;&#x9;&#x9;&#x9;Name = m_tv.Name()&#xA;&#x9;&#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [Notes]&#xA;&#x9;Public Property Get Notes()&#x9;''': String&#xA;&#x9;&#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;If m_objecttype = EA_RoleTag Then&#xA;&#x9;&#x9;&#x9;Notes = &quot;&quot;&#x9;&#x9;&#x9;''' RoleTags doesn't have any notes (Only ConnectorEnd has)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Notes = m_tv.Notes&#xA;&#x9;&#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [PropertyGUID]&#xA;&#x9;''' Different property names (&quot;TagGUID&quot; and &quot;PropertyGUID&quot;) for different Tag owners&#xA;&#x9;''' requires type check before accessing the properties without crashing :&#xA;&#x9;Public Property Get PropertyGUID() ''': String&#xA;&#x9;&#x9;Select Case m_objecttype&#xA;&#x9;&#x9;&#x9;Case EA_TaggedValue&#xA;&#x9;&#x9;&#x9;&#x9;' Direct use of the internal ref 'm_tv'&#xA;&#x9;&#x9;&#x9;&#x9;PropertyGUID = m_tv.PropertyGUID&#xA;&#x9;&#x9;&#x9;Case EA_AttributeTag&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Dim at As EA.AttributeTag&#xA;&#x9;&#x9;&#x9;&#x9;Set at = m_tv&#xA;&#x9;&#x9;&#x9;&#x9;PropertyGUID = at.TagGUID&#xA;&#x9;&#x9;&#x9;Case EA_MethodTag&#xA;&#x9;&#x9;&#x9;&#x9;Dim mt As EA.MethodTag&#xA;&#x9;&#x9;&#x9;&#x9;Set mt = m_tv&#xA;&#x9;&#x9;&#x9;&#x9;PropertyGUID = mt.TagGUID&#xA;&#x9;&#x9;&#x9;Case EA_ConnectorTag&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Dim ct As EA.ConnectorTag&#xA;&#x9;&#x9;&#x9;&#x9;Set ct = m_tv&#xA;&#x9;&#x9;&#x9;&#x9;PropertyGUID = ct.TagGUID&#xA;&#x9;&#x9;&#x9;Case EA_RoleTag&#xA;&#x9;&#x9;&#x9;&#x9;''' No property ID exist for RoleTag! But we provide a fake ID anyway. &#xA;&#x9;&#x9;&#x9;&#x9;''' In any case the user must check the result when calling GetTaggedValueByID(Id)&#xA;&#x9;&#x9;&#x9;&#x9;PropertyGUID = m_rt.PropertyGUID&#xA;&#x9;&#x9;&#x9;Case Else&#xA;&#x9;&#x9;&#x9;&#x9;Err.Raise err_TaggedValueType, msg_TaggedValueType&#xA;&#x9;&#x9;End Select&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [PropertyID]&#xA;&#x9;''' Missing property for Roletag. Returns only a Fake ID (-1, since it doesn't have any &#xA;&#x9;''' integer ID at all, only a PropertyGUID), but we still provide a value in order to &#xA;&#x9;''' avoid type errors for users which are looping through model info.&#x9;&#xA;&#x9;''' Different Tag owners all have different property names.&#xA;&#x9;Public Property Get PropertyID() ''': String&#xA;&#x9;Select Case m_objecttype&#xA;&#x9;&#x9;Case EA_TaggedValue&#xA;    &#x9;&#x9;' Direct use of the internal ref 'm_tv'&#xA;    &#x9;&#x9;PropertyID = m_tv.PropertyID&#xA;&#x9;&#x9;Case EA_AttributeTag&#x9;&#xA;    &#x9;&#x9;Dim at As EA.AttributeTag&#xA;    &#x9;&#x9;Set at = m_tv&#xA;    &#x9;&#x9;PropertyID = at.TagID&#xA;&#x9;&#x9;Case EA_MethodTag&#xA;    &#x9;&#x9;Dim mt As EA.MethodTag&#xA;    &#x9;&#x9;Set mt = m_tv&#xA;    &#x9;&#x9;PropertyID = mt.TagID&#xA;&#x9;&#x9;Case EA_ConnectorTag&#x9;&#xA;    &#x9;&#x9;Dim ct As EA.ConnectorTag&#xA;    &#x9;&#x9;Set ct = m_tv&#xA;    &#x9;&#x9;PropertyID = ct.TagID&#xA;&#x9;&#x9;Case EA_RoleTag&#xA;    &#x9;&#x9;''' FAKE VALUE: No property ID exist for RoleTag! But we provide a fake ID anyway. &#xA;    &#x9;&#x9;''' In any case the user must check the result when calling GetTaggedValueByID(Id)&#xA;    &#x9;&#x9;PropertyID = -1&#xA;&#x9;&#x9;Case Else&#xA;    &#x9;&#x9;Err.Raise err_TaggedValueType, msg_TaggedValueType &#xA;&#x9;End Select&#x9;&#x9;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [FQName]&#xA;&#x9;''' Fully expanded Stereotype, like so: &quot;Tool::Stereotype::Name&quot;&#xA;&#x9;Public Property Get FQName() ''': String&#xA;&#x9;FQName = m_tv.FQName&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [M_Value]&#xA;&#x9;''' Direct value only, no Default values are returned. If you want&#xA;&#x9;''' Default values if a value isn't set by the user, then call Value()&#xA;&#x9;''' instead, since it grants that a Default value is returned if it &#xA;&#x9;''' by evaluating, in this order: &#xA;&#x9;''' 1. Value() || 2. Default() || 3. GlobalDefault()&#xA;&#x9;Public Property Get M_Value()&#x9;''': String&#xA;&#x9;Dim S&#xA;&#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;If m_objecttype = EA_RoleTag Then&#xA;&#x9;&#x9;''' Special Case RoleTag&#xA;&#x9;&#x9;S = m_rt.Value()&#xA;&#x9;&#x9;If TryExtractRoleTagValue(S) Then&#xA;&#x9;&#x9;&#x9;M_Value = S&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;M_Value = &quot;&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;Else&#xA;&#x9;&#x9;''' Normal tags (= all other Tags but RoleTag)&#xA;&#x9;&#x9;S = m_tv.Value()&#xA;&#x9;&#x9;If  S = &quot;&quot; Then&#xA;&#x9;&#x9;&#x9;M_Value = &quot;&quot;&#xA;&#x9;&#x9;ElseIf S = &quot;&lt;memo&gt;&quot; Then&#xA;&#x9;&#x9;&#x9;''' if &lt;memo&gt;, retrive value from .Notes&#xA;&#x9;&#x9;&#x9;M_Value = m_tv.Notes&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;M_Value = S&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'// = S already contain the value&#xA;&#x9;&#x9;End If&#xA;&#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [M_Default]&#xA;&#x9;''' Direct value only. The value is retrieved from Stereotypes' &quot;initial &#xA;&#x9;''' value&quot; - if any. If no value is found, an attempt to retrived a default &#xA;&#x9;''' value from M_GlobalDefault() value instead. But, such semantics is&#xA;&#x9;''' performed only in the main Value() property.&#xA;&#x9;Public Property Get M_Default()&#x9;''': String&#xA;    &#x9;Dim S&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If TryExtractStereotypeDefault(S) Then&#xA;    &#x9;&#x9;M_Default = S&#xA;    &#x9;Else&#xA;    &#x9;&#x9;M_Default = &quot;&quot;&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [M_GlobalDefault]&#xA;&#x9;''' Direct value, retrieved from Repository.PropertyTypes, &#xA;&#x9;'''&#x9;with no extra manipulation of the value is performed.&#xA;&#x9;Public Property Get M_GlobalDefault()&#x9;''': String&#xA;    &#x9;Dim S&#xA;    &#x9;Dim sName&#xA;    &#x9;&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#xA;    &#x9;''' Get Name for use with  PropertyTypeByName(Name...) below&#xA;    &#x9;If m_objecttype = EA_RoleTag Then&#xA;    &#x9;&#x9;sName = m_rt.Tag&#xA;    &#x9;Else&#xA;    &#x9;&#x9;sName = m_tv.Name&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#xA;    &#x9;&#xA;    &#x9;If TryGetPropertyTypeDefault(sName, S) Then&#xA;    &#x9;&#x9;M_GlobalDefault = S&#xA;    &#x9;Else&#xA;    &#x9;&#x9;M_GlobalDefault = &quot;&quot;&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [Detail]&#xA;&#x9;Public Property Get Detail() ''': String&#xA;    &#x9;Dim p As EA.PropertyType&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If PropertyTypeByName(m_tv.Name, p) Then&#xA;    &#x9;&#x9;Detail = p.Detail&#xA;    &#x9;Else&#xA;    &#x9;&#x9;Detail = &quot;&quot;&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [HasNotes]&#xA;&#x9;''' RoleTags doesn't have any Notes field.&#xA;&#x9;''' ConnectorEnds, OTOH hand, stores its Notes field in the &#xA;&#x9;''' Connector table as t_connector.SourceRoleNote / DestRoleNote&#xA;&#x9;Public Property Get HasNotes()&#x9;''': String&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If m_objecttype = EA_RoleTag Then&#xA;    &#x9;&#x9;HasNotes = False&#xA;    &#x9;Else&#xA;    &#x9;&#x9;HasNotes = m_tv.Notes &lt;&gt; &quot;&quot;&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [HasMemo]&#xA;&#x9;''' RoleTags doesn't have any Memo field.&#xA;&#x9;Public Property Get HasMemo() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If m_objecttype = EA_RoleTag Then&#xA;    &#x9;&#x9;HasMemo = False&#xA;    &#x9;Else&#xA;    &#x9;&#x9;HasMemo = m_tv.Value = &quot;&lt;memo&gt;&quot;&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsValueDefault]&#xA;&#x9;''' Determines whether the Value() property is a &quot;native&quot; value or derived from Default()&#xA;&#x9;Public Property Get IsValueDefault() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsValueDefault = (M_Value = &quot;&quot;) And (Value &lt;&gt; &quot;&quot;)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ParentType]&#xA;&#x9;Public Property Get ParentType() ''': String (Kind name)&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If m_parent_typename = &quot;&quot; Then&#xA;    &#x9;&#x9;Select Case m_objecttype&#xA;    &#x9;&#x9;&#x9;Case EA_TaggedValue&#x9;&#x9;m_parent_typename = Repository.GetElementByID(  &#x9;m_tv.ParentID   ).Type&#xA;    &#x9;&#x9;&#x9;Case EA_AttributeTag&#x9;m_parent_typename = &quot;Attribute&quot;&#xA;    &#x9;&#x9;&#x9;Case EA_MethodTag&#x9;&#x9;m_parent_typename = &quot;Operation&quot;&#xA;    &#x9;&#x9;&#x9;Case EA_ConnectorTag&#x9;m_parent_typename = Repository.GetConnectorByID(&#x9;m_tv.ConnectorID).Type&#xA;    &#x9;&#x9;&#x9;Case EA_RoleTag&#x9;&#x9;&#x9;m_parent_typename = &quot;ConnectorEnd&quot;&#xA;    &#x9;&#x9;End Select&#xA;    &#x9;End If&#xA;    &#x9;ParentType = m_parent_typename&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ParentID]&#xA;&#x9;''' Special case for RoleTag / ConnectorEnd&#xA;&#x9;Public Property Get ParentID() ''': Integer&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Select Case m_objecttype&#xA;    &#x9;&#x9;Case EA_TaggedValue&#xA;        &#x9;&#x9;' Direct use of the internal ref 'm_tv'&#xA;        &#x9;&#x9;ParentID = m_tv.ParentID&#xA;    &#x9;&#x9;Case EA_AttributeTag&#x9;&#xA;        &#x9;&#x9;Dim at As EA.AttributeTag&#xA;        &#x9;&#x9;Set at = m_tv&#xA;        &#x9;&#x9;ParentID = at.AttributeID&#xA;    &#x9;&#x9;Case EA_MethodTag&#xA;        &#x9;&#x9;Dim mt As EA.MethodTag&#xA;        &#x9;&#x9;Set mt = m_tv&#xA;        &#x9;&#x9;ParentID = mt.MethodID&#xA;    &#x9;&#x9;Case EA_ConnectorTag&#x9;&#xA;        &#x9;&#x9;''' Return the Connector's ID&#xA;        &#x9;&#x9;Dim ct As EA.ConnectorTag&#xA;        &#x9;&#x9;Set ct = m_tv&#xA;        &#x9;&#x9;ParentID = ct.ConnectorID&#xA;    &#x9;&#x9;Case EA_RoleTag&#xA;        &#x9;&#x9;''' RoleTagConnector is an expesive call (SQLQuery) &#xA;        &#x9;&#x9;''' but at least it's cached internally&#xA;        &#x9;&#x9;ParentID = RoleTagConnector.ConnectorID&#xA;    &#x9;&#x9;Case Else&#xA;        &#x9;&#x9;Err.Raise err_TaggedValueType, msg_TaggedValueType '// Indicate error&#xA;    &#x9;End Select&#x9;&#x9;&#x9;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;''' [TvObject]&#xA;&#x9;''' Publishes the currently wrapped TaggedValue. Be aware of that this native &#xA;&#x9;''' TV object is NOT &quot;type safe&quot; due to EA tag's inherent un-orthogonality.&#xA;&#x9;''' Use IsElemenTag, IsConnectorTag, IsRoleTag etc (via this wrapper) to determine &#xA;&#x9;'''&#x9;the Tag type before using this property.&#xA;&#x9;Public Property Get TvObject() ''': EA.TaggedValue&#xA;&#x9;&#x9;Set TvObject = m_tv&#xA;&#x9;End Property&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;''' [ParentObject]&#xA;&#x9;Public Property Get ParentObject() ''': EA.&lt;Object&gt;&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Set ParentObject = M_ParentObject()&#x9;&#x9;''' M_ = No statistics!&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [M_ParentObject]&#xA;&#x9;''' This prop is mainly for internal use. It will NOT succed to call&#xA;&#x9;''' (un-orthogonal) properties since it returns the actual model entity (thus&#xA;&#x9;''' for example a RoleTag's Parent (and ConnectionEnd) will not have a property &#xA;&#x9;''' Name(), and so an access violation will be rised if calling it.&#xA;&#x9;'''&#xA;&#x9;''' ANYWAY, for exactly the above (un-orthogonality) reason, this wrapper also &#xA;&#x9;''' provides with type-check functions as enable a convenient means to avoid calling &#xA;&#x9;''' unorthogonal properties (See IsRoleTag, IsClassTag, IsPackageTag, IsMethodTag, &#xA;&#x9;''' IsAttributeTag and IsConnectionTag, which can be called after the initial Wrap)&#x9;&#xA;&#x9;Public Property Get M_ParentObject() ''': EA.&lt;Object&gt;&#xA;    &#x9;If m_parentobj Is Nothing Then&#xA;    &#x9;&#x9;Select Case m_objecttype&#xA;    &#x9;&#x9;&#x9;Case EA_TaggedValue&#xA;    &#x9;&#x9;&#x9;' Set = use internal ref&#xA;    &#x9;&#x9;&#x9;Set m_parentobj = Repository.GetElementByID(m_tv.ParentID)&#xA;    &#x9;&#x9;&#x9;''' Too expesive to set ParentObject.ObjectType unless required:&#xA;    &#x9;&#x9;&#x9;''' m_parent_objecttype = [skip]&#xA;    &#x9;&#x9;&#x9;Case EA_AttributeTag&#x9;&#xA;    &#x9;&#x9;&#x9;Dim at As EA.AttributeTag&#xA;    &#x9;&#x9;&#x9;Set at = m_tv&#xA;    &#x9;&#x9;&#x9;Set m_parentobj = Repository.GetAttributeByID(at.AttributeID)&#xA;    &#x9;&#x9;&#x9;''' While at it, set also:&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_Attribute&#xA;    &#x9;&#x9;&#x9;Case EA_MethodTag&#xA;    &#x9;&#x9;&#x9;Dim mt As EA.MethodTag&#xA;    &#x9;&#x9;&#x9;Set mt = m_tv&#xA;    &#x9;&#x9;&#x9;Set m_parentobj = Repository.GetMethodByID(mt.MethodID)&#xA;    &#x9;&#x9;&#x9;''' While at it, set also:&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_Method&#xA;    &#x9;&#x9;&#x9;Case EA_ConnectorTag&#x9;&#xA;    &#x9;&#x9;&#x9;''' Return the Connector's name&#xA;    &#x9;&#x9;&#x9;Dim ct As EA.ConnectorTag&#xA;    &#x9;&#x9;&#x9;Set ct = m_tv&#xA;    &#x9;&#x9;&#x9;Set m_parentobj = Repository.GetConnectorByID(ct.ConnectorID)&#xA;    &#x9;&#x9;&#x9;''' While at it, set also:&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_Connector&#xA;    &#x9;&#x9;&#x9;Case EA_RoleTag&#xA;    &#x9;&#x9;&#x9;''' EA.ConnectorEnd&#xA;    &#x9;&#x9;&#x9;Set m_parentobj = ConnectionEndForRoleTag()&#xA;    &#x9;&#x9;&#x9;''' While at it, set also:&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_RoleTag&#xA;    &#x9;&#x9;&#x9;Case Else&#xA;    &#x9;&#x9;&#x9;Err.Raise err_TaggedValueType, msg_TaggedValueType '// Indicate error&#xA;    &#x9;&#x9;End Select&#xA;    &#x9;End If&#xA;    &#x9;Set M_ParentObject = m_parentobj&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ParentName]&#xA;&#x9;''' This prop. is a &quot;proof of concept&quot; for testing the un-orthogonality &#xA;&#x9;''' hidden in this wrapper concept.&#xA;&#x9;Public Property Get ParentName() ''': String&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Select Case m_objecttype&#xA;    &#x9;&#x9;Case EA_RoleTag&#xA;    &#x9;&#x9;''' Cast neded for access ConnectorEnd's unique properties&#xA;    &#x9;&#x9;Dim p_obj As EA.ConnectorEnd&#xA;    &#x9;&#x9;Set p_obj = M_ParentObject&#xA;    &#x9;&#x9;ParentName = p_obj.Role&#xA;    &#x9;&#x9;Case Else&#xA;    &#x9;&#x9;ParentName = M_ParentObject.Name&#xA;    &#x9;End Select&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ParentObjectType]&#xA;&#x9;Public Property Get ParentObjectType() ''': Integer (ot&lt;ObjectType&gt;)&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If m_parent_objecttype &gt; otNone Then&#x9;&#x9;''' otNone = 0&#xA;    &#x9;&#x9;M_ParentObjectType = m_parent_objecttype&#xA;    &#x9;Else&#xA;    &#x9;&#x9;''' From the TaggedValue Type we mosty often know which Type the aprent has.&#xA;    &#x9;&#x9;''' Check Type of TaggedValue (from Obj.ObjectType which was set already at Wrap)&#xA;    &#x9;&#x9;Select Case m_objecttype&#x9;&#xA;    &#x9;&#x9;&#x9;Case EA_TaggedValue&#xA;    &#x9;&#x9;&#x9;&#xA;    &#x9;&#x9;&#x9;' Use internal ref&#xA;    &#x9;&#x9;&#x9;Select Case Repository.GetElementByID(m_tv.ParentID).ObjectType&#xA;    &#x9;&#x9;&#x9;&#x9;Case EA_Package&#x9;&#xA;    &#x9;&#x9;&#x9;&#x9;m_parent_objecttype  = EA_Package&#xA;    &#x9;&#x9;&#x9;&#x9;Case EA_Element &#xA;    &#x9;&#x9;&#x9;&#x9;m_parent_objecttype = EA_Element&#xA;    &#x9;&#x9;&#x9;&#x9;Case Else &#xA;    &#x9;&#x9;&#x9;&#x9;Err.Raise err_ElementType, msg_ElementType '// Indicate error&#xA;    &#x9;&#x9;&#x9;End Select&#xA;    &#x9;&#x9;&#x9;&#xA;    &#x9;&#x9;&#x9;Case EA_AttributeTag&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_Attribute&#xA;    &#x9;&#x9;&#x9;Case EA_MethodTag&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_Method&#xA;    &#x9;&#x9;&#x9;Case EA_ConnectorTag&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_Connector&#xA;    &#x9;&#x9;&#x9;Case EA_RoleTag&#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = EA_ConnectorEnd&#xA;    &#x9;&#x9;&#x9;Case Else &#xA;    &#x9;&#x9;&#x9;m_parent_objecttype = otNone&#xA;    &#x9;&#x9;&#x9;Err.Raise err_ElementType, msg_ElementType&#xA;    &#x9;&#x9;End Select&#xA;    &#x9;End If&#xA;    &#x9;M_ParentObjectType = m_parent_objecttype&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsAttributeTag]&#xA;&#x9;Public Property Get IsAttributeTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsAttributeTag = (m_objecttype = EA_AttributeTag)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsMethodTag]&#xA;&#x9;Public Property Get IsMethodTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsMethodTag = (m_objecttype = EA_MethodTag)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsConnectionTag]&#xA;&#x9;Public Property Get IsConnectionTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsConnectionTag = (m_objecttype = EA_ConnectorTag)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsRoleTag]&#xA;&#x9;Public Property Get IsRoleTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsRoleTag = (m_objecttype = EA_RoleTag)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get M_IsRoleTag() ''': Boolean&#xA;    &#x9;M_IsRoleTag = (m_objecttype = EA_RoleTag)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsTaggedValue]&#xA;&#x9;Public Property Get IsTaggedValue() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsTaggedValue = (m_objecttype = EA_TaggedValue)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsClassTag]&#xA;&#x9;''' Element is same as Interface &amp; Class&#xA;&#x9;Public Property Get IsClassTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsClassTag = (m_objecttype = EA_TaggedValue)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' Element is same as Interface &amp; Class&#xA;&#x9;Public Property Get IsElementTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsElementTag = (m_objecttype = EA_TaggedValue)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' Element is same as Interface &amp; Class&#xA;&#x9;''' TODO: Check stereotype to distinguish from regular Class&#xA;&#x9;Public Property Get IsInterfaceTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsInterfaceTag = (m_objecttype = EA_TaggedValue)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsPackageTag]&#xA;&#x9;Public Property Get IsPackageTag() ''': Boolean&#xA;    &#x9;IncStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;IsPackageTag = (m_objecttype = EA_TaggedValue)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' ----------&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;''' STATS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;''' ----------&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9;Public Sub StatsStart() ''': Void&#xA;&#x9;&#x9;UseStats = True&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;ResetStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_starttime = Now()&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Sub StatsStop() ''': Void&#xA;&#x9;&#x9;UseStats = False&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_stoptime = Now()&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_hitcount_acc = m_stats_hitcount_acc + m_stats_hitcount&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_time_acc = m_stats_time_acc + StatsDuration()&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Sub StatsPause() ''': Void&#xA;&#x9;&#x9;UseStats = False&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_stoptime = Now()&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_hitcount_acc = m_stats_hitcount_acc + m_stats_hitcount&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_time_acc = m_stats_time_acc + StatsDuration()&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Sub StatsResume() ''': Void&#xA;&#x9;&#x9;UseStats = True&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_hitcount = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_starttime = Now()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get HasStats() ''': Boolean&#xA;    &#x9;Dim cnt&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;cnt = m_stats_hitcount&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;cnt = cnt + m_stats_wrapcount&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;cnt = cnt + m_stats_hitcount_acc&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;HasStats = cnt &gt; 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsDuration() ''': Time&#xA;    &#x9;If HasStats Then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;StatsDuration = m_stats_stoptime - m_stats_starttime&#x9;''' (($stats))&#xA;    &#x9;Else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;StatsDuration = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsDurationAcc() ''': Time&#xA;    &#x9;If HasStats Then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;StatsDurationAcc = m_stats_time_acc&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;StatsDurationAcc = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsCount() ''': Integer&#xA;&#x9;   StatsCount = m_stats_hitcount&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsWrapCount() ''': Integer&#xA;    &#x9;StatsWrapCount = m_stats_wrapcount&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsCountAcc() ''': Integer&#xA;    &#x9;StatsCountAcc = m_stats_hitcount_acc&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsTimePerHits() ''': Time&#xA;    &#x9;Dim tmp&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If HasStats And (m_stats_hitcount &gt; 0) Then     ''' (($stats))&#xA;    &#x9;&#x9;tmp = (m_stats_stoptime - m_stats_starttime) / m_stats_hitcount&#x9;''' (($stats))&#xA;    &#x9;Else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;tmp = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;StatsTimePerHits = tmp&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsTimePerHitsAcc() ''': Integer&#xA;    &#x9;Dim tmp&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If HasStats And (m_stats_hitcount_acc&gt; 0) Then&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;tmp = m_stats_time_acc / m_stats_hitcount_acc&#x9;''' (($stats))&#xA;    &#x9;Else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;tmp = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;StatsTimePerHitsAcc = tmp&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsHitsPerSecond() ''': Integer&#xA;    &#x9;Dim tmp&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;tmp = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If HasStats Then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;tmp = StatsDuration&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;If tmp &gt; 0 Then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;&#x9;tmp = StatsCount / Second(tmp)&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;Else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;&#x9;tmp = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;tmp = 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;StatsHitsPerSecond = tmp&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Public Property Get StatsHitsPerSecondAcc() ''': Integer&#xA;    &#x9;Dim acc_cnt&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Dim acc_dur&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;Dim res&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#xA;    &#x9;res = 0.0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;acc_dur = StatsDurationAcc()&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;If HasStats And (acc_dur &gt; 0) Then&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;acc_cnt = StatsCountAcc() &#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;On Error Resume Next&#xA;    &#x9;&#x9;&#xA;    &#x9;&#x9;If Second(acc_dur) &gt; 0 Then&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;&#x9;res = acc_cnt / Second(acc_dur)&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;If Err Then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;&#x9;&#x9;'''&#xA;    &#x9;&#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;    &#x9;StatsHitsPerSecondAcc = res&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' Private -------------&#xA;&#x9;&#xA;&#x9;Private Property Let UseStats(aBool) ''': Void&#x9;''' (($stats))&#xA;    &#x9;m_usestats = aBool&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Property&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' (($stats))&#xA;&#x9;Private Sub ResetStats() ''': Void&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_hitcount &#x9;&#x9;= 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_hitcount_acc &#x9;= 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_starttime&#x9;&#x9;= 0.0&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_stoptime &#x9;&#x9;= 0.0&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_time_acc &#x9;&#x9;= 0.0&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;m_stats_wrapcount &#x9;&#x9;= 0&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Sub&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' (($stats))&#xA;&#x9;Private Sub IncStats() ''': Void&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;If m_usestats Then &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;&#x9;m_stats_hitcount = m_stats_hitcount + 1&#x9;''' (($stats))&#xA;&#x9;&#x9;End If&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;End Sub&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' --------------------------&#xA;&#x9;''' PUBLIC FUNCTIONS&#xA;&#x9;''' --------------------------&#xA;&#x9;&#xA;&#x9;''' [Update]&#xA;&#x9;''' Updates internal Dictionaries by emptying &#xA;&#x9;''' and then re-importing data. &#xA;&#x9;''' Called also from Class_Initialize()&#xA;&#x9;Public Sub Update() ''': Void&#xA;&#x9;&#x9;ResetData()&#xA;&#x9;&#x9;LoadPropertyData()&#x9;&#x9;&#x9;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ResetData]&#xA;&#x9;''' Updates internal Dictionaries by emptying them&#xA;&#x9;''' Called from Update() and Class_Initialize()&#xA;&#x9;Private Sub ResetData() ''': Void&#xA;&#x9;&#x9;m_parent_typename &#x9;= &quot;&quot;&#xA;&#x9;&#x9;m_objecttype&#x9;&#x9;= otNone&#xA;&#x9;&#x9;m_parent_objecttype&#x9;= otNone&#xA;&#x9;&#x9;m_startpos&#x9;&#x9;&#x9;= 0&#xA;&#x9;&#x9;m_endpos&#x9;&#x9;&#x9;= 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Set m_tv = Nothing&#xA;&#x9;&#x9;Set m_rt = Nothing&#xA;&#x9;&#x9;Set m_parentobj = Nothing&#xA;&#x9;&#x9;Set m_roletag_connector = Nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Set m_PropertyTypesDictionary = Nothing&#xA;&#x9;&#x9;Set m_PropertyTypesDefaultDictionary = Nothing&#xA;&#x9;&#x9;Set m_PropertyTypesRawDataDictionary = Nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;m_usestats&#x9;&#x9;&#x9;= False&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#xA;&#x9;&#x9;ResetStats()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''' (($stats))&#x9;&#x9;&#x9;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [LoadPropertyData]&#xA;&#x9;''' Updates internal Dictionaries by re-importing data. &#xA;&#x9;''' Called also from Update()  and Class_Initialize()&#xA;&#x9;Private Sub LoadPropertyData()&#xA;&#x9;&#x9;RegisterPropertyTypes()&#xA;&#x9;&#x9;RegisterPropertyTypesRawData()&#xA;&#x9;&#x9;RegisterPropertyTypesDefaults()&#x9;&#x9;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' --------------------------&#xA;&#x9;''' INTERNAL PROPERTIES&#xA;&#x9;''' --------------------------&#xA;&#x9;&#xA;&#x9;''' [ConnectionEndForRoleTag]&#xA;&#x9;''' Returns the ConnectorEnd Object&#xA;&#x9;''' Accessing a ConnectorEnd/RoleObj from TaggedValues must be done via &#xA;&#x9;''' its Connector (since ConnectorEnds are stored in the same table, &#xA;&#x9;''' the 't_connector'&#xA;&#x9;''' Determine which end of the (parent) Connector to read from&#xA;&#x9;''' Notice that the property RoleTagConnector is cached.&#xA;&#x9;Private Property Get ConnectionEndForRoleTag()&#x9;&#xA;    &#x9;If m_rt Is Nothing Then&#xA;    &#x9;&#x9;Err.Raise err_TaggedValueType, msg_TaggedValueType '// Indicate error&#xA;    &#x9;ElseIf IsClient Then  &#x9;''' = EA_ASSOCIATION_SOURCE&#xA;    &#x9;&#x9;Set ConnectionEndForRoleTag = RoleTagConnector.ClientEnd&#xA;    &#x9;Else&#x9;&#x9;&#x9;&#x9;''' = EA_ASSOCIATION_TARGET&#xA;    &#x9;&#x9;Set ConnectionEndForRoleTag = RoleTagConnector.SupplierEnd&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ConnectorForRoleTag]&#xA;&#x9;Private Property Get ConnectorForRoleTag()&#xA;    &#x9;Dim guid&#xA;    &#x9;If QueryRoleTagForElementID(guid) Then &#xA;    &#x9;&#x9;Set ConnectorForRoleTag = Repository.GetConnectorByGuid(guid)&#xA;    &#x9;Else&#xA;    &#x9;&#x9;Set ConnectorForRoleTag = Nothing&#xA;    &#x9;End If&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' Applies only when RoleTag is visitor. &#xA;&#x9;''' Raises an error if TaggeValue Visitor is not of the type EA.RoleTag&#xA;&#x9;''' Only for internal use as to support RoleTags with optimized acceess&#xA;&#x9;''' to it's owning Connector (because many RoleTag properties are stored&#xA;&#x9;''' in the owning Connector's t_cmnnector table)&#xA;&#x9;Private Property Get RoleTagConnector()&#xA;    &#x9;If m_rt Is Nothing Then&#xA;    &#x9;&#x9;Err.Raise err_TaggedValueType, msg_TaggedValueType&#xA;    &#x9;ElseIf m_roletag_connector Is Nothing Then&#xA;    &#x9;&#x9;Set m_roletag_connector = ConnectorForRoleTag()&#xA;    &#x9;End If&#xA;    &#x9;Set RoleTagConnector = m_roletag_connector&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [PropertyTypesDictionary]&#xA;&#x9;''' Stores the actual PropertyTypes from Repository.PropertyTypes&#xA;&#x9;''' for fast access. TaggedValue Name is Key, the TV Object is data&#xA;&#x9;Private Property Get PropertyTypesDictionary&#xA;    &#x9;If m_PropertyTypesDictionary Is Nothing Then _&#xA;    &#x9;Set m_PropertyTypesDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;    &#x9;Set PropertyTypesDictionary = m_PropertyTypesDictionary&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [PropertyTypesDefaultDictionary]&#xA;&#x9;''' Stores the cached DEFAULT VALUE of each PropertyTypes from the Repository.PropertyTypes&#xA;&#x9;''' for fast access. TaggedValue Name is Key, the Default Value is data&#xA;&#x9;Private Property Get PropertyTypesDefaultDictionary()  ''': Dictionary&#xA;    &#x9;If m_PropertyTypesDefaultDictionary Is Nothing Then _&#xA;    &#x9;   Set m_PropertyTypesDefaultDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;    &#x9;Set PropertyTypesDefaultDictionary = m_PropertyTypesDefaultDictionary&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [PropertyTypesRawDataDictionary]&#xA;&#x9;''' Stores the cached RAW TEXT from each PropertyTypes from the Repository.PropertyTypes&#xA;&#x9;''' for fast access. TaggedValue Name is Key, the raw text is data&#xA;&#x9;Private Property Get PropertyTypesRawDataDictionary() ''': Dictionary&#xA;    &#x9;If m_PropertyTypesRawDataDictionary Is Nothing Then&#xA;    &#x9;&#x9;Set m_PropertyTypesRawDataDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;    &#x9;End If&#xA;    &#x9;Set PropertyTypesRawDataDictionary = m_PropertyTypesRawDataDictionary&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsSource]&#xA;&#x9;Private Property Get IsSource() ''': Boolean&#xA;    &#x9;IsSource = m_rt.BaseClass = EA_ASSOCIATION_SOURCE&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsClient]&#xA;&#x9;Private Property Get IsClient() ''': Boolean&#xA;&#x9;   IsClient = m_rt.BaseClass = EA_ASSOCIATION_SOURCE&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsTarget]&#xA;&#x9;Private Property Get IsTarget() ''': Boolean&#xA;&#x9;   IsTarget = m_rt.BaseClass = EA_ASSOCIATION_TARGET&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [IsSupplier]&#xA;&#x9;Private Property Get IsSupplier() ''': Boolean&#xA;&#x9;   IsSupplier = m_rt.BaseClass = EA_ASSOCIATION_TARGET&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [TryExtractStereotypeDefault]&#xA;&#x9;''' This level of default retrieves its source data&#xA;&#x9;''' from the Stereotype Initial value, which will have &#xA;&#x9;''' the following format: &quot;...Default:&lt;Value&gt;&quot;&#xA;&#x9;Private Function TryExtractStereotypeDefault(ByRef s) ''': Boolean&#x9;&#x9;&#xA;&#x9;&#x9;''' Special case for RoleTags&#xA;&#x9;&#x9;If m_objecttype = EA_RoleTag Then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;If TryExtractRoleTagStereotypeDefault(s) Then&#xA;&#x9;&#x9;&#x9;&#x9;TryExtractStereotypeDefault = s &lt;&gt; &quot;&quot;&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;s = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;TryExtractStereotypeDefault = False&#xA;&#x9;&#x9;&#x9;End If&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Dim tmp&#xA;&#x9;&#x9;&#x9;m_startpos = 0&#xA;&#x9;&#x9;&#x9;tmp = m_tv.Notes()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;m_startpos = InStr(1, tmp, &quot;Default:&quot;, 1)&#xA;&#x9;&#x9;&#x9;''' If Contains :&#xA;&#x9;&#x9;&#x9;If m_startpos &gt; 0 Then&#xA;&#x9;&#x9;&#x9;&#x9;m_startpos = m_startpos + 8  ''' = Len(&quot;Default:&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;''' Use case-IN-sensitive search and strip out &#xA;&#x9;&#x9;&#x9;&#x9;''' the value part to the right of the text &quot;Default:&quot;&#xA;&#x9;&#x9;&#x9;&#x9;s = Trim(Mid(tmp, m_startpos ))&#xA;&#x9;&#x9;&#x9;&#x9;TryExtractStereotypeDefault = s &lt;&gt; &quot;&quot;&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;s = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;TryExtractStereotypeDefault = False&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'''&#x9;Getters for RoleTag&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [TryExtractRoleTagValue]&#xA;&#x9;''' Returns pnly the Value(), if any. Since this is only a &quot;helper&quot; function &#xA;&#x9;''' thus it must not control the semantics of values. &#xA;&#x9;''' However, it actually returns the string content &quot;$ea_notes=&quot;, although the &#xA;&#x9;'''&#x9;function result returns &quot;False&quot; as to leave to the caller to determine &#xA;&#x9;''' whether to display that (control) string or not.&#xA;&#x9;Private Function TryExtractRoleTagValue(ByRef S) ''': Boolean&#xA;&#x9;&#x9;''' ------------------------------------&#xA;&#x9;&#x9;''' FUTURE FUNCTIONALITY&#xA;&#x9;&#x9;''' If m_rt.HasAttributes() then &#xA;&#x9;&#x9;''' &#x9;m_rt.GetAttribute(&quot;$ea_notes&quot;)&#xA;&#x9;&#x9;''' ------------------------------------&#xA;&#x9;&#x9;''' Example-string to examine; &quot;Value$ea_notes=Default: DefaultValue&quot;&#xA;&#x9;&#x9;m_startpos = InStr(1, S, &quot;$ea_notes=&quot;, 1)&#xA;&#x9;&#x9;If m_startpos &gt; 1 Then&#xA;&#x9;&#x9;&#x9;''' Contains 'Value' (which has precedence over 'DefaultValue')&#xA;&#x9;&#x9;&#x9;S = Trim( Mid(S, 1, m_startpos-1) )&#xA;&#x9;&#x9;&#x9;TryExtractRoleTagValue = True&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;TryExtractRoleTagValue = False&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [TryExtractRoleTagStereotypeDefault]&#xA;&#x9;''' Returns ONLY Default value (from Stereotype) and disregards any Value() or &#xA;&#x9;''' GlobalDefault() value. &#xA;&#x9;''' Strict &quot;m_startpos = 1&quot; logic will NOT return the default value even if it&#xA;&#x9;''' exists, if a value is preceeding it. Think about that.&#xA;&#x9;''' &#xA;&#x9;''' In this case we only want a default value from here if - and only if - no &#xA;&#x9;''' value is present in front of the &quot;$ea_notes=&quot; control string. The reason for &#xA;&#x9;''' this is that the user has selected a another value than the &#xA;&#x9;''' default value for this TV (store BEFORE the $ea_notes tag), and such explicit &#xA;&#x9;''' user choices must never be overrided.&#xA;&#x9;''' &#xA;&#x9;''' For &quot;direct access&quot; of the property content (without any semantics applied), &#xA;&#x9;''' use the M_Value() or M_Default() instead.&#xA;&#x9;Private Function TryExtractRoleTagStereotypeDefault(ByRef S) ''': String, Boolean&#xA;&#x9;&#x9;''' Example content :&#xA;&#x9;&#x9;''' S = Value$ea_notes=Default: DefaultValue   &#xA;&#x9;&#x9;m_startpos = InStr(1, S, &quot;$ea_notes=Default:&quot;, 1)&#xA;&#x9;&#x9;If m_startpos = 1 Then&#xA;&#x9;&#x9;&#x9;''' Try extracting to the right of &quot;$ea_notes=Default:&quot;&#xA;&#x9;&#x9;&#x9;m_startpos = m_startpos + 18 &#x9;''' 18 = Len(&quot;$ea_notes=Default:&quot;)&#xA;&#x9;&#x9;&#x9;S = Trim( Mid(S, m_startpos) )&#xA;&#x9;&#x9;&#x9;TryExtractRoleTagStereotypeDefault = True&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;S = &quot;&quot;&#xA;&#x9;&#x9;&#x9;TryExtractRoleTagStereotypeDefault = False&#xA;&#x9;&#x9;End If&#x9;&#x9;&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [PropertyTypeByName]&#xA;&#x9;Private Function PropertyTypeByName(aNameAsKey, ByRef OutProp) ''': PropertyType, Boolean&#xA;&#x9;&#x9;''' OutResult type: EA.PropertyType&#xA;&#x9;&#x9;If m_PropertyTypesDictionary.Exists(aNameAsKey) Then&#xA;&#x9;&#x9;&#x9;Set OutProp = m_PropertyTypesDictionary(aNameAsKey)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Set OutProp = Nothing&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;PropertyTypeByName = Not OutProp Is Nothing&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [TryGetPropertyTypeDefault]&#xA;&#x9;Private Function TryGetPropertyTypeDefault(aNameAsKey, ByRef OutResult) ''': String, Boolean&#xA;&#x9;&#x9;If m_PropertyTypesDefaultDictionary.Exists(aNameAsKey) Then&#xA;&#x9;&#x9;&#x9;OutResult = m_PropertyTypesDefaultDictionary(aNameAsKey)&#xA;&#x9;&#x9;&#x9;TryGetPropertyTypeDefault = OutResult &lt;&gt; &quot;&quot;&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;OutResult = &quot;&quot;&#xA;&#x9;&#x9;&#x9;TryGetPropertyTypeDefault = False&#xA;&#x9;&#x9;End If&#x9;&#x9;&#x9;&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [RegisterPropertyTypes]&#xA;&#x9;''' Stores the very PropertyType object with the name as Key.&#xA;&#x9;Private Sub RegisterPropertyTypes() ''': Void&#xA;&#x9;&#x9;Dim pt As EA.PropertyType&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;For Each pt In Repository.PropertyTypes&#xA;&#x9;&#x9;&#x9;PropertyTypesDictionary.Add pt.Tag, pt&#xA;&#x9;&#x9;Next&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [RegisterPropertyTypesDefaults]&#xA;&#x9;''' Stores the refined, extracted default value, as defined in &#xA;&#x9;''' the PropertyType text &quot;blob&quot;, into a Dictionary. The  &#xA;&#x9;''' name is used as the Key.&#xA;&#x9;Private Sub RegisterPropertyTypesDefaults() ''': Void&#xA;&#x9;&#x9;Dim sRawData&#xA;&#x9;&#x9;Dim sDefault&#xA;&#x9;&#x9;Dim sPropNameKey&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;For Each sPropNameKey In PropertyTypesRawDataDictionary.Keys&#xA;&#x9;&#x9;&#x9;''' Prepare / refine raw data before inserting it into the Dictionary&#xA;&#x9;&#x9;&#x9;sRawData = m_PropertyTypesRawDataDictionary(sPropNameKey)&#xA;&#x9;&#x9;&#x9;sDefault = ExtractPropertyFromRawStr(sRawData, &quot;Default&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'''Add to dictionary&#xA;&#x9;&#x9;&#x9;PropertyTypesDefaultDictionary.Add sPropNameKey, sDefault&#xA;&#x9;&#x9;Next&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [RegisterPropertyTypesRawData]&#xA;&#x9;Private Sub RegisterPropertyTypesRawData() ''': Void&#xA;&#x9;&#x9;Dim p As EA.PropertyType&#x9;&#xA;&#x9;&#x9;Dim sTemp&#xA;&#x9;&#x9;For Each p In Repository.PropertyTypes&#xA;&#x9;&#x9;&#x9;sTemp = p.Detail()&#xA;&#x9;&#x9;&#x9;''' Prepare the raw str for faster extraction (Lazy Eval)&#xA;&#x9;&#x9;&#x9;FormatPropertyTypesText sTemp &#xA;&#x9;&#x9;&#x9;''' Store so it can later be retrieved ByName (= p.Tag)&#xA;&#x9;&#x9;&#x9;PropertyTypesRawDataDictionary.Add p.Tag, sTemp&#xA;&#x9;&#x9;Next&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' HELPER FUNCTIONS&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [GetValueByXmlTagName]&#xA;&#x9;''' Used for extracting single values from Repository.SQLQuery results (xml format).&#xA;&#x9;''' Omit the &lt;&gt; tags in aTagName.&#xA;&#x9;Private Function GetValueByXmlTagName(ByRef aStr, ByRef aTagName, ByRef OutResult) ''': String, Boolean&#xA;&#x9;&#x9;Dim sTag&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;m_startpos = 0&#xA;&#x9;&#x9;m_endpos = 0&#xA;&#x9;&#x9;sTag = &quot;&lt;&quot; &amp; aTagName &amp; &quot;&gt;&quot;&#xA;&#x9;&#x9;''' Get first tag pos&#xA;&#x9;&#x9;m_startpos = InStr(1, aStr, sTag, 1) + Len(aTagName)+2&#xA;&#x9;&#x9;If m_startpos &gt; 0 Then&#xA;&#x9;&#x9;&#x9;''' End tag pos&#xA;&#x9;&#x9;&#x9;m_endpos = InStr(1, aStr, &quot;&lt;/&quot; &amp; aTagName &amp; &quot;&gt;&quot;, 1)&#xA;&#x9;&#x9;&#x9;'' The value&#xA;&#x9;&#x9;&#x9;OutResult = Mid(aStr, m_startpos, m_endpos - m_startpos)&#xA;&#x9;&#x9;&#x9;GetValueByXmlTagName = True&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;OutResult = &quot;&quot;&#xA;&#x9;&#x9;&#x9;GetValueByXmlTagName = False&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [QueryRoleTagForElementID]&#xA;&#x9;''' Retrieves ElementID from EA.TagRole stored in &quot;t_taggedvalue&quot;.  This &#xA;&#x9;''' value is not exposed by the EA.RoleTag although there's a method for it.&#xA;&#x9;''' Be aware of that the property name (PropertyGUID) is not the same as &#xA;&#x9;''' the table name (PropertyID).&#xA;&#x9;''' The resulting GUID to be used for fetching the parent Connector &#xA;&#x9;''' from the table &quot;t_connector&quot;. Code example:&#xA;&#x9;''' -----------------------------------------------------------------------&#xA;&#x9;''' If QueryRoleTagForElementID(m_rt, guid) Then _&#xA;&#x9;''' &#x9;Set conn = Repository.GetConnectorByGuid(guid)&#xA;&#x9;''' -----------------------------------------------------------------------&#xA;&#x9;Private Function QueryRoleTagForElementID(ByRef OutGUID) ''': Boolean&#xA;&#x9;&#x9;Dim result&#xA;&#x9;&#x9;''' SQL - The query returns xml, in this format:&#xA;&#x9;&#x9;''' -------------------------------------------------------------------&#xA;&#x9;&#x9;'''&#x9;&#x9;&lt;EADATA version=&quot;1.0&quot; exporter=&quot;Enterprise Architect&quot;&gt;&#xA;&#x9;&#x9;'''&#x9;&#x9;&#x9;&lt;Dataset_0&gt;&lt;Data&gt;&lt;Row&gt;&lt;ElementID&gt;{D5C40150-0CE8-4c24-A635-C508623F9D45}&lt;/ElementID&gt;&lt;/Row&gt;&lt;/Data&gt;&lt;/Dataset_0&gt;&lt;/EADATA&gt;&#x9;&#xA;&#x9;&#x9;''' -------------------------------------------------------------------&#xA;&#x9;&#x9;result = Repository.SQLQuery( _&#xA;    &#x9;&#x9;&quot;SELECT t_taggedvalue.ElementID &quot; &amp; _&#xA;    &#x9;&#x9;&quot;FROM t_taggedvalue &quot; &amp; _&#xA;    &#x9;&#x9;&quot;WHERE (PropertyID='&quot; &amp; m_rt.PropertyGUID &amp; &quot;');&quot; _&#xA;    &#x9;&#x9;)&#xA;&#x9;&#x9;If GetValueByXmlTagName(result, &quot;ElementID&quot;, result) And (result&lt;&gt;&quot;&quot;) Then&#xA;&#x9;&#x9;&#x9;OutGUID = result&#xA;&#x9;&#x9;&#x9;QueryRoleTagForElementID = True&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;OutGUID = &quot;&quot;&#xA;&#x9;&#x9;&#x9;QueryRoleTagForElementID = False&#xA;&#x9;&#x9;End If&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' ----------------------------------&#xA;&#x9;''' EXTRACT (ANY) PROPERTY FROM STRING&#xA;&#x9;''' ----------------------------------&#xA;&#x9;''' [ExtractPropertyFromRawStr]&#xA;&#x9;''' EXTRACT VALUE FROM STRING&#xA;&#x9;''' * Result: Extracts named values from a &quot;lump&quot; field of multiple named &#xA;&#x9;'''   property values. &#xA;&#x9;''' * Entry : aSubjectStr MUST be treated with &quot;FormatPropertyTypesText&quot; before &#xA;&#x9;'''&#x9;  calling this. Using Case IN-sensitive search for keywords.&#xA;&#x9;''' Example value as defined for an individual PropertyType (TaggedValue):&#xA;&#x9;'''  &quot;Persistence : Type=Enum;&#xA;&#x9;'''   Values=Persistent;Transient;&#xA;&#x9;'''   Default=Persistent;&#xA;&#x9;'''   BaseStereotype=class;attribute;...etc;&quot;&#xA;&#x9;Private Function ExtractPropertyFromRawStr(ByRef aSubjectStr, ByVal aFieldName) ''': Boolean&#xA;&#x9;&#x9;Const vbCaseInSensitive = 1&#xA;&#x9;&#x9;Dim pos_crlf&#xA;&#x9;&#x9;Dim copy_len&#xA;&#x9;&#x9;Dim eol_char&#xA;&#x9;&#x9;Dim delimiter&#xA;&#x9;&#x9;Dim result&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If aFieldName=&quot;&quot; Then&#xA;&#x9;&#x9;&#x9;MsgBox &quot;Error: Search string is empty!&quot;&#xA;&#x9;&#x9;&#x9;ExtractPropertyFromRawStr = &quot;&quot;&#xA;&#x9;&#x9;&#x9;Exit Function&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;aSubjectStr = aSubjectStr&#xA;&#x9;&#x9;If InStr(1, aSubjectStr, &quot;;&quot;, vbCaseInSensitive) &gt; 0 Then&#xA;&#x9;&#x9;&#x9;MsgBox &quot;Error: Subject string was not formatted using the method 'FormatPropertyTypesText'&quot;&#xA;&#x9;&#x9;&#x9;ExtractPropertyFromRawStr = &quot;&quot;&#xA;&#x9;&#x9;&#x9;Exit Function&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;result = &quot;&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' Ensure traling &quot;=&quot; char to search for&#xA;&#x9;&#x9;If Right(aFieldName, 1) &lt;&gt; &quot;=&quot; Then _&#xA;&#x9;&#x9;aFieldName = aFieldName &amp; &quot;=&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;m_startpos = 0&#xA;&#x9;&#x9;m_startpos = InStr(1, aSubjectStr, aFieldName, 1)&#x9;''' 1 = Case Insensitive&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' Check if value is &quot;terminated&quot; (=has a trailing &quot;;&quot; after the match)&#xA;&#x9;&#x9;If m_startpos &gt; 0 Then&#xA;&#x9;&#x9;&#x9;m_startpos = m_startpos + Len(aFieldName)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''' Find the end of line&#xA;&#x9;&#x9;&#x9;eol_char = Chr(10)&#xA;&#x9;&#x9;&#x9;m_endpos = InStr(m_startpos, aSubjectStr, eol_char, 1)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''' Check if a CRLF is located *before* the &quot;;&quot;&#xA;&#x9;&#x9;&#x9;pos_crlf = InStr(m_startpos, aSubjectStr, Chr(10), 1)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''' If no CRLF exist, or is located *before* the &quot;;&quot; then that &#xA;&#x9;&#x9;&#x9;''' (probably) means that a semicolon has been used as a delimiter &#xA;&#x9;&#x9;&#x9;''' between values, and not only as a EOL char. Therefore, use LF &#xA;&#x9;&#x9;&#x9;''' as the terminating char instead, and update the delimiter, as &#xA;&#x9;&#x9;&#x9;''' well as the m_endpos (of line) accordingly.&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;If (pos_crlf = 0) Or (pos_crlf &gt; m_endpos) Then&#xA;&#x9;&#x9;&#x9;&#x9;''' Update EOL pos&#xA;&#x9;&#x9;&#x9;&#x9;m_endpos = pos_crlf&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;''' Extract the value part&#xA;&#x9;&#x9;&#x9;If m_endpos &gt; m_startpos Then &#xA;&#x9;&#x9;&#x9;&#x9;''' .......................................................&#xA;&#x9;&#x9;&#x9;&#x9;''' Advance the start pos with the length of the search str&#xA;&#x9;&#x9;&#x9;&#x9;''' Example: &quot;... Default=&lt;some value&gt;; ... &quot;&#xA;&#x9;&#x9;&#x9;&#x9;'''               |    --&gt;|&#xA;&#x9;&#x9;&#x9;&#x9;''' .......................................................&#xA;&#x9;&#x9;&#x9;&#x9;copy_len = m_endpos - m_startpos&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;''' Extract&#xA;&#x9;&#x9;&#x9;&#x9;result = Trim(Mid(aSubjectStr, m_startpos, copy_len))&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;result = &quot;&quot;&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;ExtractPropertyFromRawStr = result&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;''' [ContainsStr]&#xA;&#x9;''' Case INsensitive search&#xA;&#x9;Private Function ContainsStr(aStr, aChar)&#xA;&#x9;&#x9;ContainsStr = InStr(1, aStr, aChar, 1) &gt; 0&#x9;''' vbTextCompare&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;    ''' [FormatPropertyTypesText]&#xA;    ''' Removes any delimiters from line ends, keeping &#xA;    ''' only the LF. Thereafter all delimiters, like &quot;;&quot;, &#xA;    ''' are replaces with commas.&#xA;    ''' Ensures that the last line is treated like the other lines,&#xA;    ''' also meaning that Chr(10) (single LF) can be used as the &#xA;    ''' terminating character.&#xA;    Private Sub FormatPropertyTypesText(ByRef aSubjectStr)&#xA;    &#x9;aSubjectStr = aSubjectStr &amp; Chr(10)&#xA;    &#x9;&#xA;    &#x9;''' Consistent formatting for the rest (, as delimiter, and no &quot;;&quot; &#xA;    &#x9;''' at the ned of lines) : &#xA;    &#x9;&#xA;    &#x9;aSubjectStr = Replace(aSubjectStr, Chr(13), Chr(10), 1, -1, 1)&#xA;    &#x9;aSubjectStr = Replace(aSubjectStr, &quot;;&quot; &amp; Chr(10), Chr(10), 1, -1, 1)&#xA;    &#x9;aSubjectStr = Replace(aSubjectStr, &quot;,&quot; &amp; Chr(10), Chr(10), 1, -1, 1)&#xA;    &#x9;aSubjectStr = Replace(aSubjectStr, &quot;;&quot;, &quot;,&quot;, 1, -1, 1)&#xA;    End Sub&#xA;&#x9;&#xA;&#x9;''' TRILTaggedValueApi&#xA;End Class&#xA;&#xA;Module_Initialize"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="93"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6514C2A3-12FA-4C86-91C4-D9823E966DED}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TaggedValue_Test&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Wrappers\TaggedValues]&#xA;'[group=Testing]&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC TaggedValues.TaggedValue&#xA;!INC Utils.TextFile&#xA;&#xA;''' --------------------------&#xA;''' TESTING TAGGEDVALUE HELPER&#xA;''' --------------------------&#xA;&#xA;Private Sub Module_Initialize()&#xA;&#x9;Set m_tagapi = Nothing&#xA;End Sub&#xA;&#xA;Private Sub Module_Terminate()&#xA;&#x9;Set m_tagapi = Nothing&#xA;End Sub&#xA;&#xA;&#xA;Sub Test_ExtractMethod()&#xA;&#x9;Dim sTestString&#xA;&#x9;sTestString = _&#xA;&#x9;&#x9;&quot;VBA.Persistence : Type=Enum;&quot; &amp; Chr(10) &amp; _&#xA;&#x9;&#x9;&quot;Values=Persistent;Transient;&quot; &amp; Chr(10) &amp; _&#xA;&#x9;&#x9;&quot;Default=Persistent&quot; &amp; Chr(10) &amp; _&#xA;&#x9;&#x9;&quot;BaseStereotype=class;attribute;... etc.;&quot; &amp; Chr(10)&#xA;&#xA;&#x9;''' Testing the robustness of the extract method, test data &#xA;&#x9;''' lacks of a proper eol-char:&#xA;&#x9;''' &quot;Default=Persistent&quot;    &lt;- no trailing semicolon;&#xA;&#x9;&#xA;&#x9;''' Run the test&#x9;&#xA;&#x9;FormatPropertyData sTestString&#xA;&#x9;&#xA;&#x9;MsgBox ExtractStrValueFromRawdata(sTestString, &quot;BaseStereotype&quot;)&#xA;&#x9;&#xA;&#x9;MsgBox ExtractStrValueFromRawdata(sTestString, &quot;Type&quot;) &amp; Chr(10) &amp; _&#xA;&#x9;&#x9;&#x9;ExtractStrValueFromRawdata(sTestString, &quot;Values&quot;) &amp; Chr(10) &amp; _&#xA;&#x9;&#x9;&#x9;ExtractStrValueFromRawdata(sTestString, &quot;Default&quot;) &amp; Chr(10) &amp; _&#xA;&#x9;&#x9;&#x9;ExtractStrValueFromRawdata(sTestString, &quot;BaseStereotype&quot;)&#xA;End Sub&#xA;&#xA;&#xA;Private Sub TEST_PrintTestCase(tv, aDoPrintProperties)&#xA;&#x9;Dim S&#xA;&#x9;Dim t As EA.TaggedValue&#xA;&#x9;Set t = tv&#xA;&#x9;If aDoPrintProperties Then&#xA;&#x9;&#x9;TagHelp.Wrap(t)&#xA;&#x9;&#x9;Session.Output &quot;Name         : &quot; &amp; m_tagapi.Name()&#xA;&#x9;&#x9;Session.Output &quot;Value        : &quot; &amp; m_tagapi.Value()&#xA;&#x9;&#x9;Session.Output &quot;FQName       : &quot; &amp; m_tagapi.FQName()&#xA;&#x9;&#x9;Session.Output &quot;HasNotes     : &quot; &amp; m_tagapi.HasNotes()&#xA;&#x9;&#x9;Session.Output &quot;Notes        : &quot; &amp; m_tagapi.Notes()&#xA;&#x9;&#x9;Session.Output &quot;HasMemo      : &quot; &amp; m_tagapi.HasMemo()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;PropertyID   : &quot; &amp; m_tagapi.PropertyID()&#xA;&#x9;&#x9;Session.Output &quot;PropertyGUID : &quot; &amp; m_tagapi.PropertyGUID()&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;M_Value      : &quot; &amp; m_tagapi.M_Value()&#xA;&#x9;&#x9;Session.Output &quot;M_Default    : &quot; &amp; m_tagapi.M_Default()&#xA;&#x9;&#x9;Session.Output &quot;M_GlobalDefault:&quot;&amp; m_tagapi.M_GlobalDefault()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;ParentName  : &quot; &amp; m_tagapi.ParentName()&#xA;&#x9;&#x9;Session.Output &quot;ParentType  : &quot; &amp; m_tagapi.ParentType()&#xA;&#x9;&#x9;Session.Output &quot;ParentID    : &quot; &amp; m_tagapi.ParentID()&#xA;&#x9;&#x9;If m_tagapi.Wrap(t).IsRoleTag Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;ParentObject.Name: &quot; &amp; m_tagapi.ParentObject.Role()&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;Session.Output &quot;ParentObject.Name: &quot; &amp; m_tagapi.ParentObject.Name()&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;IsPackageTag   : &quot; &amp; m_tagapi.IsPackageTag&#xA;&#x9;&#x9;Session.Output &quot;IsClassTag     : &quot; &amp; m_tagapi.IsClassTag&#xA;&#x9;&#x9;Session.Output &quot;IsTaggedValue  : &quot; &amp; m_tagapi.IsTaggedValue&#xA;&#x9;&#x9;Session.Output &quot;IsElementTag   : &quot; &amp; m_tagapi.IsElementTag&#xA;&#x9;&#x9;Session.Output &quot;IsInterfaceTag : &quot; &amp; m_tagapi.IsInterfaceTag&#xA;&#x9;&#x9;Session.Output &quot;IsAttributeTag : &quot; &amp; m_tagapi.IsAttributeTag&#xA;&#x9;&#x9;Session.Output &quot;IsMethodTag    : &quot; &amp; m_tagapi.IsMethodTag&#xA;&#x9;&#x9;Session.Output &quot;IsConnectionTag: &quot; &amp; m_tagapi.IsConnectionTag&#xA;&#x9;&#x9;Session.Output &quot;IsRoleTag      : &quot; &amp; m_tagapi.IsRoleTag&#xA;&#x9;&#x9;Session.Output &quot; &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;If TagHelp.Wrap(t).TryValue(S) then&#xA;&#x9;&#x9;&#x9;S = S &amp; TagHelp.Name()&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;S = S &amp; TagHelp.Name()&#xA;&#x9;&#x9;End If&#xA;&#xA;&#x9;&#x9;S = S &amp; m_tagapi.PropertyID()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.PropertyGUID()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;S = S &amp; m_tagapi.HasNotes()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.Notes()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.HasMemo()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;S = S &amp; m_tagapi.FQName()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;S = S &amp; m_tagapi.M_Value()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.M_Default()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.M_GlobalDefault()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;S = S &amp; m_tagapi.ParentName()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.ParentType()&#xA;&#x9;&#x9;S = S &amp; m_tagapi.ParentID()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Select Case m_tagapi.M_ParentObjectType&#xA;&#x9;&#x9;    Case EA_Attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim attr As EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set attr = m_tagapi.M_ParentObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;S = S &amp; attr.Name()&#xA;&#x9;&#x9;    Case EA_Method&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim meth As EA.Method&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set meth = m_tagapi.M_ParentObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;S = S &amp; meth.Name()&#xA;&#x9;&#x9;    Case EA_Connector&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim conn As EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set conn = m_tagapi.M_ParentObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;S = S &amp; conn.Name()&#xA;&#x9;&#x9;&#x9;Case EA_ConnectorEnd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim role As EA.ConnectorEnd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set role = m_tagapi.M_ParentObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;S = S &amp; role.Role()&#xA;&#x9;&#x9;&#x9;Case EA_Class&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim elem As EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set elem = m_tagapi.M_ParentObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;S = S &amp; elem.Name()&#xA;&#x9;&#x9;&#x9;Case EA_Package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim pack As EA.Package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set pack = m_tagapi.M_ParentObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;S = S &amp; pack.Name()&#xA;&#x9;&#x9;&#x9;Case Else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Err.Raise err_ElementType, msg_ElementType '// Indicate error&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;End Select&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsAttributeTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsMethodTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsConnectionTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsRoleTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsTaggedValue&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsClassTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsElementTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsInterfaceTag&#xA;&#x9;&#x9;S = S &amp; m_tagapi.IsPackageTag&#x9;&#xA;&#x9;&#x9;S = S &amp; &quot;&quot;&#xA;&#x9;End If&#xA;End Sub&#xA;&#xA;Private Function TagHelp()&#xA;&#x9;if m_tagapi is Nothing then _&#xA;&#x9;&#x9;Set m_tagapi = New TTaggedValueWrapper&#xA;&#x9;Set TagHelp = m_tagapi&#xA;End Function&#xA;&#xA;Private Sub Test_ListAllTaggedValuesForSelectedPackage(DoPrintProperties)&#xA;&#xA;&#x9;Dim p As EA.PropertyType&#xA;&#x9;&#xA;&#x9;Dim et As EA.TaggedValue ''' Same for Package and Class (Element)&#xA;&#x9;Dim Package as EA.Package&#xA;&#x9;Set Package = Repository.GetTreeSelectedPackage()&#xA;&#x9;&#xA;&#x9;''' Print repository&#xA;&#x9;If DoPrintProperties Then&#xA;&#x9;&#x9;Session.Output &quot;-------------------------------------------------&quot;&#xA;&#x9;&#x9;Session.Output &quot; All PropertyTypes in internal respository       &quot;&#xA;&#x9;&#x9;Session.Output &quot;-------------------------------------------------&quot;&#x9;&#xA;&#x9;End If&#xA;&#x9;&#xA;&#x9;Dim tmp as EA.Element&#xA;&#x9;Dim e as EA.Element&#xA;&#xA;&#x9;TagHelp.StatsStart&#xA;&#x9;&#xA;&#x9;''' PACKAGES&#xA;&#x9;If DoPrintProperties then _&#xA;&#x9;&#x9;if Package.Packages.Count&gt;0 then Session.Output &quot;** PACKAGE ********* &quot;&#xA;&#x9;For Each et in Package.Element.TaggedValues&#xA;&#x9;&#x9;TEST_PrintTestCase et, DoPrintProperties&#xA;&#x9;Next&#xA;&#x9;&#xA;&#x9;Dim pkg as EA.Package&#xA;&#x9;For Each pkg in Package.Packages&#xA;&#x9;&#x9;For Each et in pkg.Element.TaggedValues&#xA;&#x9;&#x9;&#x9;TEST_PrintTestCase et, DoPrintProperties&#xA;&#x9;&#x9;Next&#xA;&#x9;Next&#xA;&#xA;&#x9;For Each e in Package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Name         : &quot;  &amp; e.Name()&#xA;&#x9;&#x9;If m_tagapi.TryWrapByName(&quot;VBA.FileName&quot;, e)  then&#xA;&#x9;&#x9;&#x9;TEST_PrintTestCase m_tagapi.tvObject, DoPrintProperties&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' CLASSES&#xA;&#x9;&#x9;If DoPrintProperties then Session.Output &quot;= CLASS ======&quot;&#x9;&#xA;&#x9;&#x9;For Each et in e.TaggedValues&#xA;&#x9;&#x9;&#x9;TEST_PrintTestCase et, DoPrintProperties&#xA;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;''' ATTRIBUTES&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If DoPrintProperties then _&#xA;&#x9;&#x9;&#x9;If e.Attributes.Count&gt;0 then Session.Output &quot;- Attributes&quot;&#xA;&#x9;&#x9;Dim a As EA.Attribute&#xA;&#x9;&#x9;Dim at As EA.AttributeTag&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;For Each a in e.Attributes&#xA;&#x9;&#x9;&#x9;For Each at in a.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;TEST_PrintTestCase at, DoPrintProperties&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;''' METHODS / OPERATIONS&#xA;&#x9;&#x9;If DoPrintProperties then _&#xA;&#x9;&#x9;&#x9;If e.Methods.Count&gt;0 then Session.Output &quot;- Methods&quot;&#xA;&#x9;&#x9;Dim m As EA.Method&#xA;&#x9;&#x9;Dim mt As EA.MethodTag&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;For Each m in e.Methods&#xA;&#x9;&#x9;&#x9;For Each mt in m.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;TEST_PrintTestCase mt, DoPrintProperties&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;''' CONNECTORS&#xA;&#x9;&#x9;If DoPrintProperties then _&#xA;&#x9;&#x9;&#x9;If e.Connectors.Count&gt;0 then Session.Output &quot;- Connectors&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;Dim c As EA.Connector&#xA;&#x9;&#x9;Dim ct As EA.ConnectorTag&#xA;&#x9;&#x9;Dim r as EA.ConnectorEnd&#xA;&#x9;&#x9;Dim rt as EA.RoleTag&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;For Each c in e.Connectors&#xA;&#x9;&#x9;&#x9;If DoPrintProperties then Session.Output &quot; - Connector -&quot;&#xA;&#x9;&#x9;&#x9;For Each ct in c.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;TEST_PrintTestCase ct, DoPrintProperties&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;Dim sGuid&#xA;&#x9;&#x9;&#x9;&#x9;Dim conn as EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;''' ROLES&#xA;&#x9;&#x9;&#x9;&#x9;Set r = c.ClientEnd&#xA;&#x9;&#x9;&#x9;&#x9;For Each rt in r.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If DoPrintProperties then Session.Output &quot;-- Client Role --&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TEST_PrintTestCase rt, DoPrintProperties&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Set r = c.SupplierEnd&#xA;&#x9;&#x9;&#x9;&#x9;For Each rt in r.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If DoPrintProperties then Session.Output &quot;-- Supplier Role --&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TEST_PrintTestCase rt, DoPrintProperties&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;''' Pausing Stats will accumulate (&quot;Acc&quot;) the time since last &#xA;&#x9;&#x9;''' pause-resume. StatsStart will reset all counters&#xA;&#x9;&#x9;TagHelp.StatsPause&#xA;&#x9;'&#x9;&#x9;Session.Output &quot;Hits (Wraps)        : &quot; &amp; m_tagapi.StatsWrapCount()&#xA;&#x9;'&#x9;&#x9;Session.Output &quot;Hits                : &quot; &amp; m_tagapi.StatsCount()&#xA;&#x9;'&#x9;&#x9;Session.Output &quot;Hits (acc)          : &quot; &amp; m_tagapi.StatsCountAcc()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Duration            : &quot; &amp; Minute( m_tagapi.StatsDuration()) &amp; &quot;:&quot; &amp; Round( Second(m_tagapi.StatsDuration()), 3)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Duration       (Acc): &quot; &amp; Minute( m_tagapi.StatsDurationAcc()) &amp; &quot;:&quot; &amp; Round( Second(m_tagapi.StatsDurationAcc()), 3)&#xA;&#x9;'&#x9;&#x9;Session.Output &quot; &quot;&#xA;&#x9;&#x9;TagHelp.StatsResume&#xA;&#x9;Next&#xA;&#xA;&#x9;TagHelp.StatsStop&#xA;&#x9;if TagHelp.HasStats then&#xA;&#x9;&#x9;Session.Output &quot;Statistics&quot;&#xA;&#x9;&#x9;Session.Output &quot;-----------------------------------------------&quot;&#xA;&#x9;&#x9;Session.Output &quot;Hits         (Wraps): &quot; &amp; m_tagapi.StatsWrapCount()&#xA;&#x9;&#x9;Session.Output &quot;Hits                : &quot; &amp; m_tagapi.StatsCount()&#xA;&#x9;&#x9;Session.Output &quot;Hits           (Acc): &quot; &amp; m_tagapi.StatsCountAcc()&#xA;&#x9;&#x9;Session.Output &quot;Hits Per Second     : &quot; &amp; Round( m_tagapi.StatsHitsPerSecond(), 3)&#xA;&#x9;&#x9;Session.Output &quot;Hits Per Second(Acc): &quot; &amp; Round( m_tagapi.StatsHitsPerSecondAcc(), 3)&#xA;&#x9;&#x9;Session.Output &quot;-----------------------------------------------&quot;&#xA;&#x9;&#x9;Session.Output &quot;Duration            : &quot; &amp; Minute( m_tagapi.StatsDuration()) &amp; &quot;:&quot; &amp; Round( Second(m_tagapi.StatsDuration()), 3)&#xA;&#x9;&#x9;Session.Output &quot;Duration       (Acc): &quot; &amp; Minute( m_tagapi.StatsDurationAcc()) &amp; &quot;:&quot; &amp; Round( Second(m_tagapi.StatsDurationAcc()), 3)&#xA;&#x9;&#x9;Session.Output &quot;Time Per Hit        : &quot; &amp; Round( Second(m_tagapi.StatsTimePerHits()), 3) &amp; &quot; sec&quot;&#xA;&#x9;&#x9;Session.Output &quot;Time Per Hit   (Acc): &quot; &amp; Round( Second(m_tagapi.StatsTimePerHitsAcc()), 3) &amp; &quot; sec&quot;&#xA;&#x9;&#x9;Session.Output &quot;-----------------------------------------------&quot;&#xA;&#x9;&#x9;Session.Output &quot; &quot;&#xA;&#x9;End If&#xA;&#x9;Set m_tagapi = Nothing&#xA;End Sub&#xA;&#xA;&#xA;&#xA;''' MAIN&#xA;&#xA;Sub Main()&#xA;&#x9;Dim DoPrintProperties&#xA;&#x9;&#xA;&#x9;Repository.EnsureOutputVisible( &quot;Script&quot; )&#xA;&#x9;&#xA;&#x9;Session.Output &quot;--++:::: START: &quot; &amp; Date() &amp; &quot; -- &quot; &amp; Time() &amp; &quot; ::::++--&quot;&#xA;&#x9;&#xA;&#x9;Module_Initialize()&#xA;&#x9;'Test_ExtractMethod()&#xA;&#x9;'DoPrintProperties = False&#xA;&#x9;DoPrintProperties = True&#xA;&#x9;Test_ListAllTaggedValuesForSelectedPackage(DoPrintProperties)&#xA;'&#x9;DoPrintProperties = True&#xA;'&#x9;Test_ListAllTaggedValuesForSelectedPackage(DoPrintProperties)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;--++:::: STOP: &quot; &amp; Date() &amp; &quot; -- &quot; &amp; Time() &amp; &quot; ::::++--&quot;&#x9;&#xA;&#x9;Module_Terminate()&#x9;&#xA;End Sub&#xA;&#xA;Main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="95"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{ADBA4B94-FF09-415B-8D15-7BEEE8391F6D}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link Selected Connector to CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Bellekens\Bellekens Change Management]&#xA;'[group=Link Group]&#xA;option explicit&#xA;&#xA;!INC Bellekens Change Management.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in the appropriate groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim selectedItem&#xA;&#x9;set selectedItem = Repository.GetContextObject&#xA;&#x9;linkItemToCR selectedItem, nothing&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="96"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Element Group"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="97"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F6B35253-D4A3-46BD-A45F-2482A9933D35}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link Selected Element(s) to CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Bellekens\Bellekens Change Management]&#xA;'[group=Element Group]&#xA;option explicit&#xA;&#xA;!INC Bellekens Change Management.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;'check if called from diagram&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;dim linkedToCR&#xA;&#x9;linkedToCR = false&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;dim selectedItems&#xA;&#x9;&#x9;set selectedItems = getSelectedElements(diagram)&#xA;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkedToCR = true&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, selectedItems&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'if not from diagram then use the selection in the project browser&#xA;&#x9;if not linkedToCR then&#xA;&#x9;&#x9;dim treeSelectedElements&#xA;&#x9;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;&#x9;set selectedItem = Repository.GetContextObject&#xA;&#x9;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getSelectedElements(diagram)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim selectedDiagramObjects&#xA;&#x9;set selectedDiagramObjects = diagram.SelectedObjects&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;for each selectedDiagramObject in selectedDiagramObjects&#xA;&#x9;&#x9;dim selectedElement&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;&#x9;selectedElements.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSelectedElements = selectedElements&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="98"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Browser non used"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="99"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D0C6D5AE-91AE-4E13-903A-06142316F364}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link Selected Project Browser item(s) to CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Bellekens\Bellekens Change Management]&#xA;'[group=Project Browser Group]&#xA;option explicit&#xA;&#xA;!INC Bellekens Change Management.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim treeSelectedElements&#xA;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;else&#xA;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;set selectedItem = Repository.GetTreeSelectedObject&#xA;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="101"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BFE690DB-BC20-43D8-B8F4-0B77359607C4}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Bellekens\Bellekens Change Management]&#xA;'[group=Bellekens Change Management]&#xA;option explicit&#xA;&#xA;!INC Bellekens Change Management.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in the appropriate groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;'check if called from diagram&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;dim linkedToCR&#xA;&#x9;linkedToCR = false&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;dim selectedItems&#xA;&#x9;&#x9;set selectedItems = getSelectedElements(diagram)&#xA;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkedToCR = true&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, selectedItems&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'if not from diagram then use the selection in the project browser&#xA;&#x9;if not linkedToCR then&#xA;&#x9;&#x9;dim treeSelectedElements&#xA;&#x9;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;&#x9;set selectedItem = Repository.GetContextObject&#xA;&#x9;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getSelectedElements(diagram)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim selectedDiagramObjects&#xA;&#x9;set selectedDiagramObjects = diagram.SelectedObjects&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;for each selectedDiagramObject in selectedDiagramObjects&#xA;&#x9;&#x9;dim selectedElement&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;&#x9;selectedElements.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSelectedElements = selectedElements&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="102"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D3FC766D-7159-4955-A383-0BB72A83EEE8}"/>
			<Column name="ScriptAuthor" value="{4F60163A-9A48-4c3f-950A-C2BA61749587}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Check Profile Toolbox Integrity&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to check that all stereotypes in a profile are included in  at least one toolbox profile.&#xA; '&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC M3 Local.configuration&#xA;&#xA;const OPEN_GUILLEMOT = &quot;«&quot;&#xA;const CLOSE_GUILLEMOT = &quot;»&quot;&#xA;&#xA;sub checkProfileGUID( profilePackageGUID)&#xA;&#xA;&#x9;dim profilePackage as EA.Package&#xA;&#x9;set profilePackage = Repository.GetPackageByGuid( profilePackageGUID)&#xA;&#x9;checkProfile profilePackage&#xA;&#x9;&#xA;&#x9;Session.Output vbCRLF &amp; &quot;Done!&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkProfile( profilePackage)&#xA;&#xA;&#x9;dim profileElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim profileName&#x9;&#x9;   'as String&#xA;&#x9;&#xA;&#x9;profileName = profilePackage.Name&#x9;&#xA;&#x9;Session.Output &quot;Checking &quot; &amp; profilePackage.Name &amp; &quot; profile for toolbox items...&quot;&#xA;&#xA;&#x9;for each profileElement in profilePackage.Elements&#xA;&#x9;'Session.Output &quot;Checking &quot; &amp; profileElement.Name &amp; &quot; with Stereotype &quot; &amp; profileElement.Stereotype&#xA;&#x9;&#xA;&#x9;&#x9;if profileElement.Stereotype = &quot;stereotype&quot; then&#xA;&#x9;&#x9;&#x9;checkToolboxItems profileElement, profileName&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;skipping &quot;  &amp; profileElement.Name&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkToolboxItems( profileElement, profileName)&#xA;&#x9;&#xA;&#x9;dim superClass&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim fullMetaClassName&#x9;  ' as String&#xA;&#x9;dim metaClassName&#x9;&#x9;  ' as String&#xA;&#x9;dim toolBoxStereotypeName ' as String&#xA;&#x9;dim toolboxItemName&#x9;&#x9;  ' as String&#xA;&#x9;dim toolboxMetaClassName  ' as String&#xA;&#x9;dim profileNameLen&#x9;      ' as Integer&#xA;&#x9;dim openParenPos&#x9;&#x9;  ' as Integer&#xA;&#x9;dim metaClass&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim toolboxItemList&#x9;&#x9;   'as Scripting.Dictionary&#xA;&#x9;dim toolboxItem&#x9;&#x9;&#x9;&#x9;as EA.Attribute&#xA;&#x9;dim fullStereotypeName&#x9;   'as String&#xA;&#x9;dim profileStereotypeName  'as String&#xA;&#x9;dim toolboxPage&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim toolboxProfile&#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;&#xA;&#x9;profileStereotypeName = profileElement.Name&#xA;&#x9;Session.Output &quot;processing - '&quot; &amp; profileStereotypeName &amp; &quot;' stereotype...&quot;&#x9;&#xA;&#x9;set metaClass = getStereotypeMetaclass( profileElement)&#xA;&#x9;&#xA;&#x9;if metaClass is nothing then&#xA;&#x9;&#x9;Session.Output &quot;   ==&gt; ERROR: NO METACLASS&quot;&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;fullStereotypeName = profileName &amp; &quot;::&quot; &amp; profileStereotypeName&#x9;&#x9;&#xA;&#x9;&#x9;profileNameLen = len( profileName)&#xA;&#x9;&#x9;set toolboxItemList = lookupToolboxItems( fullStereotypeName)&#xA;&#x9;&#x9;if toolboxItemList.Count = 0 then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;   ERROR: Does not appear in any toolbox&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;for each toolboxItem in toolboxItemList.Items&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set toolboxPage = Repository.GetElementByID( toolboxItem.ParentID)&#xA;&#x9;&#x9;&#x9;&#x9;set toolboxProfile = Repository.GetPackageByID( toolboxPage.PackageID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;toolboxItemName = toolboxItem.Name&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;openParenPos = instr( toolboxItemName, &quot;::&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'toolboxStereotypeName = mid( toolboxItemName, profileNameLen + 3, openParenPos - (profileNameLen + 3))&#xA;&#x9;&#x9;&#x9;&#x9;toolboxMetaClassName =  openParenPos &amp;&quot;::&quot;'mid( toolboxItemName, openParenPos + 1, len( toolboxItemName) - openParenPos - 1)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if toolboxMetaClassName = &quot;UML::&quot; then&#x9;'check UML metaclass&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;metaClassName = Mid( toolboxMetaClassName, 6, len( toolboxMetaClassName) - 5)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if metaClassName = metaClass.Name then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;  - &quot; &amp; toolboxProfile.Name &amp; &quot; / &quot; &amp; toolboxPage.Name &amp; &quot; / &quot; &amp; toolboxItemName &amp; &quot; [&quot; &amp; toolboxItem.Default &amp; &quot;]&quot; &amp; &quot; -- OK&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;  - &quot; &amp; toolboxProfile.Name &amp; &quot; / &quot; &amp; toolboxPage.Name &amp; &quot; / &quot; &amp; toolboxItemName &amp; &quot; [&quot; &amp; toolboxItem.Default &amp; &quot;]&quot; &amp; &quot; -- ERROR: METACLASS MISMATCH WITH '&quot; &amp; metaClass.Name &amp; &quot;'&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;  - &quot; &amp; toolboxProfile.Name &amp; &quot; / &quot; &amp; toolboxPage.Name &amp; &quot; / &quot; &amp; toolboxItemName &amp; &quot; [&quot; &amp; toolboxItem.Default &amp; &quot;]&quot; &amp; &quot; -- Non-UML metaclass - not checked&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;'end check UML metaclass&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function getStereotypeMetaclass( profileElement)&#xA;&#xA;&#x9;dim metaClass&#x9;as EA.Element&#xA;&#x9;dim superClass&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set metaClass = getRelatedToElement( profileElement, &quot;Extension&quot;, &quot;Metaclass&quot;)&#x9;&#xA;&#x9;if metaclass is nothing then&#xA;&#x9;&#x9;set superClass = getRelatedToElement( profileElement, &quot;Generalization&quot;, &quot;Stereotype&quot;)&#x9;&#x9;&#xA;&#x9;&#x9;set metaClass = getStereotypeMetaclass( superClass)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;set getStereotypeMetaclass = metaclass&#xA;&#xA;end function&#xA;&#xA;function lookupToolboxItems( fullStereotypeName)&#xA;&#xA;&#x9;dim sqlString &#x9;&#x9;&#x9;   'as String&#xA;&#x9;dim attributeList_XML &#x9;   'as String&#xA;&#x9;dim attributeList_XMLDoc   'as Xml.XmlDocument&#xA;&#x9;dim attribute_XMLNodeList  'as Xml.XmlNodeList&#xA;&#x9;dim attribute_XMLNode &#x9;   'as Xml.XmlNode&#xA;&#x9;dim attributeGUID &#x9;&#x9;   'as String&#xA;&#x9;dim lookupColumnName &#x9;   'as String&#xA;&#x9;dim lookupToolboxItemList  'as Scripting.Dictionary&#xA;&#x9;dim toolboxItem&#x9;&#x9;&#x9;&#x9;as EA.Attribute&#xA;Session.Output &quot;querying &quot; &amp; fullStereotypeName&#xA;&#x9;sqlString = &quot;SELECT ea_guid FROM t_attribute&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_attribute.Name LIKE '&quot; &amp; fullStereotypeName &amp; &quot;'&quot;&#xA;&#xA;&#x9;attributeList_XML = Repository.SQLQuery(sqlString)&#x9;&#xA;&#x9;set attributeList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;&#xA;&#x9;attributeList_XMLDoc.LoadXml(attributeList_XML)&#xA;&#x9;&#xA;&#x9;set lookupToolboxItemList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;set attribute_XMLNodeList = attributeList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#xA;&#x9;for each attribute_XMLNode in attribute_XMLNodeList&#xA;&#xA;&#x9;&#x9;attributeGUID = attribute_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set toolboxItem = Repository.GetAttributeByGuid(attributeGUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lookupToolboxItemList.Add attributeGUID, toolboxItem&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set lookupToolboxItems = lookupToolboxItemList&#xA;&#x9;&#xA;end function&#xA;&#xA;function getRelatedToElement( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#xA;&#x9;&#xA;&#x9;set relatedElementList = getRelatedToElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedToElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedToElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedToElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getRelatedToElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;sub testCheckProfileGUID&#xA;&#xA;&#x9;dim profilePackageGUID   ' as String&#xA;&#x9;&#xA;&#x9;profilePackageGUID = &quot;{1BE8BA27-0DF4-4a63-A015-EFC37AB7D95D}&quot; ' TMF&#xA;&#x9;&#xA;&#x9;checkProfileGUID profilePackageGUID&#xA;&#x9;&#xA;end sub&#xA;&#xA;testCheckProfileGUID"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="103"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{82C5D267-C3E4-4FC1-B625-529C1027FCF2}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LinkToCRMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Bellekens\Bellekens Change Management]&#xA;'[group=Bellekens Change Management]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;' Script Name: LinkToCRMain&#xA;' Author: Geert Bellekens&#xA;' Purpose: Link items to a change reqeust elemnet&#xA;' Date: 2017-02-22&#xA;'&#xA;'&#xA;&#xA;&#xA;function linkItemToCR(selectedItem, selectedItems)&#xA;&#x9;dim groupProcessing&#xA;&#x9;groupProcessing = false&#xA;&#x9;'if the collection is given then we initialize the first item.&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;if not selectedItems is nothing then&#xA;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set selectedItem = selectedItems(0)&#xA;&#x9;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;groupProcessing = true&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;set selectedItem = Repository.GetContextObject()&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'get the select context item type&#xA;&#x9;dim selectedItemType&#xA;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;select case selectedItemType&#xA;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;'if the selectedItem is a package then we use the Element part of the package&#xA;&#x9;&#x9;if selectedItemType = otPackage then&#xA;&#x9;&#x9;&#x9;set selectedItem = selectedItem.Element&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'get the logged in user&#xA;&#x9;&#x9;Dim userLogin&#xA;&#x9;&#x9;userLogin = getUserLogin&#xA;&#x9;&#x9;dim lastCR as EA.Element&#xA;&#x9;&#x9;set lastCR = nothing&#xA;&#x9;&#x9;dim CRtoUse as EA.Element&#xA;&#x9;&#x9;set CRtoUse = nothing&#xA;&#x9;&#x9;set lastCR = getLastUsedCR(userLogin)&#xA;&#x9;&#x9;'get most recent used CR by this user&#xA;&#xA;&#x9;&#x9;if not selectedItem is nothing then&#xA;&#x9;&#x9;&#x9;dim lastComments&#xA;&#x9;&#x9;&#x9;lastComments = vbNullString&#xA;&#x9;&#x9;&#x9;'if there is a last CR then we ask the user if we need to use that one&#xA;&#x9;&#x9;&#x9;if not lastCR is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim response&#xA;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link all &quot; &amp; selectedItems.Count &amp; &quot; elements to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elseif not isCRLinked(selectedItem,lastCR) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link element &quot;&quot;&quot; &amp; selectedItem.Name &amp; &quot;&quot;&quot; to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'check the response&#xA;&#x9;&#x9;&#x9;&#x9;select case response&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbYes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = lastCR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbCancel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'user cancelled, stop altogether&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exit function&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'If there was no last CR, or the user didn't want to link that one we let the user choose one&#xA;&#x9;&#x9;&#x9;if CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim CR_id &#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;CR_ID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Change,Issue,Defect&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;if CR_ID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = Repository.GetElementByID(CR_ID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'user selected same change as last time. So he might want to reuse his comments as well&#xA;&#x9;&#x9;&#x9;&#x9;lastComments = getLastUsedComment(userLogin)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'if the CRtoUse is now selected then we link it to the selected element&#xA;&#x9;&#x9;&#x9;if not CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim linkCounter&#xA;&#x9;&#x9;&#x9;&#x9;linkCounter = 0&#xA;&#x9;&#x9;&#x9;&#x9;'first check if this CR is not already linked&#xA;&#x9;&#x9;&#x9;&#x9;if isCRLinked(selectedItem,CRToUse) and not groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR was already linked to this item&quot;, vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the comments to use&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;comments = InputBox(&quot;Please enter comments for this change&quot;, &quot;Change Comments&quot;,lastComments)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(comments) &gt; 2 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each selectedItem in selectedItems&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'check the object type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case selectedItemType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not isCRLinked(selectedItem,CRToUse) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkCounter = linkCounter + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if linkCounter &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Successfully linked &quot; &amp; selectedItems.Count &amp; &quot; elements to change &quot;&quot;&quot; &amp; CRToUse.Name&amp; &quot;&quot;&quot;&quot;  , vbOKOnly + vbInformation ,&quot;Elements linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;No links created to change &quot; &amp; CRToUse.Name &amp; &quot;.&quot; &amp; vbNewLine &amp; &quot;They are probably already linked&quot; , vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR has not been linked because no comment was provided&quot;, vbOKOnly + vbExclamation ,&quot;No CR link&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;case else&#xA;&#x9;&#x9;MsgBox &quot;Cannot link this type of element to a CR&quot; &amp; vbNewline &amp; &quot;Supported element types are: Element, Package, Attribute, Operation and Relation&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;&#xA;&#xA;function isCRLinked(item, CR)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;isCRLinked = false&#xA;&#x9;for each taggedValue in item.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Value = CR.ElementGUID then&#xA;&#x9;&#x9;&#x9;isCRLinked = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function linkToCR(selectedItem, selectedItemType, CRToUse, userLogin, comments)&#xA;&#x9;Session.Output &quot;CRToUse: &quot; &amp; CRToUse.Name &amp; &quot; userLogin: &quot; &amp; userLogin &amp; &quot; comments: &quot; &amp; comments&#xA;&#x9;dim crTag &#xA;&#x9;set crTag = nothing&#xA;&#x9;set crTag = selectedItem.TaggedValues.AddNew(&quot;CR&quot;,&quot;&quot;)&#xA;&#x9;if not crTag is nothing then&#xA;&#x9;&#x9;crTag.Value = CRToUse.ElementGUID&#xA;&#x9;&#x9;crTag.Notes = &quot;user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;date=&quot; &amp; Year(Date) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Month(Date),2) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Day(Date),2) &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;comments=&quot; &amp; comments&#xA;&#x9;&#x9;crTag.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getLastUsedCR(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select top 1 o.Object_id &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot;&#xA;&#x9;dim CRs&#xA;&#x9;dim CR as EA.Element&#xA;&#x9;set CR = nothing&#xA;&#x9;'get the last CR&#xA;&#x9;set CRs = getElementsFromQuery(sqlGetString)&#xA;&#x9;if CRs.Count &gt; 0 then&#xA;&#x9;&#x9;set CR = CRs(0)&#xA;&#x9;end if&#xA;&#xA;&#x9;set getLastUsedCR = CR&#xA;end function&#xA;&#xA;function getLastUsedComment(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;dim sqlCommentsString&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; mid(tv.Notes, instr(tv.[Notes],'comments=') + len('comments=')) &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; substring(tv.Notes, charindex('comments=',tv.[Notes]) + len('comments='), datalength(tv.Notes))  &quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select top 1 &quot; &amp; sqlCommentsString &amp; &quot; as comments &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot;&#xA;&#x9;dim queryResult &#xA;&#x9;queryResult = Repository.SQLQuery(sqlGetString)&#xA;&#x9;Session.Output queryResult&#xA;&#x9;dim results&#xA;&#x9;results = convertQueryResultToArray(queryResult)&#xA;&#x9;if Ubound(results) &gt; 0 then&#xA;&#x9;&#x9;getLastUsedComment = results(0,0)&#xA;&#x9;else&#xA;&#x9;&#x9;getLastUsedComment = vbNullString&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="104"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="EA-Matic"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="105"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8F495010-0D65-48AF-8523-DD60B31B8401}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;AutoUpdateDiagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' EA-Matic&#xA;' This script, when used with EA-Matic will maintain auto-updating diagrams for elements.&#xA;' A nested diagram with prefix AUTO_ will be considered an auto-updating diagram.&#xA;' The diagram will keep track of all elements related to the owner of the auto diagram.&#xA;' &#xA;' Author: &#x9;Geert Bellekens&#xA;' EA-Matic: http://bellekens.com/ea-matic/&#xA;'&#xA;'maintain a reference to the connector in context&#xA;dim contextConnectorID&#xA;dim oldClientID&#xA;dim oldSupplierID&#xA;&#xA;'a new connector has been created. Add the related elements to the auto-diagram&#xA;function EA_OnPostNewConnector(Info)&#xA;&#x9; 'get the connector id from the Info&#xA;&#x9; dim connectorID&#xA;&#x9; connectorID = Info.Get(&quot;ConnectorID&quot;)&#xA;     dim model &#xA;&#x9; 'get the model&#xA;     set model = getEAAddingFrameworkModel()&#xA;&#x9; dim connector&#xA;&#x9; set connector = model.getRelationByID(connectorID)&#xA;&#x9; 'get the related elements&#xA;&#x9; dim relatedElements&#xA;&#x9; set relatedElements = model.toArrayList(connector.relatedElements)&#xA;&#x9; 'for i = 0 to attributes.Count - 1&#xA;&#x9; if relatedElements.Count = 2 then&#xA;&#x9;&#x9;'once with the first&#xA;&#x9;&#x9;addRelatedElementoAutoDiagram relatedElements(0), relatedElements(1), model&#xA;&#x9;&#x9;'then with the second&#xA;&#x9;&#x9;addRelatedElementoAutoDiagram relatedElements(1), relatedElements(0), model &#xA;&#x9; end if &#xA;end function&#xA;&#xA;'adds the related element to the auto_updatediagrams if any&#xA;function addRelatedElementoAutoDiagram(element,relatedElement, model)&#xA;&#x9;'get the diagram owned by this element&#xA;&#x9;dim ownedDiagrams&#xA;&#x9;set ownedDiagrams = model.toArrayList(element.ownedDiagrams)&#xA;&#x9;for each diagram In ownedDiagrams&#xA;&#x9;&#x9;'check the name of the diagram&#xA;&#x9;&#x9;if Left(diagram.name,LEN(&quot;AUTO_&quot;)) = &quot;AUTO_&quot; then&#xA;&#x9;&#x9;&#x9;'add the related element to the diagram&#xA;&#x9;&#x9;&#x9;diagram.addToDiagram(relatedElement)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'layout the auto diagram&#xA;function layoutAutoDiagram(diagramID, model)&#xA;&#x9;dim diagram&#xA;&#x9;set diagram = model.getDiagramByID(DiagramID)&#xA;&#x9;'if the diagram is an auto diagram then we do an automatic layout&#xA;&#x9;if Left(diagram.name,LEN(&quot;AUTO_&quot;)) = &quot;AUTO_&quot; then&#xA;&#x9;&#x9;'auto layout diagram&#xA;&#x9;&#x9;dim diagramGUIDXml&#xA;&#x9;&#x9;'The project interface needs GUID's in XML format, so we need to convert first.&#xA;&#x9;&#x9;diagramGUIDXml = Repository.GetProjectInterface().GUIDtoXML(diagram.wrappedDiagram.DiagramGUID)&#xA;&#x9;&#x9;'Then call the layout operation&#xA;&#x9;&#x9;Repository.GetProjectInterface().LayoutDiagramEx diagramGUIDXml, lsDiagramDefault, 4, 20 , 20, false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' A connector will be deleted. Remove the elements from the auto-diagram&#xA;function EA_OnPreDeleteConnector(Info)&#xA;&#x9; 'get the connector id from the Info&#xA;&#x9; dim connectorID&#xA;&#x9; connectorID = Info.Get(&quot;ConnectorID&quot;)&#xA;     dim model &#xA;&#x9; 'get the model&#xA;     set model = getEAAddingFrameworkModel()&#xA;&#x9; dim connector&#xA;&#x9; set connector = model.getRelationByID(connectorID)&#xA;&#x9; 'get the related elements&#xA;&#x9; dim relatedElements&#xA;&#x9; set relatedElements = model.toArrayList(connector.relatedElements)&#xA;&#x9; 'for i = 0 to attributes.Count - 1&#xA;&#x9; if relatedElements.Count = 2 then&#xA;&#x9;&#x9;'we only need to remove the related element if they are not connected anymore after deleting the connector&#xA;&#x9;&#x9;'so only if there is only one relationship between the two elements&#xA;&#x9;&#x9;if sharedRelationsCount(relatedElements(0), relatedElements(1), model) &lt;= 1 then&#xA;&#x9;&#x9;&#x9;'once with the first&#xA;&#x9;&#x9;&#x9;removeRelatedElemenFromAutoDiagram relatedElements(0), relatedElements(1), model&#xA;&#x9;&#x9;&#x9;'then with the second&#xA;&#x9;&#x9;&#x9;removeRelatedElemenFromAutoDiagram relatedElements(1), relatedElements(0), model &#xA;&#x9;&#x9;end if&#xA;&#x9; end if &#xA;end function&#xA;&#xA;'returns the number of relations that connecto both elements&#xA;function sharedRelationsCount(elementA, elementB, model)&#xA;&#x9;'start counting at zero&#xA;&#x9;sharedRelationsCount = 0&#xA;&#x9;'get the relationships for both objects&#xA;&#x9;dim relationsA&#xA;&#x9;set relationsA = model.toArrayList(elementA.relationships)&#xA;&#x9;dim relationsB&#xA;&#x9;set relationsB = model.toArrayList(elementB.relationships)&#xA;&#x9;for each relationA in relationsA&#xA;&#x9;&#x9;for each relationB in relationsB&#xA;&#x9;&#x9;&#x9;'if both relations have the same ID then we have a shared relation&#xA;&#x9;&#x9;&#x9;if relationA.id = relationB.id then&#xA;&#x9;&#x9;&#x9;&#x9;sharedRelationsCount = sharedRelationsCount +1&#xA;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;next &#xA;&#x9;next &#xA;end function&#xA;&#xA;' Removes the related element from the auto update diagram if any.&#xA;function removeRelatedElemenFromAutoDiagram(element,relatedElement, model)&#xA;&#x9;'get the diagram owned by this element&#xA;&#x9;dim ownedDiagrams&#xA;&#x9;set ownedDiagrams = model.toArrayList(element.ownedDiagrams)&#xA;&#x9;for each diagram In ownedDiagrams&#xA;&#x9;&#x9;dim diagram&#xA;&#x9;&#x9;set diagram = ownedDiagrams(i)&#xA;&#x9;&#x9;'check the name of the diagram&#xA;&#x9;&#x9;if Left(diagram.name,LEN(&quot;AUTO_&quot;)) = &quot;AUTO_&quot; then&#xA;&#x9;&#x9;&#x9;'Removing elements from a diagram in unfortunately not implemented in the EAAddinFramework so we'll have to do it in the script&#xA;&#x9;&#x9;&#x9;dim eaDiagram &#xA;&#x9;&#x9;&#x9;set eaDiagram = diagram.wrappedDiagram&#xA;&#x9;&#x9;&#x9;for i = 0 to eaDiagram.DiagramObjects.Count -1&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;set diagramObject = eaDiagram.DiagramObjects.GetAt(i)&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = relatedElement.id then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'remove the diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eaDiagram.DiagramObjects.Delete(i)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'refresh the diagram after we changed it&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.reFresh()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'exit the loop we have delete the diagramobject&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'gets a new instance of the EAAddinFramework and initializes it with the EA.Repository&#xA;function getEAAddingFrameworkModel()&#xA;&#x9;'Initialize the EAAddinFramework model&#xA;    dim model &#xA;    set model = CreateObject(&quot;TSF.UmlToolingFramework.Wrappers.EA.Model&quot;)&#xA;    model.initialize(Repository)&#xA;&#x9;set getEAAddingFrameworkModel = model&#xA;end function&#xA;&#xA;'autodiagrams are automatically layouted when opened&#xA;function EA_OnPostOpenDiagram(DiagramID)&#xA;&#x9;dim model &#xA;&#x9;'get the model&#xA;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;layoutAutoDiagram DiagramID, model&#x9;&#xA;end function&#xA;&#xA;'autodiagrams are automatically layouted when we tab is switched to them&#xA;function EA_OnTabChanged(TabName, DiagramID)&#xA;&#x9;if  DiagramID &gt; 0 then&#xA;&#x9;&#x9;dim model &#xA;&#x9;&#x9;'get the model&#xA;&#x9;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;&#x9;layoutAutoDiagram DiagramID, model&#x9;&#x9;&#xA;&#x9;end if&#x9; &#xA;end function&#xA;&#xA;'keep a reference to the selected connector&#xA;function EA_OnContextItemChanged(GUID, ot)&#xA;&#x9;'we only do something when the context item is a connector&#xA;&#x9;if ot = otConnector then&#xA;&#x9;&#x9;dim model&#xA;&#x9;&#x9;'get the model&#xA;&#x9;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;&#x9;'get the connector&#xA;&#x9;&#x9;dim contextConnector&#xA;&#x9;&#x9;set contextConnector = model.getRelationByGUID(GUID)&#xA;&#x9;&#x9;'MsgBox(TypeName(contextConnector))&#xA;&#x9;&#x9;contextConnectorID = contextConnector.id&#xA;&#x9;&#x9;oldClientID = contextConnector.WrappedConnector.ClientID &#xA;&#x9;&#x9;oldSupplierID = contextConnector.WrappedConnector.SupplierID &#xA;&#x9;end if&#xA;end function&#xA;&#xA;'a connector has changed, we need to update the auto-diagrams&#xA;function EA_OnNotifyContextItemModified(GUID, ot)&#xA;&#x9;'we only do something when the context item is a connector&#xA;&#x9;if ot = otConnector then&#xA;&#x9;&#x9;dim model&#xA;&#x9;&#x9;'get the model&#xA;&#x9;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;&#x9;'get the connector&#xA;&#x9;&#x9;dim changedConnector&#xA;&#x9;&#x9;set changedConnector = model.getRelationByGUID(GUID)&#xA;&#x9;&#x9;'check if we are talking about the same connector&#xA;&#x9;&#x9;if changedConnector.WrappedConnector.ConnectorID = contextConnectorID then&#xA;&#x9;&#x9;    dim supplier&#xA;&#x9;&#x9;&#x9;dim client&#xA;&#x9;&#x9;&#x9;'check the client side&#xA;&#x9;&#x9;&#x9;if changedConnector.WrappedConnector.ClientID &lt;&gt;  oldClientID then&#xA;&#x9;&#x9;&#x9;&#x9;'get supplier&#xA;&#x9;&#x9;&#x9;&#x9;set supplier = model.getElementWrapperByID(changedConnector.WrappedConnector.SupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;'remove old client from supplier and vice versa&#xA;&#x9;&#x9;&#x9;&#x9;set client = model.getElementWrapperByID(oldClientID)&#xA;&#x9;&#x9;&#x9;&#x9;if not client is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;removeRelatedElemenFromAutoDiagram supplier,client, model&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;removeRelatedElemenFromAutoDiagram client, supplier, model&#xA;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;&#x9;&#x9;'add new client&#xA;&#x9;&#x9;&#x9;&#x9;set client = model.getElementWrapperByID(changedConnector.WrappedConnector.ClientID)&#xA;&#x9;&#x9;&#x9;&#x9;addRelatedElementoAutoDiagram supplier,client, model&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'check the supplier side&#xA;&#x9;&#x9;&#x9;if changedConnector.WrappedConnector.SupplierID &lt;&gt; oldSupplierID then&#xA;&#x9;&#x9;&#x9;&#x9;'get client&#xA;&#x9;&#x9;&#x9;&#x9;set client = model.getElementWrapperByID(changedConnector.WrappedConnector.ClientID)&#xA;&#x9;&#x9;&#x9;&#x9;'remove old supplier from client and vice versa&#xA;&#x9;&#x9;&#x9;&#x9;set supplier = model.getElementWrapperByID(oldSupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;if not supplier is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;removeRelatedElemenFromAutoDiagram client,supplier, model&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;removeRelatedElemenFromAutoDiagram supplier,client, model&#xA;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;&#x9;&#x9;'add new supplier&#xA;&#x9;&#x9;&#x9;&#x9;set supplier = model.getElementWrapperByID(changedConnector.WrappedConnector.SupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;addRelatedElementoAutoDiagram client,supplier, model&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="106"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BFCFA6C8-D267-43EE-B102-B0BE3C4856C9}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ClassNameUpdated&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;'EA-Matic&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: ClassNameUpdated&#xA;' Author: Geert Bellekens&#xA;' Purpose: Will show a message when the name of a class with a certain tagged value has been changed&#xA;' Date: 2016-12-12&#xA;'&#xA;&#xA;Dim contextName&#xA;Dim contextGUID&#xA;function EA_OnContextItemChanged(GUID, ot)&#xA;&#x9; if ot = otElement then&#xA;&#x9;&#x9;Dim contextElement &#xA;&#x9;&#x9;set contextElement = Repository.GetElementByGuid(GUID)&#xA;&#x9;&#x9;if not contextElement is nothing AND isUsedByBPM(contextElement) then&#xA;&#x9;&#x9;&#x9;contextName = contextElement.Name&#xA;&#x9;&#x9;&#x9;contextGUID = contextElement.ElementGUID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function EA_OnNotifyContextItemModified(GUID, ot)&#xA;&#x9; 'check if the name has been changed&#xA;&#x9; if GUID = contextGUID then&#xA;&#x9;&#x9;Dim contextElement &#xA;&#x9;&#x9;set contextElement = Repository.GetElementByGuid(GUID)&#xA;&#x9;&#x9;if contextName &lt;&gt; contextElement.Name then&#xA;&#x9;&#x9;&#x9;msgbox &quot;Element with name '&quot; &amp; contextName &amp; &quot;' has been changed to '&quot; &amp; contextElement.Name &amp; &quot;'&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9; end if&#xA;end function&#xA;&#xA;function isUsedByBPM(contextElement)&#xA;&#x9;dim taggedValue&#xA;&#x9;isUsedByBPM = false&#xA;&#x9;for each taggedValue in contextElement.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = &quot;BPM_ID&quot; and len(taggedValue.Value) &gt; 0 then&#xA;&#x9;&#x9;&#x9;isUsedByBPM = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="107"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{401C98F3-3E5F-4083-99FA-DEAB1020AE21}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DefaultLineStyles&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' EA-Matic&#xA;' Script Name: DefaultLineStyles&#xA;' Author: Geert Bellekens&#xA;' Purpose: Allows to determine the standard style of new connectors when they are created on a diagram&#xA;' Date: 14/03/2015&#xA;'&#xA;dim lsDirectMode, lsAutoRouteMode, lsCustomMode, lsTreeVerticalTree, lsTreeHorizontalTree, _&#xA;lsLateralHorizontalTree, lsLateralVerticalTree, lsOrthogonalSquareTree, lsOrthogonalRoundedTree&#xA;&#xA;lsDirectMode = &quot;1&quot;&#xA;lsAutoRouteMode = &quot;2&quot;&#xA;lsCustomMode = &quot;3&quot;&#xA;lsTreeVerticalTree = &quot;V&quot;&#xA;lsTreeHorizontalTree = &quot;H&quot;&#xA;lsLateralHorizontalTree = &quot;LH&quot;&#xA;lsLateralVerticalTree = &quot;LC&quot;&#xA;lsOrthogonalSquareTree = &quot;OS&quot;&#xA;lsOrthogonalRoundedTree = &quot;OR&quot;&#xA;&#xA;dim defaultStyle&#xA;dim menuDefaultLines&#xA;&#xA;&#xA;'*********EDIT BETWEEN HERE*************&#xA;' set here the menu name&#xA;menuDefaultLines = &quot;&amp;Set default linestyles&quot;&#xA;&#xA;' set here the default style to be used&#xA;defaultStyle = lsOrthogonalSquareTree&#xA;&#xA;' set here the line style to be used for each type of connector&#xA;function determineLineStyle(connector)&#xA;&#x9;dim connectorType&#xA;&#x9;connectorType = connector.Type&#xA;&#x9;select case connectorType&#xA;&#x9;&#x9;case &quot;ControlFlow&quot;, &quot;StateFlow&quot;,&quot;ObjectFlow&quot;,&quot;InformationFlow&quot;&#xA;&#x9;&#x9;&#x9;determineLineStyle = lsOrthogonalRoundedTree&#xA;&#x9;&#x9;case &quot;Generalization&quot;, &quot;Realization&quot;, &quot;Realisation&quot;&#xA;&#x9;&#x9;&#x9;determineLineStyle = lsTreeVerticalTree&#xA;&#x9;&#x9;case &quot;UseCase&quot;, &quot;Dependency&quot;,&quot;NoteLink&quot;, &quot;Abstraction&quot;&#xA;&#x9;&#x9;&#x9;determineLineStyle = lsDirectMode&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;determineLineStyle = defaultStyle&#xA;&#x9;end select&#xA;end function&#xA;&#xA;'set here the color to be used for each type of connector&#xA;' use SparxColorFromRGB(&quot;E8&quot;, &quot;8C&quot;, &quot;0C&quot;) to get the correct integer color value&#xA;function determineColor(connector)&#xA;&#x9;' the default color&#xA;&#x9;determineColor = -1&#xA;end function&#xA;&#xA;'set here the line width to be used for each type of connector&#xA;function determineLineWidth(connector)&#xA;&#x9;' the default line width&#xA;&#x9;determineLineWidth = 1&#xA;end function&#xA;'************AND HERE****************&#xA;&#xA;'the event called by EA&#xA;function EA_OnPostNewConnector(Info)&#xA;&#x9;'get the connector id from the Info&#xA;&#x9;dim connectorID&#xA;&#x9;connectorID = Info.Get(&quot;ConnectorID&quot;)&#xA;&#x9;dim connector&#xA;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;'get the current diagram&#xA;&#x9;dim diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram()&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;'first save the diagram&#xA;&#x9;&#x9;Repository.SaveDiagram diagram.DiagramID&#xA;&#x9;&#x9;'get the diagramlink for the connector&#xA;&#x9;&#x9;dim diagramLink&#xA;&#x9;&#x9;set diagramLink = getdiagramLinkForConnector(connector, diagram)&#xA;&#x9;&#x9;if not diagramLink is nothing then&#xA;&#x9;&#x9;&#x9;'set the connectorstyle&#xA;&#x9;&#x9;&#x9;setConnectorStyle diagramLink, connector&#xA;&#x9;&#x9;&#x9;'save the diagramlink&#xA;&#x9;&#x9;&#x9;diagramLink.Update&#xA;&#x9;&#x9;&#x9;'reload the diagram to show the link style&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram diagram.DiagramID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;'Tell EA what the menu options should be&#xA;function EA_GetMenuItems(MenuLocation, MenuName)&#xA;&#x9;if MenuName = &quot;&quot; and MenuLocation = &quot;Diagram&quot; then&#xA;&#x9;&#x9;'Menu Header&#xA;&#x9;&#x9;EA_GetMenuItems = menuDefaultLines&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' Do the work of setting default line styles&#xA;function DoDefaultLineStyles()&#xA;&#x9;dim diagram&#xA;&#x9;dim diagramLink&#xA;&#x9;dim connector&#xA;&#x9;dim dirty&#xA;&#x9;dirty = false&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;'save the diagram first&#xA;&#x9;Repository.SaveDiagram diagram.DiagramID&#xA;&#x9;'then loop all diagramLinks&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'set the connectorstyle&#xA;&#x9;&#x9;&#x9;&#x9;setConnectorStyle diagramLink, connector&#xA;&#x9;&#x9;&#x9;&#x9;'save the diagramlink&#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Update&#xA;&#x9;&#x9;&#x9;&#x9;dirty = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'reload the diagram if we changed something&#xA;&#x9;&#x9;if dirty then&#xA;&#x9;&#x9;&#x9;'reload the diagram to show the link style&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram diagram.DiagramID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'react to user clicking a menu option&#xA;function EA_MenuClick(MenuLocation, MenuName, ItemName)&#xA;&#x9;if ItemName = menuDefaultLines then&#xA;&#x9;&#x9;DoDefaultLineStyles&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'gets the diagram link object&#xA;function getdiagramLinkForConnector(connector, diagram)&#xA;&#x9;dim diagramLink&#xA;&#x9;set getdiagramLinkForConnector = nothing&#xA;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;if diagramLink.ConnectorID = connector.ConnectorID then&#xA;&#x9;&#x9;&#x9;set getdiagramLinkForConnector = diagramLink&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'actually sets the connector style&#xA;function setConnectorStyle(diagramLink, connector)&#xA;&#x9;'split the style into its parts&#xA;&#x9;dim styleparts&#xA;&#x9;dim styleString&#xA;&#x9;' Throw away the last ; so that an empty cell at the end is not created when its Split&#xA;&#x9;if len(diagramLink.Style) &gt; 0 then&#xA;&#x9;&#x9;styleString = Left(diagramLink.Style, Len(diagramLink.Style)-1)&#xA;&#x9;else&#xA;&#x9;&#x9;styleString = &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;styleparts = Split(styleString,&quot;;&quot;)&#xA;&#x9;dim mode&#xA;&#x9;dim tree&#xA;&#x9;dim linestyle&#xA;&#x9;mode = &quot;&quot;&#xA;&#x9;tree = &quot;&quot;&#xA;&#xA;&#x9;linestyle = determineLineStyle(connector)&#xA;&#x9;'these connectorstyles use mode=3 and the tree&#xA;&#x9;if  linestyle = lsTreeVerticalTree or _&#xA;&#x9;&#x9;linestyle = lsTreeHorizontalTree or _&#xA;&#x9;&#x9;linestyle = lsLateralHorizontalTree or _&#xA;&#x9;&#x9;linestyle = lsLateralVerticalTree or _&#xA;&#x9;&#x9;linestyle = lsOrthogonalSquareTree or _&#xA;&#x9;&#x9;linestyle = lsOrthogonalRoundedTree then&#xA;&#x9;&#x9;mode = &quot;3&quot;&#xA;&#x9;&#x9;tree = linestyle&#xA;&#x9;else&#xA;&#x9;&#x9;mode = linestyle&#xA;&#x9;end if&#xA;&#x9;'set the mode value&#xA;&#x9;setStylePart styleparts, &quot;Mode&quot;, mode&#xA;&#x9;'set the tree value&#xA;&#x9;setStylePart styleparts, &quot;TREE&quot;, tree&#xA;&#xA;&#x9;setStylePart styleparts, &quot;Color&quot;, determineColor(connector)&#xA;&#x9;setStylePart styleparts, &quot;LWidth&quot;, determineLineWidth(connector)&#xA;&#xA;&#x9;' update style (add in trailing ; that is needed)&#xA;&#x9;diagramLink.Style = join(styleparts, &quot;;&quot;) &amp; &quot;;&quot;&#xA;end function&#xA;&#xA;' Set the style to the specified value&#xA;function setStylePart(styleparts, style, value)&#xA;&#x9;dim i&#xA;&#x9;dim stylePart&#xA;&#x9;dim index&#xA;&#xA;&#x9;index = -1&#xA;&#xA;&#x9;for i = 0 to Ubound(styleparts)&#xA;&#x9;&#x9;stylePart = styleparts(i)&#xA;&#x9;&#x9;if Instr(stylepart, style &amp; &quot;=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;index = i&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#xA;&#x9;If Len(value) &gt; 0 then&#xA;&#x9;&#x9;' Adding to style&#xA;&#x9;&#x9;if index = -1 then&#xA;&#x9;&#x9;&#x9;' extend the array when style is not already in array&#xA;&#x9;&#x9;&#x9;redim preserve styleparts(Ubound(styleparts) + 1)&#xA;&#x9;&#x9;&#x9;index = Ubound(styleparts)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;styleparts(index) = style &amp; &quot;=&quot; &amp; value&#xA;&#x9;else&#xA;&#x9;&#x9;' Removing style from styleparts&#xA;&#x9;&#x9;if index &gt;= 0 then&#xA;&#x9;&#x9;&#x9;' copy the last value over the top of index, and then shrink the array&#xA;&#x9;&#x9;&#x9;styleparts(index) = styleparts(Ubound(styleparts))&#xA;&#x9;&#x9;&#x9;redim preserve styleparts(Ubound(styleparts) - 1)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;' if the index was -1 it already did not exist in the styleparts&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;' From http://www.sparxsystems.com.au/enterprise_architect_user_guide/11/automation_and_scripting/diagramobjects.html&#xA;' The color value is a decimal representation of the hex RGB value, where Red=FF, Green=FF00 and Blue=FF0000&#xA;' Who would write an RGB as BGR. YAEAB&#xA;function SparxColorFromRGB(red, green, blue)&#xA;&#x9;SparxColorFromRGB = CLng(&quot;&amp;h&quot; &amp; blue &amp; green &amp; red)&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="108"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{05A0086A-6737-43BB-82AA-CA285272CA87}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MenuHandling&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;'EA-Matic&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Author: Geert Bellekens&#xA;'This script demonstrates how to add menu options to the add-in menu and how to react on a menu click.&#xA;&#xA;'Tell EA what the menu options should be&#xA;function EA_GetMenuItems(MenuLocation, MenuName)&#xA;&#x9;if MenuName = &quot;&quot; then&#xA;&#x9;&#x9;'Menu Header&#xA;&#x9;&#x9;EA_GetMenuItems = &quot;-&amp;MyAddinMenu&quot;&#xA;&#x9;else &#xA;&#x9;&#x9;if MenuName = &quot;-&amp;MyAddinMenu&quot; then&#xA;&#x9;&#x9;&#x9;'Menu items&#xA;&#x9;&#x9;&#x9;Dim menuItems(1)&#xA;&#x9;&#x9;&#x9; menuItems(0) = &quot;TreeViewMenu&quot;&#xA;&#x9;&#x9;&#x9; menuItems(1) = &quot;DiagramMenu&quot;&#xA;&#x9;&#x9;&#x9; EA_GetMenuItems = menuItems &#xA;&#x9;&#x9; end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'Define the state of the menu options&#xA;function EA_GetMenuState(MenuLocation, MenuName, ItemName, IsEnabled, IsChecked)&#xA;&#x9;if MenuName = &quot;-&amp;MyAddinMenu&quot; then&#xA;&#x9;&#x9;Select Case ItemName&#xA;&#x9;&#x9;&#x9;case &quot;TreeViewMenu&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if MenuLocation = &quot;TreeView&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IsEnabled = true&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IsEnabled = false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;case &quot;DiagramMenu&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if MenuLocation = &quot;Diagram&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IsEnabled = true&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;IsEnabled = false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end select&#xA;&#x9;end if&#xA;&#x9;'to return out parameter values we should return an array with all parameters&#xA;&#x9;EA_GetMenuState = Array(MenuLocation, MenuName, ItemName, IsEnabled, IsChecked)&#xA;end function&#xA;&#xA;'react to user clicking a menu option&#xA;function EA_MenuClick(MenuLocation, MenuName, ItemName)&#xA;&#x9; &#x9;if MenuName = &quot;-&amp;MyAddinMenu&quot; then&#xA;&#x9;&#x9;Select Case ItemName&#xA;&#x9;&#x9;&#x9;case &quot;TreeViewMenu&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Dim Package&#xA;&#x9;&#x9;&#x9;&#x9;Set Package = Repository.GetTreeSelectedPackage()&#xA;&#x9;&#x9;&#x9;&#x9;MsgBox (&quot;Current Package is: &quot; &amp; Package.Name)&#xA;&#x9;&#x9;&#x9;case &quot;DiagramMenu&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Dim Diagram&#xA;&#x9;&#x9;&#x9;&#x9;Set Diagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#x9;&#x9;&#x9;MsgBox(&quot;Current Diagram is: &quot; &amp; Diagram.Name)&#xA;&#x9;&#x9;end select&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="109"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{603B3F09-13BB-4EBE-9F9A-9FB4418FB1DE}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;PreventDelete&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;'EA-Matic&#xA;'Author: Geert Bellekens&#xA;'This script will prevent any element to be deleted if it is still used as a type in either a parameter&#xA;'or an attribute. The can be overridden by first prepending the name with DELETED_&#xA;&#xA;function EA_OnPreDeleteElement(Info)&#xA;     'Start by setting false&#xA;     EA_OnPreDeleteElement = false&#xA;     dim usage&#xA;     'Initialize the EAAddinFramework model&#xA;     dim model &#xA;     set model = CreateObject(&quot;TSF.UmlToolingFramework.Wrappers.EA.Model&quot;)&#xA;     model.initialize(Repository)&#xA;     'get the elementID from Info&#xA;     dim elementID&#xA;     elementID = Info.Get(&quot;ElementID&quot;)&#xA;     'get the element being deleted&#xA;     dim element&#xA;     set element = model.getElementWrapperByID(elementID)     &#xA;     'Manual override is triggered by the name. If it starts with DELETED_ then the element may be deleted.&#xA;     if Left(element.name,LEN(&quot;DELETED_&quot;)) = &quot;DELETED_&quot; then&#xA;        'OK the element may be deleted&#xA;        EA_OnPreDeleteElement = true&#xA;     else&#xA;        dim usingAttributes&#xA;        set usingAttributes =  model.toArrayList(element.getUsingAttributes())&#xA;        'Check if the element is used as type in attributes&#xA;        if usingAttributes.Count = 0 then&#xA;            'Check if the element is used as type in a parameter&#xA;            dim usingParameters&#xA;            set usingParameters = model.toArrayList(element.getUsingParameters())&#xA;            if usingParameters.Count = 0 then&#xA;                'OK, no attributes or parameters use this element, it may be deleted&#xA;            EA_OnPreDeleteElement = true&#xA;            else&#xA;                usage = &quot;parameter(s)&quot;&#xA;            end if&#xA;        else&#xA;            usage = &quot;attribute(s)&quot;&#xA;        end if&#xA;     end if&#xA;     if EA_OnPredeleteElement = false then&#xA;          'NO the element cannot be deleted&#xA;          MsgBox &quot;I'm sorry Dave, I'm afraid I can't do that&quot; &amp; vbNewLine _&#xA;          &amp; element.name &amp; &quot; is used as type in &quot; &amp; usage , vbExclamation, &quot;Cannot delete element&quot;&#xA;     end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="110"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{317DC037-9EB7-4A31-BAD5-595C62E9C9A4}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SynchronizeOverrides&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' EA-Matic&#xA;' Script Name: SyncronizeOverrides&#xA;' Author: Geert Bellekens&#xA;' Purpose: Keeps the signature of the overridden operation in synch with that of the parent operation.&#xA;'          Every time an operation is changed we ask the user if he wants to synchronize the overrides&#xA;' Date: 09/02/2015&#xA;'&#xA;&#xA;'remember the operation being edited&#xA;dim operationID &#xA;'remember the list of overridden operations&#xA;dim overrides&#xA;'output tab&#xA;Repository.CreateOutputTab &quot;EA-Matic&quot;&#xA;'Repository.EnsureOutputVisible &quot;EA-Matic&quot;&#xA;&#xA;'Event Called when a new element is selected in the context. We use this operation to keep the id of the selected operation and a list of its overrides&#xA;'Because now is the only moment we are able to find it's overrides. Once changed we cannot find the overrides anymore because then they already&#xA;'have a different signature&#xA;function EA_OnContextItemChanged(GUID, ot)&#xA;&#x9;'we only want to do something when the selected element is an operation&#xA;&#x9;if ot = otMethod then&#xA;&#x9;&#x9;'get the model&#xA;&#x9;&#x9;dim model &#xA;&#x9;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;&#x9;'get the operation&#xA;&#x9;&#x9;dim operation&#xA;&#x9;&#x9;set operation = model.getOperationByGUID(GUID)&#xA;&#x9;&#x9;'remember the operationID&#xA;&#x9;&#x9;operationID = operation.id&#xA;&#x9;&#x9;'remember the overrides&#xA;&#x9;&#x9;set overrides = getOverrides(operation, model)&#xA;&#x9;&#x9;Repository.WriteOutput &quot;EA-Matic&quot;, overrides.Count &amp; &quot; overrides found for: &quot; &amp; operation.name,0&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'Event called when an element is changed. Unfortunately EA doesn't call it for an operation, only for the owner so we have to work with that.&#xA;function EA_OnNotifyContextItemModified(GUID, ot)&#xA;&#x9;'we only want to do something when the selected element is an operation&#xA;&#x9;if ot = otElement then&#x9;&#x9;&#xA;&#x9;&#x9;'get the operation&#xA;&#x9;&#x9;'Here we use the EA API object directly as most set methods are not implemented in EA Addin Framework&#xA;&#x9;&#x9;dim wrappedOperation&#xA;&#x9;&#x9;set wrappedOperation = Repository.GetMethodByID(operationID)&#xA;&#x9;&#x9;dim modifiedElement&#xA;&#x9;&#x9;set modifiedElement = Repository.GetElementByGuid(GUID)&#xA;&#x9;&#x9;if not wrappedOperation is Nothing and not modifiedElement is Nothing then&#xA;&#x9;&#x9;&#x9;'check to be sure we have the same operation&#xA;&#x9;&#x9;&#x9;if modifiedElement.ElementID = wrappedOperation.ParentID AND overrides.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;dim synchronizeYes&#xA;&#x9;&#x9;&#x9;&#x9;synchronizeYes = MsgBox(&quot;Found &quot; &amp; overrides.Count &amp; &quot; override(s) for operation &quot;&amp; modifiedElement.Name &amp; &quot;.&quot; &amp; wrappedOperation.Name &amp; vbNewLine &amp; &quot;Synchronize?&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;,vbYesNo or vbQuestion or vbDefaultButton1, &quot;Synchronize overrides?&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if synchronizeYes = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;synchronizeOverrides wrappedOperation&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'log to output&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput &quot;EA-Matic&quot;, &quot;Operation: &quot; &amp; wrappedOperation.name &amp;&quot; synchronized&quot; ,0&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'reset operationID to avoid doing it all again&#xA;&#x9;&#x9;&#x9;&#x9;operationID = 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'Synchronizes the operation with it's overrides&#xA;function synchronizeOverrides(wrappedOperation)&#xA;&#x9;dim override&#xA;&#x9;for each override in overrides&#xA;&#x9;&#x9;dim wrappedOverride &#xA;&#x9;&#x9;set wrappedOverride = override.WrappedOperation&#xA;&#x9;&#x9;'synchronize the operation with the override&#xA;&#x9;&#x9;synchronizeOperation wrappedOperation, wrappedOverride&#xA;&#x9;&#x9;'tell EA something might have changed&#xA;&#x9;&#x9;Repository.AdviseElementChange wrappedOverride.ParentID&#xA;&#x9;next&#xA;end function&#xA;&#xA;'Synchronizes the operation with the given override&#xA;function synchronizeOperation(wrappedOperation, wrappedOverride)&#xA;&#x9;dim update &#xA;&#x9;update = false&#xA;&#x9;'check name&#xA;&#x9;if wrappedOverride.Name &lt;&gt; wrappedOperation.Name then&#xA;&#x9;&#x9;wrappedOverride.Name = wrappedOperation.Name&#xA;&#x9;&#x9;update = true&#xA;&#x9;end if&#xA;&#x9;'check return type&#xA;&#x9;if wrappedOverride.ReturnType &lt;&gt; wrappedOperation.ReturnType then&#xA;&#x9;&#x9;wrappedOverride.ReturnType = wrappedOperation.ReturnType&#xA;&#x9;&#x9;update = true&#xA;&#x9;end if&#xA;&#x9;'check return classifier&#xA;&#x9;if wrappedOverride.ReturnType &lt;&gt; wrappedOperation.ReturnType then&#xA;&#x9;&#x9;wrappedOverride.ReturnType = wrappedOperation.ReturnType&#xA;&#x9;&#x9;update = true&#xA;&#x9;end if&#xA;&#x9;if update then&#xA;&#x9;&#x9;wrappedOverride.Update&#xA;&#x9;end if&#xA;&#x9;'check parameters&#xA;&#x9;synchronizeParameters wrappedOperation, wrappedOverride&#xA;end function&#xA;&#xA;'Synchronizes the parameters of the given operatin with that of the overrride&#xA;function synchronizeParameters(wrappedOperation, wrappedOverride)&#xA;&#x9;'first make sure they both have the same number of parameters&#xA;&#x9;if wrappedOverride.Parameters.Count &lt; wrappedOperation.Parameters.Count then&#xA;&#x9;&#x9;'add parameters as required&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;for i = 0 to wrappedOperation.Parameters.Count - wrappedOverride.Parameters.Count -1&#xA;&#x9;&#x9;&#x9;dim newParameter &#xA;&#x9;&#x9;&#x9;set newParameter = wrappedOverride.Parameters.AddNew(&quot;parameter&quot; &amp; i,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;newParameter.Update&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;wrappedOverride.Parameters.Refresh&#xA;&#x9;elseif wrappedOverride.Parameters.Count &gt; wrappedOperation.Parameters.Count then&#xA;&#x9;&#x9;'remove parameters as required&#xA;&#x9;&#x9;for i = wrappedOverride.Parameters.Count -1 to wrappedOperation.Parameters.Count step -1&#xA;&#x9;&#x9;&#x9;wrappedOverride.Parameters.DeleteAt i,false &#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;wrappedOverride.Parameters.Refresh&#xA;&#x9;end if&#xA;&#x9;'make parameters equal&#xA;&#x9;dim wrappedParameter &#xA;&#x9;dim overriddenParameter&#xA;&#x9;dim j&#xA;&#x9;for j = 0 to wrappedOperation.Parameters.Count -1&#xA;&#x9;&#x9;dim parameterUpdated&#xA;&#x9;&#x9;parameterUpdated = false&#xA;&#x9;&#x9;set wrappedParameter = wrappedOperation.Parameters.GetAt(j)&#xA;&#x9;&#x9;set overriddenParameter = wrappedOverride.Parameters.GetAt(j)&#xA;&#x9;&#x9;'name&#xA;&#x9;&#x9;if overriddenParameter.Name &lt;&gt; wrappedParameter.Name then&#xA;&#x9;&#x9;&#x9;overriddenParameter.Name = wrappedParameter.Name &#xA;&#x9;&#x9;&#x9;parameterUpdated = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'type&#xA;&#x9;&#x9;if overriddenParameter.Type &lt;&gt; wrappedParameter.Type then&#xA;&#x9;&#x9;&#x9;overriddenParameter.Type = wrappedParameter.Type &#xA;&#x9;&#x9;&#x9;parameterUpdated = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'default&#xA;&#x9;&#x9;if overriddenParameter.Default &lt;&gt; wrappedParameter.Default then&#xA;&#x9;&#x9;&#x9;overriddenParameter.Default = wrappedParameter.Default &#xA;&#x9;&#x9;&#x9;parameterUpdated = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'kind&#xA;&#x9;&#x9;if overriddenParameter.Kind &lt;&gt; wrappedParameter.Kind then&#xA;&#x9;&#x9;&#x9;overriddenParameter.Kind = wrappedParameter.Kind &#xA;&#x9;&#x9;&#x9;parameterUpdated = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'classifier&#xA;&#x9;&#x9;if overriddenParameter.ClassifierID &lt;&gt; wrappedParameter.ClassifierID then&#xA;&#x9;&#x9;&#x9;overriddenParameter.ClassifierID = wrappedParameter.ClassifierID &#xA;&#x9;&#x9;&#x9;parameterUpdated = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'update the parameter if it was changed&#xA;&#x9;&#x9;if parameterUpdated then&#xA;&#x9;&#x9;&#x9;overriddenParameter.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'gets the overrides of the given operation by first getting all operations with the same signature and then checking if they are owned by a descendant&#xA;function getOverrides(operation, model)&#xA;&#x9;'first get all operations with the exact same signature&#xA;&#x9;dim overrideQuery&#xA;&#x9;overrideQuery = &quot;select distinct op2.OperationID from (((t_operation op &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_operation op2 on op2.[Name] = op.name) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;left join t_operationparams opp on op.OperationID = opp.OperationID) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;left join t_operationparams opp2 on opp2.OperationID = op2.OperationID) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where op.OperationID = &quot;&amp; operation.id &amp;&quot; &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and op2.ea_guid &lt;&gt; op.ea_guid &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (op2.TYPE = op.Type OR (op2.TYPE is null AND op.Type is null)) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (op2.Classifier = op.Classifier OR (op2.Classifier is null AND op.Classifier is null)) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (opp.Name = opp2.Name OR (opp.Name is null AND opp2.Name is null)) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (opp.TYPE = opp2.TYPE OR (opp.TYPE is null AND opp2.Type is null)) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (opp.DEFAULT = opp2.DEFAULT OR (opp.DEFAULT is null AND opp2.DEFAULT is null)) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (opp.Kind = opp2.Kind OR (opp.Kind is null AND opp2.Kind is null)) &quot;&amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and (opp.Classifier = opp2.Classifier OR (opp.Classifier is null AND opp2.Classifier is null)) &quot;&#xA;&#x9;dim candidateOverrides&#xA;&#x9;set candidateOverrides = model.ToArrayList(model.getOperationsByQuery(overrideQuery))&#xA;&#x9;'then get the descendants of the owner &#xA;&#x9;dim descendants&#xA;&#x9;dim descendant&#xA;&#x9;'first find all elements that either inherit from the owner or realize it&#xA;&#x9;dim owner&#xA;&#x9;set owner = model.toObject(operation.owner)&#xA;&#x9;set descendants = getDescendants(owner, model)&#xA;&#x9;'then filter the candidates to only those of the descendants&#xA;&#x9;'loop operations backwards&#xA;&#x9;dim i&#xA;&#x9;for i = candidateOverrides.Count -1 to 0 step -1&#xA;&#x9;&#x9;dim found &#xA;&#x9;&#x9;found = false&#xA;&#x9;&#x9;for each descendant in descendants&#xA;&#x9;&#x9;&#x9;if descendant.id = model.toObject(candidateOverrides(i).owner).id then&#xA;&#x9;&#x9;&#x9;&#x9;'owner is a descendant, operation can stay&#xA;&#x9;&#x9;&#x9;&#x9;found = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'remove operation from non descendants&#xA;&#x9;&#x9;if not found then&#xA;&#x9;&#x9;&#x9;candidateOverrides.RemoveAt(i)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getOverrides = candidateOverrides&#xA;end function&#xA;&#xA;'gets all descendant of an element. That is all subclasses and classes that Realize the element.&#xA;'Works recursively to get them all.&#xA;function getDescendants(element, model)&#xA;&#x9;dim descendants&#xA;&#x9;dim getdescendantsQuery &#xA;&#x9;getdescendantsQuery = &quot;select c.Start_Object_ID as Object_ID from (t_object o &quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot;inner join t_connector c on c.End_Object_ID = o.Object_ID) &quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot;where &quot;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot;(c.[Connector_Type] like 'Generali_ation' &quot;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot;or c.[Connector_Type] like 'Reali_ation' )&quot;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot;and o.Object_ID = &quot; &amp; element.id&#xA;&#x9;set descendants = model.toArrayList(model.getElementWrappersByQuery(getdescendantsQuery))&#xA;&#x9;'get the descendants descendants as well&#xA;&#x9;dim descendant&#xA;&#x9;dim descendantsChildren&#xA;&#x9;for each descendant in descendants&#xA;&#x9;&#x9;if IsEmpty(descendantsChildren) then&#xA;&#x9;&#x9;&#x9;set descendantsChildren = getDescendants(descendant, model)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;descendantsChildren.AddRange(getDescendants(descendant, model))&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add the descendantsChildren to the descendants&#xA;&#x9;if not IsEmpty(descendantsChildren) then&#xA;&#x9;&#x9;if  descendantsChildren.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;descendants.AddRange(descendantsChildren)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;set getDescendants = descendants&#xA;end function&#xA;&#xA;'gets a new instance of the EAAddinFramework and initializes it with the EA.Repository&#xA;function getEAAddingFrameworkModel()&#xA;&#x9;'Initialize the EAAddinFramework model&#xA;    dim model &#xA;    set model = CreateObject(&quot;TSF.UmlToolingFramework.Wrappers.EA.Model&quot;)&#xA;    model.initialize(Repository)&#xA;&#x9;set getEAAddingFrameworkModel = model&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="111"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E2BC5F4F-89D5-4ECB-A5A6-5D804DB0D531}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SyncInvocations&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' EA-Matic&#xA;' Author: Geert Belleekns&#xA;' Purpose: This EA-Matic script will keep the name of objects the same as the name of their classifier&#xA;' More info: &#xA;&#xA;function EA_OnNotifyContextItemModified(GUID, ot)&#xA;&#x9;dim model&#xA;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;'only do something when the changed object is an element&#xA;&#x9;if ot = otElement then&#xA;&#x9;&#x9;dim element&#xA;&#x9;&#x9;set element = model.getElementWrapperByGUID(GUID)&#xA;&#x9;&#x9;synchronizeObjectNames element, model&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function EA_OnPostNewElement(Info)&#xA;&#x9;'Get the model&#xA;&#x9;dim model&#xA;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;'get the elementID from Info&#xA;    dim elementID&#xA;    elementID = Info.Get(&quot;ElementID&quot;)&#xA;    'get the element being deleted&#xA;    dim element&#xA;    set element = model.getElementWrapperByID(elementID)&#xA;&#x9;synchronizeObjectNames element, model&#xA;end function&#xA;&#xA;'gets a new instance of the EAAddinFramework and initializes it with the EA.Repository&#xA;function getEAAddingFrameworkModel()&#xA;&#x9;'Initialize the EAAddinFramework model&#xA;    dim model &#xA;    set model = CreateObject(&quot;TSF.UmlToolingFramework.Wrappers.EA.Model&quot;)&#xA;    model.initialize(Repository)&#xA;&#x9;set getEAAddingFrameworkModel = model&#xA;end function&#xA;&#xA;function synchronizeObjectNames(element, model)&#xA;&#x9;'first check if this is an object&#xA;&#x9;if element.WrappedElement.Type = &quot;Action&quot; AND element.WrappedElement.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;set classifier = model.getElementWrapperByID(element.WrappedElement.ClassifierID)&#xA;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;element.name = classifier.name&#xA;&#x9;&#x9;&#x9;element.save&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;'get all objects having this element as their classifier&#xA;&#x9;&#x9;dim query&#xA;&#x9;&#x9;query = &quot;select o.Object_ID from t_object o where o.classifier =&quot; &amp; element.id&#xA;&#x9;&#x9;dim objects&#xA;&#x9;&#x9;set objects = model.toArrayList(model.getElementWrappersByQuery(query))&#xA;&#x9;&#x9;'loop objects&#xA;&#x9;&#x9;dim obj&#xA;&#x9;&#x9;for each obj in objects&#xA;&#x9;&#x9;&#x9;'rename the object if the name is different from the classifiers name&#xA;&#x9;&#x9;&#x9;if obj.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;obj.name = element.name&#xA;&#x9;&#x9;&#x9;&#x9;obj.save&#xA;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="112"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DBB443A0-8C55-40C3-870D-DCA2F633DC58}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SyncObjectNames&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' EA-Matic&#xA;' Author: Geert Belleekns&#xA;' Purpose: This EA-Matic script will keep the name of objects the same as the name of their classifier&#xA;' More info: &#xA;&#xA;function EA_OnNotifyContextItemModified(GUID, ot)&#xA;&#x9;dim model&#xA;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;'only do something when the changed object is an element&#xA;&#x9;if ot = 4 then&#xA;&#x9;&#x9;dim element&#xA;&#x9;&#x9;set element = model.getElementWrapperByGUID(GUID)&#xA;&#x9;&#x9;synchronizeObjectNames element, model&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function EA_OnPostNewElement(Info)&#xA;&#x9;'Get the model&#xA;&#x9;dim model&#xA;&#x9;set model = getEAAddingFrameworkModel()&#xA;&#x9;'get the elementID from Info&#xA;    dim elementID&#xA;    elementID = Info.Get(&quot;ElementID&quot;)&#xA;    'get the element being deleted&#xA;    dim element&#xA;    set element = model.getElementWrapperByID(elementID)&#xA;&#x9;synchronizeObjectNames element, model&#xA;end function&#xA;&#xA;'gets a new instance of the EAAddinFramework and initializes it with the EA.Repository&#xA;function getEAAddingFrameworkModel()&#xA;&#x9;'Initialize the EAAddinFramework model&#xA;    dim model &#xA;    set model = CreateObject(&quot;TSF.UmlToolingFramework.Wrappers.EA.Model&quot;)&#xA;    model.initialize(Repository)&#xA;&#x9;set getEAAddingFrameworkModel = model&#xA;end function&#xA;&#xA;function synchronizeObjectNames(element, model)&#xA;&#x9;'first check if this is an object&#xA;&#x9;if element.WrappedElement.Type = &quot;Object&quot; AND element.WrappedElement.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;set classifier = model.getElementWrapperByID(element.WrappedElement.ClassifierID)&#xA;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;element.name = classifier.name&#xA;&#x9;&#x9;&#x9;element.save&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;'get all objects having this element as their classifier&#xA;&#x9;&#x9;dim query&#xA;&#x9;&#x9;query = &quot;select o.Object_ID from t_object o where o.classifier =&quot; &amp; element.id&#xA;&#x9;&#x9;dim objects&#xA;&#x9;&#x9;set objects = model.toArrayList(model.getElementWrappersByQuery(query))&#xA;&#x9;&#x9;'loop objects&#xA;&#x9;&#x9;dim obj&#xA;&#x9;&#x9;for each obj in objects&#xA;&#x9;&#x9;&#x9;'rename the object if the name is different from the classifiers name&#xA;&#x9;&#x9;&#x9;if obj.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;obj.name = element.name&#xA;&#x9;&#x9;&#x9;&#x9;obj.save&#xA;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="113"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1C3526D9-256E-4539-BF00-38EC20A18288}"/>
			<Column name="ScriptAuthor" value="{079E9D02-622C-470A-A1E8-ECF6D5DF5107}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;UnlockAtProjectClose&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\EA-Matic Scripts]&#xA;'[group=EA-Matic]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: UnlockAtProjectClose&#xA;' Author: Geert Bellekens&#xA;' Purpose: Unlock all locks when closing a project&#xA;' Date: 2016-08-05&#xA;'&#xA;'EA-Matic&#xA;&#xA;function EA_FileClose()&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;'get current user id&#xA;&#x9;&#x9;dim currentUserID&#xA;&#x9;&#x9;currentUserID = Repository.GetCurrentLoginUser(true)&#xA;&#x9;&#x9;'figure out how many locks he has&#xA;&#x9;&#x9;dim currentUserLocks&#xA;&#x9;&#x9;currentUserLocks = getCurrentUserLocks(currentUserID)&#xA;&#x9;&#x9;if currentUserLocks &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim response&#xA;&#x9;&#x9;&#x9;response = Msgbox(&quot;Unlock all &quot; &amp; currentUserLocks &amp; &quot; locked elements?&quot;, vbYesNo+vbQuestion, &quot;Unlock Elements&quot;)&#xA;&#x9;&#x9;&#x9;If response = vbYes Then&#xA;&#x9;&#x9;&#x9;&#x9;dim sqlUnlock&#xA;&#x9;&#x9;&#x9;&#x9;sqlUnlock = &quot;delete from t_seclocks where UserID = '&quot; &amp; currentUserID &amp; &quot;'&quot;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.Execute sqlUnlock&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getCurrentUserLocks(currentUserID)&#xA;&#x9;dim sqlGetLocks &#xA;&#x9;sqlGetLocks = &quot;select count(EntityID) AS UserLocks from t_seclocks where UserID = '&quot; &amp; currentUserID &amp; &quot;'&quot;&#xA;&#x9;dim queryResponse&#xA;&#x9;queryResponse = Repository.SQLQuery(sqlGetLocks)&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;&#x9;xDoc.LoadXML(queryResponse)&#xA;&#x9;dim countNode&#xA;&#x9;set countNode = xDoc.SelectSingleNode(&quot;//UserLocks&quot;)&#xA;&#x9;'return count as integer&#xA;&#x9;getCurrentUserLocks = CInt(countNode.Text)&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="115"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9BB0183D-DD6A-40DC-9DD6-DDA692A82D9C}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Switch Use Alias&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Experiment\Diagram Group]&#xA;'[group=Diagram Group]&#xA;'[group_type=DIAGRAM]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Switch Use Alias&#xA;' Author: Geert Bellekens&#xA;' Purpose: Switches the option Use Alias on the currently selected diagram&#xA;' Date: 2017-03-16&#xA;'&#xA;sub main&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram()&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;if instr(diagram.ExtendedStyle, &quot;UseAlias=0&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;diagram.ExtendedStyle = replace(diagram.ExtendedStyle,&quot;UseAlias=0&quot;,&quot;UseAlias=1&quot;)&#xA;&#x9;&#x9;elseif instr(diagram.ExtendedStyle, &quot;UseAlias=1&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;diagram.ExtendedStyle = replace(diagram.ExtendedStyle,&quot;UseAlias=1&quot;,&quot;UseAlias=0&quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagram.ExtendedStyle = diagram.ExtendedStyle &amp; &quot;UseAlias=1;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#x9;Repository.ReloadDiagram(diagram.DiagramID)&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="117"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7F23E472-86FA-4B1D-9A02-15D1FC0217F1}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Bezier&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="&#xA;sub main&#xA;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;set selectedConnector = Repository.GetContextObject&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#xA;&#x9;set taggedValue = selectedConnector.TaggedValues.AddNew(&quot;_Bezier&quot;,&quot;1&quot;)&#xA;&#x9;taggedValue.Update&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="118"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FAE68D50-2447-4747-B8F0-44A433D01B80}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ImportInernalDocument&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Experiment\ProjectBrowserGroup]&#xA;'[group=ProjectBrowserGroup]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;'&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;dim theElement AS EA.Element&#xA;set theElement = Repository.GetTreeSelectedObject()&#xA;dim docName&#xA;docName = &quot;C:\\temp\\doc2.docx&quot;&#xA;msgbox(&quot;Adding document &quot; &amp; vbcrlf &amp; docName &amp; vbcrlf &amp; &quot;to element &quot; &amp; theElement.name)&#xA;theElement.ImportInternalDocumentArtifact(docname)&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="119"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF model Rules"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="120"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B0A6A948-2358-4AAC-89C5-EB940997D6F1}"/>
			<Column name="ScriptAuthor" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Rules]&#xA;'[group=Atrias Rules]&#xA;&#xA;'includes all individual Atrias rules&#xA;!INC Rule_BPANotSynchronized&#xA;!INC Rule_MessageNotSynchronized&#xA;!INC Rule_MessageUsedAsLink&#xA;!INC Rule_MessageFlowWithoutMessage"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="121"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0918B863-B445-4F5C-89F7-03AD1A377D50}"/>
			<Column name="ScriptAuthor" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rule_BPANotSynchronized&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Rules]&#xA;'[group=Atrias Rules]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;Class Rule_BPANotSynchronized&#xA;'#region private attributes&#xA;&#x9;private m_Autofix&#xA;&#x9;private m_Name&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;BPA not synchronised&quot;&#xA;&#x9;&#x9;m_ProblemStatement = &quot;The Business Process Activity from the library is used as Link on this diagram&quot;&#xA;&#x9;&#x9;m_Resolution = &quot;Execute the Synchronize script on this Business Process Activity&quot;&#xA;&#x9;&#x9;AutoFix = false&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' Autofix property.&#xA;&#x9;Public Property Get Autofix&#xA;&#x9;  Autofix = m_Autofix&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Autofix(value)&#xA;&#x9;  m_Autofix = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property.&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  ProblemStatement = m_ProblemStatement&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Resolution property.&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  Resolution = m_Resolution&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'The Validate will validate the given item agains this rule&#xA;&#x9;public function Validate(item)&#xA;&#x9;&#x9;dim validationResult&#xA;&#x9;&#x9;set validationResult = new ValidationResult&#xA;&#x9;&#x9;validationResult.Rule = me&#xA;&#x9;&#x9;validationResult.IsValid = true&#xA;&#x9;&#x9;validationResult.ValidatedItem = item&#xA;&#x9;&#x9;dim invalidElementNames&#xA;&#x9;&#x9;set invalidElementNames = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'Rule should only be executed on a Business Process.&#xA;&#x9;&#x9;if item.ObjectType = otElement then&#xA;&#x9;&#x9;&#x9;dim businessProcess as EA.Element&#xA;&#x9;&#x9;&#x9;set businessProcess = item&#xA;&#x9;&#x9;&#x9;if businessProcess.Stereotype = &quot;BusinessProcess&quot; or businessProcess.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'get the business process diagram&#xA;&#x9;&#x9;&#x9;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;&#x9;set diagram = getBusinessProcessdiagram(businessProcess)&#xA;&#x9;&#x9;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the BPMN activities&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (element.Type = &quot;Activity&quot; and element.Stereotype = &quot;Activity&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and element.PackageID &lt;&gt; diagram.PackageID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if the Activity is not in the same package as the diagram then there is a problem.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;invalidElementNames.Add element.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set problem and resolution if not valid&#xA;&#x9;&#x9;if validationResult.IsValid = false then&#xA;&#x9;&#x9;&#x9;if invalidElementNames.Count = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.ProblemStatement = &quot;The Activity &quot; &amp; invalidElementNames(0) &amp; &quot; is using a Library Activity as link&quot;&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.Resolution = &quot;Synchronize the Activity to make it a local instance&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.ProblemStatement = &quot;The activities &quot; &amp; Join(invalidElementNames.ToArray(),&quot;, &quot;) &amp; &quot; are using Library activities as link&quot;&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.Resolution = &quot;Synchronize the Activities to make them local instances&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'return&#xA;&#x9;&#x9;set Validate = validationResult&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the Fix function will fix the problem if possible&#xA;&#x9;' returns true if the fix succeeded and false if it wasn't able to fix the problem&#xA;&#x9;public function Fix(item, options)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getBusinessProcessdiagram(businessProcess)&#xA;&#x9;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;set getBusinessProcessdiagram = nothing&#xA;&#x9;&#x9;for each diagram in businessProcess.Diagrams&#xA;&#x9;&#x9;&#x9;if diagram.MetaType = &quot;BPMN2.0::Business Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set getBusinessProcessdiagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="122"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0E599BF4-1167-4E9B-B4BA-B67D30373BB8}"/>
			<Column name="ScriptAuthor" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rule_MessageFlowWithoutMessage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Rules]&#xA;'[group=Atrias Rules]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;Class Rule_MessageFlowWithoutMessage&#xA;'#region private attributes&#xA;&#x9;private m_Autofix&#xA;&#x9;private m_Name&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;MessageFlow without Message&quot;&#xA;&#x9;&#x9;m_ProblemStatement = &quot;The tagged values MessageRef on the MessageFlow is not filled in&quot;&#xA;&#x9;&#x9;m_Resolution = &quot;Link the MessageFlow to a FIS using the tagged value MessageRef&quot;&#xA;&#x9;&#x9;AutoFix = false&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' Autofix property.&#xA;&#x9;Public Property Get Autofix&#xA;&#x9;  Autofix = m_Autofix&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Autofix(value)&#xA;&#x9;  m_Autofix = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property.&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  ProblemStatement = m_ProblemStatement&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Resolution property.&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  Resolution = m_Resolution&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'The Validate will validate the given item against this rule&#xA;&#x9;public function Validate(item)&#xA;&#x9;&#x9;dim item as EA.Element&#xA;&#x9;&#x9;dim validationResult&#xA;&#x9;&#x9;set validationResult = new ValidationResult&#xA;&#x9;&#x9;validationResult.Rule = me&#xA;&#x9;&#x9;validationResult.IsValid = true&#xA;&#x9;&#x9;validationResult.ProblemStatement = me.ProblemStatement&#xA;&#x9;&#x9;validationResult.Resolution = me.Resolution&#xA;&#x9;&#x9;validationResult.ValidatedItem = item&#xA;&#x9;&#x9;'Validate Messageflow&#xA;&#x9;&#x9;'We do not validate connectors, se we have to validate the element sending or receiving he connector.&#xA;&#x9;&#x9;'Since often the lanes/pools tend to send multiple messages it is better to us the other end (often intermediary event)&#xA;&#x9;&#x9;'We have to use an SQL query to get the messageflow for this element.&#xA;&#x9;&#x9;if item.Type &lt;&gt; &quot;ActivityPartition&quot; then&#xA;&#x9;&#x9;&#x9;'make the query to figure out if there's a message flow without reference connected to this element.&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'return&#xA;&#x9;&#x9;set Validate = validationResult&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the Fix function will fix the problem if possible&#xA;&#x9;' returns true if the fix succeeded and false if it wasn't able to fix the problem&#xA;&#x9;public function Fix(item, options)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getBusinessProcessdiagram(businessProcess)&#xA;&#x9;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;set getBusinessProcessdiagram = nothing&#xA;&#x9;&#x9;for each diagram in businessProcess.Diagrams&#xA;&#x9;&#x9;&#x9;if diagram.MetaType = &quot;BPMN2.0::Business Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set getBusinessProcessdiagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="123"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{50CD3D47-6EEF-4E36-ABD5-FF26BC3E4DF4}"/>
			<Column name="ScriptAuthor" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rule_MessageNotSynchronized&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Rules]&#xA;'[group=Atrias Rules]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;Class Rule_MessageNotSynchronized&#xA;'#region private attributes&#xA;&#x9;private m_Autofix&#xA;&#x9;private m_Name&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;Message not synchronised&quot;&#xA;&#x9;&#x9;m_ProblemStatement = &quot;This Message is not synchronized with the FIS in the library&quot;&#xA;&#x9;&#x9;m_Resolution = &quot;Execute the Synchronize script on this Message on the diagram&quot;&#xA;&#x9;&#x9;AutoFix = false&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' Autofix property.&#xA;&#x9;Public Property Get Autofix&#xA;&#x9;  Autofix = m_Autofix&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Autofix(value)&#xA;&#x9;  m_Autofix = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property.&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  ProblemStatement = m_ProblemStatement&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Resolution property.&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  Resolution = m_Resolution&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'The Validate will validate the given item agains this rule&#xA;&#x9;public function Validate(item)&#xA;&#x9;&#x9;dim validationResult&#xA;&#x9;&#x9;set validationResult = new ValidationResult&#xA;&#x9;&#x9;validationResult.Rule = me&#xA;&#x9;&#x9;validationResult.IsValid = true&#xA;&#x9;&#x9;validationResult.ValidatedItem = item&#xA;&#x9;&#x9;validationResult.ProblemStatement = me.ProblemStatement&#xA;&#x9;&#x9;validationResult.Resolution = me.Resolution&#xA;&#x9;&#x9;if (item.Stereotype = &quot;Message&quot; or  item.Stereotype = &quot;FIS&quot;) then&#xA;&#x9;&#x9;'check if this is a local instance under a business process.&#xA;&#x9;&#x9;&#x9;dim businessProcess as EA.Element&#xA;&#x9;&#x9;&#x9;set businessProcess = getOwningBusinessProcess(item)&#xA;&#x9;&#x9;&#x9;if not businessProcess is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;if businessProcess.PackageID = item.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not item.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if the Message does not have a classifierID then it is not synchronised&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim libraryMessage as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set libraryMessage = Repository.GetElementByID(item.ClassifierID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not libraryMessage is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not libraryMessage.CompositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not item.CompositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if item.CompositeDiagram.DiagramID &lt;&gt; libraryMessage.CompositeDiagram.DiagramID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if both have a composite diagram then it should be the same&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if the library message has the composite diagram then the instance should have one too&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not item.CompositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'no composite diagram for libraryMessage, so there should not be one for the instance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'message has classifierID, but the actual message is not found&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'return&#xA;&#x9;&#x9;set Validate = validationResult&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the Fix function will fix the problem if possible&#xA;&#x9;' returns true if the fix succeeded and false if it wasn't able to fix the problem&#xA;&#x9;public function Fix(item, options)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getOwningBusinessProcess(item)&#xA;&#x9;&#x9;dim businessProcess as EA.Element&#xA;&#x9;&#x9;set getOwningBusinessProcess = Nothing&#xA;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set businessProcess = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;if not businessProcess is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;if businessProcess.Stereotype = &quot;BusinessProcess&quot; or businessProcess.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set getOwningBusinessProcess = businessProcess&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set getOwningBusinessProcess = getOwningBusinessProcess(businessProcess)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="124"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1CF7787C-013F-41AC-BA0D-3B7582F78613}"/>
			<Column name="ScriptAuthor" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rule_MessageUsedAsLink&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Rules]&#xA;'[group=Atrias Rules]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;Class Rule_MessageUsedAsLink&#xA;'#region private attributes&#xA;&#x9;private m_Autofix&#xA;&#x9;private m_Name&#xA;&#x9;private m_ProblemStatement&#xA;&#x9;private m_Resolution&#xA;'#endregion private attributes&#xA;&#xA;'#region &quot;Constructor&quot;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_Name = &quot;Message used as Link&quot;&#xA;&#x9;&#x9;m_ProblemStatement = &quot;A Message on this diagram is used as link and not as instance&quot;&#xA;&#x9;&#x9;m_Resolution = &quot;Ctrl-Drag the message on the diagram as Instance, then run the synchronize script on it&quot;&#xA;&#x9;&#x9;AutoFix = false&#xA;&#x9;end sub&#xA;'#endregion &quot;Constructor&quot;&#xA;&#x9;&#xA;'#region Properties&#xA;&#x9;' Autofix property.&#xA;&#x9;Public Property Get Autofix&#xA;&#x9;  Autofix = m_Autofix&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Autofix(value)&#xA;&#x9;  m_Autofix = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' ProblemStatement property.&#xA;&#x9;Public Property Get ProblemStatement&#xA;&#x9;  ProblemStatement = m_ProblemStatement&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Resolution property.&#xA;&#x9;Public Property Get Resolution&#xA;&#x9;  Resolution = m_Resolution&#xA;&#x9;End Property&#x9;&#xA;'#endregion Properties&#xA;&#x9;&#xA;'#region functions&#xA;&#x9;'The Validate will validate the given item agains this rule&#xA;&#x9;public function Validate(item)&#xA;&#x9;&#x9;dim validationResult&#xA;&#x9;&#x9;set validationResult = new ValidationResult&#xA;&#x9;&#x9;validationResult.Rule = me&#xA;&#x9;&#x9;validationResult.IsValid = true&#xA;&#x9;&#x9;validationResult.ValidatedItem = item&#xA;&#x9;&#x9;dim invalidElementNames&#xA;&#x9;&#x9;set invalidElementNames = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'Rule should only be executed on a Business Process.&#xA;&#x9;&#x9;if item.ObjectType = otElement then&#xA;&#x9;&#x9;&#x9;dim businessProcess as EA.Element&#xA;&#x9;&#x9;&#x9;set businessProcess = item&#xA;&#x9;&#x9;&#x9;if businessProcess.Stereotype = &quot;BusinessProcess&quot; or businessProcess.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'get the business process diagram&#xA;&#x9;&#x9;&#x9;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;&#x9;set diagram = getBusinessProcessdiagram(businessProcess)&#xA;&#x9;&#x9;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the BPMN activities&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (element.Stereotype = &quot;Message&quot; or  element.Stereotype = &quot;FIS&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and element.PackageID &lt;&gt; diagram.PackageID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if the Message is not in the same package as the diagram then there is a problem.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;validationResult.IsValid = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;invalidElementNames.Add element.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set problem and resolution if not valid&#xA;&#x9;&#x9;if validationResult.IsValid = false then&#xA;&#x9;&#x9;&#x9;if invalidElementNames.Count = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.ProblemStatement = &quot;The Message: &quot; &amp; invalidElementNames(0) &amp; &quot; is used as Link instead of as Instance&quot;&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.Resolution = &quot;Ctrl-Drag the message on the diagram as Instance, then run the synchronize script on it&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.ProblemStatement = &quot;The Messages: &quot; &amp; Join(invalidElementNames.ToArray(),&quot;, &quot;) &amp; &quot; are used as Link instead of as Instance&quot;&#xA;&#x9;&#x9;&#x9;&#x9;validationResult.Resolution = &quot;Ctrl-Drag the messages on the diagram as Instance, then run the synchronize script on them&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'return&#xA;&#x9;&#x9;set Validate = validationResult&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the Fix function will fix the problem if possible&#xA;&#x9;' returns true if the fix succeeded and false if it wasn't able to fix the problem&#xA;&#x9;public function Fix(item, options)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;private function getBusinessProcessdiagram(businessProcess)&#xA;&#x9;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;set getBusinessProcessdiagram = nothing&#xA;&#x9;&#x9;for each diagram in businessProcess.Diagrams&#xA;&#x9;&#x9;&#x9;if diagram.MetaType = &quot;BPMN2.0::Business Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set getBusinessProcessdiagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end function&#xA;'#endregion functions&#x9;&#xA;End class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="125"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF - M2M "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="126"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A95CA6AC-8463-4D89-A3BC-4B7AFDB5BCF9}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Add Data Classification TV&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;!INC Atrias Scripts.Util&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;'&#xA;' Script Name: Add Data classification TV&#xA;' Author: Geert Bellekens&#xA;' Purpose: Adds the Data Classification tagged value to all elements and attributes owned by the selected package (recursive)&#xA;' Date: 2016-10-07&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;const outPutName = &quot;Add Data classification&quot;&#xA;&#xA;sub main()&#xA;&#x9;&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage&#xA;&#x9;if not selectedPackage is nothing then&#xA;&#x9;&#x9;'create output tab&#xA;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting Add Data classification &quot; &amp; now(), 0&#xA;&#x9;&#x9;'start processing&#xA;&#x9;&#x9;AddTaggedValuetoOwnedElements selectedPackage, &quot;Data Classification&quot;, &quot;NOPII-NONBC&quot;&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting Add Data classification &quot; &amp; now(), 0&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;'adds the initial CR to all elements owned by this package and its subpackages.&#xA;'The CR is also added to all attributes of the elements found.&#xA;Function AddTaggedValuetoOwnedElements(package, tvName, tvValue)&#xA;    Dim element as EA.Element&#xA;    Dim taggedValue&#xA;    For Each element In package.Elements&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Processing element  &quot; &amp; element.Name, 0&#xA;        'first check if the tagged value already exists&#xA;&#x9;&#x9;set taggedValue = Nothing&#xA;&#x9;&#x9;dim existingTag&#xA;&#x9;&#x9;set existingTag = nothing&#xA;        For Each existingTag In element.TaggedValues&#xA;            If existingTag.name = tvName Then&#xA;&#x9;&#x9;&#x9;&#x9;Set taggedValue = existingTag&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;        Next&#xA;        'if it doesn't exist yet then add it&#xA;        If taggedValue Is Nothing Then&#xA;            Set taggedValue = element.TaggedValues.AddNew(tvName, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'now update the value&#xA;&#x9;&#x9;If not taggedValue Is Nothing Then&#xA;            taggedValue.Value = tvValue&#xA;            taggedValue.Update&#xA;        End If&#xA;&#x9;&#x9;'Do the same for all attributes&#xA;&#x9;&#x9;AddTaggedValuetoOwnedAttributes element, tvName, tvValue&#xA;    Next&#xA;&#x9;'then recursively do all sub-packages&#xA;&#x9;dim subPackage&#xA;&#x9;For Each subPackage In package.Packages&#xA;&#x9;&#x9;AddTaggedValuetoOwnedElements subPackage, tvName, tvValue&#xA;&#x9;Next&#xA;End Function&#xA;&#xA;'adds the CR as tagged value to all attributes owned by the given element&#xA;function AddTaggedValuetoOwnedAttributes(element, tvName, tvValue)&#xA;&#x9;Dim attribute&#xA;    Dim taggedValue&#xA;    For Each attribute In element.Attributes&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Processing attribute  &quot; &amp; element.Name &amp; &quot;.&quot; &amp; attribute.Name, 0&#xA;        'first check if the tagged value already exists&#xA;&#x9;&#x9;set taggedValue = Nothing&#xA;&#x9;&#x9;dim existingTag&#xA;&#x9;&#x9;set existingTag = nothing&#xA;        For Each existingTag In Attribute.TaggedValues&#xA;            If existingTag.name = tvName Then&#xA;&#x9;&#x9;&#x9;&#x9;Set taggedValue = existingTag&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;        Next&#xA;        'if it doesn't exist yet then add it&#xA;        If taggedValue Is Nothing Then&#xA;            Set taggedValue = attribute.TaggedValues.AddNew(tvName, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'now update the value&#xA;&#x9;&#x9;If not taggedValue Is Nothing Then&#xA;            taggedValue.Value = tvValue&#xA;            taggedValue.Update&#xA;        End If&#xA;    Next&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="127"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DD5DD89D-B137-4C81-B536-E9D5D61F181C}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;AddInitialCRToOwnedObjects&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;'&#xA;' Script Name: AddInitialCRtoOwnedObject&#xA;' Author: Geert Bellekens&#xA;' Purpose: adds the initial CR as a tagged value to all owned elements int this package&#xA;' and its subpackackages.&#xA;' It also add's the tagged value to all attributes of those elements&#xA;' Date: 30/01/2015&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;&#xA;Dim CRGuid&#xA;CRGuid = &quot;{03DE6415-5FD7-40e3-8ADB-9B8FDE574B95}&quot;  'Change this GUID into the GUID of the actual initial CR&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#xA;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' We only do something for a package&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;AddCRToOwnedElements thePackage&#xA;&#x9;&#x9;&#x9;MsgBox &quot;Ready!&quot;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;end sub&#xA;&#xA;'adds the initial CR to all elements owned by this package and its subpackages.&#xA;'The CR is also added to all attributes of the elements found.&#xA;Function AddCRToOwnedElements(package)&#xA;    Dim element&#xA;    Dim taggedValue&#xA;    For Each element In package.Elements&#xA;        'first check if the tagged value already exists&#xA;&#x9;&#x9;set taggedValue = Nothing&#xA;&#x9;&#x9;dim existingTag&#xA;&#x9;&#x9;set existingTag = nothing&#xA;        For Each existingTag In element.TaggedValues&#xA;            If existingTag.name = &quot;CR&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;Set taggedValue = existingTag&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;        Next&#xA;        'if it doesn't exist yet then add it&#xA;        If taggedValue Is Nothing Then&#xA;            Set taggedValue = element.TaggedValues.AddNew(&quot;CR&quot;, &quot;&quot;)&#xA;            taggedValue.Value = CRGuid&#xA;            taggedValue.Update&#xA;        End If&#xA;&#x9;&#x9;'Do the same for all attributes&#xA;&#x9;&#x9;AddCRtoOwnedAttributes element&#xA;    Next&#xA;&#x9;'then recursively do all sub-packages&#xA;&#x9;dim subPackage&#xA;&#x9;For Each subPackage In package.Packages&#xA;&#x9;&#x9;AddCRToOwnedElements subPackage&#xA;&#x9;Next&#xA;End Function&#xA;&#xA;'adds the CR as tagged value to all attributes owned by the given element&#xA;function AddCRtoOwnedAttributes(element)&#xA;&#x9;Dim attribute&#xA;    Dim taggedValue&#xA;    For Each attribute In element.Attributes&#xA;        'first check if the tagged value already exists&#xA;&#x9;&#x9;set taggedValue = Nothing&#xA;&#x9;&#x9;dim existingTag&#xA;&#x9;&#x9;set existingTag = nothing&#xA;        For Each existingTag In attribute.TaggedValues&#xA;            If existingTag.name = &quot;CR&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;Set taggedValue = existingTag&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;        Next&#xA;        'if it doesn't exist yet then add it&#xA;        If taggedValue Is Nothing Then&#xA;            Set taggedValue = attribute.TaggedValues.AddNew(&quot;CR&quot;, &quot;&quot;)&#xA;            taggedValue.Value = CRGuid&#xA;            taggedValue.Update&#xA;        End If&#xA;    Next&#xA;end function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="128"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{74A83426-E0E7-4806-A9C9-FFB4C69E3F19}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RequirementsMigration&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sql&#xA;&#x9;slq = &quot; update nl set nl.value = o.name                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; from ((t_object o                                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties nl on nl.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties fr on fr.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'AtriasRequirement'&#x9;                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.[Property] = 'Name NL'&#x9;                                        &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.[Property] = 'Name FR'                                         &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.VALUE is null                                                  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot;                                                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; update fr set fr.value = o.ALIAS                                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; from ((t_object o                                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties nl on nl.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties fr on fr.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'AtriasRequirement'                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.[Property] = 'Name NL'&#x9;                                        &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.[Property] = 'Name FR'                                         &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.VALUE is null                                                  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot;                                                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; update o set o.[Name] = o.pdata5                                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; from ((t_object o                                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties nl on nl.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties fr on fr.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'AtriasRequirement'&#x9;                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.[Property] = 'Name NL'&#x9;                                        &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.[Property] = 'Name FR'                                         &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and o.[PDATA5] is not null                                            &quot;&#xA;&#x9;Repository.Execute(sql)&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub test&#xA;&#x9;dim requirements as EA.Collection&#xA;&#x9;dim requirement as EA.Element&#xA;&#x9;dim sqlString&#xA;&#x9;sqlString = &quot;select o.Object_ID from t_object o where o.stereotype = 'AtriasRequirement'&quot;&#xA;&#x9;&#xA;&#x9;set requirements = Repository.GetElementSet(sqlString,2)&#xA;&#x9;for each requirement in Requirements&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;requirement.StereotypeEx = &quot;ATRIAS Requirements::Solution Requirement&quot;&#xA;&#x9;&#x9;requirement.Alias = &quot;&quot;&#xA;&#x9;&#x9;if left(requirement.Name, 3) = &quot;REQ&quot; then&#xA;&#x9;&#x9;&#x9;requirement.Name = &quot;SOL&quot; &amp; requirement.Name&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;requirement.Update&#xA;&#x9;&#x9;'copy the values of Name NL and Name FR to Title NL and Title FR&#xA;&#x9;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#x9;dim NameNLtag as EA.TaggedValue&#xA;&#x9;&#x9;dim NameFRtag as EA.TaggedValue&#xA;&#x9;&#x9;dim TitleNLtag as EA.TaggedValue&#xA;&#x9;&#x9;dim TitleFRtag as EA.TaggedValue&#xA;&#x9;&#x9;set NameNLTag = nothing&#xA;&#x9;&#x9;set NameFRtag = nothing&#xA;&#x9;&#x9;set TitleNLtag = nothing&#xA;&#x9;&#x9;set TitleFRtag = nothing&#xA;&#x9;&#x9;for each taggedValue in requirement.TaggedValues&#xA;&#x9;&#x9;&#x9;'session.output &quot;aantal tagged values = &quot; &amp; requirement.TaggedValues.Count&#xA;&#x9;&#x9;&#x9;if taggedValue.Name = &quot;Name NL&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set NameNLtag = taggedValue&#xA;&#x9;&#x9;&#x9;elseif taggedValue.Name = &quot;Name FR&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set NameFRtag = taggedValue&#xA;&#x9;&#x9;&#x9;elseif taggedValue.Name = &quot;Title NL&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set TitleNLtag = taggedValue&#xA;&#x9;&#x9;&#x9;elseif taggedValue.Name = &quot;Title FR&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set TitleFRtag = taggedValue&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if (not (NameNLtag is nothing))_&#xA;&#x9;&#x9;&#x9;and (not (NameFRtag is nothing))_&#xA;&#x9;&#x9;&#x9;and (not (TitleNLtag is nothing))_&#xA;&#x9;&#x9;&#x9;and (not (TitleFRtag is nothing)) then&#xA;&#x9;&#x9;&#x9;TitleNLtag.Value = NameNLtag.Value&#xA;&#x9;&#x9;&#x9;TitleNLtag.Update&#xA;&#x9;&#x9;&#x9;TitleFRtag.Value = NameFRtag.Value&#xA;&#x9;&#x9;&#x9;TitleFRtag.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'remove tags &quot;Name NL&quot;&#xA;&#x9;dim sqldelete&#xA;&#x9;sqldelete = &quot; delete tv from t_objectproperties tv                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Property] = 'Name NL'                                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and exists (select tv2.[PropertyID] from t_objectProperties tv2 where      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            tv2.[Property] = 'Title NL'                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.Object_ID = tv.Object_ID                              &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.VALUE is not null)                                      &quot;&#xA;&#x9;Repository.Execute sqldelete&#xA;&#x9;&#xA;&#x9;'remove tags &quot;Name FR&quot;&#xA;&#x9;sqldelete = &quot; delete tv from t_objectproperties tv                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Property] = 'Name FR'                                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and exists (select tv2.[PropertyID] from t_objectProperties tv2 where      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            tv2.[Property] = 'Title FR'                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.Object_ID = tv.Object_ID                              &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.VALUE is not null)                                      &quot;&#xA;&#x9;Repository.Execute sqldelete&#xA;&#xA;&#x9;msgbox &quot;Finished&quot;&#xA;&#x9;'set requirement = Repository.GetElementByGuid(&quot;{36D0F895-E999-498a-9945-E9E036C9DAFF}&quot;)&#xA;&#xA;end sub&#xA;&#xA;sub correctImportance&#xA;&#x9;dim sqlNonEssential&#xA;&#x9;sqlNonEssential = &quot; update tv set tv.VALUE = 'Non-essential' from t_objectproperties tv          &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on tv.Object_ID = o.Object_ID                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Property] = 'Importance'                                           &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and o.[Stereotype] = 'Solution Requirement'                                  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and (tv.VALUE &lt;&gt; 'Must' or tv.VALUE is null)                                 &quot;&#xA;&#x9;Repository.Execute sqlNonEssential&#xA;&#x9;&#xA;&#x9;dim sqlEssential&#xA;&#x9;sqlEssential = &quot; update tv set tv.VALUE = 'Essential' from t_objectproperties tv              &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on tv.Object_ID = o.Object_ID                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Property] = 'Importance'                                           &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and o.[Stereotype] = 'Solution Requirement'                                  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and tv.VALUE = 'Must'                                                        &quot;&#xA;&#x9;Repository.Execute sqlEssential&#xA;&#x9;&#xA;end sub&#xA;correctImportance&#xA;'test&#xA;'main&#xA;'test&#xA;'main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="129"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D6075AFF-CD01-4980-B581-87DB8EB392EE}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DocGenUtil&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;' Script Name: DocGenUtil&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts for document generation&#xA;' Date: 06/07/2015&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;function addMasterDocument (packageGUID, documentName)&#xA;&#x9;dim domainName&#xA;&#x9;dim splittedDocumentName&#xA;&#x9;splittedDocumentName = Split(documentName)&#xA;&#x9;domainName = splittedDocumentName(Ubound(splittedDocumentName))&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(documentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Alias = domainName&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocument = masterDocumentPackage&#xA;end function&#xA;&#xA;'improved version of the addMasterDocumentWithDetails usign the tagged values&#xA;function addMasterDocumentWithDetailTags (packageGUID,masterDocumentName,documentAlias,documentName,documentTitle,documentVersion)&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(masterDocumentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;select case templateTag.Name &#xA;&#x9;&#x9;&#x9;case &quot;RTFTemplate&quot; &#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;case &quot;ReportAlias&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentAlias&#xA;&#x9;&#x9;&#x9;case &quot;ReportAuthor&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = masterDocumentPackage.Element.Author&#xA;&#x9;&#x9;&#x9;case &quot;ReportName&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentName&#xA;&#x9;&#x9;&#x9;case &quot;ReportTitle&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentName&#xA;&#x9;&#x9;&#x9;case &quot;ReportVersion&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = documentVersion&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;'save changed&#xA;&#x9;&#x9;templateTag.Update&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocumentWithDetailTags = masterDocumentPackage&#xA;end function&#xA;&#xA;function addMasterDocumentWithDetails (packageGUID, documentName,documentVersion,documentAlias)&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(documentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Alias = documentAlias&#xA;&#x9;masterDocumentPackage.Version = documentVersion&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocumentWithDetails = masterDocumentPackage&#xA;end function&#xA;&#xA;function addModelDocumentForDiagram(masterDocument,diagram, treepos, template)&#xA;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;set diagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;addModelDocumentForPackage masterDocument,diagramPackage,diagram.Name &amp; &quot; diagram&quot;, treepos, template&#xA;end function&#xA;&#xA;function addModelDocumentForPackage(masterDocument,package,name, treepos, template)&#xA;&#x9;dim modelDocElement as EA.Element&#xA;&#x9;set modelDocElement = masterDocument.Elements.AddNew(name, &quot;Class&quot;)&#xA;&#x9;'set the position&#xA;&#x9;modelDocElement.TreePos = treepos&#xA;&#x9;modelDocElement.StereotypeEx = &quot;model document&quot;&#xA;&#x9;modelDocElement.Update&#xA;&#x9;'add tagged values&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add attribute&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;set attribute = modelDocElement.Attributes.AddNew(package.Name, &quot;Package&quot;)&#xA;&#x9;attribute.ClassifierID = package.Element.ElementID&#xA;&#x9;attribute.Update&#xA;end function&#xA;&#xA;function addModelDocument(masterDocument, template,elementName, elementGUID, treepos)&#xA;&#x9;addModelDocumentWithSearch masterDocument, template,elementName, elementGUID, treepos,&quot;ZDG_ElementByGUID&quot;&#xA;end function&#xA;&#xA;&#xA;function addModelDocumentWithSearch(masterDocument, template,elementName, elementGUID, treepos, searchName)&#xA;&#x9;dim modelDocElement as EA.Element;&#xA;&#x9;set modelDocElement = masterDocument.Elements.AddNew(elementName, &quot;Class&quot;)&#xA;&#x9;'set the position&#xA;&#x9;modelDocElement.TreePos = treepos&#xA;&#x9;modelDocElement.StereotypeEx = &quot;model document&quot;&#xA;&#x9;modelDocElement.Update&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;if len(elementGUID) &gt; 0 then&#xA;&#x9;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;elseif templateTag.Name = &quot;SearchName&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = searchName&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;elseif templateTag.Name = &quot;SearchValue&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = elementGUID&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add tagged values&#xA;&#x9;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'no GUID provided. Set masterdocument package ID as dummy attribute to make the template work&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;set attribute = modelDocElement.Attributes.AddNew(masterDocument.Name, &quot;Package&quot;)&#xA;&#x9;&#x9;attribute.ClassifierID = masterDocument.Element.ElementID&#xA;&#x9;&#x9;attribute.Update&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="130"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C98DBC0A-06E4-47B8-8B4D-B5410174AC43}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Export Message Detail&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Export Message Detail&#xA;' Author: Geert Bellekens&#xA;' Purpose: Export the details of a message into a the search window and possibly into a CSV file&#xA;' Date: 2017-03-14&#xA;'&#xA;&#xA;const outputTabName = &quot;Export Message Detail&quot;&#xA;&#x9;&#xA;sub main&#xA;&#x9;'setup output&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;&#xA;&#x9;'select the root object&#xA;&#x9;dim rootObject as EA.Element&#xA;&#x9;set rootObject = Repository.GetContextObject()&#xA;&#x9;if rootObject.ObjectType = otElement then&#xA;&#x9;&#x9;exportDetails rootObject&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function exportDetails(rootObject)&#xA;&#x9;&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="131"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AD66967B-BF77-4072-BBC3-AD0F77C167B7}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FixLDM&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;dim response&#xA;&#x9;&#x9;response = Msgbox(&quot;This script will switch alias and name for all enumeration values&quot; &amp; vbnewLine &amp; &quot; Are you sure?&quot;, vbYesNo+vbExclamation, &quot;Fix LDM&quot;)&#xA;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;'create output tab&#xA;&#x9;&#x9;&#x9;Repository.CreateOutputTab &quot;FixLDM&quot;&#xA;&#x9;&#x9;&#x9;Repository.ClearOutput &quot;FixLDM&quot;&#xA;&#x9;&#x9;&#x9;Repository.EnsureOutputVisible &quot;FixLDM&quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;'get the selected package&#xA;&#x9;&#x9;&#x9;dim package as EA.Package &#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;&#x9;&#x9;'switch alias and name for all attributes&#xA;&#x9;&#x9;&#x9;switchAttrAliasAndName package&#xA;&#x9;&#x9;&#x9;'tell the user we are done&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput &quot;FixLDM&quot;,&quot;Finished'&quot;,0&#xA;&#x9;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;&#xA;function switchAttrAliasAndName(package)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'first loop owned elements&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;switchAttrAliasAndNameOnElement element&#xA;&#x9;next&#xA;&#x9;'then do the owned packages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;switchAttrAliasAndName subPackage&#xA;&#x9;next&#xA;end function&#xA;&#xA;function switchAttrAliasAndNameOnElement(element)&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim tempAlias&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;'log progress&#xA;&#x9;Repository.WriteOutput &quot;FixLDM&quot;,&quot;Processing: &quot; &amp; element.Name,0&#xA;&#x9;'first do all owned attributes&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;tempAlias = attribute.Alias&#xA;&#x9;&#x9;attribute.Alias = attribute.Name&#xA;&#x9;&#x9;attribute.Name = tempAlias&#xA;&#x9;&#x9;attribute.Update&#xA;&#x9;next&#xA;&#x9;'then do the owned element&#xA;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;switchAttrAliasAndNameOnElement subElement&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="132"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{64F96366-529C-4EBD-ABE1-CA5ED66AE798}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FixOCLConstraints&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: FixOCLConstraints&#xA;' Author: Geert Bellekens&#xA;' Purpose: Some entities are renamed (removed suffixe _Type) and the OCL constraints need to be adapted to that. &#xA;' next to the updates the errors where . notations references a non existing element will be reported&#xA;' Date: 2017-02-07&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Fix OCL Constraints&quot;&#xA;const messagingModelGUID = &quot;{52A8DE61-6FAC-46f7-89E9-55700CE04977}&quot;&#xA;&#xA;&#xA;sub main&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'set timestamp for start&#xA;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; Starting fixing OCL constraints&quot;  , 0&#xA;&#x9;'get the elements with OCL constraints&#xA;&#x9;dim OCLElements&#xA;&#x9;set OCLElements = getElementWithOCLConstraints()&#xA;&#x9;'if nothing found then we don't need to bother&#xA;&#x9;if OCLElements.Count &gt; 0 then&#xA;&#x9;&#x9;'remember the strings we don't want to fix&#xA;&#x9;&#x9;dim skippedStrings&#xA;&#x9;&#x9;set skippedStrings = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'get the package ID string of the messaging model&#xA;&#x9;&#x9;dim messagingPackageIDs&#xA;&#x9;&#x9;dim messagingRoot as EA.Package&#xA;&#x9;&#x9;set messagingRoot = Repository.GetPackageByGuid(messagingModelGUID)&#xA;&#x9;&#x9;if not messagingRoot is nothing then&#xA;&#x9;&#x9;&#x9;messagingPackageIDs = getPackageTreeIDString(messagingRoot)&#xA;&#x9;&#x9;&#x9;'fix the OCLElements&#xA;&#x9;&#x9;&#x9;dim OCLElement as EA.Element&#xA;&#x9;&#x9;&#x9;for each OCLElement in OCLElements&#xA;&#x9;&#x9;&#x9;&#x9;fixOCLConstraints OCLElement, skippedStrings,messagingPackageIDs&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;msgbox &quot;GUID &quot; &amp; messagingModelGUID &amp; &quot; is not a valid GUID for the messaging model root package!&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;,vbOKOnly+vbExclamation ,&quot;Wrong messagingModelGUID!&quot;&#xA;&#x9;&#x9;end if &#xA;&#x9;end if&#xA;&#x9;'set timestamp for end&#xA;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; Finished fixing OCL constraints&quot;  , 0&#xA;end sub&#xA;&#xA;&#xA;&#xA;function getElementWithOCLConstraints()&#xA;&#x9;'initialize empty&#xA;&#x9;set getElementWithOCLConstraints = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'ask the user to select the messages package&#xA;&#x9;msgbox &quot;Please select the Messages root package&quot;&#xA;&#x9;dim messagesPackage&#xA;&#x9;set messagesPackage = selectPackage()&#xA;&#x9;'ask confirmation&#xA;&#x9;dim response&#xA;&#x9;if not messagesPackage is nothing then&#xA;&#x9;&#x9;response = Msgbox(&quot;Fix OCL constraints on messages in package '&quot; &amp; messagesPackage.Name &amp; &quot;'?&quot;, vbYesNo+vbQuestion, &quot;Fix OCL Constraints?&quot;)&#xA;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;dim packageIDString&#xA;&#x9;&#x9;&#x9;packageIDString = getCurrentPackageTreeIDString()&#xA;&#x9;&#x9;&#x9;dim sqlGetOCLElements&#xA;&#x9;&#x9;&#x9;sqlGetOCLElements = &quot;select distinct o.Object_ID from t_objectconstraint ocl &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on ocl.Object_ID = o.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where ocl.ConstraintType = 'OCL' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Stereotype = 'XSDtopLevelElement' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)&quot;&#xA;&#x9;&#x9;&#x9;set getElementWithOCLConstraints = getElementsFromQuery(sqlGetOCLElements)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'fix the OCL constraints for this element&#xA;function fixOCLConstraints(OCLElement, skippedStrings, messagingPackageIDs)&#xA;&#x9;dim OCLConstraint as EA.Constraint&#xA;&#x9;for each OCLConstraint in OCLElement.Constraints&#xA;&#x9;&#x9;'remember all fixed strings&#xA;&#x9;&#x9;dim fixedStrings&#xA;&#x9;&#x9;set fixedStrings = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;'remove all _Type suffixes&#xA;&#x9;&#x9;dim constraintText&#xA;&#x9;&#x9;constraintText = Repository.GetFormatFromField(&quot;TXT&quot;,OCLConstraint.Notes)&#xA;&#x9;&#x9;'create a regular expression to get the elements with _Type as suffix&#xA;&#x9;&#x9;Dim regExp  &#xA;&#x9;&#x9;Set regExp = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;&#x9;&#x9;regExp.Global = True   &#xA;&#x9;&#x9;regExp.IgnoreCase = False&#xA;&#x9;&#x9;'execut the regex pattern&#x9;&#xA;&#x9;&#x9;regExp.Pattern = &quot;\b[\w]*_Type\b&quot;&#xA;&#x9;&#x9;dim matches&#xA;&#x9;&#x9;set matches = regExp.Execute(constraintText)&#xA;&#x9;&#x9;'loop the matches and replace the _Type with empty string&#xA;&#x9;&#x9;dim match&#xA;&#x9;&#x9;For each match in matches&#xA;&#x9;&#x9;&#x9;dim matchText&#xA;&#x9;&#x9;&#x9;matchText = match.Value&#xA;&#x9;&#x9;&#x9;if not fixedStrings.Contains(matchText) and not skippedStrings.Contains(matchText) then&#xA;&#x9;&#x9;&#x9;&#x9;dim replacementText&#xA;&#x9;&#x9;&#x9;&#x9;'remove the last 5 characters (_Type)&#xA;&#x9;&#x9;&#x9;&#x9;replacementText = left(matchText,len(matchText) - 5) &#xA;&#x9;&#x9;&#x9;&#x9;'check if we need to fix it&#xA;&#x9;&#x9;&#x9;&#x9;if needsFixing(matchText,replacementText,messagingPackageIDs,OCLConstraint,OCLElement) then&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user what we are doing&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; Removing '_Type' suffix on for '&quot; &amp; matchText &amp; &quot;' in constraint '&quot; &amp; OCLConstraint.Name &amp; &quot;' on element '&quot; &amp;  OCLElement.Name &amp; &quot;'&quot;  , OCLElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;'replace in the constraint&#xA;&#x9;&#x9;&#x9;&#x9;constraintText = replace(constraintText,matchText,replacementText)&#xA;&#x9;&#x9;&#x9;&#x9;'add the text to the list of fixed strings&#xA;&#x9;&#x9;&#x9;&#x9;fixedStrings.Add matchText&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'doesn't need fixing, add it to the skipped strings&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;skippedStrings.Add matchText&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'check if we fixed something&#xA;&#x9;&#x9;if fixedStrings.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;'put the constraint back&#xA;&#x9;&#x9;&#x9;OCLConstraint.Notes = Repository.GetFieldFromFormat(&quot;TXT&quot;,constraintText)&#xA;&#x9;&#x9;&#x9;'save the constraint&#xA;&#x9;&#x9;&#x9;OCLConstraint.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'TODO: report possible wrong references?&#xA;&#x9;next&#xA;end function&#xA;&#xA;function needsFixing(matchText,replacementText,messagingPackageIDs,OCLConstraint,OCLElement)&#xA;&#x9;dim exactMatch&#xA;&#x9;dim replacementMatch&#xA;&#x9;exactMatch = hasMatch(matchText,messagingPackageIDs)&#xA;&#x9;replacementMatch = hasMatch(replacementText,messagingPackageIDs)&#xA;&#x9;if replacementMatch then&#xA;&#x9;&#x9;'needs fixing&#xA;&#x9;&#x9;needsFixing = true&#xA;&#x9;&#x9;if exactMatch then&#xA;&#x9;&#x9;&#x9;'Issue warning because both exist&#xA;&#x9;&#x9;&#x9;needsFixing = false&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; ERROR found both '&quot; &amp; matchText &amp; &quot;' and '&quot; &amp; replacementText &amp; &quot;' OCL constraints have not been changed for this type&quot;  , OCLElement.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;'doesn't need fixing&#xA;&#x9;&#x9;needsFixing = false&#xA;&#x9;&#x9;if not exactMatch then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; ERROR '&quot; &amp; matchText &amp; &quot;' was found in constraint '&quot; &amp; OCLConstraint.Name &amp; &quot;' on element '&quot; &amp;  OCLElement.Name &amp; &quot;' and does not match an existing element (with or without '_Type')&quot;  , OCLElement.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function hasMatch(nameString,messagingPackageIDs)&#xA;&#x9;dim sqlFindMatch &#xA;&#x9;sqlFindMatch = &quot;select o.Object_ID from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Object_Type in ('Class','Enumeration') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.name = '&quot; &amp; nameString &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot; &amp; messagingPackageIDs &amp; &quot;) &quot;&#xA;&#x9;dim matches&#xA;&#x9;set matches = getElementsFromQuery(sqlFindMatch)&#xA;&#x9;if matches.Count &gt; 0 then&#xA;&#x9;&#x9;hasMatch = true&#xA;&#x9;else&#xA;&#x9;&#x9;hasMatch = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="133"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6787A0F7-DDF3-43F1-B62A-F7263F82A1F0}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import Message Rules&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Import Message Rules&#xA;' Author: Geert Bellekens&#xA;' Purpose: Import Message Rules from Excel files&#xA;' Date: 2017-03-28&#xA;'&#xA;&#xA;'name of the output tab&#xA;const outPutName = &quot;Import message Rules&quot;&#xA;&#xA;sub main&#xA;&#x9;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#xA;&#x9;'let the user select the package to store the rules in&#xA;&#x9;msgbox &quot;Please select the package to store the message rules&quot;&#xA;&#x9;dim userSelectedPackage&#xA;&#x9;set userSelectedPackage = selectPackage()&#xA;&#x9;if not userSelectedPackage is nothing then&#xA;&#x9;&#x9;if isRequireUserLockEnabled() then&#xA;&#x9;&#x9;&#x9;if not userSelectedPackage.ApplyUserLock() then&#xA;&#x9;&#x9;&#x9;&#x9;msgbox &quot;Please apply user lock to the selected package&quot;,vbOKOnly+vbExclamation,&quot;Selected Package not locked!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;exit sub&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'get the message rules and save them in the given package&#xA;&#x9;&#x9;getRulesFromExcel userSelectedPackage &#xA;&#x9;end if&#xA;end sub&#xA;&#xA;&#xA;function getRulesFromExcel(userSelectedPackage)&#xA;&#x9;dim sourceExcelFile&#xA;&#x9;set sourceExcelFile = new ExcelFile&#xA;&#x9;sourceExcelFile.openUserSelectedFile()&#xA;&#x9;if len(sourceExcelFile.FileName)&gt; 0 then&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Starting Import message Rules from file'&quot; &amp; sourceExcelFile.FileName &amp; &quot;'&quot;,0&#xA;&#x9;&#x9;dim sheet&#xA;&#x9;&#x9;for each sheet in sourceExcelFile.worksheets&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;'create new package per sheet&#xA;&#x9;&#x9;&#x9;set currentPackage = userSelectedPackage.Packages.AddNew(sheet.Name,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;currentPackage.Update&#xA;&#x9;&#x9;&#x9;'get the contents of the sheet&#xA;&#x9;&#x9;&#x9;dim contents&#xA;&#x9;&#x9;&#x9;contents = sourceExcelFile.getContents(sheet)&#xA;&#x9;&#x9;&#x9;dim indexes&#xA;&#x9;&#x9;&#x9;set indexes = getIndexesBasedOnHeaders(contents)&#xA;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;dim j&#xA;&#x9;&#x9;&#x9;for i = 2 to Ubound(contents,1)  step +1&#xA;&#x9;&#x9;&#x9;&#x9;'get the path&#xA;&#x9;&#x9;&#x9;&#x9;dim path&#xA;&#x9;&#x9;&#x9;&#x9;dim ruleName&#xA;&#x9;&#x9;&#x9;&#x9;dim ruleID&#xA;&#x9;&#x9;&#x9;&#x9;dim ruleReason&#xA;&#x9;&#x9;&#x9;&#x9;dim action&#xA;&#x9;&#x9;&#x9;&#x9;'initialize fields&#xA;&#x9;&#x9;&#x9;&#x9;set path = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;ruleName = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;ruleID = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;ruleReason = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;action = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'loop the contents&#xA;&#x9;&#x9;&#x9;&#x9;for j = 1 to Ubound(contents,2)  step +1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim currentField&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if it is one of the level fields add it to the path&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentField = contents(i,j)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if j &lt; Ubound(indexes.Keys()) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if len(currentField) &gt; 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  AND len(indexes.Keys()(j)) &lt; 4 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  AND Ucase(Left(indexes.Keys()(j),1)) = &quot;L&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;path.Add currentField&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if j = indexes(&quot;NEW Test Rule&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ruleName = currentField&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the ID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if j = indexes(&quot;Test Rule ID&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ruleID = currentField&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the ruleReason )Error reason&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if j = indexes(&quot;Error reason&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ruleReason = currentField&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the action&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if j = indexes(&quot;Action&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;action = currentField&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if path.Count &gt; 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND len(ruleName) &gt; 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND len(ruleID) &gt; 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND len(ruleReason) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'not if marked to delete&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if lcase(action) &lt;&gt; &quot;delete&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'create Message Rule&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createMessageRule path, ruleName, ruleID, ruleReason, currentPackage&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'found everything we need, exit the for loop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if j = Ubound(contents,2) _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND lcase(action) &lt;&gt; &quot;delete&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND NOT (path.Count = 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND len(ruleName) = 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND len(ruleID) = 0 _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND len(ruleReason) = 0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'report error (not for all blanks)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; ERROR: Could not create Message Rule for row :&quot; &amp; i &amp; &quot; in sheet '&quot; &amp; sheet.Name &amp; &quot;'&quot;,0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Finihsed Import message Rules from file'&quot; &amp; sourceExcelFile.FileName &amp; &quot;'&quot;,0&#xA;&#x9;end if&#xA;end function&#xA;&#xA;Function getIndexesBasedOnHeaders(contents)&#xA;&#x9;dim j&#xA;&#x9;dim indexes&#xA;&#x9;set indexes = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;for j = 1 to Ubound(contents,2)  step +1&#xA;&#x9;&#x9;if not indexes.Exists(contents(1,j)) then&#xA;&#x9;&#x9;&#x9;indexes.Add contents(1,j) , j&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return indexes&#xA;&#x9;set getIndexesBasedOnHeaders = indexes&#xA;end function&#xA;&#xA;function createMessageRule(path, ruleName, ruleID, ruleReason, ownerPackage)&#xA;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Adding Rule'&quot; &amp; ruleID &amp; &quot;'&quot;,0&#xA;&#x9;'create MessageRule&#xA;&#x9;dim messageRule as EA.Element&#xA;&#x9;set messageRule = ownerPackage.Elements.AddNew(ruleName,&quot;Test&quot;)&#xA;&#x9;messageRule.StereotypeEx = &quot;Message Test Rule&quot;&#xA;&#x9;messageRule.Alias = ruleID&#xA;&#x9;messageRule.Notes = ruleReason&#xA;&#x9;messageRule.Update&#xA;&#x9;'add the tagged value with the concatenated path&#xA;&#x9;dim pathTaggedValue as EA.TaggedValue&#xA;&#x9;set pathTaggedValue = getExistingOrNewTaggedValue(messageRule, &quot;Constraint Path&quot;)&#xA;&#x9;pathTaggedValue.Value = Join(path.ToArray(),&quot;.&quot;)&#xA;&#x9;pathTaggedValue.Update&#xA;&#x9;'link the message rule to the message it is related to&#x9;&#xA;&#x9;dim relatedMessageObjects&#xA;&#x9;set relatedMessageObjects = getRelatedMessageObjects(path)&#xA;&#x9;dim relatedMessage as EA.Element&#xA;&#x9;for each relatedMessage in relatedMessageObjects&#xA;&#x9;&#x9;dim messageLink as EA.Connector&#xA;&#x9;&#x9;set messageLink = messageRule.Connectors.AddNew(&quot;&quot;,&quot;Dependency&quot;)&#xA;&#x9;&#x9;messageLink.SupplierID = relatedMessage.ElementID&#xA;&#x9;&#x9;messageLink.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getRelatedMessageObjects(path)&#xA;&#x9;dim getMessageObjectsSQL &#xA;&#x9;getMessageObjectsSQL = &quot;select o.Object_ID from t_object o                     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_package p on o.Package_ID = p.Package_ID&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Stereotype = 'XSDtopLevelElement'             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and p.name = '&quot; &amp; path(0) &amp; &quot; '                      &quot;&#xA;&#x9;dim messageObjects&#xA;&#x9;set messageObjects = getElementsFromQuery(getMessageObjectsSQL)&#xA;&#x9;set getRelatedMessageObjects = messageObjects&#xA;end function&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="134"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CD1E0829-56BF-4422-86A1-55B34893BD63}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LinkToCRMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Util&#xA;&#xA;' Script Name: LinkToCRMain&#xA;' Author: Geert Bellekens&#xA;' Purpose: Link Elemnents to a change REQUEST element&#xA;' Date: 2015-10-30&#xA;'&#xA;'&#xA;&#xA;&#xA;function linkItemToCR(selectedItem, selectedItems)&#xA;&#x9;dim groupProcessing&#xA;&#x9;groupProcessing = false&#xA;&#x9;'if the collection is given then we initialize the first item.&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;if not selectedItems is nothing then&#xA;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set selectedItem = selectedItems(0)&#xA;&#x9;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;groupProcessing = true&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;set selectedItem = Repository.GetContextObject()&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'get the select context item type&#xA;&#x9;dim selectedItemType&#xA;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;select case selectedItemType&#xA;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;'if the selectedItem is a package then we use the Element part of the package&#xA;&#x9;&#x9;if selectedItemType = otPackage then&#xA;&#x9;&#x9;&#x9;set selectedItem = selectedItem.Element&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'get the logged in user&#xA;&#x9;&#x9;Dim userLogin&#xA;&#x9;&#x9;userLogin = getUserLogin&#xA;&#x9;&#x9;dim lastCR as EA.Element&#xA;&#x9;&#x9;set lastCR = nothing&#xA;&#x9;&#x9;dim CRtoUse as EA.Element&#xA;&#x9;&#x9;set CRtoUse = nothing&#xA;&#x9;&#x9;set lastCR = getLastUsedCR(userLogin)&#xA;&#x9;&#x9;'get most recent used CR by this user&#xA;&#xA;&#x9;&#x9;if not selectedItem is nothing then&#xA;&#x9;&#x9;&#x9;dim lastComments&#xA;&#x9;&#x9;&#x9;lastComments = vbNullString&#xA;&#x9;&#x9;&#x9;'if there is a last CR then we ask the user if we need to use that one&#xA;&#x9;&#x9;&#x9;if not lastCR is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim response&#xA;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link all &quot; &amp; selectedItems.Count &amp; &quot; elements to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elseif not isCRLinked(selectedItem,lastCR) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link element &quot;&quot;&quot; &amp; selectedItem.Name &amp; &quot;&quot;&quot; to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'check the response&#xA;&#x9;&#x9;&#x9;&#x9;select case response&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbYes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = lastCR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbCancel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'user cancelled, stop altogether&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exit function&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'If there was no last CR, or the user didn't want to link that one we let the user choose one&#xA;&#x9;&#x9;&#x9;if CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim CR_id &#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;CR_ID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Change&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;if CR_ID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = Repository.GetElementByID(CR_ID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'user selected same change as last time. So he might want to reuse his comments as well&#xA;&#x9;&#x9;&#x9;&#x9;lastComments = getLastUsedComment(userLogin)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'if the CRtoUse is now selected then we link it to the selected element&#xA;&#x9;&#x9;&#x9;if not CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim linkCounter&#xA;&#x9;&#x9;&#x9;&#x9;linkCounter = 0&#xA;&#x9;&#x9;&#x9;&#x9;'first check if this CR is not already linked&#xA;&#x9;&#x9;&#x9;&#x9;if isCRLinked(selectedItem,CRToUse) and not groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR was already linked to this item&quot;, vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the comments to use&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;comments = InputBox(&quot;Please enter comments for this change&quot;, &quot;Change Comments&quot;,lastComments)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(comments) &gt; 2 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each selectedItem in selectedItems&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'check the object type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case selectedItemType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not isCRLinked(selectedItem,CRToUse) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkCounter = linkCounter + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if linkCounter &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Successfully linked &quot; &amp; selectedItems.Count &amp; &quot; elements to change &quot;&quot;&quot; &amp; CRToUse.Name&amp; &quot;&quot;&quot;&quot;  , vbOKOnly + vbInformation ,&quot;Elements linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;No links created to change &quot; &amp; CRToUse.Name &amp; &quot;.&quot; &amp; vbNewLine &amp; &quot;They are probably already linked&quot; , vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR has not been linked because no comment was provided&quot;, vbOKOnly + vbExclamation ,&quot;No CR link&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;case else&#xA;&#x9;&#x9;MsgBox &quot;Cannot link this type of element to a CR&quot; &amp; vbNewline &amp; &quot;Supported element types are: Element, Package, Attribute, Operation and Relation&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;&#xA;&#xA;function isCRLinked(item, CR)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;isCRLinked = false&#xA;&#x9;for each taggedValue in item.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Value = CR.ElementGUID then&#xA;&#x9;&#x9;&#x9;isCRLinked = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function linkToCR(selectedItem, selectedItemType, CRToUse, userLogin, comments)&#xA;&#x9;Session.Output &quot;CRToUse: &quot; &amp; CRToUse.Name &amp; &quot; userLogin: &quot; &amp; userLogin &amp; &quot; comments: &quot; &amp; comments&#xA;&#x9;dim crTag &#xA;&#x9;set crTag = nothing&#xA;&#x9;set crTag = selectedItem.TaggedValues.AddNew(&quot;CR&quot;,&quot;&quot;)&#xA;&#x9;if not crTag is nothing then&#xA;&#x9;&#x9;crTag.Value = CRToUse.ElementGUID&#xA;&#x9;&#x9;crTag.Notes = &quot;user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;date=&quot; &amp; Year(Date) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Month(Date),2) &amp; &quot;-&quot; &amp; Right(&quot;0&quot; &amp; Day(Date),2) &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;comments=&quot; &amp; comments&#xA;&#x9;&#x9;crTag.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getLastUsedCR(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select top 1 o.Object_id &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot;&#xA;&#x9;dim CRs&#xA;&#x9;dim CR as EA.Element&#xA;&#x9;set CR = nothing&#xA;&#x9;'get the last CR&#xA;&#x9;set CRs = getElementsFromQuery(sqlGetString)&#xA;&#x9;if CRs.Count &gt; 0 then&#xA;&#x9;&#x9;set CR = CRs(0)&#xA;&#x9;end if&#xA;&#xA;&#x9;set getLastUsedCR = CR&#xA;end function&#xA;&#xA;function getLastUsedComment(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;dim sqlCommentsString&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; mid(tv.Notes, instr(tv.[Notes],'comments=') + len('comments=')) &quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; substring(tv.Notes, charindex('comments=',tv.[Notes]) + len('comments='), datalength(tv.Notes))  &quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select top 1 &quot; &amp; sqlCommentsString &amp; &quot; as comments &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot;&#xA;&#x9;dim queryResult &#xA;&#x9;queryResult = Repository.SQLQuery(sqlGetString)&#xA;&#x9;Session.Output queryResult&#xA;&#x9;dim results&#xA;&#x9;results = convertQueryResultToArray(queryResult)&#xA;&#x9;if Ubound(results) &gt; 0 then&#xA;&#x9;&#x9;getLastUsedComment = results(0,0)&#xA;&#x9;else&#xA;&#x9;&#x9;getLastUsedComment = vbNullString&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="135"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CD129AD2-F817-4333-9E3B-C1120ED3791C}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Merge LDM with DM&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: Merge Packages&#xA;' Author: Geert Bellekens&#xA;' Purpose: Merge packages containing conceptually the same elements moving all references to references to the master element&#xA;' Date: 2016-07-28&#xA;'&#xA;&#xA;dim outputTabName&#xA;outputTabName = &quot;Merge Packages&quot;&#xA;&#xA;sub main&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'select source logical&#xA;&#x9;dim DMPackage as EA.Package&#xA;&#x9;msgbox &quot;select the DM package&quot;&#xA;&#x9;set DMPackage = selectPackage()&#xA;&#x9;'select master package&#xA;&#x9;dim LDMPackage as EA.Package&#xA;&#x9;msgbox &quot;select the LDM package&quot;&#xA;&#x9;set LDMPackage = selectPackage()&#xA;&#x9;if not DMPackage is nothing and not LDMPackage is nothing then &#xA;&#x9;&#x9;dim response&#xA;&#x9;&#x9;response = Msgbox(&quot;Merge package &quot;&quot;&quot; &amp; DMPackage.Name &amp; &quot;&quot;&quot; to package &quot;&quot;&quot; &amp; LDMPackage.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Merge Package&quot;)&#xA;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting merge package &quot;&quot;&quot; &amp; DMPackage.Name &amp; &quot;&quot;&quot; to package &quot;&quot;&quot; &amp; LDMPackage.Name &amp; &quot;&quot;&quot;&quot; ,0&#xA;&#x9;&#x9;&#x9;mergePackages DMPackage, LDMPackage&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished merge package &quot;&quot;&quot; &amp; DMPackage.Name &amp; &quot;&quot;&quot; to package &quot;&quot;&quot; &amp; LDMPackage.Name &amp; &quot;&quot;&quot;&quot; ,0&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;msgbox &quot;finished&quot;&#xA;end sub&#xA;&#xA;&#xA;function mergePackages(DMPackage, LDMPackage)&#xA;&#x9;&#xA;&#x9;dim LDMDictionary&#xA;&#x9;Set LDMDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;'Logical Data Model&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Creating dictionary from Logical Data Model&quot;, 0&#xA;&#x9;addClassesToDictionary LDMPackage, LDMDictionary&#xA;&#x9;'Domain model&#xA;&#x9;dim DMDictionary&#xA;&#x9;Set DMDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;'Logical Data Model&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Creating dictionary from Domain Model&quot;, 0&#xA;&#x9;addClassesToDictionary DMPackage, DMDictionary&#xA;&#x9;'create list of (recursive) owned elements in LDM&#xA;&#x9;for each DMClassName in DMDictionary.Keys&#xA;&#x9;&#x9;if LDMDictionary.Exists(DMClassName) then&#xA;&#x9;&#x9;&#x9;mergeElements DMDictionary.Item(DMClassName), LDMDictionary.Item(DMClassName), DMDictionary, LDMDictionary&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Moving &quot; &amp; DMClassName ,0&#xA;&#x9;&#x9;&#x9;'Move the DM class to the LDM package&#xA;&#x9;&#x9;&#x9;DMDictionary.Item(DMClassName).PackageID = LDMPackage.PackageID&#xA;&#x9;&#x9;&#x9;DMDictionary.Item(DMClassName).Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addClassesToDictionary(package, dictionary)&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;dim subpackage as EA.Package&#xA;&#x9;'process owned elements&#xA;&#x9;for each classElement in package.Elements&#xA;&#x9;&#x9;'this works for FISSES as well because they are classes with stereotype Message&#xA;&#x9;&#x9;if (classElement.Type = &quot;Class&quot; OR classElement.Type = &quot;Datatype&quot; OR classElement.Type = &quot;Enumeration&quot;) _&#xA;&#x9;&#x9;&#x9;AND len(classElement.Name) &gt; 0 AND not dictionary.Exists(classElement.Name) then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Adding element: &quot; &amp; classElement.Name, 0&#xA;&#x9;&#x9;&#x9;dictionary.Add classElement.Name,  classElement&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;&#x9;'process subpackages&#xA;&#x9;for each subpackage in package.Packages&#xA;&#x9;&#x9;addClassesToDictionary subpackage, dictionary&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;'merging elements is the fastest if we use database updates&#xA;function mergeElements(fromElement, masterElement, DMDictionary, LDMDictionary)&#xA;&#x9;Repository.WriteOutput outputTabName, &quot;Merging &quot;&quot;&quot; &amp; fromElement.Name &amp; &quot;&quot;&quot; to &quot;&quot;&quot; &amp; masterElement.Name &amp; &quot;&quot;&quot;&quot; ,0&#xA;&#x9;'attribute datatypes&#xA;&#x9;dim sqlUpdateDatatypes &#xA;&#x9;slqUpdateDatatypes = &quot;update t_attribute set classifier = &quot; &amp; masterElement.ElementID &amp; &quot; where classifier = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute slqUpdateDatatypes&#xA;&#x9;'connectors&#xA;&#x9;mergeConnectors fromElement, masterElement, DMDictionary, LDMDictionary&#xA;&#x9;'diagramObjects&#xA;&#x9;dim slqUpdateDiagramObjects&#xA;&#x9;slqUpdateDiagramObjects = &quot;update t_diagramobjects set Object_ID= &quot; &amp; masterElement.ElementID &amp; &quot; where Object_ID = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute slqUpdateDiagramObjects &#xA;&#x9;'parameter types&#xA;&#x9;dim sqlUpdateParameters&#xA;&#x9;sqlUpdateParameters = &quot;update t_operationparams set Classifier =  &quot; &amp; masterElement.ElementID &amp; &quot;  where Classifier = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute sqlUpdateParameters&#xA;&#x9;'tagged values (elements)&#xA;&#x9;updateTaggedValues &quot;t_objectproperties&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'tagged values (attributes)&#xA;&#x9;updateTaggedValues &quot;t_attributetag&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'tagged values (operations)&#xA;&#x9;updateTaggedValues &quot;t_operationtag&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'tagged values (connectors)&#xA;&#x9;updateTaggedValues &quot;t_connectortag&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'merge references to attributes&#xA;&#x9;mergeAttributeReferences fromElement, masterElement&#xA;end function&#xA;&#xA;function mergeConnectors (fromElement, masterElement, DMDictionary, LDMDictionary)&#xA;&#x9;'connectors (not for connectors to self)&#xA;&#x9;dim DMElementIDs, LDMElementIDs&#xA;&#x9;DMElementIDs = makeIDString(DMDictionary.Items)&#xA;&#x9;LDMElementIDs = makeIDString(LDMDictionary.Items)&#xA;&#x9;dim sqlUpdateConnectorSource, sqlUpdateConnectorTarget&#xA;&#x9;'not for connectors from DM elements to DM elements&#xA;&#x9;sqlUpdateConnectorSource = &quot;update t_connector set Start_Object_ID = &quot; &amp; masterElement.ElementID &amp; &quot; where Start_Object_ID &lt;&gt; End_Object_ID and Start_Object_ID = &quot; &amp; fromElement.ElementID &amp; &quot; and End_Object_ID not in (&quot; &amp; DMElementIDs &amp; &quot;)&quot;&#xA;&#x9;Repository.Execute sqlUpdateConnectorSource&#xA;&#x9;'not for connectors coming from DM or LDM elements&#xA;&#x9;sqlUpdateConnectorTarget = &quot;update t_connector set End_Object_ID = &quot; &amp; masterElement.ElementID &amp; &quot; where Start_Object_ID &lt;&gt; End_Object_ID and End_Object_ID = &quot; &amp; fromElement.ElementID &amp; &quot; and Start_Object_ID not in (&quot; &amp; DMElementIDs &amp; &quot;,&quot; &amp; LDMElementIDs &amp; &quot;)&quot;&#xA;&#x9;Repository.Execute sqlUpdateConnectorTarget&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;function mergeAttributeReferences(fromElement, masterElement)&#xA;&#x9;dim fromAttribute as EA.Attribute&#xA;&#x9;dim masterAttribute as EA.Attribute&#xA;&#x9;for each fromAttribute in fromElement.Attributes&#xA;&#x9;&#x9;set masterAttribute = getCorrespondingAttribute(fromAttribute,masterElement)&#xA;&#x9;&#x9;if not masterAttribute is nothing then&#xA;&#x9;&#x9;&#x9;'tagged values (attributes)&#xA;&#x9;&#x9;&#x9;updateTaggedValues &quot;t_attributetag&quot;, masterAttribute.AttributeGUID, fromAttribute.AttributeGUID &#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getCorrespondingAttribute(fromAttribute,masterElement)&#xA;&#x9;'initialize empty&#xA;&#x9;set getCorrespondingAttribute = nothing&#xA;&#x9;dim candidateAttribute as EA.Attribute&#xA;&#x9;for each candidateAttribute in masterElement.Attributes&#xA;&#x9;&#x9;if candidateAttribute.Name = fromAttribute.Name then&#xA;&#x9;&#x9;&#x9;set getCorrespondingAttribute = candidateAttribute&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function updateTaggedValues (tableName, newValue, oldValue)&#xA;&#x9;dim sqlUpdateTaggedValues&#xA;&#x9;sqlUpdateTaggedValues = &quot;update &quot; &amp; tableName &amp; &quot; set value = '&quot; &amp; newValue &amp; &quot;' where value = '&quot; &amp; oldValue &amp; &quot;'&quot;&#xA;&#x9;Repository.Execute sqlUpdateTaggedValues &#xA;end function&#xA;&#xA;&#xA;function getCorrespondingElement(masterPackage, fromElement)&#xA;&#x9;dim sqlGetElement&#xA;&#x9;'initialize to nothing&#xA;&#x9;set getCorrespondingElement = nothing&#xA;&#x9;sqlGetElement = &quot;select o.Object_ID from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Package_ID = &quot; &amp; masterPackage.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Object_Type = '&quot; &amp; fromElement.Type &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Name = '&quot; &amp; fromElement.Name &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and (o.Stereotype is null or o.Stereotype = '&quot; &amp; fromElement.Stereotype &amp; &quot;') &quot;&#xA;&#x9;dim masterElement as EA.Element&#xA;&#x9;dim elementCollection&#xA;&#x9;set elementCollection = getElementsFromQuery(sqlGetElement)&#xA;&#x9;for each masterElement in elementCollection&#xA;&#x9;&#x9;'return the first element&#xA;&#x9;&#x9;set getCorrespondingElement = masterElement&#xA;&#x9;&#x9;exit for&#xA;&#x9;next&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="136"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{75225FDB-FBCD-4E85-8DEA-041602FBBA0F}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MIG_Replace_Datatype&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in thePackage.Elements&#xA;&#x9;&#x9;Session.Output &quot;=== Table &quot; + element.name + &quot; ===&quot;&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;&#x9;if attribute.Type = &quot;varchar&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Attribute&quot; + attribute.name + &quot; has a varchar as datatype, setting it to nvarchar&quot;&#xA;&#x9;&#x9;&#x9;&#x9;attribute.Type = &quot;nvarchar&quot;&#xA;&#x9;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;&#x9;&#x9;if attribute.Type = &quot;nvarchar&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;=&gt; Attribute&quot; + attribute.name + &quot; is now nvarchar&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="137"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2EC272B9-8FC8-4CAA-A5BF-C5F9A7F063A3}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Monitoring and Alerting Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.DocGenUtil&#xA;!INC Atrias Scripts.Util&#xA;'&#xA;&#xA;'&#xA;' Script Name: Monitoring and Alerting Document&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for the M&amp;A document&#xA;' Date: 2016-06-15&#xA;'&#xA;dim documentsPackageGUID, businessProcessesPackageGUID, subProcessesPackageGUID&#xA;'*************configuration*******************&#xA;documentsPackageGUID = &quot;{A15738BC-3B18-46be-8357-2190FC05436F}&quot;&#xA;businessProcessesPackageGUID = &quot;{7EAA1987-6FB1-427f-8BA1-2610ED339905}&quot;&#xA;subProcessesPackageGUID = &quot;{5D830EDF-0470-4d41-9358-93C2EB410521}&quot;&#xA;'*************configuration*******************&#xA;&#xA;const outPutName = &quot;Create M&amp;A document&quot;&#xA;&#xA;sub main&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'report start of process&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Starting creation of M&amp;A document at &quot; &amp; now(), 0&#xA;&#x9;'create document&#xA;&#x9;createMandADocument&#xA;&#x9;'report end of process&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Finished creation of M&amp;A document at &quot; &amp; now(), 0&#xA;end sub&#xA;&#xA;function createMandADocument()&#xA;&#x9;'ask user for document name&#xA;&#x9;dim documentName&#xA;&#x9;documentName = InputBox(&quot;Please enter the name for this document&quot;, &quot;Document Name&quot;, &quot;MIG-DGO-M&amp;A Business Requirements v X.Y&quot;)&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = addMasterDocument (documentsPackageGUID, documentName)&#xA;&#x9;dim i&#xA;&#x9;i = 1&#xA;&#x9;&#xA;&#x9;'get the processes package&#xA;&#x9;dim businessProcessesPackage as EA.Package&#xA;&#x9;set businessProcessesPackage = Repository.GetPackageByGuid(businessProcessesPackageGUID)&#xA;&#x9;'loop all process packages&#xA;&#x9;dim domainPackage as EA.Package&#xA;&#x9;for each domainPackage in businessProcessesPackage.Packages&#xA;&#x9;&#x9;'add domain title&#xA;&#x9;&#x9;addModelDocumentForPackage masterDocument,domainPackage,domainPackage.Name, i, &quot;MA_Domain Title&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'report processes&#xA;&#x9;&#x9;i = reportOwnedProcesses(masterDocument, domainPackage, i)&#xA;&#x9;&#x9;'get the subProcesses package for this domain&#xA;&#x9;&#x9;dim subProcessPackage&#xA;&#x9;&#x9;set subProcessPackage = getCorrespondingSubProcessPackage(domainPackage)&#xA;&#x9;&#x9;if not subProcessPackage is nothing then&#xA;&#x9;&#x9;&#x9;'report subProcesses&#xA;&#x9;&#x9;&#x9;i = reportOwnedProcesses(masterDocument, subProcessPackage, i)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'reload the package to show the actual order&#xA;&#x9;Repository.RefreshModelView masterDocument.PackageID&#xA;end function&#xA;&#xA;function reportOwnedProcesses(masterDocument, domainPackage, i)&#xA;&#x9;&#x9;dim processes&#xA;&#x9;&#x9;set processes = getMAndAProcesses(domainPackage)&#xA;&#x9;&#x9;dim process as EA.Element&#xA;&#x9;&#x9;for each process in processes&#xA;&#x9;&#x9;&#x9;'add model documents for process&#xA;&#x9;&#x9;&#x9;i = addProcessDocuments(masterDocument, process, i)&#xA;&#x9;&#x9;next&#xA;&#x9;reportOwnedProcesses = i&#xA;end function&#xA;&#xA;function getCorrespondingSubProcessPackage(domainPackage)&#xA;&#x9;'initialize&#xA;&#x9;set getCorrespondingSubProcessPackage = nothing&#xA;&#x9;dim subProcessesPackage as EA.Package&#xA;&#x9;set subProcessesPackage = Repository.GetPackageByGuid(subProcessesPackageGUID)&#xA;&#x9;dim subProcessPackage as EA.Package&#xA;&#x9;'find the subpackage with the same name&#xA;&#x9;for each subProcessPackage in subProcessesPackage.Packages&#xA;&#x9;&#x9;if subProcessPackage.Name = domainPackage.Name then&#xA;&#x9;&#x9;&#x9;'found it&#xA;&#x9;&#x9;&#x9;set getCorrespondingSubProcessPackage = subProcessPackage&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addProcessDocuments(masterDocument, process, i)&#xA;&#x9;'add section for the Business Process&#xA;&#x9;addModelDocument masterDocument, &quot;MA_Business Process&quot;,process.Name, process.ElementGUID, i&#xA;&#x9;i = i + 1&#xA;&#x9;'add sections for each of the BAM specifications&#xA;&#x9;dim BAMspecifications&#xA;&#x9;set BAMspecifications = getBAMSpecifications(process)&#xA;&#x9;dim BAMSpecification as EA.Element&#xA;&#x9;for each BAMSpecification in BAMSpecifications&#xA;&#x9;&#x9;'add section for the BAM Specification&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;MA_Specifications&quot;,BAMSpecification.Name, BAMSpecification.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;addProcessDocuments = i&#xA;end function&#xA;&#xA;function getMAndAProcesses(domainPackage)&#xA;&#x9;dim sqlGetProcesses&#xA;&#x9;sqlGetProcesses = &quot;select bp.Object_ID from ((t_object bp &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_package bpp on bp.Package_ID = bpp.Package_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_diagram d on d.ParentID = bp.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; bp.Stereotype in ('Activity', 'BusinessProcess') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and exists (select bam.Object_ID from t_object bam &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where bam.Package_ID = bp.Package_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and bam.Stereotype = 'BAM_Specification') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and bpp.Parent_ID =&quot; &amp; domainPackage.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; order by bp.Name&quot;&#xA;    set getMAndAProcesses = getElementsFromQuery(sqlGetProcesses)&#xA;end function&#xA;&#xA;function getBAMSpecifications(process)&#xA;&#x9;dim sqlGetBamSpecifications&#xA;&#x9;sqlGetBamSpecifications = &quot;select bam.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from t_object bam &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where bam.Stereotype = 'BAM_Specification' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and bam.Package_ID = &quot; &amp; process.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by bam.name&quot;&#xA;&#x9;set getBAMSpecifications = getElementsFromQuery(sqlGetBamSpecifications)&#xA;end function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="138"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{271CB54A-B22C-489E-A2EA-7EEDF670EDD0}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Post processing XSD transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;Dim XSDBaseTypes&#xA;XSDBaseTypes = Array(&quot;string&quot;,&quot;boolean&quot;,&quot;decimal&quot;,&quot;float&quot;,&quot;double&quot;,&quot;duration&quot;,&quot;dateTime&quot;,&quot;time&quot;,&quot;date&quot;,&quot;gYearMonth&quot;,&quot;gYear&quot;,&quot;gMonthDay&quot;,&quot;gDay&quot;,&quot;gMonth&quot;,&quot;hexBinary&quot;,&quot;base64Binary&quot;,&quot;anyURI&quot;,&quot;QName&quot;,&quot;integer&quot;,&quot;long&quot;,&quot;int&quot;)&#xA;&#xA;sub main&#xA;&#x9;dim response&#xA;&#x9;response = Msgbox(&quot;This script will move all underlying elements into one package!&quot; &amp; vbnewLine &amp; &quot;This should only be done when making an XSD from the LDM.&quot; &amp; vbnewLine &amp; &quot; Are you sure?&quot;, vbYesNo+vbExclamation, &quot;Post XSD transformation&quot;)&#xA;&#x9;if response = vbYes then&#xA;&#x9;&#x9;'Create new package for the whole of the schema&#xA;&#x9;&#x9;dim package as EA.Package &#xA;&#x9;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;&#x9;dim schemaPackage as EA.Package&#xA;&#x9;&#x9;set schemaPackage = package.Packages.AddNew(package.Name,&quot;package&quot;)&#xA;&#x9;&#x9;schemaPackage.Update&#xA;&#x9;&#x9;schemaPackage.Element.Stereotype = &quot;XSDSchema&quot;&#xA;&#x9;&#x9;schemaPackage.Update&#xA;&#x9;&#x9;' move all elements from the subpackages to the newly create package&#xA;&#x9;&#x9;'-------------------------------------------------------------------&#xA;&#x9;&#x9;mergeToSchemaPackage package, schemaPackage 'uncomment for production&#xA;&#x9;&#x9;'set schemaPackage = package 'comment out for production&#xA;&#x9;&#x9;'-------------------------------------------------------------------&#xA;&#x9;&#x9;' fix the elements&#xA;&#x9;&#x9;fixElements schemaPackage &#xA;&#x9;&#x9;'fix the connectors&#xA;&#x9;&#x9;fixConnectors schemaPackage&#xA;&#x9;&#x9;'fix the attributes with a primitive type&#xA;&#x9;&#x9;fixAttributePrimitives schemaPackage&#xA;&#x9;&#x9;'set lowerbound of attributes to 0&#xA;&#x9;&#x9;fixAttributeLowerBound schemaPackage&#xA;&#x9;&#x9;'remove abstract classes&#xA;&#x9;&#x9;fixAbstractClasses schemaPackage&#x9;&#x9;&#xA;&#x9;&#x9;'reload&#xA;&#x9;&#x9;Repository.RefreshModelView(package.PackageID)&#xA;&#x9;&#x9;msgbox &quot;Finished!&quot;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function fixElements(schemaPackage)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in schemaPackage.Elements&#xA;&#x9;&#x9;if element.Stereotype = &quot;XSDsimpleType&quot; then&#xA;&#x9;&#x9;&#x9;if element.Attributes.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;' fix xsdSimpleTypes&#xA;&#x9;&#x9;&#x9;&#x9;fixXSDsimpleType element&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = &quot;XSDcomplexType&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'process complex types&#xA;&#x9;&#x9;if element.Stereotype = &quot;XSDcomplexType&quot; then&#xA;&#x9;&#x9;&#x9;fixComplexTypes element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;end function&#xA;&#xA;'fix the complex type.&#xA;'copy all attributes and associations from the parent classes to this class (flatten)&#xA;'add versioning and timeslicing attributes&#xA;'set cardinality to optional for all attributes (and associations ?)&#xA;'remove abstract classes&#xA;function fixComplexTypes(element)&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;dim parentClass as EA.Element&#xA;&#x9;set sourceElement = getTransformationSource(element)&#xA;&#x9;'check for tagged values versioned and timesliced&#xA;&#x9;setTimeSlicingAndVersioning sourceElement, element&#xA;&#x9;if not element is nothing and element.Abstract = &quot;0&quot; then&#xA;&#x9;&#x9;'loop parent classes&#xA;&#x9;&#x9;for each parentClass in element.BaseClasses&#xA;&#x9;&#x9;&#x9;copyFromBaseClasses parentClass, element&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function copyFromBaseClasses(sourceElement, targetElement)&#x9;&#x9;&#x9;&#xA;&#x9;'copy attributes&#xA;&#x9;copyAttributes sourceElement, targetElement&#xA;&#x9;'copy associations&#xA;&#x9;copyAssociations sourceElement, targetElement&#xA;&#x9;'copy from parents of source as well&#xA;&#x9;dim parent as EA.Element&#xA;&#x9;for each parent in sourceElement.BaseClasses&#xA;&#x9;&#x9;copyFromBaseClasses parent, targetElement&#xA;&#x9;next&#xA;end function&#xA;&#xA;'check if the source element has the timeslicing or versioning tagged value set to &quot;yes&quot;.&#xA;'if so it will apply the pattern to the element&#xA;function setTimeSlicingAndVersioning(sourceElement, targetElement)&#xA;'&#x9;&#x9;dim sourceElement as EA.Element&#xA;'&#x9;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each taggedValue in sourceElement.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = &quot;Timesliced&quot; then&#xA;&#x9;&#x9;&#x9;'add attributes&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;StartDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;EndDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;elseif taggedValue.Name = &quot;Versioned&quot; then&#xA;&#x9;&#x9;&#x9;'add attributes&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;ValidFromDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;ValidUntilDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies all attributes from the sourceElement to the target element&#xA;function copyAttributes (sourceElement, targetElement)&#xA;'&#x9;&#x9;dim sourceElement as EA.Element&#xA;'&#x9;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim newAttribute as EA.Attribute&#xA;&#x9;for each attribute in sourceElement.Attributes&#xA;&#x9;&#x9;'don't copy the timeslicing and versioning attributes&#xA;&#x9;&#x9;if attribute.Name &lt;&gt; &quot;StartDate&quot; and attribute.Name &lt;&gt; &quot;EndDate&quot; and attribute.Name &lt;&gt; &quot;ValidFromDate&quot; and attribute.Name &lt;&gt; &quot;ValidUntilDate&quot; then&#xA;&#x9;&#x9;&#x9;set newAttribute = targetElement.Attributes.AddNew(attribute.Name,attribute.Type)&#xA;&#x9;&#x9;&#x9;'newAttribute.Type = attribute.Type&#xA;&#x9;&#x9;&#x9;newAttribute.ClassifierID = attribute.ClassifierID&#xA;&#x9;&#x9;&#x9;newAttribute.LowerBound = attribute.LowerBound&#xA;&#x9;&#x9;&#x9;newAttribute.UpperBound = attribute.UpperBound&#xA;&#x9;&#x9;&#x9;newAttribute.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies all associations from the sourceElement to the targetElement&#xA;function copyAssociations (sourceElement, targetElement)&#xA;'&#x9;&#x9;dim sourceElement as EA.Element&#xA;'&#x9;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim supplierElement as EA.Element&#xA;&#x9;dim association as EA.Connector&#xA;&#x9;dim newAssociation as EA.Connector&#xA;&#x9;for each association in sourceElement.Connectors&#xA;&#x9;&#x9;if association.Type = &quot;Association&quot; or association.Type = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;&#x9;if association.ClientID = sourceElement.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;set newAssociation = targetElement.Connectors.AddNew(association.Name, association.Type)&#xA;&#x9;&#x9;&#x9;&#x9;newAssociation.SupplierID = association.SupplierID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;set supplierElement = Repository.GetElementByID(association.ClientID)&#xA;&#x9;&#x9;&#x9;&#x9;set newAssociation = supplierElement.Connectors.AddNew(association.Name, association.Type)&#xA;&#x9;&#x9;&#x9;&#x9;newAssociation.SupplierID = targetElement.ElementID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;newAssociation.Update&#xA;&#x9;&#x9;&#x9;'set the ends&#xA;&#x9;&#x9;&#x9;'source&#xA;&#x9;&#x9;&#x9;newAssociation.ClientEnd.Cardinality = association.ClientEnd.Cardinality&#xA;&#x9;&#x9;&#x9;newAssociation.ClientEnd.Role = association.ClientEnd.Role&#xA;&#x9;&#x9;&#x9;newAssociation.ClientEnd.Update&#xA;&#x9;&#x9;&#x9;'target&#xA;&#x9;&#x9;&#x9;newAssociation.SupplierEnd.Cardinality = association.SupplierEnd.Cardinality&#xA;&#x9;&#x9;&#x9;newAssociation.SupplierEnd.Role = association.SupplierEnd.Role&#xA;&#x9;&#x9;&#x9;newAssociation.SupplierEnd.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'finds the element from which the given element was tranformed&#xA;function getTransformationSource(element)&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;set sourceElement = nothing&#xA;&#x9;dim sqlFindSource&#xA;&#x9;dim sourceElements&#xA;&#x9;sqlFindSource = &quot;select o.Object_ID from  t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_xref x on x.[Supplier] = o.[ea_guid] &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where x.TYPE = 'Transformation' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and x.[Client] =  '&quot; &amp; element.ElementGUID &amp; &quot;'&quot;&#xA;&#x9;set sourceElements = getElementsFromQuery(sqlFindSource)&#xA;&#x9;if sourceElements.Count &gt; 0 then&#xA;&#x9;&#x9;set sourceElement = sourceElements(0)&#xA;&#x9;end if&#xA;&#x9;set getTransformationSource = sourceElement&#xA;end function&#xA;&#xA;function fixXSDsimpleType(element)&#xA;&#x9;'find the element it was transformed from&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;set sourceElement = getTransformationSource(element)&#xA;&#x9;if not sourceElement is nothing then&#xA;&#x9;&#x9;'copy the tagged values&#xA;&#x9;&#x9;copyTaggedValues sourceElement, element&#xA;&#x9;&#x9;'determine the &quot;parent&quot; type&#xA;&#x9;&#x9;dim baseClass as EA.Element&#xA;&#x9;&#x9;dim baseXSDType&#xA;&#x9;&#x9;baseXSDType = &quot;string&quot; 'default&#xA;&#x9;&#x9;for each baseClass in sourceElement.BaseClasses&#xA;&#x9;&#x9;&#x9;if Ubound(Filter(XSDBaseTypes, baseClass.Name )) &gt; -1 then&#xA;&#x9;&#x9;&#x9;&#x9;'found the base class&#xA;&#x9;&#x9;&#x9;&#x9;baseXSDType = baseClass.Name&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'set the base type&#xA;&#x9;&#x9;element.Genlinks = &quot;Parent=&quot; &amp; baseXSDType &amp; &quot;;&quot;&#xA;&#x9;&#x9;element.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function mergeToSchemaPackage (package, schemaPackage)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;dim i&#xA;&#x9;for i = package.Packages.Count -1 to i = 1 step -1&#xA;&#x9;&#x9;set subPackage = package.Packages.GetAt(i)&#xA;&#x9;&#x9;'should only be done on XSDschema packages&#xA;&#x9;&#x9;if subPackage.Element.Stereotype = &quot;XSDschema&quot; then&#xA;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;'move elements&#xA;&#x9;&#x9;&#x9;for each element in subPackage.Elements&#xA;&#x9;&#x9;&#x9;&#x9;element.PackageID = schemaPackage.PackageID&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'remove original package&#xA;&#x9;&#x9;&#x9;package.Packages.DeleteAt i,false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function fixConnectors(package)&#xA;&#x9;dim SQLgetConnectors&#xA;&#x9;SQLgetConnectors = &quot;select distinct c.Connector_ID from &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ( &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select source.StartID, source.EndID from  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ( &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select o.Object_ID AS StartID, con.[End_Object_ID] AS EndID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector con on con.[Start_Object_ID] = o.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.package_ID = &quot;&amp; package.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; union all &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select o.Object_ID AS StartID, con.[Start_Object_ID] AS EndID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector con on con.[End_Object_ID] = o.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.package_ID = &quot;&amp; package.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ) source &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; group by source.StartID, source.EndID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; having count(*) &gt; 1 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ) grouped, t_connector c &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where (c.[Start_Object_ID] = grouped.StartID  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       and c.[End_Object_ID] = grouped.EndID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       or &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       (c.[Start_Object_ID] = grouped.EndID  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       and c.[End_Object_ID] = grouped.StartID) &quot;&#xA;&#x9;dim connectors&#xA;&#x9;set connectors = getConnectorsFromQuery(SQLgetConnectors)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim changed&#xA;&#x9;changed = false&#xA;&#x9;for each connector in connectors&#xA;&#x9;&#x9;'set the connector's rolenames&#xA;&#x9;&#x9;if len(connector.ClientEnd.Role) &lt; 1 then&#xA;&#x9;&#x9;&#x9;connector.ClientEnd.Role = replace(connector.Name, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;connector.ClientEnd.Update&#xA;&#x9;&#x9;&#x9;changed = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if len(connector.SupplierEnd.Role) &lt; 1 then&#xA;&#x9;&#x9;&#x9;connector.SupplierEnd.Role = replace(connector.Name, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;connector.SupplierEnd.Update&#xA;&#x9;&#x9;&#x9;changed = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if changed then&#xA;&#x9;&#x9;&#x9;connector.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'now get *all* associations between elements in this package in order to copy it in the other direction&#xA;&#x9;SQLgetConnectors = &quot;select c.Connector_ID from ((t_connector c &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object sob on c.Start_Object_ID = sob.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object tob on c.End_Object_ID = tob.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; c.Connector_Type in ('Association','Aggregation') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and sob.Package_ID = &quot;&amp; package.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and tob.Package_ID = &quot;&amp; package.PackageID&#xA;&#x9;set connectors = getConnectorsFromQuery(SQLgetConnectors)&#xA;&#x9;Session.Output &quot;selectedconnectors: &quot; &amp; connectors.Count&#xA;&#x9;for each connector in connectors&#xA;&#x9;&#x9;'set the lower bound to 0 on both ends&#xA;&#x9;&#x9;setEndOptional connector.ClientEnd&#xA;&#x9;&#x9;setEndOptional connector.SupplierEnd&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setEndOptional (associationEnd)&#xA;'&#x9;&#x9;dim associationEnd as EA.ConnectorEnd&#xA;&#x9;select case associationEnd.Cardinality&#xA;&#x9;&#x9;case &quot;1&quot;&#xA;&#x9;&#x9;&#x9;associationEnd.Cardinality = &quot;0..1&quot;&#xA;&#x9;&#x9;case &quot;1..1&quot;&#xA;&#x9;&#x9;&#x9;associationEnd.Cardinality = &quot;0..1&quot;&#xA;&#x9;&#x9;case &quot;1..*&quot;&#xA;&#x9;&#x9;&#x9;associationEnd.Cardinality = &quot;0..*&quot;&#xA;&#x9;end select&#xA;&#x9;associationEnd.Update&#xA;end function&#xA;&#xA;function copyAssociationEnd(source, target)&#xA;'&#x9;&#x9;dim source as EA.ConnectorEnd&#xA;'&#x9;&#x9;dim target as EA.ConnectorEnd&#xA;&#x9;target.Aggregation = source.Aggregation&#xA;&#x9;target.Alias = source.Alias&#xA;&#x9;target.AllowDuplicates = source.AllowDuplicates&#xA;&#x9;target.Cardinality = source.Cardinality&#xA;&#x9;target.Constraint = source.Constraint&#xA;&#x9;target.Containment = source.Containment&#xA;&#x9;target.Derived = source.Derived&#xA;&#x9;target.DerivedUnion = source.DerivedUnion&#xA;&#x9;target.IsChangeable = source.IsChangeable&#xA;&#x9;target.Navigable = source.Navigable&#xA;&#x9;target.Ordering = source.Ordering&#xA;&#x9;target.OwnedByClassifier = source.OwnedByClassifier&#xA;&#x9;target.Qualifier = source.Qualifier&#xA;&#x9;target.Role = source.Role&#xA;&#x9;target.RoleNote = source.RoleNote&#xA;&#x9;target.StereotypeEx = source.StereotypeEx&#xA;&#x9;target.Visibility = source.Visibility&#xA;&#x9;'save changes&#xA;&#x9;target.Update&#xA;end function&#xA;&#xA;function fixAttributePrimitives(package)&#x9;&#xA;&#x9;&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update attr set attr.Classifier = 0  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_attribute attr  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on attr.object_id = o.object_id &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where attr.[TYPE] in ('string','boolean','decimal','float','double','duration','dateTime','time','date','gYearMonth','gYear','gMonthDay','gDay','gMonth','hexBinary','base64Binary','anyURI','QName','integer','long','int') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and attr.Classifier &gt; 0 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and o.[Package_ID] =  &quot; &amp; package.PackageID&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end function&#xA;&#xA;function fixAttributeLowerBound(package)&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update attr set attr.LowerBound = '0'  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_attribute attr  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on attr.object_id = o.object_id  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where o.[Package_ID] =  &quot; &amp; package.PackageID&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end function&#xA;&#xA;function fixAbstractClasses (package)&#xA;&#x9;dim i&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for i = package.Elements.Count -1 to 0 step -1&#xA;&#x9;&#x9;if element.Abstract = &quot;1&quot; then&#xA;&#x9;&#x9;&#x9;package.Elements.DeleteAt(i)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;'&#x9;dim sqlUpdate&#xA;'&#x9;sqlUpdate = &quot;delete from t_object where abstract = 1 and Package_ID = &quot; &amp; package.PackageID&#xA;'&#x9;Repository.Execute sqlUpdate&#xA;end function&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="139"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F5AF7BC8-7B7A-4D26-998C-100732DA0F09}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;PrepareDataForXSD&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;dim sqlUpdate&#xA;&#x9;'set all DataTypes to Class&#xA;&#x9;sqlupdate = &quot;update t_object set object_type = 'Datatype' where object_type = 'Class' and [Package_ID] =&quot; &amp; selectedPackage.PackageID&#xA;&#x9;Repository.Execute sqlupdate&#xA;'&#x9;'Set all Enumerations to Class with enumeration stereotype&#xA;'&#x9;sqlupdate = &quot;update t_object set object_type = 'Class', stereotype = 'enumeration' where object_type = 'Enumeration' and [Package_ID] =&quot; &amp; selectedPackage.PackageID&#xA;'&#x9;Repository.Execute sqlupdate&#xA;&#x9;Repository.RefreshModelView selectedPackage.PackageID &#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="140"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B947DDAB-0568-43CB-B02C-55E952F47474}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RenameMessageEvents&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Atrias Scripts.LinkToCRMain&#xA;'&#xA;' Script Name: RenameMessageEvents&#xA;' Author: Geert Bellekens&#xA;' Purpose: Rename the Message Events to &quot;Send&quot; or &quot;Receive&quot; + the message name&#xA;' Date: 2016-11-23&#xA;'&#xA;&#xA;const outPutName = &quot;Rename Message Events&quot;&#xA;const CRGUID = &quot;{5638B62F-08E5-46bc-8C61-6DE16D3017BD}&quot;&#xA;&#xA;sub main&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'set timestamp&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Starting Renaming Message Events &quot; &amp; now(), 0&#xA;&#x9;'start processing&#xA;&#x9;dim sqlGetEvents&#xA;&#x9;sqlGetEvents = &quot;select o.Object_ID , case when o.Object_ID = c.Start_Object_ID then 'Send ' else 'Receive ' end + msg.Name AS NewName&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector c on o.Object_ID in (c.Start_Object_ID, c.End_Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connectortag ctv on ctv.ElementID = c.Connector_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and ctv.Property = 'MessageRef' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object fis on fis.ea_guid = ctv.VALUE &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and fis.Stereotype = 'Message' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector fis_msg on fis.Object_ID = fis_msg.End_Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and fis_msg.Connector_Type in ('Realization','Realisation') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object msg on msg.Object_ID = fis_msg.Start_Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and msg.Stereotype = 'Message' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Object_Type = 'Event' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.name &lt;&gt; case when o.Object_ID = c.Start_Object_ID then 'Send ' else 'Receive ' end + msg.Name &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dim queryResult &#xA;&#x9;queryResult = Repository.SQLQuery(sqlGetEvents)&#xA;&#x9;dim eventResults&#xA;&#x9;eventResults = convertQueryResultToArray(queryResult)&#xA;&#x9;dim i&#xA;&#x9;Session.Output queryResult&#xA;&#x9;for i = 0 to Ubound(eventResults)&#xA;&#x9;&#x9;'get the event ID&#xA;&#x9;&#x9;dim eventID &#xA;&#x9;&#x9;eventID = eventResults(i,0)&#xA;&#x9;&#x9;dim eventElement as EA.Element&#xA;&#x9;&#x9;if eventID &gt; 0 then&#xA;&#x9;&#x9;set eventElement = Repository.GetElementByID(eventID)&#xA;&#x9;&#x9;&#x9;if not eventElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'get the new name&#xA;&#x9;&#x9;&#x9;&#x9;dim newName,oldname &#xA;&#x9;&#x9;&#x9;&#x9;newName = eventResults(i,1)&#xA;&#x9;&#x9;&#x9;&#x9;oldName = eventElement.Name &#xA;&#x9;&#x9;&#x9;&#x9;if len(newName) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'log&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Renaming &quot; &amp; oldName &amp; &quot; to &quot; &amp; newName , 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventElement.Name = newName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eventElement.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add CR tag&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Adding CR tag to &quot; &amp; newName , 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addCrTag eventElement, oldName, newName &#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'set timestamp&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Finished Renaming Message Events &quot; &amp; now(), 0&#xA;end sub&#xA;&#xA;function addCrTag(eventElement,oldName,newName)&#xA;&#x9;dim crToUse, selectedItemType, userLogin, comments&#xA;&#x9;set crToUse = Repository.GetElementByGuid(CRGUID)&#xA;&#x9;if not crToUse is nothing then&#xA;&#x9;&#x9;userLogin = getUserLogin&#xA;&#x9;&#x9;selectedItemType = eventElement.ObjectType&#xA;&#x9;&#x9;comments = &quot;Name changed from '&quot; &amp; oldName &amp; &quot;' to '&quot; &amp; newName &amp; &quot;'&quot;&#xA;&#x9;&#x9;linkToCR eventElement, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="141"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{55B15AA7-D2C9-431C-85FA-2CED52E6D0C1}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Replace IM datatypes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Replace IM datatypes&#xA;' Author: Geert Bellekens&#xA;' Purpose: Replace the datatype references to the IM to local datatype references&#xA;' Date: 2015-11-02&#xA;'&#xA;&#xA;dim outputTabName&#xA;outputTabName = &quot;Replace IM datatypes&quot;&#xA;&#xA;sub main&#xA;&#x9;&#x9;&#xA;&#x9;dim package as EA.Package&#xA;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;dim response&#xA;&#x9;response = Msgbox(&quot;Replace IM datatype references in package &quot;&quot;&quot; &amp; package.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNo+vbQuestion, &quot;Replace IM datatypes&quot;)&#xA;&#x9;'only do something if the user clicked &quot;Yes&quot;&#xA;&#x9;if response = vbYes then&#xA;&#xA;&#x9;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;&#x9;dim IMPackage as EA.Package&#xA;&#x9;&#x9;dim IMPackageGUID &#xA;&#x9;&#x9;IMPackageGUID = &quot;{DC6C38F5-3043-46be-8A55-52AEAC84BAED}&quot;&#xA;&#x9;&#x9;set IMPackage = Repository.GetPackageByGuid(IMPackageGUID)&#xA;&#x9;&#x9;dim IMElementsDictionary&#xA;&#x9;&#x9;Set IMElementsDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Loading IM datatypes...&quot;,0&#xA;&#x9;&#x9;'put all IM elements in a dictionary with the ID as key&#xA;&#x9;&#x9;addClassesToIdDictionary IMPackage,IMElementsDictionary&#xA;&#x9;&#x9;dim mainElementsDictionary&#xA;&#x9;&#x9;Set mainElementsDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Loading selected package datatypes...&quot;,0&#xA;&#x9;&#x9;'domain model elements are stored in a dictionary by name&#xA;&#x9;&#x9;addClassesToDictionary package, mainElementsDictionary&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim classElement as EA.Element&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;'loop the domain model elements&#xA;&#x9;&#x9;for each classElement in mainElementsDictionary.Items&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Processing &quot; &amp; classElement.Name ,0&#xA;&#x9;&#x9;&#x9;for each attribute in classElement.Attributes&#xA;&#x9;&#x9;&#x9;&#x9;if IMElementsDictionary.Exists(attribute.ClassifierID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim attributeType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;attributeType = IMElementsDictionary(attribute.ClassifierID).Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if mainElementsDictionary.Exists(attributeType) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if the attribute references a type from the IM, and the equivalent exists in the main dictionary then we use the element from the main dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;replacing type &quot; &amp; attribute.Type &amp; &quot; for attribute &quot; &amp; classElement.Name &amp; &quot;.&quot; &amp; attribute.Name,0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.ClassifierID = mainElementsDictionary(attributeType).ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#x9;next 'Attribute&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next 'Element&#xA;&#x9;&#x9;msgbox &quot;finished!&quot;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;&#xA;&#xA;function addClassesToDictionary(package, dictionary)&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;dim subpackage as EA.Package&#xA;&#x9;'process owned elements&#xA;&#x9;for each classElement in package.Elements&#xA;&#x9;&#x9;if (classElement.Type = &quot;Class&quot; OR classElement.Type = &quot;Enumeration&quot; OR classElement.Type = &quot;DataType&quot; ) _&#xA;&#x9;&#x9;&#x9;AND len(classElement.Name) &gt; 0 _ &#xA;&#x9;&#x9;&#x9;AND not dictionary.Exists(classElement.Name) then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Loading element: &quot; &amp; classElement.Name ,0&#xA;&#x9;&#x9;&#x9;dictionary.Add classElement.Name,  classElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'process subpackages&#xA;&#x9;for each subpackage in package.Packages&#xA;&#x9;&#x9;addClassesToDictionary subpackage, dictionary&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addClassesToIdDictionary(package, dictionary)&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;dim subpackage as EA.Package&#xA;&#x9;'process owned elements&#xA;&#x9;for each classElement in package.Elements&#xA;&#x9;&#x9;if (classElement.Type = &quot;Class&quot; OR classElement.Type = &quot;Enumeration&quot; OR classElement.Type = &quot;DataType&quot; ) _&#xA;&#x9;&#x9;&#x9;AND len(classElement.Name) &gt; 0 _ &#xA;&#x9;&#x9;&#x9;AND not dictionary.Exists(classElement.Name) then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Loading element: &quot; &amp; classElement.Name ,0&#xA;&#x9;&#x9;&#x9;dictionary.Add classElement.ElementID,  classElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'process subpackages&#xA;&#x9;for each subpackage in package.Packages&#xA;&#x9;&#x9;addClassesToIdDictionary subpackage, dictionary&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="142"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9BA13B51-60AA-4FC7-8755-69C8DC024B0A}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Test&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;sub main&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;'create diagram&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = selectedPackage.Diagrams.AddNew(&quot;bugdemo&quot;,&quot;Logical&quot;)&#xA;&#x9;diagram.Update()&#xA;&#x9;'create classes&#xA;&#x9;dim class1 as EA.Element&#xA;&#x9;dim class2 as EA.Element&#xA;&#x9;set class1 = selectedPackage.Elements.AddNew(&quot;Class1&quot;,&quot;Class&quot;)&#xA;&#x9;set class2 = selectedPackage.Elements.AddNew(&quot;Class2&quot;,&quot;Class&quot;)&#xA;&#x9;'create associations&#xA;&#x9;dim goodAssociation as EA.Connector&#xA;&#x9;dim badAssociation as EA.Connector&#xA;&#x9;set goodAssociation = class1.Connectors.AddNew(&quot;goodAssociation&quot;, &quot;Association&quot;)&#xA;&#x9;set badAssociation = class1.Connectors.AddNew(&quot;goodAssociation&quot;, &quot;Association&quot;)&#xA;&#x9;'set the other side&#xA;&#x9;goodAssociation.SupplierID = class2.ElementID&#xA;&#x9;badAssociation.SupplierID = class2.ElementID&#xA;&#x9;'manipulate association ends good order&#xA;&#x9;goodAssociation.ClientEnd.Role = &quot;partRole&quot;&#xA;&#x9;'composite end last&#xA;&#x9;goodAssociation.ClientEnd.Role = &quot;compositeRole&quot;&#xA;&#x9;goodAssociation.ClientEnd.Aggregation = 2 'composite&#xA;&#x9;'save the association&#xA;&#x9;goodAssociation.Update&#xA;&#x9;&#xA;&#x9;'manipulate association ends reverse order&#xA;&#x9;'composite end first&#xA;&#x9;badAssociation.ClientEnd.Role = &quot;compositeRole&quot;&#xA;&#x9;badAssociation.ClientEnd.Aggregation = 2 'composite&#xA;&#x9;'part end last&#xA;&#x9;badAssociation.ClientEnd.Role = &quot;partRole&quot;&#xA;&#x9;'save the association&#x9;&#xA;&#x9;badAssociation.Update&#xA;&#x9;&#xA;&#x9;'add elements to diagram&#xA;&#x9;dim class1Do as EA.DiagramObject&#xA;&#x9;dim class2Do as EA.DiagramObject&#xA;&#x9;set class1Do = diagram.DiagramObjects.AddNew(&quot;l=10;r=70;t=10;b=50;&quot;,&quot;&quot;)&#xA;&#x9;set class2Do = diagram.DiagramObjects.AddNew(&quot;l=100;r=170;t=10;b=50;&quot;,&quot;&quot;)&#xA;&#x9;class1Do.ElementID = class1.ElementID&#xA;&#x9;class1Do.Update&#xA;&#x9;class2Do.ElementID = class2.ElementID&#xA;&#x9;class2Do.Update&#xA;&#x9;&#xA;&#x9;'layout diagram (which will show the diagram as well)&#xA;&#x9;dim diagramGUIDXml&#xA;&#x9;'The project interface needs GUID's in XML format, so we need to convert first.&#xA;&#x9;diagramGUIDXml = Repository.GetProjectInterface().GUIDtoXML(diagram.DiagramGUID)&#xA;&#x9;'Then call the layout operation&#xA;&#x9;Repository.GetProjectInterface().LayoutDiagramEx diagramGUIDXml, lsDiagramDefault, 4, 20 , 20, false&#xA;&#x9;'diagram.Update&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="143"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{40371163-F475-4FB1-B2AE-4F7457702E4A}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TestDeleteAbstractClasses&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;Dim XSDBaseTypes&#xA;XSDBaseTypes = Array(&quot;string&quot;,&quot;boolean&quot;,&quot;decimal&quot;,&quot;float&quot;,&quot;double&quot;,&quot;duration&quot;,&quot;dateTime&quot;,&quot;time&quot;,&quot;date&quot;,&quot;gYearMonth&quot;,&quot;gYear&quot;,&quot;gMonthDay&quot;,&quot;gDay&quot;,&quot;gMonth&quot;,&quot;hexBinary&quot;,&quot;base64Binary&quot;,&quot;anyURI&quot;,&quot;QName&quot;,&quot;integer&quot;,&quot;long&quot;,&quot;int&quot;)&#xA;&#xA;sub main&#xA;&#x9;dim response&#xA;&#x9;response = Msgbox(&quot;This script will move all underlying elements into one package!&quot; &amp; vbnewLine &amp; &quot;This should only be done when making an XSD from the LDM.&quot; &amp; vbnewLine &amp; &quot; Are you sure?&quot;, vbYesNo+vbExclamation, &quot;Post XSD transformation&quot;)&#xA;&#x9;if response = vbYes then&#xA;&#x9;&#x9;'Create new package for the whole of the schema&#xA;&#x9;&#x9;dim package as EA.Package &#xA;&#x9;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;&#x9;dim schemaPackage as EA.Package&#xA;&#x9;&#x9;set schemaPackage = package.Packages.AddNew(package.Name,&quot;package&quot;)&#xA;&#x9;&#x9;schemaPackage.Update&#xA;&#x9;&#x9;schemaPackage.Element.Stereotype = &quot;XSDSchema&quot;&#xA;&#x9;&#x9;schemaPackage.Update&#xA;&#x9;&#x9;' move all elements from the subpackages to the newly create package&#xA;&#x9;&#x9;'-------------------------------------------------------------------&#xA;&#x9;&#x9;mergeToSchemaPackage package, schemaPackage 'uncomment for production&#xA;&#x9;&#x9;'set schemaPackage = package 'comment out for production&#xA;&#x9;&#x9;'-------------------------------------------------------------------&#xA;&#x9;&#x9;' fix the elements&#xA;&#x9;&#x9;fixElements schemaPackage &#xA;&#x9;&#x9;'fix the connectors&#xA;&#x9;&#x9;fixConnectors schemaPackage&#xA;&#x9;&#x9;'fix the attributes with a primitive type&#xA;&#x9;&#x9;fixAttributePrimitives schemaPackage&#xA;&#x9;&#x9;'set lowerbound of attributes to 0&#xA;&#x9;&#x9;fixAttributeLowerBound schemaPackage&#xA;&#x9;&#x9;'remove abstract classes&#xA;&#x9;&#x9;fixAbstractClasses schemaPackage&#x9;&#x9;&#xA;&#x9;&#x9;'reload&#xA;&#x9;&#x9;Repository.RefreshModelView(package.PackageID)&#xA;&#x9;&#x9;msgbox &quot;Finished!&quot;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function fixElements(schemaPackage)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in schemaPackage.Elements&#xA;&#x9;&#x9;if element.Stereotype = &quot;XSDsimpleType&quot; then&#xA;&#x9;&#x9;&#x9;if element.Attributes.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;' fix xsdSimpleTypes&#xA;&#x9;&#x9;&#x9;&#x9;fixXSDsimpleType element&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = &quot;XSDcomplexType&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'process complex types&#xA;&#x9;&#x9;if element.Stereotype = &quot;XSDcomplexType&quot; then&#xA;&#x9;&#x9;&#x9;fixComplexTypes element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;end function&#xA;&#xA;'fix the complex type.&#xA;'copy all attributes and associations from the parent classes to this class (flatten)&#xA;'add versioning and timeslicing attributes&#xA;'set cardinality to optional for all attributes (and associations ?)&#xA;'remove abstract classes&#xA;function fixComplexTypes(element)&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;dim parentClass as EA.Element&#xA;&#x9;set sourceElement = getTransformationSource(element)&#xA;&#x9;'check for tagged values versioned and timesliced&#xA;&#x9;setTimeSlicingAndVersioning sourceElement, element&#xA;&#x9;if not element is nothing and element.Abstract = &quot;0&quot; then&#xA;&#x9;&#x9;'loop parent classes&#xA;&#x9;&#x9;for each parentClass in element.BaseClasses&#xA;&#x9;&#x9;&#x9;copyFromBaseClasses parentClass, element&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function copyFromBaseClasses(sourceElement, targetElement)&#x9;&#x9;&#x9;&#xA;&#x9;'copy attributes&#xA;&#x9;copyAttributes sourceElement, targetElement&#xA;&#x9;'copy associations&#xA;&#x9;copyAssociations sourceElement, targetElement&#xA;&#x9;'copy from parents of source as well&#xA;&#x9;dim parent as EA.Element&#xA;&#x9;for each parent in sourceElement.BaseClasses&#xA;&#x9;&#x9;copyFromBaseClasses parent, targetElement&#xA;&#x9;next&#xA;end function&#xA;&#xA;'check if the source element has the timeslicing or versioning tagged value set to &quot;yes&quot;.&#xA;'if so it will apply the pattern to the element&#xA;function setTimeSlicingAndVersioning(sourceElement, targetElement)&#xA;'&#x9;&#x9;dim sourceElement as EA.Element&#xA;'&#x9;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each taggedValue in sourceElement.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = &quot;Timesliced&quot; then&#xA;&#x9;&#x9;&#x9;'add attributes&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;StartDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;EndDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;elseif taggedValue.Name = &quot;Versioned&quot; then&#xA;&#x9;&#x9;&#x9;'add attributes&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;ValidFromDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;&#x9;set attribute = targetElement.Attributes.AddNew(&quot;ValidUntilDate&quot;,&quot;dateTime&quot;)&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies all attributes from the sourceElement to the target element&#xA;function copyAttributes (sourceElement, targetElement)&#xA;'&#x9;&#x9;dim sourceElement as EA.Element&#xA;'&#x9;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim newAttribute as EA.Attribute&#xA;&#x9;for each attribute in sourceElement.Attributes&#xA;&#x9;&#x9;'don't copy the timeslicing and versioning attributes&#xA;&#x9;&#x9;if attribute.Name &lt;&gt; &quot;StartDate&quot; and attribute.Name &lt;&gt; &quot;EndDate&quot; and attribute.Name &lt;&gt; &quot;ValidFromDate&quot; and attribute.Name &lt;&gt; &quot;ValidUntilDate&quot; then&#xA;&#x9;&#x9;&#x9;set newAttribute = targetElement.Attributes.AddNew(attribute.Name,attribute.Type)&#xA;&#x9;&#x9;&#x9;'newAttribute.Type = attribute.Type&#xA;&#x9;&#x9;&#x9;newAttribute.ClassifierID = attribute.ClassifierID&#xA;&#x9;&#x9;&#x9;newAttribute.LowerBound = attribute.LowerBound&#xA;&#x9;&#x9;&#x9;newAttribute.UpperBound = attribute.UpperBound&#xA;&#x9;&#x9;&#x9;newAttribute.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies all associations from the sourceElement to the targetElement&#xA;function copyAssociations (sourceElement, targetElement)&#xA;'&#x9;&#x9;dim sourceElement as EA.Element&#xA;'&#x9;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim supplierElement as EA.Element&#xA;&#x9;dim association as EA.Connector&#xA;&#x9;dim newAssociation as EA.Connector&#xA;&#x9;for each association in sourceElement.Connectors&#xA;&#x9;&#x9;if association.Type = &quot;Association&quot; or association.Type = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;&#x9;if association.ClientID = sourceElement.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;set newAssociation = targetElement.Connectors.AddNew(association.Name, association.Type)&#xA;&#x9;&#x9;&#x9;&#x9;newAssociation.SupplierID = association.SupplierID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;set supplierElement = Repository.GetElementByID(association.ClientID)&#xA;&#x9;&#x9;&#x9;&#x9;set newAssociation = supplierElement.Connectors.AddNew(association.Name, association.Type)&#xA;&#x9;&#x9;&#x9;&#x9;newAssociation.SupplierID = targetElement.ElementID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;newAssociation.Update&#xA;&#x9;&#x9;&#x9;'set the ends&#xA;&#x9;&#x9;&#x9;'source&#xA;&#x9;&#x9;&#x9;newAssociation.ClientEnd.Cardinality = association.ClientEnd.Cardinality&#xA;&#x9;&#x9;&#x9;newAssociation.ClientEnd.Role = association.ClientEnd.Role&#xA;&#x9;&#x9;&#x9;newAssociation.ClientEnd.Update&#xA;&#x9;&#x9;&#x9;'target&#xA;&#x9;&#x9;&#x9;newAssociation.SupplierEnd.Cardinality = association.SupplierEnd.Cardinality&#xA;&#x9;&#x9;&#x9;newAssociation.SupplierEnd.Role = association.SupplierEnd.Role&#xA;&#x9;&#x9;&#x9;newAssociation.SupplierEnd.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'finds the element from which the given element was tranformed&#xA;function getTransformationSource(element)&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;set sourceElement = nothing&#xA;&#x9;dim sqlFindSource&#xA;&#x9;dim sourceElements&#xA;&#x9;sqlFindSource = &quot;select o.Object_ID from  t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_xref x on x.[Supplier] = o.[ea_guid] &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where x.TYPE = 'Transformation' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and x.[Client] =  '&quot; &amp; element.ElementGUID &amp; &quot;'&quot;&#xA;&#x9;set sourceElements = getElementsFromQuery(sqlFindSource)&#xA;&#x9;if sourceElements.Count &gt; 0 then&#xA;&#x9;&#x9;set sourceElement = sourceElements(0)&#xA;&#x9;end if&#xA;&#x9;set getTransformationSource = sourceElement&#xA;end function&#xA;&#xA;function fixXSDsimpleType(element)&#xA;&#x9;'find the element it was transformed from&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;set sourceElement = getTransformationSource(element)&#xA;&#x9;if not sourceElement is nothing then&#xA;&#x9;&#x9;'copy the tagged values&#xA;&#x9;&#x9;copyTaggedValues sourceElement, element&#xA;&#x9;&#x9;'determine the &quot;parent&quot; type&#xA;&#x9;&#x9;dim baseClass as EA.Element&#xA;&#x9;&#x9;dim baseXSDType&#xA;&#x9;&#x9;baseXSDType = &quot;string&quot; 'default&#xA;&#x9;&#x9;for each baseClass in sourceElement.BaseClasses&#xA;&#x9;&#x9;&#x9;if Ubound(Filter(XSDBaseTypes, baseClass.Name )) &gt; -1 then&#xA;&#x9;&#x9;&#x9;&#x9;'found the base class&#xA;&#x9;&#x9;&#x9;&#x9;baseXSDType = baseClass.Name&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'set the base type&#xA;&#x9;&#x9;element.Genlinks = &quot;Parent=&quot; &amp; baseXSDType &amp; &quot;;&quot;&#xA;&#x9;&#x9;element.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function mergeToSchemaPackage (package, schemaPackage)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;dim i&#xA;&#x9;for i = package.Packages.Count -1 to i = 1 step -1&#xA;&#x9;&#x9;set subPackage = package.Packages.GetAt(i)&#xA;&#x9;&#x9;'should only be done on XSDschema packages&#xA;&#x9;&#x9;if subPackage.Element.Stereotype = &quot;XSDschema&quot; then&#xA;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;'move elements&#xA;&#x9;&#x9;&#x9;for each element in subPackage.Elements&#xA;&#x9;&#x9;&#x9;&#x9;element.PackageID = schemaPackage.PackageID&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'remove original package&#xA;&#x9;&#x9;&#x9;package.Packages.DeleteAt i,false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function fixConnectors(package)&#xA;&#x9;dim SQLgetConnectors&#xA;&#x9;SQLgetConnectors = &quot;select distinct c.Connector_ID from &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ( &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select source.StartID, source.EndID from  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ( &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select o.Object_ID AS StartID, con.[End_Object_ID] AS EndID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector con on con.[Start_Object_ID] = o.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.package_ID = &quot;&amp; package.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; union all &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select o.Object_ID AS StartID, con.[Start_Object_ID] AS EndID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector con on con.[End_Object_ID] = o.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.package_ID = &quot;&amp; package.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ) source &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; group by source.StartID, source.EndID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; having count(*) &gt; 1 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ) grouped, t_connector c &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where (c.[Start_Object_ID] = grouped.StartID  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       and c.[End_Object_ID] = grouped.EndID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       or &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       (c.[Start_Object_ID] = grouped.EndID  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;       and c.[End_Object_ID] = grouped.StartID) &quot;&#xA;&#x9;dim connectors&#xA;&#x9;set connectors = getConnectorsFromQuery(SQLgetConnectors)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim changed&#xA;&#x9;changed = false&#xA;&#x9;for each connector in connectors&#xA;&#x9;&#x9;'set the connector's rolenames&#xA;&#x9;&#x9;if len(connector.ClientEnd.Role) &lt; 1 then&#xA;&#x9;&#x9;&#x9;connector.ClientEnd.Role = replace(connector.Name, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;connector.ClientEnd.Update&#xA;&#x9;&#x9;&#x9;changed = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if len(connector.SupplierEnd.Role) &lt; 1 then&#xA;&#x9;&#x9;&#x9;connector.SupplierEnd.Role = replace(connector.Name, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;connector.SupplierEnd.Update&#xA;&#x9;&#x9;&#x9;changed = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if changed then&#xA;&#x9;&#x9;&#x9;connector.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'now get *all* associations between elements in this package in order to copy it in the other direction&#xA;&#x9;SQLgetConnectors = &quot;select c.Connector_ID from ((t_connector c &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object sob on c.Start_Object_ID = sob.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object tob on c.End_Object_ID = tob.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; c.Connector_Type in ('Association','Aggregation') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and sob.Package_ID = &quot;&amp; package.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and tob.Package_ID = &quot;&amp; package.PackageID&#xA;&#x9;set connectors = getConnectorsFromQuery(SQLgetConnectors)&#xA;&#x9;Session.Output &quot;selectedconnectors: &quot; &amp; connectors.Count&#xA;&#x9;for each connector in connectors&#xA;&#x9;&#x9;'set the lower bound to 0 on both ends&#xA;&#x9;&#x9;setEndOptional connector.ClientEnd&#xA;&#x9;&#x9;setEndOptional connector.SupplierEnd&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setEndOptional (associationEnd)&#xA;'&#x9;&#x9;dim associationEnd as EA.ConnectorEnd&#xA;&#x9;select case associationEnd.Cardinality&#xA;&#x9;&#x9;case &quot;1&quot;&#xA;&#x9;&#x9;&#x9;associationEnd.Cardinality = &quot;0..1&quot;&#xA;&#x9;&#x9;case &quot;1..1&quot;&#xA;&#x9;&#x9;&#x9;associationEnd.Cardinality = &quot;0..1&quot;&#xA;&#x9;&#x9;case &quot;1..*&quot;&#xA;&#x9;&#x9;&#x9;associationEnd.Cardinality = &quot;0..*&quot;&#xA;&#x9;end select&#xA;&#x9;associationEnd.Update&#xA;end function&#xA;&#xA;function copyAssociationEnd(source, target)&#xA;'&#x9;&#x9;dim source as EA.ConnectorEnd&#xA;'&#x9;&#x9;dim target as EA.ConnectorEnd&#xA;&#x9;target.Aggregation = source.Aggregation&#xA;&#x9;target.Alias = source.Alias&#xA;&#x9;target.AllowDuplicates = source.AllowDuplicates&#xA;&#x9;target.Cardinality = source.Cardinality&#xA;&#x9;target.Constraint = source.Constraint&#xA;&#x9;target.Containment = source.Containment&#xA;&#x9;target.Derived = source.Derived&#xA;&#x9;target.DerivedUnion = source.DerivedUnion&#xA;&#x9;target.IsChangeable = source.IsChangeable&#xA;&#x9;target.Navigable = source.Navigable&#xA;&#x9;target.Ordering = source.Ordering&#xA;&#x9;target.OwnedByClassifier = source.OwnedByClassifier&#xA;&#x9;target.Qualifier = source.Qualifier&#xA;&#x9;target.Role = source.Role&#xA;&#x9;target.RoleNote = source.RoleNote&#xA;&#x9;target.StereotypeEx = source.StereotypeEx&#xA;&#x9;target.Visibility = source.Visibility&#xA;&#x9;'save changes&#xA;&#x9;target.Update&#xA;end function&#xA;&#xA;function fixAttributePrimitives(package)&#x9;&#xA;&#x9;&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update attr set attr.Classifier = 0  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_attribute attr  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on attr.object_id = o.object_id &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where attr.[TYPE] in ('string','boolean','decimal','float','double','duration','dateTime','time','date','gYearMonth','gYear','gMonthDay','gDay','gMonth','hexBinary','base64Binary','anyURI','QName','integer','long','int') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and attr.Classifier &gt; 0 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and o.[Package_ID] =  &quot; &amp; package.PackageID&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end function&#xA;&#xA;function fixAttributeLowerBound(package)&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update attr set attr.LowerBound = '0'  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_attribute attr  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on attr.object_id = o.object_id  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where o.[Package_ID] =  &quot; &amp; package.PackageID&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end function&#xA;&#xA;function fixAbstractClasses (package)&#xA;&#x9;dim i&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for i = package.Elements.Count -1 to 0 step -1&#xA;&#x9;&#x9;set element = package.Elements(i)&#xA;&#x9;&#x9;if element.Abstract = &quot;1&quot; then&#xA;&#x9;&#x9;&#x9;package.Elements.DeleteAt i,true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="144"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6B5D86BA-1199-47A8-B160-4E00C4B3423F}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;UpdateAtriasRequirements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sql&#xA;&#x9;slq = &quot; update nl set nl.value = o.name                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; from ((t_object o                                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties nl on nl.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties fr on fr.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'AtriasRequirement'&#x9;                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.[Property] = 'Name NL'&#x9;                                        &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.[Property] = 'Name FR'                                         &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.VALUE is null                                                  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot;                                                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; update fr set fr.value = o.ALIAS                                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; from ((t_object o                                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties nl on nl.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties fr on fr.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'AtriasRequirement'                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.[Property] = 'Name NL'&#x9;                                        &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.[Property] = 'Name FR'                                         &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.VALUE is null                                                  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot;                                                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; update o set o.[Name] = o.pdata5                                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; from ((t_object o                                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties nl on nl.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_objectproperties fr on fr.Object_ID = o.Object_ID )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'AtriasRequirement'&#x9;                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and nl.[Property] = 'Name NL'&#x9;                                        &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and fr.[Property] = 'Name FR'                                         &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&quot; and o.[PDATA5] is not null                                            &quot;&#xA;&#x9;Repository.Execute(sql)&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub test&#xA;&#x9;dim requirements as EA.Collection&#xA;&#x9;dim requirement as EA.Element&#xA;&#x9;dim sqlString&#xA;&#x9;sqlString = &quot;select o.Object_ID from t_object o where o.stereotype = 'AtriasRequirement'&quot;&#xA;&#x9;&#xA;&#x9;set requirements = Repository.GetElementSet(sqlString,2)&#xA;&#x9;for each requirement in Requirements&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;requirement.StereotypeEx = &quot;ATRIAS Requirements::Solution Requirement&quot;&#xA;&#x9;&#x9;requirement.Alias = &quot;&quot;&#xA;&#x9;&#x9;if left(requirement.Name, 3) = &quot;REQ&quot; then&#xA;&#x9;&#x9;&#x9;requirement.Name = &quot;SOL&quot; &amp; requirement.Name&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;requirement.Update&#xA;&#x9;&#x9;'copy the values of Name NL and Name FR to Title NL and Title FR&#xA;&#x9;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#x9;dim NameNLtag as EA.TaggedValue&#xA;&#x9;&#x9;dim NameFRtag as EA.TaggedValue&#xA;&#x9;&#x9;dim TitleNLtag as EA.TaggedValue&#xA;&#x9;&#x9;dim TitleFRtag as EA.TaggedValue&#xA;&#x9;&#x9;set NameNLTag = nothing&#xA;&#x9;&#x9;set NameFRtag = nothing&#xA;&#x9;&#x9;set TitleNLtag = nothing&#xA;&#x9;&#x9;set TitleFRtag = nothing&#xA;&#x9;&#x9;for each taggedValue in requirement.TaggedValues&#xA;&#x9;&#x9;&#x9;'session.output &quot;aantal tagged values = &quot; &amp; requirement.TaggedValues.Count&#xA;&#x9;&#x9;&#x9;if taggedValue.Name = &quot;Name NL&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set NameNLtag = taggedValue&#xA;&#x9;&#x9;&#x9;elseif taggedValue.Name = &quot;Name FR&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set NameFRtag = taggedValue&#xA;&#x9;&#x9;&#x9;elseif taggedValue.Name = &quot;Title NL&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set TitleNLtag = taggedValue&#xA;&#x9;&#x9;&#x9;elseif taggedValue.Name = &quot;Title FR&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set TitleFRtag = taggedValue&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if (not (NameNLtag is nothing))_&#xA;&#x9;&#x9;&#x9;and (not (NameFRtag is nothing))_&#xA;&#x9;&#x9;&#x9;and (not (TitleNLtag is nothing))_&#xA;&#x9;&#x9;&#x9;and (not (TitleFRtag is nothing)) then&#xA;&#x9;&#x9;&#x9;TitleNLtag.Value = NameNLtag.Value&#xA;&#x9;&#x9;&#x9;TitleNLtag.Update&#xA;&#x9;&#x9;&#x9;TitleFRtag.Value = NameFRtag.Value&#xA;&#x9;&#x9;&#x9;TitleFRtag.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'remove tags &quot;Name NL&quot;&#xA;&#x9;dim sqldelete&#xA;&#x9;sqldelete = &quot; delete tv from t_objectproperties tv                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; --select * from t_objectproperties tv                                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Property] = 'Name NL'                                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and exists (select tv2.[PropertyID] from t_objectProperties tv2 where      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            tv2.[Property] = 'Title NL'                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.Object_ID = tv.Object_ID                              &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.VALUE is not null)                                      &quot;&#xA;&#x9;Repository.Execute sqldelete&#xA;&#x9;&#xA;&#x9;'remove tags &quot;Name FR&quot;&#xA;&#x9;sqldelete = &quot; delete tv from t_objectproperties tv                                       &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; --select * from t_objectproperties tv                                      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Property] = 'Name FR'                                            &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and exists (select tv2.[PropertyID] from t_objectProperties tv2 where      &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            tv2.[Property] = 'Title FR'                                     &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.Object_ID = tv.Object_ID                              &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;            and tv2.VALUE is not null)                                      &quot;&#xA;&#x9;'Repository.Execute sqldelete&#xA;&#xA;&#x9;msgbox &quot;Finished&quot;&#xA;&#x9;'set requirement = Repository.GetElementByGuid(&quot;{36D0F895-E999-498a-9945-E9E036C9DAFF}&quot;)&#xA;&#xA;end sub&#xA;&#xA;sub correctImportance&#xA;&#xA;&#xA;end sub&#xA;&#xA;'test&#xA;'main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="145"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{97062547-9A88-4869-B2C8-CFFEB4A19260}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\A Scripts]&#xA;'[group=Atrias Scripts]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Repository types&#xA;'dim rpt_MSQL, rpt_SQLSVR, rpt_ADOJET, rpt_ORACLE, rpt_POSTGRES, rpt_ASA, rpt_OPENEDGE, rpt_ACCESS2007, rpt_FireBird&#xA;'rpt_MSQL = 0&#xA;'rpt_SQLSVR = 2&#xA;'rpt_ADOJET = 3&#xA;'rpt_ORACLE = 4 &#xA;'rpt_POSTGRES = 5 &#xA;'rpt_ASA = 6&#xA;'rpt_OPENEDGE = 7 &#xA;'rpt_ACCESS2007 = 8&#xA;'rpt_FireBird = 9&#xA;&#xA;&#xA;'&#xA;' Script Name: Util&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts&#xA;' Date: 28/09/2015&#xA;'&#xA;' Synchronises the names of the selected objects or BPMN Activities with their classifier/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;function synchronizeElement (element)&#xA;&#x9;'first check if this is an object or an action&#xA;&#x9;if not element is Nothing then&#xA;&#x9;&#x9;if (element.Type = &quot;Object&quot; OR element.Type = &quot;Action&quot;) _&#xA;&#x9;&#x9;AND element.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;&#x9;set classifier = Repository.GetElementByID(element.ClassifierID)&#xA;&#x9;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;element.Name = classifier.Name&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = classifier.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(element.ElementID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'elements of type object should also point to the composite diagram of the classifier&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;set compositeDiagram = classifier.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; AND element.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'BPMN activities that call another BPMN activity need to get the same name and same composite diagram&#xA;&#x9;&#x9;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set calledActivityTV = element.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;&#x9;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set referenceActivityTV = element.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;&#x9;&#x9;if not calledActivityTV is nothing and not referenceActivityTV is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'only do something when the Activity is types a CalledActivity&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;calledActivityTV.Value : &quot; &amp; calledActivityTV.Value &#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;referenceActivityTV.Value :&quot; &amp; referenceActivityTV.Value&#xA;&#x9;&#x9;&#x9;&#x9;if calledActivityTV.Value = &quot;true&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim calledActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set calledActivity = Repository.GetElementByGuid(referenceActivityTV.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not calledActivity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set name to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Name = calledActivity.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Set composite diagram to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, calledActivity.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;'set the given diagram as composite diagram for this element&#xA;function setCompositeDiagram (element, diagram)&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;'Tell EA this element is composite&#xA;&#x9;&#x9;dim objectQuery&#xA;&#x9;&#x9;objectQuery = &quot;update t_object set NType = 8 where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;Repository.Execute objectQuery&#xA;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;'Tell EA which diagram is the composite diagram&#xA;&#x9;&#x9;&#x9;dim xrefQuery&#xA;&#x9;&#x9;&#x9;xrefquery = &quot;insert into t_xref (XrefID, Name, Type, Visibility, Partition, Client, Supplier) values ('&quot;&amp;CreateGuid&amp;&quot;', 'DefaultDiagram', 'element property', 'Public', '0', '&quot;&amp; element.ElementGUID &amp; &quot;', '&quot;&amp; diagram.DiagramGUID &amp;&quot;')&quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute xrefquery&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'for activities we need to update PDATA1 with the diagramID&#xA;&#x9;&#x9;&#x9;dim updatequery&#xA;&#x9;&#x9;&#x9;updatequery = &quot;update t_object set PDATA1 = &quot;&amp; diagram.DiagramID &amp; &quot; where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;Repository.Execute updatequery&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' Returns a unique Guid on every call. Removes any cruft.&#xA;Function CreateGuid()&#xA;    CreateGuid = Left(CreateObject(&quot;Scriptlet.TypeLib&quot;).Guid,38)&#xA;End Function&#xA;&#xA;&#xA;'make an action into a calling activity&#xA;function makeCallingActivity(action, activity)&#xA;&#x9;action.Type = &quot;Activity&quot;&#xA;&#x9;action.ClassfierID = 0&#xA;&#x9;action.Stereotype = &quot;Activity&quot;&#xA;&#x9;action.Update&#xA;&#x9;action.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;Activity&quot;&#xA;&#x9;action.TaggedValues.Refresh&#xA;&#x9;'first copy the tagged values values&#xA;&#x9;copyTaggedValuesValues activity, action&#xA;&#x9;'set tagged values correctly&#xA;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;set calledActivityTV = action.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;calledActivityTV.Value = &quot;true&quot;&#xA;&#x9;calledActivityTV.Update&#xA;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;set referenceActivityTV = action.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;referenceActivityTV.Value = activity.ElementGUID&#xA;&#x9;referenceActivityTV.Update&#xA;&#x9;action.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setFontOnDiagramObject(diagramObject, font, size )&#xA;&#x9;dim styleParts&#xA;&#x9;styleParts = Split (diagramObject.Style , &quot;;&quot;) &#xA;&#x9;dim i&#xA;&#x9;dim stylepart&#xA;&#x9;dim fontpart &#xA;&#x9;fontpart = &quot;font=&quot; &amp; font&#xA;&#x9;dim fontSet&#xA;&#x9;fontSet = false&#xA;&#x9;dim sizePart&#xA;&#x9;sizePart = &quot;fontsz=&quot; &amp; size * 10&#xA;&#x9;dim sizeSet&#xA;&#x9;sizeSet = false&#xA;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;font=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = fontpart&#xA;&#x9;&#x9;&#x9;fontSet = true&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;fontsz=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = sizePart&#xA;&#x9;&#x9;&#x9;sizeSet = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;diagramObject.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;if not fontSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; fontpart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;&#x9;if not sizeSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; sizePart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if not result.Exists(element.Name) then&#xA;&#x9;&#x9;result.Add element.Name, element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'make an id string out of the ID's of the given elements&#xA;function makeIDString(elements)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; element.ElementID&#xA;&#x9;next &#xA;&#x9;'if there are no elements then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makeIDString = idString&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;function getElementsFromDiagram(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagram = selectedElements&#xA;end function&#xA;&#xA;'returns the diagram objects in an ArrayList for elements of the given type from the given diagram&#xA;function getDiagramObjects(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add diagramObject&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getDiagramObjects = selectedElements&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;'the boundary element should be passed as a DiagramObject&#xA;function getElementsFromDiagramInBoundary(diagram, elementType,boundary)&#xA;&#x9;'dim boundary as EA.DiagramObject&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if (diagramObject.left &gt;= boundary.left and _&#xA;&#x9;&#x9;&#x9;diagramObject.left =&lt; boundary.right and _&#xA;&#x9;&#x9;&#x9;diagramObject.top =&lt; boundary.top and _&#xA;&#x9;&#x9;&#x9;diagramObject.top &gt;= boundary.bottom) then&#xA;&#x9;&#x9;&#x9;'get the element and check the type&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagramInBoundary = selectedElements&#xA;end function&#xA;&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim positionString&#xA;&#x9;'determine height and width&#xA;&#x9;dim width &#xA;&#x9;dim height&#xA;&#x9;dim elementType&#xA;&#x9;dim setVPartition &#xA;&#x9;setVPartition = false&#xA;&#x9;elementType = element.Type&#xA;&#x9;select case elementType       &#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#x9;&#x9;case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 90&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;'default width and height&#x9;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#x9;end select&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#x9;x = x - width/2&#xA;&#x9;'set the position of the diagramObject&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#x9;Session.Output &quot;positionString voor element &quot;&amp; element.Name &amp; &quot; : &quot; &amp;  positionString&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;if setVPartition then&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;end function&#xA;&#xA;'gets the content of the linked document in the given format (TXT, RTF or EA)&#xA;function getLinkedDocumentContent(element, format)&#xA;&#x9;dim linkedDocumentRTF&#xA;&#x9;dim linkedDocumentEA&#xA;&#x9;dim linkedDocumentPlainText&#xA;&#x9;linkedDocumentRTF = element.GetLinkedDocument()&#xA;&#x9;if format = &quot;RTF&quot; then&#xA;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentRTF&#xA;&#x9;else&#xA;&#x9;&#x9;linkedDocumentEA = Repository.GetFieldFromFormat(&quot;RTF&quot;,linkedDocumentRTF)&#xA;&#x9;&#x9;if format = &quot;EA&quot; then&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentEA&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;linkedDocumentPlainText = Repository.GetFormatFromField(&quot;TXT&quot;,linkedDocumentEA)&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentPlainText&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns the currently logged in user&#xA;'if security is not enabled then the logged in user is defaulted to me&#xA;function getUserLogin()&#xA;&#x9;'get the currently logged in user&#xA;&#x9;Dim userLogin&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;userLogin = Repository.GetCurrentLoginUser(false)&#xA;&#x9;else&#xA;&#x9;&#x9;userLogin = &quot;SYSTEMAT-TCC\BellekensG&quot;&#xA;&#x9;end if&#xA;&#x9;getUserLogin = userLogin&#xA;end function&#x9;&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;&#x9;'initialize emtpy&#xA;&#x9;ReDim result(0,0)&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;'let the user select a package&#xA;function selectPackage()&#xA;&#x9;dim documentPackageElementID &#x9;&#x9;&#xA;&#x9;documentPackageElementID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Package&quot;) &#xA;&#x9;if documentPackageElementID &gt; 0 then&#xA;&#x9;&#x9;dim packageElement as EA.Element&#xA;&#x9;&#x9;set packageElement = Repository.GetElementByID(documentPackageElementID)&#xA;&#x9;&#x9;dim package as EA.Package&#xA;&#x9;&#x9;set package = Repository.GetPackageByGuid(packageElement.ElementGUID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package = nothing&#xA;&#x9;end if &#xA;&#x9;set selectPackage = package&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;'get the description from the given notes &#xA;'that is the text between &lt;NL&gt; and &lt;/NL&gt; or &lt;FR&gt; and &lt;/FR&gt;&#xA;function getTagContent(notes, tag)&#xA;&#x9;if tag = &quot;&quot; then&#xA;&#x9;&#x9;getTagContent = notes&#xA;&#x9;else&#xA;&#x9;&#x9;getTagContent = &quot;&quot;&#xA;&#x9;&#x9;dim startTagPosition&#xA;&#x9;&#x9;dim endTagPosition&#xA;&#x9;&#x9;startTagPosition = InStr(notes,&quot;&amp;lt;&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;endTagPosition = InStr(notes,&quot;&amp;lt;/&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;'Session.Output &quot;notes: &quot; &amp; notes &amp; &quot; startTagPosition: &quot; &amp; startTagPosition &amp; &quot; endTagPosition: &quot; &amp;endTagPosition&#xA;&#x9;&#x9;if startTagPosition &gt; 0 and endTagPosition &gt; startTagPosition then&#xA;&#x9;&#x9;&#x9;dim startContent&#xA;&#x9;&#x9;&#x9;startContent = startTagPosition + len(tag) + 8&#xA;&#x9;&#x9;&#x9;dim length &#xA;&#x9;&#x9;&#x9;length = endTagPosition - startContent&#xA;&#x9;&#x9;&#x9;getTagContent = mid(notes, startContent, length)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'Returns the value of the tagged value with the given name (case insensitive)&#xA;'If there is no tagged value with the given name, an empty string is returned&#xA;'This function can be used with anything that can have tagged values&#xA;function getTaggedValueValue(owner, taggedValueName)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;getTaggedValueValue = &quot;&quot;&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if lcase(taggedValueName) = lcase(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;getTaggedValueValue = taggedValue.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function putOnClipBoard(stringValue)&#xA;&#x9;dim WshShell&#xA;&#x9;Set WshShell = CreateObject(&quot;WScript.Shell&quot;)&#xA;&#x9;WshShell.Run &quot;cmd.exe /c echo &quot; &amp; stringValue &amp; &quot; | clip&quot;, 0, TRUE&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="146"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1705BB8B-FAAB-41DD-93F5-2CCAA8736D62}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Business Requirements Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.DocGenUtil&#xA;&#xA;'&#xA;' Script Name: Process Book&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a process book based on the selected processes&#xA;' Date: 08/05/2015&#xA;'&#xA;&#xA;dim processBooksPackageGUID&#xA;processBooksPackageGUID = &quot;{C771D6FE-5233-4a62-857F-3711AE1FFB0A}&quot;&#xA;&#xA;dim BPO_Template, BPTemplate &#xA;&#xA;BPO_Template = &quot;BR_BPO&quot;&#xA;BPTemplate = &quot;BR_BPMD&quot;&#xA;&#xA;&#xA;'test function&#xA;sub test()&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;'set currentDiagram = Repository.GetContextObject&#xA;&#x9;set currentDiagram = Repository.GetDiagramByGuid(&quot;{806AC569-C91C-4327-9C0B-E9EA7C67A655}&quot;)&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim sortedObjects&#xA;&#x9;set sortedObjects = sortDiagramObjectsCollection (currentDiagram.DiagramObjects)&#xA;&#x9;dim selectedBusinessProcesses&#xA;&#x9;set selectedBusinessProcesses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'loop the sorted diagram objects&#xA;&#x9;for each selectedDiagramObject in sortedObjects&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID ( selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if selectedElement.Stereotype = &quot;ArchiMate_BusinessProcess&quot; then&#xA;&#x9;&#x9;&#x9;selectedBusinessProcesses.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'ask user for document name&#xA;&#x9;dim documentName&#xA;&#x9;documentName = InputBox(&quot;Please enter the name for this BR document&quot;, &quot;Document Name&quot;, &quot;MIG-DGO 6.0 - BR - XX - NN - XYZ v N.N&quot;)&#xA;&#x9;&#xA;&#x9;createProcessBook selectedBusinessProcesses, documentName&#xA;&#x9;Msgbox &quot;Finished!&quot;&#xA;end sub&#xA;&#xA;'test&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedConnector = currentDiagram.SelectedConnector&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if not selectedConnector is nothing then&#xA;&#x9;&#x9;&#x9;' A connector is selected&#xA;&#x9;&#x9;elseif selectedObjects.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;dim selectedElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim selectedBusinessProcesses&#xA;&#x9;&#x9;&#x9;set selectedBusinessProcesses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;'sort the diagram objects&#xA;&#x9;&#x9;&#x9;dim sortedObjects&#xA;&#x9;&#x9;&#x9;set sortedObjects = sortDiagramObjectsCollection (selectedObjects)&#xA;&#x9;&#x9;&#x9;'loop the sorted diagram objects&#xA;&#x9;&#x9;&#x9;for each selectedDiagramObject in sortedObjects&#xA;&#x9;&#x9;&#x9;&#x9;set selectedElement = Repository.GetElementByID ( selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if selectedElement.Stereotype = &quot;ArchiMate_BusinessProcess&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;selectedBusinessProcesses.Add selectedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'ask user for document name&#xA;&#x9;&#x9;&#x9;dim documentName&#xA;&#x9;&#x9;&#x9;documentName = InputBox(&quot;Please enter the name for this process book&quot;, &quot;Document Name&quot;, &quot;MIG-DGO-PB-XX-NN-CMS Process Book xxx&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;createProcessBook selectedBusinessProcesses, documentName&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;Msgbox &quot;Finished!&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;'create a process book for the given business processes with the given document name&#xA;function createProcessBook(selectedBusinessProcesses, documentName)&#xA;&#x9;dim businessProcess as EA.Element&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = addMasterDocument (processBooksPackageGUID, documentName)&#xA;&#x9;dim i&#xA;&#x9;i = 1&#xA;&#x9;dim subProcesses&#xA;&#x9;set subProcesses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each businessProcess in selectedBusinessProcesses&#xA;&#x9;&#x9;'add model document for template Atrias element&#xA;&#x9;&#x9;addModelDocumentForElement masterDocument,businessProcess, i, BPO_Template&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'add model document for template diagram if exists composite diagram&#xA;&#x9;&#x9;if not businessProcess.CompositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;'get the list of all sub-processes on the composite diagram for later processing&#xA;&#x9;&#x9;&#x9;subProcesses.AddRange getSubProcesses(businessProcess.CompositeDiagram, subProcesses)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;dim subProcess as EA.Element&#xA;&#x9;for each subProcess in subProcesses&#xA;&#x9;&#x9;'add model document for template Atrias element&#xA;&#x9;&#x9;addModelDocumentForElement masterDocument,subProcess, i, BPTemplate&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'reload the package to schow the correct order&#xA;&#x9;Repository.RefreshModelView(masterDocument.PackageID)&#xA;end function&#xA;&#xA;function getSubProcesses(diagram, existingSubProcesses)&#xA;&#x9;dim sortedDiagramObjects&#xA;&#x9;dim sortedSubProcesses&#xA;&#x9;set sortedSubProcesses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;set sortedDiagramObjects = sortDiagramObjectsCollection(diagram.DiagramObjects)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim subProcess as EA.Element&#xA;&#x9;for each diagramObject in sortedDiagramObjects&#xA;&#x9;&#x9;if not containsElement(existingSubProcesses, diagramObject.ElementID) then&#xA;&#x9;&#x9;&#x9;set subProcess = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if subProcess.Stereotype = &quot;ArchiMate_BusinessProcess&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;OR subProcess.Stereotype = &quot;Activity&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;OR subProcess.Stereotype = &quot;BusinessProcess&quot;then&#xA;&#x9;&#x9;&#x9;&#x9;sortedSubProcesses.Add subProcess&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getSubProcesses = sortedSubProcesses&#xA;end function&#xA;&#xA;&#xA;function addModelDocumentForElement(masterDocument,businessProcess, treepos, template_in)&#xA;&#x9;dim modelDocElement as EA.Element&#xA;&#x9;dim elementName &#xA;&#x9;dim template&#xA;&#x9;template = template_in&#xA;&#x9;elementName = businessProcess.Name &amp; &quot; element&quot;&#xA;&#x9;'if the businessprocess contains a linked document then we take that instead of the content of the notes&#xA;&#x9;dim linkedDocument&#xA;&#x9;linkedDocument = businessProcess.GetLinkedDocument()&#xA;&#x9;if len(linkedDocument) &gt; 0 then&#xA;&#x9;&#x9;template = template + &quot; Linked Document&quot;&#xA;&#x9;&#x9;'Session.Output &quot;Business process: &quot;  &amp; businessProcess.name &amp; &quot; len(linkedDocument): &quot; &amp;len(linkedDocument)&#xA;&#x9;end if&#xA;&#x9;addModelDocument masterDocument, template,elementName, businessProcess.ElementGUID, treepos&#xA;end function&#xA;&#xA;function sortDiagramObjectsCollection (diagramObjects)&#xA;&#x9;dim sortedDiagramObjects &#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set sortedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each diagramObject in diagramObjects&#xA;&#x9;&#x9;sortedDiagramObjects.Add (diagramObject)&#xA;&#x9;next&#xA;&#x9;set sortDiagramObjectsCollection = sortDiagramObjectsArrayList(sortedDiagramObjects)&#xA;end function&#xA;&#xA;function sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.DiagramObject&#xA;&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;for i = 0 to diagramObjects.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = diagramObjects(i)&#xA;&#x9;&#x9;set nextElement = diagramObjects(i +1)&#xA;&#x9;&#x9;if  diagramObjectIsAfterXY(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;diagramObjects.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;diagramObjects.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set diagramObjects = sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortDiagramObjectsArrayList = diagramObjects&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterYX(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;elseif thisElement.top = nextElement.top then&#xA;&#x9;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterXY(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;elseif thisElement.left = nextElement.left then&#xA;&#x9;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function containsElement(list, elementID)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;containsElement = false&#xA;&#x9;for each element in list&#xA;&#x9;&#x9;if element.ElementID = elementID then&#xA;&#x9;&#x9;&#x9;containsElement = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="147"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{703E9E0F-490D-47FD-B3E7-3A2FD8885F6A}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Functional Design Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.DocGenUtil&#xA;!INC Atrias Scripts.Util&#xA;'&#xA;'&#xA;' Script Name: Functional Analysis Document&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a functional Analysis document based on the open diagram&#xA;' Date: 08/05/2015&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;dim WC&#xA;&#xA;&#xA;dim functionalAnalysisPackageGUID&#xA;functionalAnalysisPackageGUID = &quot;{8509F5B2-7238-4d13-A9D7-19AB73BDF4EA}&quot;&#xA;&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;createFADocument( currentDiagram)&#xA;&#x9;&#x9;Msgbox &quot;Finished!&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;sub test()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetDiagramByGuid(&quot;{DA5ACC82-C807-4aad-BEFC-BFF5FC5E5388}&quot;)&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;createFADocument( currentDiagram)&#xA;&#x9;&#x9;Msgbox &quot;Finished!&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;'test&#xA;&#xA;function makeFAMasterDocument(currentDiagram)&#xA;&#xA;&#x9;'the diagram name should be in the format [Domain Abbr] - [UCMD] - [Functional Name]&#xA;&#x9;'the master document should have following properties:&#xA;&#x9;' - DocumentTitle -&gt; to go into the tagged value RTFName [Functional Name]&#xA;&#x9;' - Version -&gt; version of the master document&#xA;&#x9;' - DocumentName - name of the Master document&#xA;&#x9;' - Domain name -&gt; Alias &#xA;&#x9;&#xA;&#x9;'we should ask the user for a version&#xA;&#x9;dim documentTitle&#xA;&#x9;dim documentVersion&#xA;&#x9;dim documentName&#xA;&#x9;dim domainName&#xA;&#x9;dim diagramName&#xA;&#x9;dim functionalName&#xA;&#x9;set makeFAMasterDocument = nothing&#xA;&#x9;diagramName = currentDiagram.Name&#xA;&#x9;'get the abbreviation from the diagram name&#xA;&#x9;dim nameparts&#xA;&#x9;dim abbreviation&#xA;&#x9;nameparts = Split (diagramName, &quot;-&quot;)&#xA;&#x9;if Ubound(nameparts) &gt; 0 then&#xA;&#x9;&#x9;abbreviation = Trim(nameparts(0))&#xA;&#x9;&#x9;functionalName = Trim(nameparts(Ubound(nameparts)))&#xA;&#x9;&#x9;Session.Output &quot;funcitonalName: &quot; &amp; functionalName&#xA;&#x9;else&#xA;&#x9;&#x9;abbreviation = diagramName&#xA;&#x9;end if&#xA;&#x9;'get the domain name based onthe abbreviation&#xA;&#x9;domainName = getFullDomainName(abbreviation)&#xA;&#x9;if domainName &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'to make sure document version is filled in&#xA;&#x9;&#x9;documentVersion = &quot;&quot;&#xA;&#x9;&#x9;documentVersion = InputBox(&quot;Please enter the version of this document&quot;, &quot;Document version&quot;, &quot;x.y.z&quot; )&#xA;&#x9;&#x9;if documentVersion &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;&#x9;'OK, we have a version, continue&#xA;&#x9;&#x9;&#x9;documentName = &quot;CMS - FD - &quot; &amp; abbreviation &amp; &quot; - &quot; &amp; functionalName &amp; &quot; v. &quot; &amp; documentVersion&#xA;&#x9;&#x9;&#x9;dim masterDocument as EA.Package&#xA;&#x9;&#x9;&#x9;set masterDocument = addMasterDocumentWithDetails(functionalAnalysisPackageGUID, documentName,documentVersion,domainName &amp; &quot; - &quot; &amp; functionalName)&#xA;&#x9;&#x9;&#x9;set makeFAMasterDocument = masterDocument&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#x9;&#xA;end function&#xA;&#xA;function getFullDomainName(abbreviation)&#xA;&#x9;dim fullDomainName&#xA;&#x9;Select case abbreviation&#xA;&#x9;&#x9;case &quot;BI&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Bill&quot;&#xA;&#x9;&#x9;case &quot;XD&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Cross Domain&quot;&#xA;&#x9;&#x9;case &quot;ME&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Measure&quot;&#xA;&#x9;&#x9;case &quot;RE&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Rectification&quot;&#xA;&#x9;&#x9;case &quot;SE&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Settle&quot;&#xA;&#x9;&#x9;case &quot;ST&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Structure&quot;&#xA;&#x9;&#x9;case &quot;MP&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Market Portal&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case &quot;TPDA&quot;&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;Third Party Data Access&quot;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;fullDomainName = &quot;&quot;&#xA;&#x9;&#x9;&#x9;msgbox &quot;Cound not resolve domain name for: &quot; &amp; abbreviation &amp; vbNewLine &amp; &quot;Please rename the diagram according to the the naming convention&quot;&#xA;&#x9;end select&#xA;&#x9;getFullDomainName = fullDomainName&#xA;end function&#xA;&#xA;function createFADocument( diagram)&#xA;&#x9;'initialize wildcard character&#xA;&#x9;WC = getWC&#xA;&#x9;'dim diagram as EA.Diagram&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = makeFAMasterDocument(diagram)&#xA;&#x9;if not masterDocument is nothing then&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;i = 0&#xA;&#x9;&#x9;'use case diagram part 1&#xA;&#x9;&#x9;addModelDocumentForDiagram masterDocument,diagram, i, &quot;FA_Use Case Diagram&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'get the boundary diagram object in the diagram&#xA;&#x9;&#x9;dim boundaries&#xA;&#x9;&#x9;set boundaries = getDiagramObjects(diagram,&quot;Boundary&quot;)&#xA;&#x9;&#x9;'get the use cases&#xA;&#x9;&#x9;dim usecases&#x9;&#x9;&#xA;&#x9;&#x9;if boundaries.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;set usecases = getElementsFromDiagramInBoundary(diagram, &quot;UseCase&quot;,boundaries(0))&#xA;&#x9;&#x9;&#x9;Session.Output &quot;boundary found&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set usecases = getElementsFromDiagram(diagram, &quot;UseCase&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'sort use cases alphabetically&#xA;&#x9;&#x9;set usecases = sortElementsByName(usecases)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;usecases.Count : &quot; &amp; usecases.Count&#xA;&#x9;&#x9;'get the Business Process Activities&#xA;'&#x9;&#x9;dim bpas&#xA;'&#x9;&#x9;set bpas = getBusinessProcessActivitiesForUseCases(usecases)&#xA;'&#x9;&#x9;Session.Output &quot;bpas.count : &quot; &amp; bpas.Count&#xA;'&#x9;&#x9;&#xA;'&#x9;&#x9;'get the Business processes&#xA;'&#x9;&#x9;dim bpmds&#xA;'&#x9;&#x9;set bpmds = getBusinessProcessesForActivities(bpas)&#xA;'&#x9;&#x9;Session.Output &quot;bpmds.count : &quot; &amp; bpmds.Count&#xA;'&#x9;&#x9;&#xA;'&#x9;&#x9;'get the Business Process Overviews&#xA;'&#x9;&#x9;dim bpos&#xA;'&#x9;&#x9;set bpos = getBPOsForBPMDs(bpmds)&#xA;'&#x9;&#x9;Session.Output &quot;bpos.count: &quot; &amp; bpos.Count&#xA;'&#x9;&#x9;&#xA;'&#x9;&#x9;'get the Application Functions&#xA;'&#x9;&#x9;dim apfs&#xA;'&#x9;&#x9;set apfs = getAplicationFunctionsForUseCases(usecases)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the applicationFunction diagrams&#xA;&#x9;&#x9;'dim apfDiagrams&#xA;&#x9;&#x9;'set apfDiagrams = addApplicationFunctionDiagrams(masterDocument,apfs)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'get the data stores&#xA;&#x9;'&#x9;dim dataStores&#xA;&#x9;'&#x9;set dataStores = getDataStoresForApplicationFunctions(apfs)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'make the process map diagram&#xA;'&#x9;&#x9;dim processsMapDiagram&#xA;'&#x9;&#x9;set processsMapDiagram = addProcessmapDiagram(masterDocument, diagram, bpos)&#xA;'&#x9;&#x9;'add the diagram tot the document&#xA;'&#x9;&#x9;addModelDocumentForDiagram masterDocument,processsMapDiagram, i, &quot;FA_PackageDiagram&quot;&#xA;'&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the title &quot;Related Business Process Overview Elements&quot;&#xA;'&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Related BPO elements title&quot;,&quot;Related Business Process Overview Elements&quot;, &quot;&quot;, i&#xA;'&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;'add the composite diagrams for the bpos to the document&#xA;'&#x9;&#x9;i = addCompositeDiagrams(masterDocument, bpos, i)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the title &quot;Related Business Process Overview Elements&quot;&#xA;'&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Related Business Processes title&quot;,&quot;Related Business Processes&quot;, &quot;&quot;, i&#xA;'&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;'add the composite diagrams for the bpos to the document&#xA;'&#x9;&#x9;i = addCompositeDiagrams(masterDocument, bpmds, i)&#xA;&#xA;&#x9;&#x9;'add the matrix businessprocesses vs requirements&#xA;'&#x9;&#x9;dim diagramPackage as EA.Package&#xA;'&#x9;&#x9;set diagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;'&#x9;&#x9;addModelDocumentForPackage masterDocument, diagramPackage, &quot;BusinessActivities x Requirements&quot;, i, &quot;FA_BusinessActivities x Requirements&quot;&#xA;'&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add Actors&#xA;&#x9;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;&#x9;set diagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;&#x9;addModelDocumentForPackage masterDocument, diagramPackage, diagram.Name &amp; &quot; Actors&quot;, i, &quot;FA_Actors&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add use case diagram part 2&#xA;'&#x9;&#x9;addModelDocumentForDiagram masterDocument,diagram, i, &quot;FA_Use Case Diagram Part2&quot;&#xA;'&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the use cases&#xA;&#x9;&#x9;i = addUseCases(masterDocument, usecases, i)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the Related Class diagrams title&#xA;&#x9;'&#x9;addModelDocument masterDocument, &quot;Related Class Diagrams title&quot;,&quot;Related Class Diagrams title&quot;, &quot;&quot;, i&#xA;&#x9;'&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the data stores&#xA;&#x9;'&#x9;i = addDataStores(masterDocument, dataStores, i)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'finished, refresh model view to make sure the order is reflected in the model.&#xA;&#x9;&#x9;Repository.RefreshModelView(masterDocument.PackageID)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function addDataStores(masterDocument, dataStores, i)&#xA;&#x9;dim dataStore as EA.Element&#xA;&#x9;for each dataStore in dataStores&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;FA_DataObject&quot;, &quot;DataStore -&quot; &amp; dataStore.Name , dataStore.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;addDataStores = i&#xA;end function&#xA;&#xA;function addUseCases(masterDocument, usecases, i)&#xA;&#x9;dim usecase as EA.Element&#xA;&#x9;for each usecase in usecases&#xA;&#x9;&#x9;'use case part 1&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Use Case details part1&quot;, usecase.Name &amp; &quot; Part 1&quot;, usecase.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'get the nested Activity diagram&#xA;&#x9;&#x9;dim activity as EA.Element&#xA;&#x9;&#x9;set activity = getActivityForUsecase(usecase)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add activity diagram&#xA;&#x9;&#x9;if not activity is nothing then&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Use Case Activity Diagram&quot;, usecase.Name &amp; &quot; Activity diagram&quot;, activity.ElementGUID, i&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'use case part 2&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Use Case details part2&quot;, usecase.Name &amp; &quot; Part 2&quot;, usecase.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'get the nested Sequence diagram&#xA;&#x9;&#x9;dim interAction as EA.Element&#xA;&#x9;&#x9;set interAction = getInteractionForUseCase(usecase)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add sequence diagram&#xA;&#x9;&#x9;if not interAction is nothing then&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Use Case Sequence Diagram&quot;, usecase.Name &amp; &quot; Sequence diagram&quot;, interAction.ElementGUID, i&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add user Rules&#xA;&#x9;&#x9;addModelDocumentWithSearch masterDocument, &quot;FA_Rules&quot;, usecase.Name &amp; &quot; Rules&quot;, usecase.ElementGUID, i, &quot;ZDG_RulesByUseCaseGUID&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add user interface details&#xA;&#x9;&#x9;addModelDocumentWithSearch masterDocument, &quot;FA_User Interface details&quot;, usecase.Name &amp; &quot; User Interfaces&quot;, usecase.ElementGUID, i, &quot;ZDG_ApplicationInterfaceByUseCaseGUID&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'use case part 3&#xA;'&#x9;&#x9;addModelDocument masterDocument, &quot;FA_Use Case details part3&quot;, usecase.Name  &amp; &quot; Part 3&quot;, usecase.ElementGUID, i&#xA;'&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;'add the applicaiton function diagrams (should be only one per use case)&#xA;'&#x9;&#x9;dim applicationFunctions&#xA;'&#x9;&#x9;dim useCaseCollection&#xA;'&#x9;&#x9;set useCaseCollection = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;'&#x9;&#x9;useCaseCollection.Add usecase&#xA;'&#x9;&#x9;set applicationFunctions = getAplicationFunctionsForUseCases(useCaseCollection)&#xA;'&#x9;&#x9;dim applicationFunction as EA.Element&#xA;'&#x9;&#x9;for each applicationFunction in applicationFunctions&#xA;'&#x9;&#x9;&#x9;'get the diagram from the dictorary&#xA;'&#x9;&#x9;&#x9;dim apfDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set apfDiagram = apfDiagrams(applicationFunction.ElementID)&#xA;'&#x9;&#x9;&#x9;'add the diagram to the document&#xA;'&#x9;&#x9;&#x9;addModelDocumentForDiagram masterDocument,apfDiagram, i, &quot;FA_PackageDiagram&quot;&#xA;'&#x9;&#x9;&#x9;i = i + 1&#xA;'&#x9;&#x9;next&#xA;&#x9;next&#xA;&#x9;'return the new i&#xA;&#x9;addUseCases = i&#xA;end function&#xA;&#xA;function getActivityForUsecase(usecase)&#xA;&#x9;set getActivityForUsecase = getNestedDiagramOnwerForElement(usecase, &quot;Activity&quot;)&#xA;end function&#xA;&#xA;function getInteractionForUseCase(usecase)&#xA;&#x9;set getInteractionForUseCase = getNestedDiagramOnwerForElement(usecase, &quot;Interaction&quot;)&#xA;end function&#xA;&#xA;function getNestedDiagramOnwerForElement(element, elementType)&#xA;&#x9;dim diagramOnwer as EA.Element&#xA;&#x9;set diagramOnwer = nothing&#xA;&#x9;dim nestedElement as EA.Element&#xA;&#x9;for each nestedElement in element.Elements&#xA;&#x9;&#x9;if nestedElement.Type = elementType and nestedElement.Diagrams.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;set diagramOnwer = nestedElement&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getNestedDiagramOnwerForElement = diagramOnwer&#xA;end function&#xA;&#xA;'adds the composite diagrams of all the elements int he given list&#xA;function addCompositeDiagrams(masterDocument, elements, i)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;dim compositeDiagram&#xA;&#x9;&#x9;set compositeDiagram = element.CompositeDiagram&#xA;&#x9;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'add the diagram tot the document&#xA;&#x9;&#x9;&#x9;&#x9;addModelDocumentForDiagram masterDocument,compositeDiagram, i, &quot;FA_PackageDiagram&quot;&#xA;&#x9;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return i&#xA;&#x9;addCompositeDiagrams = i&#xA;end function&#xA;&#xA;function addApplicationFunctionDiagrams(masterDocument,apfs)&#xA;&#x9;dim applicationFunction as EA.Element&#xA;&#x9;'Dictonary to keep the diagrams&#xA;&#x9;dim apfDiagrams&#xA;&#x9;set apfDiagrams = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;'create a package and diagram for each application function (usually only one)&#xA;&#x9;for each applicationFunction in apfs&#xA;&#x9;&#x9;'add package&#xA;&#x9;&#x9;dim apfDiagramPackage as EA.Package&#xA;&#x9;&#x9;set apfDiagramPackage = masterDocument.Packages.AddNew(&quot;ApplicationFunction - &quot; &amp; applicationFunction.Name,&quot;&quot;)&#xA;&#x9;&#x9;apfDiagramPackage.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add diagram&#xA;&#x9;&#x9;dim apfDiagram as EA.Diagram&#xA;&#x9;&#x9;set apfDiagram = apfDiagramPackage.Diagrams.AddNew(apfDiagramPackage.Name, &quot;Analysis&quot;)&#xA;&#x9;&#x9;apfDiagram.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the Application Function tot he diagram&#xA;&#x9;&#x9;addElementToDiagram applicationFunction, apfDiagram, 50, 100&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the diagram to the dictionary&#xA;&#x9;&#x9;apfDiagrams.Add applicationFunction.ElementID, apfDiagram&#xA;&#x9;next&#xA;&#x9;set addApplicationFunctionDiagrams = apfDiagrams&#xA;end function&#xA;&#xA;function addProcessmapDiagram(masterDocument, diagram, bpos)&#xA;&#x9;'add package&#xA;&#x9;dim processMapPackage as EA.Package&#xA;&#x9;set processMapPackage = masterDocument.Packages.AddNew(diagram.Name &amp; &quot; Process Map&quot;,&quot;&quot;)&#xA;&#x9;processMapPackage.Update&#xA;&#x9;&#xA;&#x9;'add diagram&#xA;&#x9;dim processMapDiagram as EA.Diagram&#xA;&#x9;set processMapDiagram = processMapPackage.Diagrams.AddNew(processMapPackage.Name, &quot;Analysis&quot;)&#xA;&#x9;processMapDiagram.Update&#xA;&#x9;&#xA;&#x9;dim bpoGroupings&#xA;&#x9;set bpoGroupings = sortBPOandGetGroupings(bpos)&#xA;&#x9;Session.Output &quot;bpoGroupings.Count: &quot; &amp; bpoGroupings.Count&#xA;&#x9;'add elements on diagram&#xA;&#x9;dim x&#xA;&#x9;x = 100&#xA;&#x9;dim y &#xA;&#x9;Y = 50&#xA;&#x9;dim bpo&#xA;&#x9;dim groupingID&#xA;&#x9;groupingID = 0&#xA;&#x9;for each bpo in bpos&#xA;&#x9;&#x9;if groupingID &gt; 0 and groupingID &lt;&gt; bpo.ParentID then&#xA;&#x9;&#x9;&#x9;'we go to a new grouping&#xA;&#x9;&#x9;&#x9;' add the current grouping to the diagram&#xA;&#x9;&#x9;&#x9;addBPOGrouping processMapDiagram,bpoGroupings,groupingID, x, y&#xA;&#x9;&#x9;&#x9;'move down the y&#xA;&#x9;&#x9;&#x9;y = y + 150&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;groupingID = bpo.ParentID&#xA;&#x9;&#x9;'add the bpo to the diagram&#xA;&#x9;&#x9;addElementToDiagram bpo, processMapDiagram, y, x&#xA;&#x9;&#x9;x = x + 200&#xA;&#x9;next&#xA;&#x9;'add the last grouping here&#xA;&#x9;if (groupingID &gt; 0) then&#xA;&#x9;&#x9;addBPOGrouping processMapDiagram,bpoGroupings,groupingID, x, y&#xA;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;'return diagram&#xA;&#x9;set addProcessmapDiagram = processMapDiagram&#xA;end function&#xA;&#xA;function addBPOGrouping(processMapDiagram,bpoGroupings,groupingID, x, y)&#xA;&#x9;dim grouping&#xA;&#x9;set grouping = bpoGroupings(groupingID)&#xA;&#x9;'add the grouping to the diagram&#xA;&#x9;dim groupingDiagramObject as EA.DiagramObject&#xA;&#x9;set groupingDiagramObject = addElementToDiagram(grouping, processMapDiagram, y - 30 , 50)&#xA;&#x9;groupingDiagramObject.right = x - 75&#xA;&#x9;groupingDiagramObject.left = 15&#xA;&#x9;groupingDiagramObject.bottom = (y * -1) - 70&#xA;&#x9;Session.Output &quot;groupingDiagramObject.right: &quot; &amp; groupingDiagramObject.right &amp; &quot;x + 50: &quot; &amp; x + 50&#xA;&#x9;groupingDiagramObject.Update&#xA;end function&#x9;&#x9;&#x9;&#xA;&#xA;function sortBPOandGetGroupings(bpos)&#xA;&#x9;dim bpoGroupings&#xA;&#x9;set bpoGroupings = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim bpo as EA.Element&#xA;&#x9;'first get the bpogroupings&#xA;&#x9;for each bpo in bpos&#xA;&#x9;&#x9;if not bpoGroupings.Exists(bpo.ParentID) then&#xA;&#x9;&#x9;&#x9;bpoGroupings.Add bpo.ParentID, Repository.GetElementByID(bpo.ParentID)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;adding grouping: &quot; &amp; bpo.ParentID&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'then start sorting&#xA;&#x9;set bpos = sortBPOsWithGroupings (bpos, bpoGroupings)&#xA;&#x9;set sortBPOandGetGroupings = bpoGroupings&#xA;end function&#xA;&#xA;'sort the elements in the given ArrayList of EA.Elements by their name &#xA;function sortElementsByName (elements)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.Element&#xA;&#x9;dim nextElement as EA.Element&#xA;&#x9;for i = 0 to elements.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = elements(i)&#xA;&#x9;&#x9;set nextElement = elements(i +1)&#xA;&#x9;&#x9;if  elementIsAfter(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;elements.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;elements.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set elements = sortElementsByName (elements)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortElementsByName = elements&#xA;end function&#xA;&#xA;'check if the name of the next elemnt is bigger then the name of the first element&#xA;function elementIsAfter (thisElement, nextElement)&#xA;&#x9;dim compareResult&#xA;&#x9;compareResult = StrComp(thisElement.Name, nextElement.Name,1)&#xA;&#x9;if compareResult &gt; 0 then&#xA;&#x9;&#x9;elementIsAfter = True&#xA;&#x9;else&#xA;&#x9;&#x9;elementIsAfter = False&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function sortBPOsWithGroupings (bpos, bpoGroupings)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.Element&#xA;&#x9;dim nextElement as EA.Element&#xA;&#x9;for i = 0 to bpos.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = bpos(i)&#xA;&#x9;&#x9;set nextElement = bpos(i +1)&#xA;&#x9;&#x9;if  bpoIsAfter(thisElement, nextElement, bpoGroupings) then&#xA;&#x9;&#x9;&#x9;bpos.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;bpos.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set bpos = sortBPOsWithGroupings (bpos, bpoGroupings)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortBPOsWithGroupings = bpos&#xA;end function&#xA;&#xA;function bpoIsAfter(thisElement, nextElement, bpoGroupings) &#xA;&#x9;'first check if they have the same parent&#xA;&#x9;if thisElement.ParentID = nextElement.ParentID then&#xA;&#x9;&#x9;'same parent so compare names&#xA;&#x9;&#x9;if StrComp(thisElement.Name,nextElement.Name,1) &gt; 0 then&#xA;&#x9;&#x9;&#x9;bpoIsAfter = true&#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;bpoIsAfter = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;'no different parents. order by parent&#xA;&#x9;&#x9;dim bpoGrouping as EA.Element&#xA;&#x9;&#x9;for each bpoGrouping in bpoGroupings&#xA;&#x9;&#x9;&#x9;if bpoGrouping.ElementID = thisElement.ParentID then&#xA;&#x9;&#x9;&#x9;&#x9;bpoIsAfter = false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;elseif bpoGrouping.ElementID = nextElement.ParentID then&#xA;&#x9;&#x9;&#x9;&#x9;bpoIsAfter = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'returns the applicaton functions that are linked with the given use cases&#xA;function getAplicationFunctionsForUseCases(usecases)&#xA;&#x9;dim usecaseIDstring&#xA;&#x9;useCaseIDString = makeIDString(usecases)&#xA;&#x9;dim sqlSelect &#xA;&#x9;sqlSelect = &#x9;&quot;select distinct af.Object_ID from (( t_object uc  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join [t_connector] ucaf on uc.Object_ID = ucaf.[End_Object_ID]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_object af on af.Object_ID = ucaf.[Start_Object_ID]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;uc.Object_ID in (&quot; &amp; usecaseIDstring &amp; &quot;) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and af.[Object_Type] = 'Activity' and af.[Stereotype] = 'Archimate_ApplicationFunction'&quot;&#xA;&#x9;&#xA;&#x9;set getAplicationFunctionsForUseCases = getElementsFromQuery(sqlSelect)&#xA;end function&#xA;&#xA;function getDataStoresForApplicationFunctions(apfs)&#xA;&#x9;dim apfIDstring&#xA;&#x9;apfIDstring = makeIDString(apfs)&#xA;&#x9;dim sqlSelect &#xA;&#x9;sqlSelect = &#x9;&quot;select distinct ds.Object_ID from (( t_object af   &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join [t_connector] afds on af.Object_ID = afds.[Start_Object_ID]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_object ds on ds.Object_ID = afds.[End_Object_ID] )  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;af.Object_ID in (&quot; &amp; apfIDstring &amp; &quot;) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and ds.[Object_Type] = 'Class' and ds.[Stereotype] = 'Archimate_DataObject'&quot;&#xA;&#x9;&#xA;&#x9;set getDataStoresForApplicationFunctions = getElementsFromQuery(sqlSelect)&#xA;end function&#xA;&#xA;function getBusinessProcessActivitiesForUseCases(usecases)&#xA;&#x9;dim usecaseIDstring&#xA;&#x9;useCaseIDString = makeIDString(usecases)&#xA;&#x9;dim sqlSelect &#xA;&#x9;sqlSelect = &quot;select distinct bpa.Object_ID from (((( t_object uc &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector ucrq on ucrq.[Start_Object_ID] = uc.Object_ID) &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object rq on ucrq.[End_Object_ID] = rq.Object_ID ) &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join [t_connector] rqbpa on rq.Object_ID = rqbpa.[Start_Object_ID])  &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object bpa on bpa.Object_ID = rqbpa.[End_Object_ID])  &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;uc.Object_ID in (&quot; &amp; usecaseIDstring &amp; &quot;) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and bpa.[Object_Type] = 'Activity' and bpa.[Stereotype] = 'Activity' &quot;&#xA;&#x9;&#xA;&#x9;set getBusinessProcessActivitiesForUseCases = getElementsFromQuery(sqlSelect)&#xA;end function&#xA;&#xA;function getBusinessProcessesForActivities(activities)&#xA;&#x9;dim bpaIDstring&#xA;&#x9;bpaIDString = makeIDString(activities)&#xA;&#x9;dim sqlSelect &#xA;&#x9;sqlSelect = &quot;select distinct bp.Object_ID from ((((t_object bpa  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;inner join [t_objectproperties] bpatv on bpatv.VALUE like bpa.[ea_guid]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_object bpai on bpai.Object_ID = bpatv.Object_ID) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_diagramObjects bpaido on bpaido.Object_ID = bpai.Object_ID) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_object bp on bp.pdata1 like bpaido.Diagram_ID) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;where bpa.Object_ID in (&quot; &amp; bpaIDString &amp; &quot;) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;and bpa.[Object_Type] = 'Activity' and bpa.[Stereotype] = 'Activity'  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;and bpatv.Property = 'calledActivityRef' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;and bp.[Object_Type] = 'Activity' and bp.[Stereotype] = 'Archimate_BusinessProcess' and bp.name like '&quot;&amp; WC &amp;&quot;BPMD&quot;&amp; WC &amp;&quot;' &quot;&#xA;&#x9;set getBusinessProcessesForActivities = getElementsFromQuery(sqlSelect)&#xA;end function &#xA;&#xA;function getBPOsForBPMDs(businessprocesses)&#xA;&#x9;dim bpmdIDstring&#xA;&#x9;bpmdIDstring = makeIDString(businessprocesses)&#xA;&#x9;dim sqlSelect&#xA;&#x9;sqlSelect = &quot;select distinct bpo.Object_ID from ((t_object bp  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_diagramobjects bpdo on bp.object_id = bpdo.object_id) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_object bpo on bpo.pdata1 like bpdo.Diagram_ID) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;where bp.Object_ID in (&quot; &amp; bpmdIDstring &amp; &quot;) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot;and bpo.[Object_Type] = 'Activity' and bpo.[Stereotype] = 'Archimate_BusinessProcess' and bpo.name like '&quot;&amp; WC &amp;&quot;BPO&quot;&amp; WC &amp;&quot;' &quot;&#xA;&#x9;set getBPOsForBPMDs = getElementsFromQuery(sqlSelect)&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="148"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DA4ECE36-D48F-4201-BD70-8A707EDBA9FC}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Information Model Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.DocGenUtil&#xA;&#xA;'&#xA;' Script Name: Process Book&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a process book based on the selected processes&#xA;' Date: 08/05/2015&#xA;'&#xA;&#xA;dim IMPackageGUID&#xA;IMPackageGUID = &quot;{74E1FDC4-6027-4401-BCDC-2EE41092E0DD}&quot;&#xA;&#xA;dim DiagramTemplate, MessageTemplate_part1, MessageTemplate_part2&#xA;&#xA;DiagramTemplate = &quot;PackageDiagram IM&quot;&#xA;MessageTemplate_part1 = &quot;Atrias IM message part 1&quot;&#xA;MessageTemplate_part2 = &quot;Atrias IM message part 2&quot;&#xA;&#xA;&#xA;'test function&#xA;sub test()&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;'set currentDiagram = Repository.GetContextObject&#xA;&#x9;set currentDiagram = Repository.GetDiagramByGuid(&quot;{560A6A84-CE91-4fba-BDEC-82B3DF265391}&quot;)&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim sortedObjects&#xA;&#x9;set sortedObjects = sortDiagramObjectsCollection (currentDiagram.DiagramObjects)&#xA;&#x9;dim selectedMessages&#xA;&#x9;set selectedMessages = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'loop the sorted diagram objects&#xA;&#x9;for each selectedDiagramObject in sortedObjects&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID ( selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if selectedElement.Stereotype = &quot;Message&quot; then&#xA;&#x9;&#x9;&#x9;selectedMessages.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'ask user for document name&#xA;&#x9;dim documentName&#xA;&#x9;documentName = InputBox(&quot;Please enter a name for this IM document&quot;, &quot;Document Name&quot;, &quot;MIG-DGO 6.0 - IM - XX - 05 - BusinessDomain vX.X&quot;)&#xA;&#x9;&#xA;&#x9;createIMdocument selectedMessages, documentName&#xA;&#x9;Msgbox &quot;Finished!&quot;&#xA;end sub&#xA;&#xA;'test&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedConnector = currentDiagram.SelectedConnector&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if not selectedConnector is nothing then&#xA;&#x9;&#x9;&#x9;' A connector is selected&#xA;&#x9;&#x9;elseif selectedObjects.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;dim selectedElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim selectedMessages&#xA;&#x9;&#x9;&#x9;set selectedMessages = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;'sort the diagram objects&#xA;&#x9;&#x9;&#x9;dim sortedObjects&#xA;&#x9;&#x9;&#x9;set sortedObjects = sortDiagramObjectsCollection (selectedObjects)&#xA;&#x9;&#x9;&#x9;'loop the sorted diagram objects&#xA;&#x9;&#x9;&#x9;for each selectedDiagramObject in sortedObjects&#xA;&#x9;&#x9;&#x9;&#x9;set selectedElement = Repository.GetElementByID ( selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if selectedElement.Stereotype = &quot;Message&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;selectedMessages.Add selectedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'ask user for document name&#xA;&#x9;&#x9;&#x9;dim documentName&#xA;&#x9;&#x9;&#x9;documentName = InputBox(&quot;Please enter a name for this IM document&quot;, &quot;Document Name&quot;, &quot;MIG-DGO 6.0 - IM - XX - 05 - BusinessDomain vX.X&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;createIMdocument selectedMessages, documentName&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;Msgbox &quot;Finished!&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;'create a process book for the given business processes with the given document name&#xA;function createIMdocument(selectedMessages, documentName)&#xA;&#x9;dim message as EA.Element&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = addMasterDocument (IMPackageGUID, documentName)&#xA;&#x9;dim i&#xA;&#x9;i = 1&#xA;&#x9;for each message in selectedMessages&#xA;&#x9;&#x9;'add model document for template Atrias element&#xA;&#x9;&#x9;addModelDocumentForElement masterDocument,message, i, MessageTemplate_part1&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'add model document for template diagram if exists composite diagram&#xA;&#x9;&#x9;if not message.CompositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;addModelDocumentForDiagram masterDocument,message.CompositeDiagram , i, DiagramTemplate&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add part 2&#xA;&#x9;&#x9;'get the xsd root for the message element&#xA;&#x9;&#x9;dim xsdRoot as EA.Element&#xA;&#x9;&#x9;set xsdRoot = getXSDRootForMessage(message)&#xA;&#x9;&#x9;if not xsdRoot is nothing then&#xA;&#x9;&#x9;&#x9;'add the model document&#xA;&#x9;&#x9;&#x9;addModelDocumentForElement masterDocument,xsdRoot, i, MessageTemplate_part2&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'reload the package to schow the correct order&#xA;&#x9;Repository.RefreshModelView(masterDocument.PackageID)&#xA;end function&#xA;&#xA;function getXSDRootForMessage(message)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim xsdRoot as EA.Element&#xA;&#x9;set xsdRoot = nothing&#xA;&#x9;for each connector in message.Connectors&#xA;&#x9;&#x9;if connector.SupplierID = message.ElementID _&#xA;&#x9;&#x9;AND (connector.Type = &quot;Realisation&quot; OR connector.Type = &quot;Realization&quot;) then&#xA;&#x9;&#x9;&#x9;dim connectedElement as EA.Element&#xA;&#x9;&#x9;&#x9;set connectedElement = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;if connectedElement.Stereotype = &quot;XSDtopLevelElement&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set xsdRoot = connectedElement&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getXSDRootForMessage = xsdRoot&#xA;end function&#xA;&#xA;function addModelDocumentForElement(masterDocument,documentedElement, treepos, template_in)&#xA;&#x9;dim modelDocElement as EA.Element&#xA;&#x9;dim elementName &#xA;&#x9;dim template&#xA;&#x9;template = template_in&#xA;&#x9;elementName = documentedElement.Name &amp; &quot; element&quot;&#xA;&#x9;'if the documentedElement contains a linked document then we take that instead of the content of the notes&#xA;'&#x9;dim linkedDocument&#xA;'&#x9;linkedDocument = documentedElement.GetLinkedDocument()&#xA;'&#x9;if len(linkedDocument) &gt; 0  AND template = MessageTemplate_part1 then&#xA;'&#x9;&#x9;template = template + &quot; LD&quot;&#xA;'&#x9;&#x9;'Session.Output &quot;Business process: &quot;  &amp; documentedElement.name &amp; &quot; len(linkedDocument): &quot; &amp;len(linkedDocument)&#xA;'&#x9;end if&#xA;&#x9;addModelDocument masterDocument, template,elementName, documentedElement.ElementGUID, treepos&#xA;end function&#xA;&#xA;function sortDiagramObjectsCollection (diagramObjects)&#xA;&#x9;dim sortedDiagramObjects &#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set sortedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each diagramObject in diagramObjects&#xA;&#x9;&#x9;sortedDiagramObjects.Add (diagramObject)&#xA;&#x9;next&#xA;&#x9;set sortDiagramObjectsCollection = sortDiagramObjectsArrayList(sortedDiagramObjects)&#xA;end function&#xA;&#xA;function sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.DiagramObject&#xA;&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;for i = 0 to diagramObjects.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = diagramObjects(i)&#xA;&#x9;&#x9;set nextElement = diagramObjects(i +1)&#xA;&#x9;&#x9;if  diagramObjectIsAfterXY(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;diagramObjects.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;diagramObjects.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set diagramObjects = sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortDiagramObjectsArrayList = diagramObjects&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterYX(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;elseif thisElement.top = nextElement.top then&#xA;&#x9;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterXY(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;elseif thisElement.left = nextElement.left then&#xA;&#x9;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function containsElement(list, elementID)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;containsElement = false&#xA;&#x9;for each element in list&#xA;&#x9;&#x9;if element.ElementID = elementID then&#xA;&#x9;&#x9;&#x9;containsElement = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="149"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{08A2110E-0073-457D-9222-9569DE4AC628}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;!INC Atrias Scripts.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;dim selectedItems&#xA;&#x9;&#x9;set selectedItems = getSelectedElements(diagram)&#xA;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, selectedItems&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getSelectedElements(diagram)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim selectedDiagramObjects&#xA;&#x9;set selectedDiagramObjects = diagram.SelectedObjects&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;for each selectedDiagramObject in selectedDiagramObjects&#xA;&#x9;&#x9;dim selectedElement&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;&#x9;selectedElements.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSelectedElements = selectedElements&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="150"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FCAC4BFE-0FE0-45FE-A33F-B898BA3F49D8}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR_A&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;!INC Atrias Scripts.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;dim selectedItems&#xA;&#x9;&#x9;set selectedItems = getSelectedElements(diagram)&#xA;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, selectedItems&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getSelectedElements(diagram)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim selectedDiagramObjects&#xA;&#x9;set selectedDiagramObjects = diagram.SelectedObjects&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;for each selectedDiagramObject in selectedDiagramObjects&#xA;&#x9;&#x9;dim selectedElement&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;&#x9;selectedElements.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSelectedElements = selectedElements&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="151"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CA60569A-500A-4A27-8A5C-BED1328AF75D}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Line Styles&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: DefaultLineStyles&#xA;' Author: Geert Bellekens&#xA;' Purpose: Allows to change the linestyles to their default&#xA;' Date: 27/04/2015&#xA;'&#xA;dim lsDirectMode, lsAutoRouteMode, lsCustomMode, lsTreeVerticalTree, lsTreeHorizontalTree, _&#xA;lsLateralHorizontalTree, lsLateralVerticalTree, lsOrthogonalSquareTree, lsOrthogonalRoundedTree&#xA;&#xA;lsDirectMode = &quot;1&quot;&#xA;lsAutoRouteMode = &quot;2&quot; &#xA;lsCustomMode = &quot;3&quot;&#xA;lsTreeVerticalTree = &quot;V&quot;&#xA;lsTreeHorizontalTree = &quot;H&quot;&#xA;lsLateralHorizontalTree = &quot;LH&quot;&#xA;lsLateralVerticalTree = &quot;LC&quot;&#xA;lsOrthogonalSquareTree = &quot;OS&quot;&#xA;lsOrthogonalRoundedTree = &quot;OR&quot;&#xA;&#xA;dim defaultStyle&#xA;dim menuDefaultLines&#xA;&#xA;&#xA;'*********EDIT BETWEEN HERE*************&#xA;&#xA;&#xA;' set here the default style to be used&#xA;defaultStyle = lsOrthogonalSquareTree&#xA;&#xA;' set there the style to be used for each type of connector&#xA;function determineStyle(connector)&#xA;&#x9;dim connectorType&#xA;&#x9;connectorType = connector.Type&#xA;&#x9;select case connectorType&#xA;&#x9;&#x9;case &quot;StateFlow&quot;,&quot;ObjectFlow&quot;,&quot;InformationFlow&quot;&#xA;&#x9;&#x9;&#x9;determineStyle = lsOrthogonalRoundedTree&#xA;&#x9;&#x9;case &quot;Generalization&quot;, &quot;Realization&quot;, &quot;Realisation&quot;&#xA;&#x9;&#x9;&#x9;determineStyle = lsTreeVerticalTree&#xA;&#x9;&#x9;case &quot;UseCase&quot;, &quot;Dependency&quot;,&quot;NoteLink&quot;&#xA;&#x9;&#x9;&#x9;determineStyle = lsDirectMode&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;determineStyle = defaultStyle&#xA;&#x9;end select&#xA;end function&#xA;'************AND HERE****************&#xA;&#xA;&#xA;sub main&#xA;&#x9;&#x9;dim diagram &#xA;&#x9;&#x9;dim diagramLink&#xA;&#x9;&#x9;dim connector&#xA;&#x9;&#x9;dim dirty&#xA;&#x9;&#x9;dirty = false&#xA;&#x9;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;&#x9;'save the diagram first&#xA;&#x9;&#x9;Repository.SaveDiagram diagram.DiagramID&#xA;&#x9;&#x9;'then loop all diagramLinks&#xA;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'set the connectorstyle&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setConnectorStyle diagramLink, determineStyle(connector)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'save the diagramlink&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramLink.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dirty = true&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'reload the diagram if we changed something&#xA;&#x9;&#x9;&#x9;if dirty then&#xA;&#x9;&#x9;&#x9;&#x9;'reload the diagram to show the link style&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram diagram.DiagramID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;&#xA;&#xA;'gets the diagram link object&#xA;function getdiagramLinkForConnector(connector, diagram)&#xA;&#x9;dim diagramLink &#xA;&#x9;set getdiagramLinkForConnector = nothing&#xA;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;if diagramLink.ConnectorID = connector.ConnectorID then&#xA;&#x9;&#x9;&#x9;set getdiagramLinkForConnector = diagramLink&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'actually sets the connector style&#xA;function setConnectorStyle(diagramLink, connectorStyle)&#xA;&#x9;'split the style into its parts&#xA;&#x9;dim styleparts&#xA;&#x9;dim styleString&#xA;&#x9;styleString = diagramLink.Style&#xA;&#x9;styleparts = Split(styleString,&quot;;&quot;)&#xA;&#x9;dim stylePart&#xA;&#x9;dim mode&#xA;&#x9;dim modeIndex&#xA;&#x9;modeIndex = -1&#xA;&#x9;dim tree&#xA;&#x9;dim treeIndex&#xA;&#x9;treeIndex = -1&#xA;&#x9;mode = &quot;&quot;&#xA;&#x9;tree = &quot;&quot;&#xA;&#x9;dim i&#xA;&#x9;'find if Mode and Tree are already defined&#xA;&#x9;for i = 0 to Ubound(styleparts) -1 &#xA;&#x9;&#x9;stylePart = styleparts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;modeIndex = i&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;treeIndex = i&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'these connectorstyles use mode=3 and the tree&#xA;&#x9;if  connectorStyle = lsTreeVerticalTree or _&#xA;&#x9;&#x9;connectorStyle = lsTreeHorizontalTree or _&#xA;&#x9;&#x9;connectorStyle = lsLateralHorizontalTree or _&#xA;&#x9;&#x9;connectorStyle = lsLateralVerticalTree or _&#xA;&#x9;&#x9;connectorStyle = lsOrthogonalSquareTree or _&#xA;&#x9;&#x9;connectorStyle = lsOrthogonalRoundedTree then&#xA;&#x9;&#x9;mode = &quot;3&quot;&#xA;&#x9;&#x9;tree = connectorStyle&#xA;&#x9;else&#xA;&#x9;&#x9;mode = connectorStyle&#xA;&#x9;end if&#xA;&#x9;'set the mode value&#xA;&#x9;if modeIndex &gt;= 0 then&#xA;&#x9;&#x9;styleparts(modeIndex) = &quot;Mode=&quot; &amp; mode&#xA;&#x9;&#x9;diagramLink.Style = join(styleparts,&quot;;&quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;diagramLink.Style = &quot;Mode=&quot; &amp; mode&amp; &quot;;&quot;&amp; diagramLink.Style&#xA;&#x9;end if&#xA;&#x9;'set the tree value&#xA;&#x9;if treeIndex &gt;= 0 then&#xA;&#x9;&#x9;if len(tree) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleparts(treeIndex) = &quot;TREE=&quot; &amp; tree&#xA;&#x9;&#x9;&#x9;diagramLink.Style = join(styleparts,&quot;;&quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'remove tree part&#xA;&#x9;&#x9;&#x9;diagramLink.Style = replace(diagramLink.Style,styleparts(treeIndex)&amp;&quot;;&quot; , &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;diagramLink.Style = diagramLink.Style &amp; &quot;TREE=&quot; &amp; tree &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getConnectorStyle(diagramLink)&#xA;&#x9;'split the style&#xA;&#x9;dim styleparts&#xA;&#x9;styleparts = Split(diagramLink.Style,&quot;;&quot;)&#xA;&#x9;dim stylePart&#xA;&#x9;dim mode&#xA;&#x9;dim tree&#xA;&#x9;mode = &quot;&quot;&#xA;&#x9;tree = &quot;&quot;&#xA;&#x9;for each stylepart in styleparts&#xA;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;mode = right(stylepart, 1)&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;tree = replace(stylepart, &quot;TREE=&quot;, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if tree &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;getConnectorStyle = tree&#xA;&#x9;else&#xA;&#x9;&#x9;getConnectorStyle = mode&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="152"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{599A9874-B7C3-4385-A708-40647D599D5E}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Synchronize&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;' Script Name: Synchronize&#xA;' Author: Geert Bellekens&#xA;' Purpose: Synchronises the names of the selected objects or BPMN Activities with their classifier/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;' Date: 27/03/2015&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;'save the diagram before anything else&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;'if nothing is selected then we do synchronize on all objects&#xA;&#x9;&#x9;if selectedObjects.Count &lt; 1 then&#xA;&#x9;&#x9;&#x9;set selectedObjects = currentDiagram.DiagramObjects&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;for each selectedObject in selectedObjects&#xA;&#x9;&#x9;&#x9;synchronizeObjectNames selectedObject, currentDiagram&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'reload the diagram to be able to click through&#xA;&#x9;&#x9;Repository.ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;'Sets the object name to that of the classifier, and set the composite diagram for objects&#xA;function synchronizeObjectNames(diagramObject, diagram)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;synchronizeElement element&#xA;&#x9;'set default size for message objects&#xA;&#x9;if element.Type = &quot;Object&quot; AND (element.Stereotype = &quot;Message&quot; or element.Stereotype = &quot;FIS&quot;) then&#xA;&#x9;&#x9;diagramObject.bottom = diagramObject.top - 25&#xA;&#x9;&#x9;diagramObject.right = diagramObject.left + 40&#xA;&#x9;&#x9;setFont diagramObject&#xA;&#x9;&#x9;diagramObject.Update&#xA;'&#x9;&#x9;copyMessageDirection(element)&#xA;&#x9;end if&#xA;&#x9;'check if it is local activity&#xA;&#x9;if element.Type = &quot;Activity&quot; and element.Stereotype = &quot;Activity&quot; and (element.PackageID &lt;&gt; diagram.packageID ) then&#xA;&#x9;&#x9;'Make a new Activity for this activity&#xA;&#x9;&#x9;dim callingActivity as EA.Element&#xA;&#x9;&#x9;dim ownerElement as EA.Element&#xA;&#x9;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;&#x9;if diagram.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set ownerElement = Repository.GetElementByID(diagram.ParentID)&#xA;&#x9;&#x9;&#x9;set callingActivity = ownerElement.Elements.AddNew(&quot;&quot;,&quot;BPMN2.0::Activity&quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set ownerPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;&#x9;&#x9;set callingActivity = ownerPackage.Elements.AddNew(&quot;&quot;,&quot;BPMN2.0::Activity&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'check if callingActivity was created&#xA;&#x9;&#x9;if not callingActivity is Nothing then&#xA;&#x9;&#x9;&#x9;makeCallingActivity callingActivity, element&#xA;&#x9;&#x9;&#x9;dim updateDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;'set the element of the diagramObject to the new action&#xA;&#x9;&#x9;&#x9;updateDiagramObjectSQL = &quot;update t_diagramobjects set object_id = &quot;&amp; callingActivity.ElementID &amp;&quot; where Diagram_ID = &quot; &amp; diagramObject.DiagramID &amp; &quot; and Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;Repository.Execute updateDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;'synchronize&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;synchronizeElement callingActivity&#xA;&#x9;&#x9;&#x9;Repository.AdviseElementChange(callingActivity.ElementID)&#xA;&#x9;&#x9;&#x9;'copy embedded elements&#xA;&#x9;&#x9;&#x9;dim embeddedElement as EA.Element&#xA;&#x9;&#x9;&#x9;for each embeddedElement in element.EmbeddedElements&#xA;&#x9;&#x9;&#x9;&#x9;'check if the embedded element is shown on this diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;' get the diagramObject for the embedded element&#xA;&#x9;&#x9;&#x9;&#x9;dim embeddedDiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;set embeddedDiagramObject = getDiagramObjectFromArray(embeddedElement.elementID, diagramObjects, count)&#xA;&#x9;&#x9;&#x9;&#x9;if not embeddedDiagramObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if yes then make a new embedded elementin the callingActivity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim newEmbeddedElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set newEmbeddedElement = callingActivity.EmbeddedElements.AddNew(&quot;&quot;,&quot;ObjectNode&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.Name = embeddedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.Stereotype = &quot;IntermediateEvent&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.Update()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;IntermediateEvent&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.TaggedValues.Refresh&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Copy tagged values&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;copyTaggedValuesValues embeddedElement, newEmbeddedElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' set the element id of the diagramobject to the new embedded element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'embeddedDiagramObject.ElementID = newEmbeddedElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'embeddedDiagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'for some reason the update doesn't want to work. so we do it the hard way&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim updateEmbeddedDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;updateEmbeddedDiagramObjectSQL = &quot;update t_diagramobjects set object_id = &quot;&amp; newEmbeddedElement.ElementID &amp;&quot; where Diagram_ID = &quot; &amp; diagramObject.DiagramID &amp; &quot; and Object_ID = &quot; &amp; embeddedElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output updateEmbeddedDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.Execute updateEmbeddedDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getOrCreateTaggedValue(element, taggedValueName)&#xA;&#x9;&#x9;'add tagged value if not exists yet&#xA;&#x9;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#x9;dim taggedValueExists&#xA;&#x9;&#x9;taggedValueExists = false&#xA;&#x9;&#x9;for each taggedValue in element.TaggedValues&#xA;&#x9;&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;&#x9;&#x9;&#x9;&#x9;taggedValueExists = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'create tagged value is not existing yet&#xA;&#x9;&#x9;if taggedValueExists = false then&#xA;&#x9;&#x9;&#x9;set taggedValue = element.TaggedValues.AddNew(taggedValueName,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;taggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;set getOrCreateTaggedValue = taggedValue&#xA;end function&#xA;&#xA;function copyMessageDirection(message)&#xA;&#x9;dim tv as EA.TaggedValue&#xA;&#x9;dim messageClassifier as EA.Element&#xA;&#x9;'get the classifier message&#xA;&#x9;if message.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;set messageClassifier = Repository.GetElementByID(message.ClassifierID)&#xA;&#x9;&#x9;if not messageClassifier is nothing then&#xA;&#x9;&#x9;&#x9;dim parentDirection&#xA;&#x9;&#x9;&#x9;parentDirection = getDirection(messageClassifier)&#xA;&#x9;&#x9;&#x9;if parentDirection = &quot;In&quot; or parentDirection = &quot;Out&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;setDirection message, parentDirection&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getDirection(message)&#xA;&#x9;dim tv as EA.TaggedValue&#xA;&#x9;getDirection = &quot;&quot;&#xA;&#x9;for each tv in message.TaggedValues&#xA;&#x9;&#x9;if tv.Name = &quot;Atrias::Direction&quot; then&#xA;&#x9;&#x9;&#x9;getDirection = tv.Value &#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setDirection(message, value)&#xA;&#x9;dim tv as EA.TaggedValue&#xA;&#x9;set tv = getOrCreateTaggedValue(message, &quot;Atrias::Direction&quot;)&#xA;&#x9;tv.Value = value&#xA;&#x9;tv.Update&#xA;end function&#xA;&#xA;function setFont(diagramObject)&#xA;&#x9;dim styleParts&#xA;&#x9;styleParts = Split (diagramObject.Style , &quot;;&quot;) &#xA;&#x9;dim i&#xA;&#x9;dim stylepart&#xA;&#x9;dim fontpart &#xA;&#x9;fontpart = &quot;font=Arial Narrow&quot;&#xA;&#x9;dim fontSet&#xA;&#x9;fontSet = false&#xA;&#x9;dim sizePart&#xA;&#x9;sizePart = &quot;fontsz=120&quot;&#xA;&#x9;dim sizeSet&#xA;&#x9;sizeSet = false&#xA;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;font=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = fontpart&#xA;&#x9;&#x9;&#x9;fontSet = true&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;fontsz=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = sizePart&#xA;&#x9;&#x9;&#x9;sizeSet = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;diagramObject.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;if not fontSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; fontpart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;&#x9;if not sizeSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; sizePart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;OnDiagramScript&#xA;'test&#xA;sub test&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetDiagramByGuid(&quot;{4FBDF6B6-B684-4b40-839F-D2A65A9F5418}&quot;)&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;'save the diagram before anything else&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;'if nothing is selected then we do synchronize on all objects&#xA;&#x9;&#x9;if selectedObjects.Count &lt; 1 then&#xA;&#x9;&#x9;&#x9;set selectedObjects = currentDiagram.DiagramObjects&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;for each selectedObject in selectedObjects&#xA;&#x9;&#x9;&#x9;synchronizeObjectNames selectedObject, currentDiagram&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'reload the diagram to be able to click through&#xA;&#x9;&#x9;Repository.ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="153"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4F074218-424C-4460-9A7F-458437A39223}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Business Requirements Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.DocGenUtil&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: Process Book&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a process book based on the selected processes&#xA;' Date: 08/05/2015&#xA;'&#xA;&#xA;dim processBooksPackageGUID&#xA;processBooksPackageGUID = &quot;{C771D6FE-5233-4a62-857F-3711AE1FFB0A}&quot;&#xA;dim businessProcessesPackageGUID&#xA;businessProcessesPackageGUID = &quot;{7EAA1987-6FB1-427f-8BA1-2610ED339905}&quot;&#xA;dim reusableSubProcessesPackageGUID&#xA;reusableSubProcessesPackageGUID = &quot;{5D830EDF-0470-4d41-9358-93C2EB410521}&quot;&#xA;&#xA;dim BPO_Template, BPTemplate &#xA;&#xA;BPO_Template = &quot;BR_BPO&quot;&#xA;BPTemplate = &quot;BR_BPMD&quot;&#xA;&#xA;'test&#xA;&#xA;sub main()&#xA;&#x9;'get the selected element&#xA;&#x9;dim domainGrouping as EA.Element&#xA;&#x9;set domainGrouping = Repository.GetContextObject()&#xA;&#x9;dim selectionOK&#xA;&#x9;selectionOK = false&#xA;&#x9;if domainGrouping.ObjectType = otElement then&#xA;&#x9;&#x9;if domainGrouping.Stereotype = &quot;ArchiMate_Grouping&quot; then&#xA;&#x9;&#x9;&#x9;selectionOK = true&#xA;&#x9;&#x9;&#x9;'ask user for document version&#xA;&#x9;&#x9;&#x9;dim documentVersion&#xA;&#x9;&#x9;&#x9;documentVersion = InputBox(&quot;Please enter the version for this document&quot;, &quot;Document Version&quot;, &quot;x.y&quot;)&#xA;&#x9;&#x9;&#x9;'create the processbook&#xA;&#x9;&#x9;&#x9;createProcessBook domainGrouping, documentVersion&#xA;&#x9;&#x9;&#x9;Msgbox &quot;Finished!&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if selectionOK = false then&#xA;&#x9;&#x9;Session.Prompt &quot;Please select the Archimate Grouping that represents the domain&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;&#xA;'create a process book for the given business processes with the given document name&#xA;function createProcessBook(domainGrouping, documentVersion)&#xA;&#x9;'get the BPO processes from the domain grouping&#xA;&#x9;dim BPOs&#xA;&#x9;set BPOs = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim BPO as EA.Element&#xA;&#x9;for each BPO in domainGrouping.Elements&#xA;&#x9;&#x9;if BPO.Stereotype = &quot;ArchiMate_BusinessProcess&quot; then&#xA;&#x9;&#x9;&#x9;BPOs.Add BPO&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'get document info&#xA;&#x9;dim masterDocumentName,documentAlias,documentName,documentTitle&#xA;&#x9;documentAlias = domainGrouping.Name&#xA;&#x9;documentName = &quot;UMIG DGO - BR -&quot; &amp; domainGrouping.Alias &amp;&#x9;&quot; - &quot; &amp; domainGrouping.Name&#xA;&#x9;documentTitle = documentName&#xA;&#x9;masterDocumentName = documentName &amp; &quot; v. &quot; &amp; documentVersion&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = addMasterDocumentWithDetailTags (processBooksPackageGUID,masterDocumentName,documentAlias,documentName,documentTitle,documentVersion)&#xA;&#x9;dim i&#xA;&#x9;i = 1&#xA;&#x9;'sort the business processes&#xA;&#x9;'TODO&#xA;&#x9;for each BPO in BPOs&#xA;&#x9;&#x9;'add model document for template Atrias element&#xA;&#x9;&#x9;addModelDocumentForElement masterDocument,BPO, i, BPO_Template&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'get the business processes&#xA;&#x9;dim businessProcesses&#xA;&#x9;set businessProcesses = getProcesses(businessProcessesPackageGUID, domainGrouping.Name)&#xA;&#x9;dim businessProcess as EA.Element&#xA;&#x9;for each businessProcess in businessProcesses&#xA;&#x9;&#x9;'add model document for busines process&#xA;&#x9;&#x9;addModelDocumentForElement masterDocument,businessProcess, i, BPTemplate&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'get the reusable subprocesses&#xA;&#x9;dim reusableSubProcesses&#xA;&#x9;set reusableSubProcesses = getProcesses(reusableSubProcessesPackageGUID, domainGrouping.Name)&#xA;&#x9;dim reusableSubProcess as EA.Element&#xA;&#x9;for each reusableSubProcess in reusableSubProcesses&#xA;&#x9;&#x9;'add model document for reusable sub-process&#xA;&#x9;&#x9;addModelDocumentForElement masterDocument,reusableSubProcess, i, BPTemplate&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'reload the package to schow the correct order&#xA;&#x9;Repository.RefreshModelView(masterDocument.PackageID)&#xA;end function&#xA;&#xA;function getProcesses(parentPackageGUID, domainName)&#xA;&#x9;dim sqlGetProcesses&#xA;&#x9;sqlGetProcesses = &quot;select o.Object_ID from ((((t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_package p on o.Package_ID = p.Package_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_package pp on pp.Package_ID = p.Parent_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_package ppp on ppp.Package_ID = pp.Parent_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_diagram d on d.ParentID = o.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Object_Type = 'Activity' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Stereotype in ('BusinessProcess', 'Activity') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and ppp.ea_guid = '&quot; &amp; parentPackageGUID &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and pp.Name = '&quot; &amp; domainName &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by o.Name &quot; &#xA;&#x9;set getProcesses = getElementsFromQuery(sqlGetProcesses)&#xA;end function&#xA;&#xA;&#xA;function getSubProcesses(diagram, existingSubProcesses)&#xA;&#x9;dim sortedDiagramObjects&#xA;&#x9;dim sortedSubProcesses&#xA;&#x9;set sortedSubProcesses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;set sortedDiagramObjects = sortDiagramObjectsCollection(diagram.DiagramObjects)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim subProcess as EA.Element&#xA;&#x9;for each diagramObject in sortedDiagramObjects&#xA;&#x9;&#x9;if not containsElement(existingSubProcesses, diagramObject.ElementID) then&#xA;&#x9;&#x9;&#x9;set subProcess = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if subProcess.Stereotype = &quot;ArchiMate_BusinessProcess&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;OR subProcess.Stereotype = &quot;Activity&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;OR subProcess.Stereotype = &quot;BusinessProcess&quot;then&#xA;&#x9;&#x9;&#x9;&#x9;sortedSubProcesses.Add subProcess&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getSubProcesses = sortedSubProcesses&#xA;end function&#xA;&#xA;&#xA;function addModelDocumentForElement(masterDocument,businessProcess, treepos, template_in)&#xA;&#x9;dim modelDocElement as EA.Element&#xA;&#x9;dim elementName &#xA;&#x9;dim template&#xA;&#x9;template = template_in&#xA;&#x9;elementName = businessProcess.Name &amp; &quot; element&quot;&#xA;&#x9;'if the businessprocess contains a linked document then we take that instead of the content of the notes&#xA;&#x9;dim linkedDocument&#xA;&#x9;linkedDocument = businessProcess.GetLinkedDocument()&#xA;&#x9;if len(linkedDocument) &gt; 0 then&#xA;&#x9;&#x9;template = template + &quot; Linked Document&quot;&#xA;&#x9;&#x9;'Session.Output &quot;Business process: &quot;  &amp; businessProcess.name &amp; &quot; len(linkedDocument): &quot; &amp;len(linkedDocument)&#xA;&#x9;end if&#xA;&#x9;addModelDocument masterDocument, template,elementName, businessProcess.ElementGUID, treepos&#xA;end function&#xA;&#xA;function sortDiagramObjectsCollection (diagramObjects)&#xA;&#x9;dim sortedDiagramObjects &#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set sortedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each diagramObject in diagramObjects&#xA;&#x9;&#x9;sortedDiagramObjects.Add (diagramObject)&#xA;&#x9;next&#xA;&#x9;set sortDiagramObjectsCollection = sortDiagramObjectsArrayList(sortedDiagramObjects)&#xA;end function&#xA;&#xA;function sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.DiagramObject&#xA;&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;for i = 0 to diagramObjects.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = diagramObjects(i)&#xA;&#x9;&#x9;set nextElement = diagramObjects(i +1)&#xA;&#x9;&#x9;if  diagramObjectIsAfterXY(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;diagramObjects.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;diagramObjects.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set diagramObjects = sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortDiagramObjectsArrayList = diagramObjects&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterYX(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;elseif thisElement.top = nextElement.top then&#xA;&#x9;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterXY(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;elseif thisElement.left = nextElement.left then&#xA;&#x9;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function containsElement(list, elementID)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;containsElement = false&#xA;&#x9;for each element in list&#xA;&#x9;&#x9;if element.ElementID = elementID then&#xA;&#x9;&#x9;&#x9;containsElement = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="154"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{15558A92-F173-46C7-8AA0-D16704BBB0AC}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MessageOverview&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;'option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: CreateMessageOverviewSequence&#xA;' Author: Geert Bellekens&#xA;' Purpose: Creates a sequence diagram under the selected businessprocess that shows the sequence of the messages&#xA;' from this businessprocess and it's subprocesses&#xA;' Date: 31/03/2015&#xA;'&#xA;'**********EDIT FROM HERE************&#xA;'The distance between two lifelines&#xA;dim xIncrement&#xA;xIncrement = 200&#xA;'The width of a lifeline&#xA;dim defaultwidth&#xA;defaultwidth = 90&#xA;'the diagrams name suffix&#xA;dim namesuffix&#xA;namesuffix = &quot; Message Overview&quot;&#xA;'the horizontal space between two levels of boundaries&#xA;dim boundaryX&#xA;boundaryX = 5&#xA;'colors&#xA;dim colors&#xA;' paars, geel, groen,blauw&#xA;colors = Array(16758490,14745599,13434828,16776869)&#xA;'**********TO HERE************&#xA;&#xA;dim Yoffset&#xA;dim YIncrement&#xA;&#xA;YoffSet = 72&#xA;YIncrement = 35&#xA;&#xA;dim lpos&#xA;dim mpos&#xA;dim rpos&#xA;dim lmpos&#xA;dim rmpos&#xA;lpos = 100&#xA;mpos = 400&#xA;rpos = 700&#xA;lmpos = mpos - 100&#xA;rmpos = mpos + 100&#xA;&#xA;sub main&#xA;&#x9;' get the selected element&#xA;&#x9;dim process as EA.Element&#xA;&#x9;set process = Repository.GetTreeSelectedObject&#xA;&#x9;if process.ObjectType = otElement then&#xA;&#x9;&#x9;if process.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;dim userinput&#xA;&#x9;&#x9;&#x9;userinput = MsgBox( &quot;With process boundaries?&quot;, vbYesNoCancel + vbQuestion, &quot;Message Overview Diagram&quot;)&#xA;&#x9;&#x9;&#x9;if userinput &lt;&gt; vbCancel then&#xA;&#x9;&#x9;&#x9;&#x9;' make a new diagram -&gt; MessageOverview&#xA;&#x9;&#x9;&#x9;&#x9;dim overviewDiagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramName&#xA;&#x9;&#x9;&#x9;&#x9;diagramName = process.name &amp; namesuffix&#xA;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramName = diagramName &amp; &quot; with proces boundaries&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;set overviewDiagram = getOwnedDiagramByName(process, diagramName)&#xA;&#x9;&#x9;&#x9;&#x9;if overviewDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set overviewDiagram = process.Diagrams.AddNew(diagramName, &quot;Sequence&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;overviewDiagram.update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange process.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;dim messageflows&#xA;&#x9;&#x9;&#x9;&#x9;set messageflows = getOwnedMessageFlows(process,0, process.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;dim messageflow as EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;dim sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;sequenceNumber = 1&#xA;&#x9;&#x9;&#x9;&#x9;dim boundaries&#xA;&#x9;&#x9;&#x9;&#x9;set boundaries = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;for each messageflow in messageflows&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Add each message flow tot he MessageOverview diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addMessageFlowToDiagram messageFlow, overviewDiagram, process, sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addBoundary messageFlow.Alias, overviewDiagram, boundaries,sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequenceNumber = sequenceNumber +1&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;Repository.OpenDiagram(overviewDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;Repository.SaveDiagram(overviewDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;'re-order the lifeLines&#xA;&#x9;&#x9;&#x9;&#x9;dim totalwidth&#xA;&#x9;&#x9;&#x9;&#x9;totalwidth = reorderLifeLines(overviewDiagram)&#xA;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'resize boundaries&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resizeBoundaries boundaries, totalwidth&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'set all messages to Asynchronous&#xA;&#x9;&#x9;&#x9;&#x9;setMessagesAsynchronous (overviewDiagram)&#xA;&#x9;&#x9;&#x9;&#x9;'reload diagram&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(overviewDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Finished!&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;&#xA;&#xA;function resizeBoundaries ( boundaries, totalwidth)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;for each diagramObject in boundaries&#xA;&#x9;&#x9;diagramObject.right = totalwidth - diagramObject.left&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addBoundary(processIDPath, diagram, boundaries, sequenceNumber)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim processID&#xA;&#x9;dim processIDs&#xA;&#x9;processIDs = Split(processIDPath, &quot;.&quot;) &#xA;&#x9;&#xA;&#x9;dim level &#xA;&#x9;level = Ubound(processIDs) &#xA;&#x9;&#xA;&#x9;if level &lt; 0 then&#xA;&#x9;&#x9;processID = processIDPath&#xA;&#x9;&#x9;level = 0&#xA;&#x9;else&#xA;&#x9;&#x9;processID = processIDs(level)&#xA;&#x9;end if&#xA;&#x9;'debug&#xA;&#x9;'Session.Output &quot;processIDPath: &quot; &amp; processIDPath &amp; &quot; level: &quot; &amp; level &amp; &quot; processID: &quot; &amp; processID&#xA;&#x9;'check if the last instance of the boundaries with this level is is the same process&#xA;&#x9;set diagramObject = getLastBoundaryWithLevel(level, boundaries)&#xA;&#x9;dim boundary as EA.Element&#xA;&#x9;dim foundit&#xA;&#x9;foundit = false&#xA;&#x9;if not diagramObject is nothing then&#xA;&#x9;&#x9;'check if the diagramObject is about the same process&#xA;&#x9;&#x9;set boundary = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;'Session.Output &quot;boundary.Alias: &quot; &amp; boundary.Alias &amp; &quot; processID: &quot; &amp; processID &amp; &quot; boundary.Alias = processID &quot; &amp; (boundary.Alias = processID )&#xA;&#x9;&#x9;if boundary.Alias = processIDPath then&#xA;&#x9;&#x9;&#x9;'found it. Elongate the diagramObject&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = (YoffSet + (YIncrement * (sequenceNumber + 1))) * -1&#xA;&#x9;&#x9;&#x9;'save the diagram object&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;foundit = true&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'do the &quot;parent&quot; boundaries first&#xA;&#x9;if level &gt; 0 then&#xA;&#x9;&#x9;'remove the last ID form the processIDPath to go one level up&#xA;&#x9;&#x9;dim lastDelimiter&#xA;&#x9;&#x9;lastDelimiter = InstrRev(processIDPath, &quot;.&quot;)&#xA;&#x9;&#x9;dim newProcessIDPath &#xA;&#x9;&#x9;newProcessIDPath = left(processIDPath, lastDelimiter -1)&#xA;&#x9;&#x9;'make or elongate the parent&#xA;&#x9;&#x9;addBoundary newProcessIDPath, diagram, boundaries, sequenceNumber&#xA;&#x9;end if&#xA;&#x9;if not foundit = true then&#xA;&#x9;&#x9;'get the diagram parent element&#xA;&#x9;&#x9;dim diagramOwner as EA.Element&#xA;&#x9;&#x9;set diagramOwner = Repository.GetElementByID(diagram.parentID)&#xA;&#x9;&#x9;'get the owning process for the message flow&#xA;&#x9;&#x9;dim process as EA.Element&#xA;&#x9;&#x9;set process = Repository.GetElementByID(processID)&#xA;&#x9;&#x9;'create a new boundary&#xA;&#x9;&#x9;set boundary = diagramOwner.Elements.AddNew(&quot;&quot;, &quot;Boundary&quot;)&#xA;&#x9;&#x9;'set the TreePos so we remember which process is used&#xA;&#x9;&#x9;boundary.TreePos = processID&#xA;&#x9;&#x9;'set the Alias to the alias of the messageFlow&#xA;&#x9;&#x9;boundary.Alias = processIDPath&#xA;&#x9;&#x9;'borderstyle&#xA;&#x9;&#x9;dim borderstyle&#xA;&#x9;&#x9;set borderstyle = boundary.Properties(&quot;BorderStyle&quot;)&#xA;&#x9;&#x9;borderstyle.Value = &quot;Dotted&quot;&#xA;&#x9;&#x9;if level &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim colorIndex&#xA;&#x9;&#x9;&#x9;colorIndex = level  MOD (UBound(colors) +1)&#xA;&#x9;&#x9;&#x9;'color&#xA;&#x9;&#x9;&#x9;boundary.SetAppearance 1,0,colors(colorIndex) 'groen&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'save the boundary&#xA;&#x9;&#x9;boundary.Update&#xA;&#x9;&#x9;'create a new diagramObject for the boundary&#xA;&#x9;&#x9;dim positionString&#xA;&#x9;&#x9;positionString =  &quot;l=&quot; &amp; boundaryX * (level +1) &amp; &quot;;r=&quot; &amp; 1000 &amp; &quot;;t=&quot; &amp; YoffSet + (YIncrement * sequenceNumber) &amp; &quot;;b=&quot; &amp; YoffSet + (YIncrement * (sequenceNumber + 1)) &amp; &quot;;&quot;&#xA;&#x9;&#x9;'debug&#xA;&#x9;&#x9;'Session.Output &quot;positionString for boundary &quot; &amp; process.Name &amp; &quot;: &quot; &amp; positionString&#xA;&#x9;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;&#x9;diagramObject.ElementID = boundary.ElementID&#xA;&#x9;&#x9;diagramObject.Sequence = 10 - level&#xA;&#x9;&#x9;'save the diagram object&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;'add the diagramObject tot the list of boundaries&#xA;&#x9;&#x9;boundaries.Add diagramObject &#xA;&#x9;&#x9;'add the text element&#xA;&#x9;&#x9;dim hyperlink as EA.Element&#xA;&#x9;&#x9;dim hyperlinkName&#xA;&#x9;&#x9;dim compositeDiagramID&#xA;&#x9;&#x9;hyperlinkName = &quot;$diagram://&quot;&#xA;&#x9;&#x9;if not process.CompositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;hyperlinkName = hyperlinkName &amp; process.CompositeDiagram.DiagramGUID&#xA;&#x9;&#x9;&#x9;compositeDiagramID = process.CompositeDiagram.DiagramID&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;hyperlinkName = hyperlinkName &amp; diagram.DiagramGUID&#xA;&#x9;&#x9;&#x9;compositeDiagramID = diagram.DiagramID&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;set hyperlink = diagramOwner.Elements.AddNew(hyperlinkName, &quot;Text&quot;)&#xA;&#x9;&#x9;hyperlink.Notes = process.Name&#xA;&#x9;&#x9;hyperlink.Update&#xA;&#x9;&#x9;'set the link to the composite diagram&#xA;&#x9;&#x9;dim hyperlinkSQL&#xA;&#x9;&#x9;hyperlinkSQL = &quot;update t_object set PDATA1 = &quot; &amp; compositeDiagramID &amp; &quot; where Object_ID = &quot; &amp; hyperlink.ElementID&#xA;&#x9;&#x9;Repository.Execute hyperlinkSQL&#xA;&#x9;&#x9;'add the hyperlink to the diagram&#xA;&#x9;&#x9;positionstring = &quot;l=&quot; &amp; boundaryX * (level +1) &amp; &quot;;r=&quot; &amp; 500 &amp; &quot;;t=&quot; &amp; YoffSet + (YIncrement * sequenceNumber) &amp; &quot;;b=&quot; &amp;  YoffSet + (YIncrement * sequenceNumber) + 10 &amp; &quot;;&quot;&#xA;&#x9;&#x9;dim hyperlinkDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;set hyperlinkDiagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;&#x9;hyperlinkDiagramObject.SetStyleEx &quot;HideIcon&quot;,&quot;1&quot;&#xA;&#x9;&#x9;hyperlinkDiagramObject.ElementID = hyperlink.ElementID&#xA;&#x9;&#x9;hyperlinkDiagramObject.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getLastBoundaryWithLevel(level, boundaries)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set diagramObject = nothing&#xA;&#x9;set getLastBoundaryWithLevel = nothing&#xA;&#x9;dim i&#xA;&#x9;for i = boundaries.Count -1  to O step -1&#xA;&#x9;&#x9;set diagramObject = boundaries(i)&#xA;&#x9;&#x9;'debug&#xA;&#x9;&#x9;'Session.Output &quot;level: &quot; &amp; level &amp; &quot; diagramObject.left: &quot; &amp; diagramObject.left &amp; &quot; diagramObject.left / boundaryX: &quot; &amp; diagramObject.left / boundaryX&#xA;&#x9;&#x9;if (diagramObject.left / boundaryX) = (level + 1) then&#xA;&#x9;&#x9;&#x9;'debug &#xA;&#x9;&#x9;&#x9;'Session.Output &quot;found one!&quot;&#xA;&#x9;&#x9;&#x9;'found one with the same level&#xA;&#x9;&#x9;&#x9;set getLastBoundaryWithLevel = diagramObject&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setMessagesAsynchronous (diagram)&#xA;'There no clean way to do it we we do it with a dirty SQL update&#xA;&#x9;if (diagram.DiagramID &gt; 0) then&#xA;&#x9;&#x9;dim sqlupdate &#xA;&#x9;&#x9;sqlupdate = &quot;update t_connector set PDATA1 = 'Asynchronous' where DiagramID =&quot; &amp; diagram.DiagramID&#xA;&#x9;&#x9;Repository.Execute sqlupdate&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function reorderLifeLines(diagram)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim xpos&#xA;&#x9;xpos = 50&#xA;&#x9;dim cmsName&#xA;&#x9;cmsName = &quot;Central Market System&quot;&#xA;&#x9;dim backendName&#xA;&#x9;backendName = &quot;DGO-BE System&quot;&#xA;&#x9;dim backendAdded&#xA;&#x9;backendAdded = false&#xA;&#x9;dim orderedDiagramObjects&#xA;&#x9;Set orderedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim classifier as EA.Element&#xA;&#x9;'reorder them in a new arraylist&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set classifier = getDiagramObjectClassifier(diagramObject)&#xA;&#x9;&#x9;if not classifier is nothing then&#xA;&#x9;&#x9;&#x9;if classifier.Name = backendName then&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;backendAdded = true&#xA;&#x9;&#x9;&#x9;elseif classifier.Name = cmsName then&#xA;&#x9;&#x9;&#x9;&#x9;if not backendAdded then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert orderedDiagramObjects.Count -1, diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert 0, diagramObject&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'reset their positions&#xA;&#x9;for each diagramObject in orderedDiagramObjects&#xA;&#x9;&#x9;diagramObject.left = xpos&#xA;&#x9;&#x9;diagramObject.right = xpos + defaultwidth&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;xpos = xpos + xIncrement&#xA;&#x9;next&#xA;&#x9;reorderLifeLines = xpos&#xA;end function&#xA;&#xA;function getDiagramObjectClassifier(diagramObject)&#xA;&#x9;set getDiagramObjectClassifier = nothing&#xA;&#x9;dim instance as EA.Element&#xA;&#x9;set instance = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;if not instance is nothing and instance.ClassifierID &gt; O then&#xA;&#x9;&#x9;set getDiagramObjectClassifier = Repository.GetElementByID(instance.ClassifierID)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function addMessageFlowToDiagram(messageFlow, diagram, process, sequenceNumber)&#xA;&#x9;'get the start and end element&#xA;&#x9;dim startElement as EA.Element&#xA;&#x9;dim startDiagramObject as EA.DiagramObject&#xA;&#x9;dim endElement as EA.Element&#xA;&#x9;dim endDiagramObject as EA.DiagramObject&#xA;&#x9;dim startClassifier as EA.Element&#xA;&#x9;dim endClassifier as EA.Element&#xA;&#x9;dim startLifeLine as EA.Element&#xA;&#x9;dim endLifeLine as EA.Element&#xA;&#x9;dim sequenceMessage as EA.Connector&#xA;&#x9;set startElement = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#x9;set endElement = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#x9;if not startElement is nothing AND not endElement is nothing then&#xA;&#x9;&#x9;'debug&#xA;&#x9;&#x9;'Session.Output &quot;start and endElement found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#x9;&#x9;set startClassifier = getElementClassifier(startElement)&#xA;&#x9;&#x9;set endClassifier = getElementClassifier(endElement)&#xA;&#x9;&#x9;if not startClassifier is nothing AND not endClassifier is nothing then&#xA;&#x9;&#x9;&#x9;'add message between start and end&#xA;&#x9;&#x9;&#x9;'debug&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;start and endClassifier found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#x9;&#x9;&#x9;set startLifeLine = getInstanceForClassifier(startClassifier, diagram, process)&#xA;&#x9;&#x9;&#x9;set endLifeLine = getInstanceForClassifier(endClassifier, diagram, process)&#xA;&#x9;&#x9;&#x9;if not startLifeLine is nothing and not endLifeLine is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;start and endLifeLine found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#x9;&#x9;&#x9;&#x9;set sequenceMessage = addSequenceMessage(messageFlow, startLifeLine,endLifeLine,sequenceNumber)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;function getInstanceForClassifier(classifier, diagram, process)&#xA;&#x9;set getInstanceForClassifier = nothing&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;'get the element&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if (not element is nothing) and element.ClassifierID = classifier.ElementID then&#xA;&#x9;&#x9;&#x9;set getInstanceForClassifier = element&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if not already existing then add new one&#xA;&#x9;if getInstanceForClassifier is nothing then&#xA;&#x9;&#x9;set getInstanceForClassifier = addNewLifeline(classifier,process)&#xA;&#x9;&#x9;'add it to the diagram&#xA;&#x9;&#x9;addElementToDiagram getInstanceForClassifier, diagram, 50, 50 &#xA;&#x9;&#x9;'Make sure the diagram knows that there is a new diagramObject&#xA;&#x9;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function addNewLifeline(classifier,process)&#xA;&#x9;dim lifeLine as EA.Element&#xA;&#x9;set lifeLine = nothing&#xA;&#x9;set lifeLine = process.Elements.AddNew(&quot;&quot;,&quot;Object&quot;)&#xA;&#x9;if not lifeLine is nothing then&#xA;&#x9;&#x9;lifeLine.ClassifierID = classifier.ElementID&#xA;&#x9;&#x9;lifeLine.Update&#xA;&#x9;end if&#xA;&#x9;set addNewLifeline = lifeline&#xA;end function&#xA;&#xA;function addSequenceMessage(messageFlow, startLifeLine,endLifeLine,sequenceNumber)&#xA;&#x9;set addSequenceMessage = nothing&#xA;&#x9;dim sequenceConnector as EA.Connector&#xA;&#x9;dim messageName&#xA;&#x9;messageName = &quot;&quot;&#xA;&#x9;'get the name of the sequence message&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#x9;dim messageElement as EA.Element&#xA;&#x9;'Get the messageRef tagged value&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; O then&#xA;&#x9;&#x9;&#x9; set messageElement = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#x9;&#x9;&#x9; if not messageElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;messageName = messageElement.Name&#xA;&#x9;&#x9;&#x9; end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if len(messageName) = 0 then&#xA;&#x9;&#x9;dim intermediateEvent as EA.Element&#xA;&#x9;&#x9;set intermediateEvent = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#x9;&#x9;if intermediateEvent.Stereotype &lt;&gt; &quot;IntermediateEvent&quot; then&#xA;&#x9;&#x9;set intermediateEvent = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;messageName = intermediateEvent.Name &amp; &quot;[MessagRef tag missing!]&quot;&#xA;&#x9;end if&#xA;&#x9;'debug&#xA;&#x9;'messageName = messageFlow.Alias &amp; &quot;.&quot; &amp; messageName &#xA;&#x9;'add the connector&#xA;&#x9;set sequenceConnector = startLifeLine.Connectors.AddNew(messageName,&quot;Sequence&quot;)&#xA;&#x9;sequenceConnector.SupplierID = endLifeLine.ElementID&#xA;&#x9;sequenceConnector.SequenceNo = sequenceNumber&#xA;&#x9;sequenceConnector.ClientEnd.Constraint = messageFlow.Name&#xA;&#x9;sequenceConnector.Update&#xA;&#x9;set addSequenceMessage = sequenceConnector&#xA;end function&#xA;&#xA;&#xA;&#xA;function getElementClassifier(element)&#xA;&#x9;'Initialise&#xA;&#x9;set getElementClassifier = nothing&#xA;&#x9;dim currentElement as EA.Element&#xA;&#x9;set currentElement = element&#xA;&#x9;dim pool as EA.Element&#xA;&#x9;'intermediate event&#xA;&#x9;if currentElement.Type = &quot;Event&quot; and currentElement.ParentID &gt; 0 then&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentElement.ParentID)&#xA;&#x9;end if&#xA;&#x9;'lane&#xA;&#x9;if currentElement.Type = &quot;ActivityPartition&quot; and currentElement.Stereotype = &quot;Lane&quot; AND currentElement.ParentID &gt; 0 then&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentElement.ParentID)&#xA;&#x9;end if&#xA;&#x9;'Pool&#xA;&#x9;if currentElement.Type = &quot;ActivityPartition&quot; and currentElement.Stereotype = &quot;Pool&quot; AND currentElement.ClassfierID &gt; 0 then&#xA;&#x9;&#x9;set getElementClassifier = Repository.GetElementByID(currentElement.ClassfierID)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getXpos(element)&#xA;&#x9;getXpos = lpos&#xA;&#x9;if element.Type = &quot;Event&quot; then&#xA;&#x9;&#x9;getXpos = mpos&#xA;&#x9;elseif element.Type = &quot;ActivityPartition&quot; then&#xA;&#x9;&#x9;getXpos = lpos&#xA;&#x9;&#x9;'DGO-BE- System is the only one that should be on the right side.&#xA;&#x9;&#x9;if element.ClassfierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim actor&#xA;&#x9;&#x9;&#x9;set actor = Repository.GetElementByID(element.ClassfierID)&#xA;&#x9;&#x9;&#x9;if not actor is nothing AND actor.name = &quot;DGO-BE System&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;getXpos = rpos&#xA;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function addMessageRefToDiagram(messageFlow, diagram, y, x,process)&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#x9;dim messageElement as EA.Element&#xA;&#x9;'Get the messageRef tagged value&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; O then&#xA;&#x9;&#x9;&#x9; set messageElement = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#x9;&#x9;&#x9; if not messageElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'add a local object for the message&#xA;&#x9;&#x9;&#x9;&#x9;dim messageObject as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;set messageObject = process.Elements.AddNew(&quot;&quot;, &quot;Object&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;messageObject.ClassfierID = messageElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;synchronizeElement messageObject&#xA;&#x9;&#x9;&#x9;&#x9;'add a diagramObject for the local object&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;set diagramObject = addElementToDiagram(messageObject, diagram, y , x)&#xA;&#x9;&#x9;&#x9;&#x9;setFontOnDiagramObject diagramObject, &quot;Arial Narrow&quot;, 12&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9; end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getConnectorTag(messageFlow, tagName)&#xA;&#x9;dim connectorTag as EA.ConnectorTag&#xA;&#x9;set getConnectorTag = nothing&#xA;&#x9;for each connectorTag in messageFlow.TaggedValues&#xA;&#x9;&#x9;if connectorTag.Name = tagName then&#xA;&#x9;&#x9;&#x9;set getConnectorTag = connectorTag&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim positionString&#xA;&#x9;'determine height and width&#xA;&#x9;dim width &#xA;&#x9;dim height&#xA;&#x9;dim elementType&#xA;&#x9;dim setVPartition &#xA;&#x9;setVPartition = false&#xA;&#x9;elementType = element.Type&#xA;&#x9;select case elementType       &#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;'default width and height&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#x9;end select&#xA;&#x9;if diagram.Type = &quot;Sequence&quot; then&#xA;&#x9;&#x9;width = 90&#xA;&#x9;&#x9;height = 150&#xA;&#x9;end if&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#x9;x = x - width/2&#xA;&#x9;'set the position of the diagramObject&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;if setVPartition then&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;end function&#xA;&#xA;function messageFlowIsOnDiagram(messageFlow, diagram)&#xA;&#x9;dim beginElement as EA.DiagramObject&#xA;&#x9;dim endElement as EA.DiagramObject&#xA;&#x9;set beginElement = getDiagramObjectForElementID(messageFlow.ClientID, diagram)&#xA;&#x9;set endElement = getDiagramObjectForElementID(messageFlow.SupplierID, diagram)&#xA;&#x9;if not beginElement is nothing and not endElement is nothing then&#xA;&#x9;&#x9;messageFlowIsOnDiagram = true&#xA;&#x9;else&#xA;&#x9;&#x9;messageFlowIsOnDiagram = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns all owned messages of this process and of its subprocesses.&#xA;function getOwnedMessageFlows(process, level, processIDPath)&#xA;&#x9;dim messageflows&#xA;&#x9;dim messageFlowLinks&#xA;&#x9;dim messageHeights&#xA;&#x9;Set messageflows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;Set messageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;' find the composite diagam for the selected element&#xA;&#x9;dim compositeDiagram as EA.Diagram&#xA;&#x9;set compositeDiagram = process.CompositeDiagram &#xA;&#x9;' Make a list of all MessageFlows, ordered by their vertical starting position&#xA;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#x9;&#x9;dim messageFlow as EA.Connector&#xA;&#x9;&#x9;for each messageFlowLink in compositeDiagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;if messageFlowLink.IsHidden = false then&#xA;&#x9;&#x9;&#x9;&#x9;set messageFlow = Repository.GetConnectorByID(messageFlowLink.ConnectorID)&#xA;&#x9;&#x9;&#x9;&#x9;dim isOnDiagram&#xA;&#x9;&#x9;&#x9;&#x9;isOnDiagram = messageFlowIsOnDiagram(messageFlow, compositeDiagram)&#xA;&#x9;&#x9;&#x9;&#x9;if isOnDiagram and messageFlow.Stereotype = &quot;MessageFlow&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'ok, found a messageflow, add messageFlow and messageFlowLink&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the RouteStyle to store the process id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.RouteStyle = process.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the SequenceNo to store the level&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.SequenceNo = level&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the alias field to store the processIDPath&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.Alias = processIDPath&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlows.Add messageFlow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlowLinks.Add messageFlowLink&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'sort the messageflows by their location in the diagram&#xA;&#x9;&#x9;set messageHeights = sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram )&#xA;&#x9;&#x9;' Make a list of all Activities on the diagram ordered by their vertical position. (if equal from left to right)&#xA;&#x9;&#x9;dim sortedActivities&#xA;&#x9;&#x9;set sortedActivities = getOrderedActivities(compositeDiagram)&#xA;&#x9;&#x9;'Do the same thing for each Activity and add those messageflows to the list&#xA;&#x9;&#x9;dim sortedActivity as EA.Element&#xA;&#x9;&#x9;dim indexShift&#xA;&#x9;&#x9;indexShift = 0&#xA;&#x9;&#x9;for each sortedActivity in sortedActivities&#xA;&#x9;&#x9;&#x9;dim ownedMessageFlows&#xA;&#x9;&#x9;&#x9;set ownedMessageFlows = getOwnedMessageFlows(sortedActivity, level +1, processIDPath &amp; &quot;.&quot; &amp; sortedActivity.ElementID)&#xA;&#x9;&#x9;&#x9;if ownedMessageFlows.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'Check the height of the sorted activity against the sorted messageHeights&#xA;&#x9;&#x9;&#x9;&#x9;dim activityDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;set activityDiagramObject = getDiagramObjectForElementID(sortedActivity.ElementID, compositeDiagram)&#xA;&#x9;&#x9;&#x9;&#x9;dim heightindex&#xA;&#x9;&#x9;&#x9;&#x9;heightindex = getHeightIndex(messageHeights,activityDiagramObject.top)&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;heightindex for &quot; &amp; sortedActivity.Name &amp; &quot;with activityDiagramObject.top: &quot; &amp; activityDiagramObject.top &amp;  &quot; heightindex : &quot; &amp; heightindex&#xA;&#x9;&#x9;&#x9;&#x9;'insert the messageflows at the heightindex + indexShift&#xA;&#x9;&#x9;&#x9;&#x9;dim insertIndex&#xA;&#x9;&#x9;&#x9;&#x9;insertIndex = heightindex + indexShift&#xA;&#x9;&#x9;&#x9;&#x9;dim j&#xA;&#x9;&#x9;&#x9;&#x9;for j = ownedMessageFlows.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;inserting: &quot; &amp; ownedMessageFlows(j).Name &amp; &quot; before: &quot; &amp; messageflows(insertIndex).Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageflows.Insert insertIndex, ownedMessageFlows(j)&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;'calculate new index shift&#xA;&#x9;&#x9;&#x9;&#x9;indexShift = IndexShift + ownedMessageFlows.Count&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#x9;set getOwnedMessageFlows = messageFlows&#xA;end function&#xA;&#xA;function getHeightIndex(messageHeights, height)&#xA;&#x9;dim i &#xA;&#x9;getHeightIndex = messageHeights.Count&#xA;&#x9;for i = 0 to messageHeights.Count -1&#xA;&#x9;&#x9;'Session.Output &quot;height: &quot; &amp; height &amp; &quot;messageHeights(i): &quot; &amp; messageHeights(i) &#xA;&#x9;&#x9;if height &gt; messageHeights(i) then&#xA;&#x9;&#x9;&#x9;getHeightIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getOrderedActivities(diagram)&#xA;&#x9;'loop all diagram object&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim orderedActivities&#xA;&#x9;dim orderedDiagramObjects&#xA;&#x9;set orderedActivities = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;set orderedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if not element is nothing and element.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;dim added &#xA;&#x9;&#x9;&#x9;added = false&#xA;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;for i = 0 to orderedDiagramObjects.Count - 1&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.top = orderedDiagramObjects(i).top then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'height is equal, check x position&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.left &lt;= orderedDiagramObjects(i).left then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert i, diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;orderedActivities.Insert i, element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;elseif diagramObject.top &gt; orderedDiagramObjects(i).top then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add before&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert i, diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedActivities.Insert i, element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'if not added yet then add it to the back of the list&#xA;&#x9;&#x9;&#x9;if not added then&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#x9;&#x9;&#x9;&#x9;orderedActivities.Add element&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getOrderedActivities = orderedActivities&#xA;end function&#xA;&#xA;function sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram)&#xA;&#x9;dim messageFlow as EA.Connector&#xA;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#x9;dim sortedMessageFlows&#xA;&#x9;dim sortedMessageFlowLinks&#xA;&#x9;dim sortedHeights&#xA;&#x9;Set sortedMessageFlows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;Set sortedMessageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;Set sortedHeights = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim i&#xA;&#x9;for i = 0 to messageFlows.Count -1&#xA;&#x9;&#x9;set messageFlow = messageFlows(i)&#xA;&#x9;&#x9;set messageFlowLink = messageFlowLinks(i)&#xA;&#x9;&#x9;dim height&#xA;&#x9;&#x9;height = getStartingHeight(messageFlow, messageFlowLink,compositeDiagram)&#xA;&#x9;&#x9;dim added&#xA;&#x9;&#x9;added = false&#xA;&#x9;&#x9;'loop the already sorted elements&#xA;&#x9;&#x9;dim j&#xA;&#x9;&#x9;for j = 0 to sortedMessageFlows.Count -1&#xA;&#x9;&#x9;&#x9;dim sortedHeight&#xA;&#x9;&#x9;&#x9;sortedHeight = sortedHeights(j)&#xA;&#x9;&#x9;&#x9;if sortedHeight &lt;= height then&#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlows.Insert j, messageFlow &#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Insert j, messageFlowLink&#xA;&#x9;&#x9;&#x9;&#x9;sortedHeights.Insert j, height&#xA;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if it is the first element then just add it&#xA;&#x9;&#x9;if not added then&#xA;&#x9;&#x9;&#x9;sortedMessageFlows.Add messageFlow&#xA;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Add messageFlowLink&#xA;&#x9;&#x9;&#x9;sortedHeights.Add height&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;set messageFlows = sortedMessageFlows&#xA;&#x9;set messageFlowLinks = sortedMessageFlowLinks&#xA;&#x9;set sortMessageFlows = sortedHeights&#xA;end function&#xA;&#xA;&#xA;function getStartingHeight(connector, diagramLink, diagram)&#xA;&#x9;'check start element&#xA;&#x9;dim startElement as EA.Element&#xA;&#x9;dim elementID&#xA;&#x9;set startElement = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;elementID = startElement.ElementID&#xA;&#x9;if startElement.Type = &quot;ActivityPartition&quot; then&#xA;&#x9;&#x9;'check end element&#xA;&#x9;&#x9;dim endElement as EA.Element&#xA;&#x9;&#x9;set endElement = Repository.GetElementByID(connector.SupplierID)&#xA;&#x9;&#x9;if endElement.Type &lt;&gt; &quot;ActivityPartition&quot; then&#xA;&#x9;&#x9;&#x9;elementID = endElement.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set diagramObject = getDiagramObjectForElementID(ElementID, diagram)&#xA;&#x9;if not diagramObject is nothing then&#xA;&#x9;&#x9;getStartingHeight = diagramObject.top&#xA;&#x9;else&#xA;&#x9;&#x9;getStartingHeight = 0&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getDiagramObjectForElementID(elementID, diagram)&#xA;&#x9;set getDiagramObjectForElementID = nothing&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if diagramObject.ElementID = elementID then&#xA;&#x9;&#x9;&#x9;set getDiagramObjectForElementID = diagramObject&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;&#xA;function setLinkStyles(overviewDiagram)&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#x9;for each diagramLink in overviewDiagram.DiagramLinks&#xA;&#x9;&#x9;dim styleParts&#xA;&#x9;&#x9;styleParts = Split (diagramLink.Style, &quot;;&quot;) &#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;dim stylepart&#xA;&#x9;&#x9;dim modepart &#xA;&#x9;&#x9;modepart = &quot;Mode=2&quot;&#xA;&#x9;&#x9;dim modeSet&#xA;&#x9;&#x9;modeSet = false&#xA;&#x9;&#x9;dim treepart&#xA;&#x9;&#x9;treepart = &quot;TREE=OR&quot;&#xA;&#x9;&#x9;dim treeSet&#xA;&#x9;&#x9;treeSet = false&#xA;&#x9;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;stylepart: &quot; &amp; stylepart &amp; &quot;, i: &quot; &amp; i &amp; &quot;, Instr(stylepart,Mode=): &quot; &amp; Instr(stylepart,&quot;Mode=&quot;)&#xA;&#x9;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt;= 0 then&#xA;&#x9;&#x9;&#x9;&#x9;styleParts(i) = modepart&#xA;&#x9;&#x9;&#x9;&#x9;modeSet = true&#xA;'&#x9;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt;= 0 then&#xA;'&#x9;&#x9;&#x9;&#x9;styleParts(i) = treepart&#xA;'&#x9;&#x9;&#x9;&#x9;treeSet = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;diagramLink.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;&#x9;if not modeSet then&#xA;&#x9;&#x9;&#x9;if len(diagramLink.Style) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Style = modepart &amp; &quot;;&quot;&amp; diagramLink.Style&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Style = modepart &amp; &quot;;&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;'&#x9;&#x9;if not treeSet then&#xA;'&#x9;&#x9;&#x9;diagramLink.Style = diagramLink.Style &amp; &quot;;&quot; &amp; treepart&#xA;'&#x9;&#x9;end if&#xA;&#x9;&#x9;diagramLink.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getOwnedDiagramByName(element, diagramName)&#xA;&#x9;set getOwnedDiagramByName = nothing&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;for each diagram in element.Diagrams&#xA;&#x9;&#x9;if diagram.Name = diagramName then&#xA;&#x9;&#x9;&#x9;set getOwnedDiagramByName = diagram&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="155"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{24185387-8E18-43D5-84C2-CFC1C435D143}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Reverse Synchronize&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;' Script Name: Reverse Synchronize&#xA;' Author: Geert Bellekens&#xA;' Purpose: Synchronises the names of the referencing elements/instances with this/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;' Date: 19/03/2015&#xA;'&#xA;&#xA;&#xA;sub main&#xA;&#x9;' get the selected element&#xA;&#x9;dim counter&#xA;&#x9;counter = 0&#xA;&#x9;dim errors &#xA;&#x9;errors = &quot;&quot;&#xA;&#x9;dim classifier as EA.Element&#xA;&#x9;set classifier = Repository.GetTreeSelectedObject&#xA;&#x9;if classifier.ObjectType = otElement then&#xA;&#x9;&#x9;dim query&#xA;&#x9;&#x9;query = &quot;&quot;&#xA;&#x9;&#x9;dim instances&#xA;&#x9;&#x9;set instances = nothing&#xA;&#x9;&#x9;if classifier.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'synchronize calling activities&#xA;&#x9;&#x9;&#x9;query = &quot;select o.Object_ID &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;from (t_object o &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;inner join t_objectproperties tv on tv.Object_ID = o.Object_ID) &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where tv.value = '&quot; &amp; classifier.ElementGUID &amp; &quot;' &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and tv.[Property] = 'calledActivityRef'&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'synchronize instances&#xA;&#x9;&#x9;&#x9;query = &quot;select o.Object_ID from t_object o where o.Classifier &gt; 0 and o.Classifier = &quot; &amp; classifier.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if len(query) &gt; 0 then&#xA;&#x9;&#x9;&#x9;set instances = Repository.GetElementSet(query, 2)&#xA;&#x9;&#x9;&#x9;dim instance as EA.Element&#xA;&#x9;&#x9;&#x9;for each instance in instances&#xA;&#x9;&#x9;&#x9;&#x9;'apply userlock&#xA;&#x9;&#x9;&#x9;&#x9;dim locked&#xA;&#x9;&#x9;&#x9;&#x9;locked = instance.ApplyUserLock()&#xA;&#x9;&#x9;&#x9;&#x9;'synchronize&#xA;&#x9;&#x9;&#x9;&#x9;if locked then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;synchronizeElement instance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'up the counter&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;counter = counter +1&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'element could not be synchronized&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(errors) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;errors = &quot;But could not synchronize: &quot; &amp; vbNewLine&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim instancePackage as EA.Package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set instancePackage = Repository.GetPackageByID(instance.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;errors = errors &amp; instancePackage.Name &amp; &quot;.&quot; &amp; instance.Name &amp; vbNewLine&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;dim message&#xA;&#x9;message = &quot;Reverse Synchronize updated &quot; &amp; counter &amp; &quot; elements&quot;&#xA;&#x9;if len(errors) &gt; 0 then&#xA;&#x9;&#x9;message = message &amp; vbNewLine &amp; errors&#xA;&#x9;end if&#xA;&#x9;MsgBox message&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="156"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C4880F95-59F5-4F33-B335-E2FE748BB768}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set TimeSlicing and Versioning&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;' Script Name: Set Timeslicing and versioning tagged values&#xA;' Author: Geert Bellekens&#xA;' Purpose: Sets the timeslicing and versioning tagged values to no if they are still TBD&#xA;' Date: 29/01/2016&#xA;'&#xA;&#xA;'Constants&#xA;dim TimeSlicingValue, VersioningValue, TimeSlicingName, VersioningName, TBDValue&#xA;TimeSlicingName = &quot;Timesliced&quot;&#xA;VersioningName = &quot;Versioned&quot;&#xA;&#xA;TimeSlicingValue = &quot;no&quot;&#xA;VersioningValue = &quot;no&quot;&#xA;TBDValue = &quot;TBD&quot;&#xA;&#xA;sub main&#xA;&#x9;dim response&#xA;&#x9;response = Msgbox(&quot;Click on the value for timeslicing and versioning.&quot;, vbYesNoCancel+vbQuestion, &quot;Set Timeslicing and Versioning&quot;)&#xA;&#x9;if response = vbYes then&#xA;&#x9;&#x9;TimeSlicingValue = &quot;yes&quot;&#xA;&#x9;&#x9;VersioningValue = &quot;yes&quot;&#xA;&#x9;elseif response = vbNo then&#xA;&#x9;&#x9;TimeSlicingValue = &quot;no&quot;&#xA;&#x9;&#x9;VersioningValue = &quot;no&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;exit sub&#xA;&#x9;end if&#xA;&#x9;' get the selected element&#xA;&#x9;&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;set classElement = Repository.GetContextObject&#xA;&#x9;if classElement.ObjectType = otElement then&#xA;&#x9;&#x9;'make sure the tags are there&#xA;&#x9;&#x9;addTaggedValuesToElement classElement&#xA;&#x9;&#x9;'set on element&#xA;&#x9;&#x9;setTags classElement.TaggedValues&#xA;&#x9;&#x9;'set on attributes&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;for each attribute in classElement.Attributes&#xA;&#x9;&#x9;&#x9;setTags attribute.TaggedValues&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'set on connectors for which this element is the source&#xA;&#x9;&#x9;dim connector as EA.Connector&#xA;&#x9;&#x9;for each connector in classElement.Connectors&#xA;&#x9;&#x9;&#x9;if connector.ClientID = classElement.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;setTags connector.TaggedValues&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub setTags (taggedValues)&#xA;&#x9;taggedValues.Refresh&#xA;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;for each tag in taggedValues&#xA;&#x9;&#x9;if tag.Value = TBDValue then&#xA;&#x9;&#x9;&#x9;if tag.Name = TimeSlicingName then&#xA;&#x9;&#x9;&#x9;&#x9;tag.Value = TimeSlicingValue&#xA;&#x9;&#x9;&#x9;&#x9;tag.Update&#xA;&#x9;&#x9;&#x9;elseif tag.Name = VersioningName then&#xA;&#x9;&#x9;&#x9;&#x9;tag.Value = VersioningValue&#xA;&#x9;&#x9;&#x9;&#x9;tag.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;&#xA;function addTaggedValuesToElement(element)&#xA;&#x9;'log progress&#xA;&#x9;'Repository.WriteOutput &quot;FixLDM&quot;,&quot;Processing: &quot; &amp; element.Name,0&#xA;&#x9;'add tagged values to this element&#xA;&#x9;addTaggedValues element&#xA;&#x9;'add tagged values to all attributes of this element&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;addTaggedValues attribute&#xA;&#x9;next&#xA;&#x9;'add tagged values to all associations or aggregations of this element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;if connector.Type = &quot;Association&quot; or connector.Type = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;&#x9;addTaggedValues connector&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'process all subElements&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;addTaggedValues subElement&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addTaggedValues (item)&#xA;&#x9;dim tv&#xA;&#x9;dim TSExist&#xA;&#x9;dim VExist&#xA;&#x9;TSExist = false&#xA;&#x9;VExist = false&#xA;&#x9;'first check if it exists&#xA;&#x9;for each tv in item.TaggedValues&#xA;&#x9;&#x9;if tv.Name = &quot;Versioned&quot; then&#xA;&#x9;&#x9;&#x9;VExist = true&#xA;&#x9;&#x9;elseif tv.Name = &quot;Timesliced&quot; then&#xA;&#x9;&#x9;&#x9;TSExist = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if not create the tagged values&#xA;&#x9;if not VExist then&#xA;&#x9;&#x9;set tv = item.TaggedValues.AddNew(&quot;Versioned&quot;,&quot;&quot;)&#xA;&#x9;&#x9;tv.Value = &quot;TBD&quot;&#xA;&#x9;&#x9;tv.Update&#xA;&#x9;&#x9;item.Update&#xA;&#x9;end if&#xA;&#x9;if not TSExist then&#xA;&#x9;&#x9;set tv = item.TaggedValues.AddNew(&quot;Timesliced&quot;,&quot;&quot;)&#xA;&#x9;&#x9;tv.Value = &quot;TBD&quot;&#xA;&#x9;&#x9;tv.Update&#xA;&#x9;&#x9;item.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function switchAttrAliasAndNameOnElement(element)&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim tempAlias&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;'log progress&#xA;&#x9;'Repository.WriteOutput &quot;FixLDM&quot;,&quot;Processing: &quot; &amp; element.Name,0&#xA;&#x9;'first do all owned attributes&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if len(attribute.Alias) &gt; 0 then&#xA;&#x9;&#x9;&#x9;tempAlias = attribute.Alias&#xA;&#x9;&#x9;&#x9;attribute.Alias = attribute.Name&#xA;&#x9;&#x9;&#x9;attribute.Name = tempAlias&#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'then do the owned element&#xA;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;switchAttrAliasAndNameOnElement subElement&#xA;&#x9;next&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="157"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{43BAAACB-266A-4B40-985A-47296EC805E6}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Show Message Detail&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;' Script Name: Show Message Detail&#xA;' Author: Geert Bellekens&#xA;' Purpose: shows the message details of the selected message in the search window and asks &#xA;' Date: 2017-03-15&#xA;'&#xA;&#xA;'name of the output tab&#xA;const outPutName = &quot;Create Message Detail&quot;&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#xA;&#x9;'get the selected element&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;set selectedElement = Repository.GetContextObject&#xA;&#x9;if selectedElement.ObjectType = otElement then&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Starting Creating Message Detail for '&quot; &amp; selectedElement.Name &amp; &quot;'&quot;, selectedElement.ElementID&#xA;&#x9;&#x9;'do the actual work&#xA;&#x9;&#x9;showMessageDetail(selectedElement)&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Finished Creating Message Detail for '&quot; &amp; selectedElement.Name &amp; &quot;'&quot;, selectedElement.ElementID&#xA;&#x9;else&#xA;&#x9;&#x9;msgbox &quot;This script only works on Elements. Please select an Element before executing this script&quot;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function showMessageDetail(selectedElement)&#xA;&#x9;dim selectedMessage &#xA;&#x9;set selectedMessage = new Message&#xA;&#x9;'first load the selected message&#xA;&#x9;selectedMessage.loadMessage(selectedElement)&#xA;&#x9;'get the headers&#xA;&#x9;dim messageHeaders&#xA;&#x9;set messageHeaders = selectedMessage.getHeaders()&#xA;&#x9;'get the content in the proper output format&#xA;&#x9;dim messageOutput&#xA;&#x9;set messageOutput = selectedMessage.createOuput()&#xA;&#x9;'show the output in the search window&#xA;&#x9;'create the output object&#xA;&#x9;dim searchOutput&#xA;&#x9;set searchOutput = new SearchResults&#xA;&#x9;searchOutput.Name = &quot;Message detail&quot;&#xA;&#x9;'put the headers in the output&#xA;&#x9;searchOutput.Fields = messageHeaders&#xA;&#x9;'put the content in the output&#xA;&#x9;searchOutput.Results = messageOutput&#xA;&#x9;dim row&#xA;&#x9;'show the output&#xA;&#x9;searchOutput.Show&#xA;&#x9;'export to excel file&#xA;&#x9;saveToExcelFile selectedMessage, messageOutput, messageHeaders&#xA;end function&#xA;&#xA;function saveToExcelFile(message, messageOutput, messageHeaders)&#xA;&#x9;'create the excel file&#xA;&#x9;dim excelOutput&#xA;&#x9;set excelOutput = new ExcelFile&#xA;&#x9;'create tab for datatypes&#xA;&#x9;dim messageTypes&#xA;&#x9;set messageTypes = message.getMessageTypes()&#xA;&#x9;dim messageTypesArray &#xA;&#x9;messageTypesArray = makeArrayFromArrayLists(messageTypes)&#xA;&#x9;excelOutput.createTab message.Prefix &amp; &quot; Types&quot;, messageTypesArray, true, &quot;TableStyleMedium4&quot;&#xA;&#x9;'create tab for message&#xA;&#x9;'merge headers with output&#xA;&#x9;messageOutput.Insert 0, messageHeaders&#xA;&#x9;'create a two-dimensional array from the messageOutput&#xA;&#x9;dim excelContents&#xA;&#x9;excelContents = makeArrayFromArrayLists(messageOutput)&#xA;&#x9;'add the output to a sheet in excel&#xA;&#x9;excelOutput.createTab message.Prefix &amp; &quot; Msg&quot;, excelContents, true, &quot;TableStyleMedium4&quot;&#xA;&#x9;'save the excel file&#xA;&#x9;excelOutput.save&#xA;end function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="158"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Browser -non used- xsd Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="159"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D8FD479E-CF8E-42BF-8564-CA61D80ED12A}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;AddComplexTypesForDiagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;' Script Name: AddComplexTypesForDiagram &#xA;' Purpose: on diagram, add Complex Types that are being referred to &#xA;' Date: 2014-10-13&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;&#xA;' list of ID's (of ComplexTypes) already added to the diagram&#xA;dim newComplexTypesIds&#xA;&#xA;' position for new object to be added&#xA;dim x&#xA;dim y&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otPackage&#xA;'&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;'&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;'&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otDiagram&#xA;&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;'Debug: Session.Output &quot;Script started for &quot; + theDiagram.Name&#xA;&#x9;&#x9;&#x9;AddComplexTypesForDiagram theDiagram&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Script finished. Look at output tab for log details.&quot;, promptOK&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;' AddComplexTypesForDiagram&#xA;'   for each of the complex on the diagram, add ComplexTypes it has as attribute&#xA;sub AddComplexTypesForDiagram(theDiagram)&#xA; &#x9;dim EADiagramElement as EA.DiagramObject&#xA;&#x9;dim EAElement as EA.Element&#xA; &#xA;&#x9;'Debug: Session.Output &quot;Treating diagram: &quot; + theDiagram.Name&#xA;&#x9;&#xA;&#x9;' Reset array&#xA;&#x9;Set newComplexTypesIds = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;' Initialize location for new objects&#xA;&#x9;x = 0&#xA;&#x9;y = 0&#xA;&#x9;&#xA;    ' Browse all elements of the diagram&#xA;    for each EADiagramElement In theDiagram.DiagramObjects&#xA;&#x9;&#x9;set EAElement=Repository.GetElementByID(EADiagramElement.ElementID)&#xA;&#x9;&#x9;AddDependentForObject theDiagram, EAElement&#xA;&#x9;next&#xA;end sub&#xA;&#xA;' AddDependentForObject&#xA;'   for each ComplexType, add to diagram if not present yet&#xA;'   (recursive)&#xA;sub AddDependentForObject(theDiagram, theElement)&#xA;&#x9;dim EAAttribute as EA.Attribute&#xA;&#x9;dim classifierElement as EA.Element&#xA; &#xA;&#x9;'Debug: Session.Output &quot;Treating element: &quot; + theElement.Name&#xA;&#x9;'Debug: Session.Output &quot; on diagram &quot; + theDiagram.Name&#xA;&#x9;if (theElement.Stereotype = &quot;XSDcomplexType&quot;) then&#xA;&#x9;&#x9;AddComplexTypeToDiagram theDiagram,theElement&#xA;&#x9;&#x9;for each EAAttribute in theElement.Attributes&#xA;&#x9;&#x9;&#x9;if (EAAttribute.ClassifierID &lt;&gt; 0) then&#xA;&#x9;&#x9;&#x9;&#x9;set classifierElement=Repository.GetElementByID(EAAttribute.ClassifierID)&#xA;&#x9;&#x9;&#x9;&#x9;'Debug: Session.Output &quot; Element: &quot; &amp; classifierElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Debug:&#x9;Session.Output &quot;   type: &quot; &amp; classifierElement.StereoType&#xA;&#x9;&#x9;&#x9;&#x9;if (classifierElement.Stereotype = &quot;XSDcomplexType&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Add complex types as dependent&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AddDependentForObject theDiagram, classifierElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'AddOrUpdateDependencyConnector theElement,EAAttribute,classifierElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub &#xA;&#xA;' AddComplexTypeToDiagram&#xA;'   add the ComplexType to the diagram&#xA;'   add also to list of already added ComplexTypes&#xA;sub AddComplexTypeToDiagram(theDiagram, theComplexType)&#xA;&#x9;Dim newDiagramObject as EA.DiagramObject&#xA;&#x9;Dim position&#xA;&#x9;if not onDiagram(theDiagram,theComplexType) then&#xA;&#x9;&#x9;'Debug: Session.Output &quot;Add element: &quot; + theComplexType.Name + &quot; to the diagram &quot; + theDiagram.Name&#xA;&#x9;&#x9;x = x + 25&#xA;&#x9;&#x9;y = y + 25&#xA;&#x9;&#x9;position = &quot;l=&quot; + CStr(x) + &quot;t=&quot; + CStr(y)&#xA;&#x9;&#x9;set newDiagramObject = theDiagram.DiagramObjects.AddNew(position,&quot;&quot;)&#xA;&#x9;&#x9;If Not newDiagramObject Is Nothing Then&#xA;&#x9;&#x9;&#x9;newDiagramObject.ElementID = theComplexType.ElementID&#xA;&#x9;&#x9;&#x9;newDiagramObject.Style = &quot;BCol=4443520&quot; '4443520 = #43cd80 = SeaGreen3 (http://www.color-hex.com/color-names.html)&#xA;&#x9;&#x9;&#x9;newDiagramObject.Update&#xA;&#x9;&#x9;&#x9;' Add the connector to know attribute connector ID list&#xA;&#x9;&#x9;&#x9;newComplexTypesIds.Add theComplexType.ElementID,theComplexType.Name&#xA;&#x9;&#x9;End If&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;' onDiagram&#xA;'   Check if ComplexType already on diagram&#xA;function onDiagram(theDiagram, theElement)&#xA;&#x9;dim EADiagramElement as EA.DiagramObject&#xA;&#x9;dim EAElement as EA.Element&#xA;&#x9;&#xA;&#x9;if newComplexTypesIds.Exists(theElement.ElementID) then&#xA;&#x9;&#x9;'Debug: Session.Output &quot;Already added to diagram: &quot; + theElement.Name&#xA;&#x9;&#x9;onDiagram = true&#xA;&#x9;&#x9;Exit Function&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'Debug: Session.Output &quot;Already on diagram? &quot; + theElement.Name&#xA;&#x9;for each EADiagramElement In theDiagram.DiagramObjects&#xA;        set EAElement=Repository.GetElementByID(EADiagramElement.ElementID)&#xA;        if EAElement.ElementID = theElement.ElementID then&#x9;&#xA;&#x9;&#x9;&#x9;'Debug: Session.Output &quot;Already on diagram: &quot; + theElement.Name&#xA;&#x9;&#x9;&#x9;onDiagram = true&#xA;&#x9;&#x9;&#x9;Exit Function&#xA;&#x9;&#x9;end if&#xA;    next&#xA;&#x9;&#x9;&#xA;&#x9;'Debug: Session.Output &quot;Not yet on diagram: &quot; + theElement.Name&#xA;&#x9;onDiagram = false&#xA;end function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="160"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2E478CAF-A304-4FFE-AFE6-461B21051487}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;AddDependencies&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA; &#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA; &#xA;'&#xA;&#xA;'&#xA;' Script Name: AddDependencies&#xA;' Purpose: Browse the elements of a complexType, and if an element is itself of a type referring to&#xA;'          a complexType, add a dependency link to this complexType.&#xA;'          Multiple links are created to dependent complex type if multiple elements are of this complexType.&#xA;'          The script also verifies that no dependencies exists to complexType with no corresponding inner element.&#xA;' Date:  2014-10-13&#xA;'&#xA;dim attributeConnectorIds()&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;            &#xA;            ' Get the type of element selected in the Project Browser&#xA;            dim treeSelectedType&#xA;            treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;            &#xA;            ' Handling Code: Uncomment any types you wish this script to support&#xA;            ' NOTE: You can toggle comments on multiple lines that are currently&#xA;            ' selected with [CTRL]+[SHIFT]+[C].&#xA;            select case treeSelectedType&#xA;            &#xA;                        case otElement&#xA;                                    ' Code for when an element is selected&#xA;                                    dim theElement as EA.Element&#xA;                                    set theElement = Repository.GetTreeSelectedObject()&#xA;                                    AddDependencyForObject theElement&#xA;                                    Session.Prompt &quot;Script finished. Look at output tab for log details.&quot;, promptOK&#xA;                                    &#xA;                        case otPackage&#xA;                                    ' Code for when a package is selected&#xA;                                    dim thePackage as EA.Package&#xA;                                    set thePackage = Repository.GetTreeSelectedObject()&#xA;                                    AddDependencyForPackage thePackage&#xA;                                    Session.Prompt &quot;Script finished. Look at output tab for log details.&quot;, promptOK&#xA;                                    &#xA;                        case otDiagram&#xA;                                    ' Code for when a diagram is selected&#xA;                                    dim theDiagram as EA.Diagram&#xA;                                    set theDiagram = Repository.GetTreeSelectedObject()&#xA;                                    AddDependencyForDiagram theDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;                                    Session.Prompt &quot;Script finished. Look at output tab for log details.&quot;, promptOK&#xA;                                    &#xA;'                       case otAttribute&#xA;'                                   ' Code for when an attribute is selected&#xA;'                                   dim theAttribute as EA.Attribute&#xA;'                                   set theAttribute = Repository.GetTreeSelectedObject()&#xA;'                                   &#xA;'                       case otMethod&#xA;'                                   ' Code for when a method is selected&#xA;'                                   dim theMethod as EA.Method&#xA;'                                   set theMethod = Repository.GetTreeSelectedObject()&#xA;                        &#xA;                        case else&#xA;                                    ' Error message&#xA;                                    Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;                                    &#xA;            end select&#xA;            &#xA;end sub&#xA; &#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;' Add dependencies for all XSDComplexType of the selected diagram '&#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;sub AddDependencyForDiagram(theDiagram)&#xA; &#xA;dim EADiagramElement as EA.DiagramObject&#xA;dim EAElement as EA.Element&#xA; &#xA;            ' Browse all elements of the diagram&#xA;            for each EADiagramElement In theDiagram.DiagramObjects&#xA;                        set EAElement=Repository.GetElementByID(EADiagramElement.ElementID)&#xA;                        AddDependencyForObject(EAElement)&#xA;            next&#xA;end sub&#xA; &#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;' Add dependencies for all XSDComplexType of the selected package '&#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA; &#xA;sub AddDependencyForPackage(thePackage)&#xA; &#xA;dim EAElement as EA.Element&#xA;dim EAPackage as EA.Package&#xA; &#xA;            ' Treat all elements in the package&#xA;            for each EAElement in thePackage.Elements                     &#xA;                        AddDependencyForObject EAElement&#xA;            next&#xA;            &#xA;            ' Browse sub packages&#xA;            for each EAPackage in thePackage.Packages&#xA;                        AddDependencyForPackage EAPackage&#xA;            next&#xA;end sub&#xA; &#xA;sub AddDependencyForObject(theElement)&#xA; &#xA;dim EAAttribute as EA.Attribute&#xA;dim classifierElement as EA.Element&#xA; &#xA;' Reset array&#xA;ReDim attributeConnectorIds(1)&#xA; &#xA;Session.Output &quot;Treating element: &quot; + theElement.Name&#xA;if (theElement.Stereotype = &quot;XSDcomplexType&quot;) then&#xA;            for each EAAttribute in theElement.Attributes&#xA;                        if (EAAttribute.ClassifierID &lt;&gt; 0) then&#xA;                                    set classifierElement=Repository.GetElementByID(EAAttribute.ClassifierID)&#xA;                                    ' Add dependecy only for complex types&#xA;                                    if (classifierElement.Stereotype = &quot;XSDcomplexType&quot;) then&#xA;                                                AddOrUpdateDependencyConnector theElement,EAAttribute,classifierElement                                              &#xA;                                    end if&#xA;                        end if&#xA;            next&#xA;            CheckDependencies theElement&#xA;end if&#xA; &#xA;end sub &#xA; &#xA;sub AddOrUpdateDependencyConnector(sourceElement,sourceAttribute,targetElement)&#xA; &#xA;dim EAConnector as EA.Connector&#xA;dim EAConnectorEnd as EA.ConnectorEnd&#xA;dim cardinality&#xA; &#xA;' Check if the connector already exists&#xA;set EAConnectorEnd=Nothing&#xA;for each EAConnector in sourceElement.Connectors&#xA;            if (EAConnector.SupplierID = targetElement.ElementID) then&#xA;                        set EAConnectorEnd = EAConnector.SupplierEnd&#xA;                        if (EAConnectorEnd.Role = sourceAttribute.Name) then&#xA;                                    exit for&#xA;                        else&#xA;                                    set EAConnectorEnd=Nothing&#xA;                        end if&#xA;            end if&#xA;next&#xA; &#xA;' If connector not found create one          &#xA;if (EAConnectorEnd Is Nothing) then&#xA;            Session.Output &quot;Add dependecy for attribute : &quot; + sourceAttribute.Name&#xA;            set EAConnector=sourceElement.Connectors.AddNew(&quot;&quot;,&quot;Dependency&quot;)&#xA;            EAConnector.SupplierID=targetElement.ElementID&#xA;            EAConnector.Update&#xA;            set EAConnectorEnd=EAConnector.SupplierEnd&#xA;            EAConnectorEnd.Role=sourceAttribute.Name&#xA;            EAConnectorEnd.Update&#xA;else&#xA;            Session.Output &quot;Dependency for attribute : &quot; + sourceAttribute.Name + &quot; already exists. No need to create it.&quot;&#xA;end if&#xA; &#xA;' Set attribute multiplicity to connector&#xA;cardinality = &quot;&quot;&#xA;select case sourceAttribute.LowerBound&#xA;            case &quot;0&quot;&#xA;                        cardinality=&quot;0..&quot;&#xA;            case &quot;1&quot;&#xA;                        cardinality=&quot;1..&quot;&#xA;end select&#xA;if (cardinality &lt;&gt; &quot;&quot;) then&#xA;            select case sourceAttribute.UpperBound&#xA;                        case &quot;1&quot;&#xA;                                    cardinality = cardinality + &quot;1&quot;&#xA;                        case &quot;*&quot;&#xA;                                    cardinality = cardinality + &quot;*&quot;&#xA;                        case &quot;-1&quot;&#xA;                                    cardinality = cardinality + &quot;*&quot;&#xA;                        case else&#xA;                                    cardinality = &quot;&quot;&#xA;            end select&#xA;end if&#xA;if (cardinality &lt;&gt; &quot;&quot;) then&#xA;            EAConnectorEnd.Cardinality = cardinality&#xA;            EAConnectorEnd.Update&#xA;end if&#xA; &#xA;' Add the connector to know attribute connector ID list&#xA;ReDim Preserve attributeConnectorIds(UBound(attributeConnectorIds) + 1)&#xA;attributeConnectorIds(UBound(attributeConnectorIds)) = EAConnector.ConnectorID&#xA; &#xA;end sub&#xA; &#xA;sub CheckDependencies(theElement)&#xA; &#xA;dim EAConnector as EA.Connector&#xA;dim EAConnectorEnd as EA.ConnectorEnd&#xA;dim connectedElement as EA.Element&#xA;dim isConnectorFound&#xA;dim I&#xA; &#xA;' Verify that each connector of the element is linked with a known attribute&#xA;' otheriwse display a warning&#xA;for each EAConnector in theElement.Connectors&#xA;            if ((EAConnector.Type = &quot;Dependency&quot;) and (EAConnector.ClientID = theElement.ElementID)) then&#xA;                        isConnectorFound=false&#xA;                        for I = 1 to UBound(attributeConnectorIds)&#xA;                                    if (EAConnector.ConnectorID = attributeConnectorIds(I)) then&#xA;                                                isConnectorFound = true&#xA;                                                exit for&#xA;                                    end if&#xA;                        next&#xA;                        &#xA;                        if (not isConnectorFound) then&#xA;                                    set EAConnectorEnd = EAConnector.SupplierEnd&#xA;                                    set connectedElement = Repository.GetElementByID(EAConnector.SupplierID)&#xA;                                    Session.Output &quot;!!! WARNING : Connector(&quot; + CStr(EAConnector.ConnectorID) + &quot;) associated with element &quot; + connectedElement.Name + &quot; with role &quot; + EAConnectorEnd.Role + &quot; is not associated with any attribute.&quot;&#xA;                        end if&#xA;            end if&#xA;next&#xA; &#xA;end sub&#xA; &#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="161"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{11F02DD5-424F-42D2-8DF0-15BBBBAD97FC}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;AddEnumStereotype&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;&#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;'&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;dim enumElement as EA.Element&#xA;&#x9;for each enumElement in thePackage.Elements&#xA;&#x9;&#x9;dim enumAttribute as EA.Attribute&#xA;&#x9;&#x9;for each enumAttribute in enumElement.Attributes&#xA;&#x9;&#x9;&#x9;if enumAttribute.Stereotype &lt;&gt; &quot;enum&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;enumAttribute.Stereotype = &quot;enum&quot;&#xA;&#x9;&#x9;&#x9;&#x9;enumAttribute.Type = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;enumAttribute.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="162"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E0A83082-CF00-45B5-9DAF-6E909BEED084}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DeleteEnumTypeString&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;'&#xA;' Script Name: Delete Enum Type String&#xA;' Author: Tom Geerts&#xA;' Purpose: Deletes the &quot;string&quot; type of enumeration attributes, which should not have a type, because they are literal values.&#xA;' Use: Continued use if needed.&#xA;' Date: 01/07/2015&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim enumElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set enumElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;'&#x9;dim enumElement as EA.Element&#xA;&#xA;'&#x9;&#x9;if enumElement.Type = &quot;Enumeration&quot; then&#xA;'&#x9;&#x9;&#x9;dim enumAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;for each enumAttribute in enumElement.Attributes&#xA;'&#x9;&#x9;&#x9;&#x9;if enumAttribute.Type = &quot;string&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;enumAttribute.Type = &quot;&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;enumAttribute.Update&#xA;'&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;end if&#xA;'&#x9;next&#xA;&#x9;dim enumElement as EA.Element&#xA;&#x9;for each enumElement in thePackage.Elements&#xA;&#x9;&#x9;if enumElement.Type = &quot;Enumeration&quot; then&#xA;&#x9;&#x9;&#x9;dim enumAttribute as EA.Attribute&#xA;&#x9;&#x9;&#x9;for each enumAttribute in enumElement.Attributes&#xA;&#x9;&#x9;&#x9;&#x9;if enumAttribute.Type = &quot;string&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;enumAttribute.Type = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;enumAttribute.Update&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;msgbox &quot;Script has finished&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="163"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2874DA05-B73F-44FF-A64A-8415687AA13F}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Find in All Diagrams Search&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;set selectedElement = nothing&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;set selectedElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set selectedElement = thePackage.Element&#xA;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otAttribute&#xA;&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set selectedElement = Repository.GetElementByID(theAttribute.ParentID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otMethod&#xA;&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set selectedElement = Repository.GetElementByID(theMethod.ParentID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;Repository.RunModelSearch &quot;Diagrams By ElementName&quot;,selectedElement.ElementGUID,&quot;&quot;,&quot;&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="164"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B348F522-A44B-4A61-AF91-B6172ADC0B2B}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FixDiagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;&#xA;'&#xA;' Script Name: FixDiagram&#xA;' Author: Geert Bellekens&#xA;' Purpose: &#xA;'    - Converts all Invocations to local BPMN Activities calling the library Activity&#xA;'    - Converts all links to Activities from the librabry to local BPMN Activities calling the library Activity, &#xA;'&#x9;&#x9;including embedded intermediat events&#xA;'&#x9; - Converts all linked pools and lanes to local pools and lanes, respecting the nesting structure.&#xA;' Date: 18/02/2015&#xA;'&#xA;sub test&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetTreeSelectedObject()&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;convertInvocationsToCallingActivities currentDiagram&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub main()&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;convertInvocationsToCallingActivities currentDiagram&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;'test&#xA;&#xA;function convertInvocationsToCallingActivities(diagram)&#xA;&#x9;'save the diagram before anything else&#xA;&#x9;Repository.SaveDiagram diagram.DiagramID&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim ownerElement as EA.Element&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;dim updateDiagramObjectSQL&#xA;&#x9;'first copy the diagramobject into an array&#xA;&#x9;dim count &#xA;&#x9;count = diagram.DiagramObjects.Count&#xA;&#x9;dim diagramObjects()&#xA;&#x9;redim diagramObjects(count)&#xA;&#x9;dim i&#xA;&#x9;for i = 1 to count&#xA;&#x9;&#x9;set diagramObjects(i) = diagram.DiagramObjects.GetAt(i-1)&#xA;&#x9;&#x9;'Session.Output &quot;diagramObjects(i).ElementID: i=&quot; &amp; i &amp; &quot; elementID = &quot; &amp;diagramObjects(i).ElementID&#xA;&#x9;next&#xA;&#x9;'Session.Output &quot;diagram.DiagramObjects.Count: &quot; &amp; diagram.DiagramObjects.Count&#xA;&#x9;'Session.Output &quot;diagramObjects.Count: &quot; &amp; UBound(diagramObjects)&#xA;&#x9;'then loop the array&#xA;&#x9;for i = 1 to count&#xA;&#x9;&#x9;set diagramObject = diagramObjects(i)&#xA;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;set element = nothing&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = &quot;Action&quot; then&#xA;&#x9;&#x9;&#x9;dim action&#xA;&#x9;&#x9;&#x9;set action = element&#xA;&#x9;&#x9;&#x9;'Check if it calls a BPMN Activity&#xA;&#x9;&#x9;&#x9;if action.ClassfierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;dim activity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;set activity = nothing&#xA;&#x9;&#x9;&#x9;&#x9;set activity = Repository.GetElementByID(action.ClassifierID)&#xA;&#x9;&#x9;&#x9;&#x9;if not activity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if activity.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'OK we got one. Make it into a calling activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;makeCallingActivity action, activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;synchronizeElement action&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(action.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;'Pools and lanes need to be copied locally and stripped of their name in case they have a classifier set (which they should)&#xA;&#x9;&#x9;elseif element.Type = &quot;ActivityPartition&quot; AND (element.stereotype = &quot;Pool&quot; OR element.Stereotype = &quot;Lane&quot;) then&#xA;&#x9;&#x9;&#x9;dim skipElement&#xA;&#x9;&#x9;&#x9;skipElement = false&#xA;&#x9;&#x9;&#x9;'check if it is local element&#xA;&#x9;&#x9;&#x9;if element.PackageID &lt;&gt; diagram.packageID  OR element.ParentID &lt;&gt; diagram.ParentID then&#xA;&#x9;&#x9;&#x9;&#x9;'get the correct stereotype&#xA;&#x9;&#x9;&#x9;&#x9;dim BPMNstereotype&#xA;&#x9;&#x9;&#x9;&#x9;if element.Stereotype = &quot;Pool&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BPMNstereotype = &quot;BPMN2.0::Pool&quot;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Lane&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check if the parent element of the lane is also on this diagram.&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'In that case we don't treat it now but it gets treated when we deal with the parent pool&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if isElementPresentOnDiagram (element.ParentID, diagram, diagramObjects, count) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'skip this one&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;skipElement = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;BPMNstereotype = &quot;BPMN2.0::Lane&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;if not skipElement then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'make a new lane of pool under the owner element or owner package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim localActivityPartition as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagram.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set ownerElement = Repository.GetElementByID(diagram.ParentID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set localActivityPartition = ownerElement.Elements.AddNew(&quot;&quot;,BPMNstereotype)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set ownerPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set localActivityPartition = ownerPackage.Elements.AddNew(&quot;&quot;,BPMNstereotype)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check if callingActivity was created&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not localActivityPartition is Nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'copy the classifierID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element.ClassfierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;localActivityPartition.ClassfierID = element.ClassfierID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'copy the name if no classifierID present&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;localActivityPartition.Name = element.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'save local element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;localActivityPartition.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'replace element in diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updateDiagramObjectSQL = &quot;update t_diagramobjects set object_id = &quot;&amp; localActivityPartition.ElementID &amp;&quot; where Diagram_ID = &quot; &amp; diagramObject.DiagramID &amp; &quot; and Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.Execute updateDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set the relations&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set diagram = Repository.GetDiagramByID(diagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setActionRelations localActivityPartition, element, diagram, diagramObjects, count&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'copy owned lanes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim ownedLane as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each ownedLane in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'check if the owned lane is shown on this diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' get the diagramObject for the owned lane&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim laneDiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set laneDiagramObject = getDiagramObjectFromArray(ownedLane.elementID, diagramObjects, count)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not laneDiagramObject is nothing AND ownedLane.Stereotype = &quot;Lane&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if yes then make a new embedded elementin the callingActivity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim newOnwedLane as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newOnwedLane = localActivityPartition.Elements.AddNew(&quot;&quot;,&quot;BPMN2.0::Lane&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'copy the classifierID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ownedLane.ClassfierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newOnwedLane.ClassfierID = ownedLane.ClassfierID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'copy the name if no classifierID present&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newOnwedLane.Name = ownedLane.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'save new owned lane&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newOnwedLane.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'replace element in diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updateDiagramObjectSQL = &quot;update t_diagramobjects set object_id = &quot;&amp; newOnwedLane.ElementID &amp;&quot; where Diagram_ID = &quot; &amp; diagramObject.DiagramID &amp; &quot; and Object_ID = &quot; &amp; ownedLane.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.Execute updateDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set the relations&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set diagram = Repository.GetDiagramByID(diagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setActionRelations newOnwedLane, ownedLane, diagram, diagramObjects, count&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; then &#xA;&#x9;&#x9;&#x9;'check if it is local activity&#xA;&#x9;&#x9;&#x9;if element.PackageID &lt;&gt; diagram.packageID  OR element.ParentID &lt;&gt; diagram.ParentID then&#xA;&#x9;&#x9;&#x9;&#x9;'Make a new Activity for this activity&#xA;&#x9;&#x9;&#x9;&#x9;dim callingActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;if diagram.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set ownerElement = Repository.GetElementByID(diagram.ParentID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set callingActivity = ownerElement.Elements.AddNew(&quot;&quot;,&quot;BPMN2.0::Activity&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set ownerPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set callingActivity = ownerPackage.Elements.AddNew(&quot;&quot;,&quot;BPMN2.0::Activity&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'check if callingActivity was created&#xA;&#x9;&#x9;&#x9;&#x9;if not callingActivity is Nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;makeCallingActivity callingActivity, element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'set the element of the diagramObject to the new action&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;updateDiagramObjectSQL = &quot;update t_diagramobjects set object_id = &quot;&amp; callingActivity.ElementID &amp;&quot; where Diagram_ID = &quot; &amp; diagramObject.DiagramID &amp; &quot; and Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.Execute updateDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'synchronize&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;synchronizeElement callingActivity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(callingActivity.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'set the relations&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set diagram = Repository.GetDiagramByID(diagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setActionRelations callingActivity, element, diagram, diagramObjects, count&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'copy embedded elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim embeddedElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each embeddedElement in element.EmbeddedElements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'check if the embedded element is shown on this diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' get the diagramObject for the embedded element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim embeddedDiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set embeddedDiagramObject = getDiagramObjectFromArray(embeddedElement.elementID, diagramObjects, count)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not embeddedDiagramObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if yes then make a new embedded elementin the callingActivity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim newEmbeddedElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newEmbeddedElement = callingActivity.EmbeddedElements.AddNew(&quot;&quot;,&quot;ObjectNode&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.Name = embeddedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.Stereotype = &quot;IntermediateEvent&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.Update()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;IntermediateEvent&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newEmbeddedElement.TaggedValues.Refresh&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Copy tagged values&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copyTaggedValuesValues embeddedElement, newEmbeddedElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' set the element id of the diagramobject to the new embedded element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'embeddedDiagramObject.ElementID = newEmbeddedElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'embeddedDiagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'for some reason the update doesn't want to work. so we do it the hard way&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim updateEmbeddedDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;updateEmbeddedDiagramObjectSQL = &quot;update t_diagramobjects set object_id = &quot;&amp; newEmbeddedElement.ElementID &amp;&quot; where Diagram_ID = &quot; &amp; diagramObject.DiagramID &amp; &quot; and Object_ID = &quot; &amp; embeddedElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output updateEmbeddedDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.Execute updateEmbeddedDiagramObjectSQL&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update relations of the embedded element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setActionRelations newEmbeddedElement, embeddedElement, diagram, diagramObjects, count&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'reload the diagram to be able to click through&#xA;&#x9;Repository.ReloadDiagram(diagram.DiagramID)&#xA;&#x9;'tell the user we have finished&#xA;&#x9;MsgBox &quot;Finished!&quot;&#xA;end function&#xA;&#xA;'make an action into a calling activity&#xA;function makeCallingActivity(action, activity)&#xA;&#x9;action.Type = &quot;Activity&quot;&#xA;&#x9;action.ClassfierID = 0&#xA;&#x9;action.Stereotype = &quot;Activity&quot;&#xA;&#x9;action.Update&#xA;&#x9;action.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;Activity&quot;&#xA;&#x9;action.TaggedValues.Refresh&#xA;&#x9;'first copy the tagged values values&#xA;&#x9;copyTaggedValuesValues activity, action&#xA;&#x9;'set tagged values correctly&#xA;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;set calledActivityTV = action.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;calledActivityTV.Value = &quot;true&quot;&#xA;&#x9;calledActivityTV.Update&#xA;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;set referenceActivityTV = action.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;referenceActivityTV.Value = activity.ElementGUID&#xA;&#x9;referenceActivityTV.Update&#xA;&#x9;action.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;&#xA;function setActionRelations(action, activity, diagram, diagramobjects, count)&#xA;&#x9;dim activityConnector as EA.Connector&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#x9;dim hidden&#xA;&#x9;dim visible&#xA;&#x9;for each activityConnector in activity.Connectors&#xA;&#x9;&#x9;hidden = false&#xA;&#x9;&#x9;visible = false&#xA;&#x9;&#x9;'check if connector visible in this diagram&#xA;&#x9;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;if diagramLink.ConnectorID = activityConnector.ConnectorID then&#xA;&#x9;&#x9;&#x9;&#x9;hidden = diagramLink.IsHidden&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if not hidden then&#xA;&#x9;&#x9;&#x9;'check if the other element is visible on the diagram&#xA;&#x9;&#x9;&#x9;if activityConnector.ClientID = activity.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;visible = isElementPresentOnDiagram(activityConnector.SupplierID, diagram, diagramobjects, count)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;visible = isElementPresentOnDiagram(activityConnector.ClientID, diagram, diagramobjects, count) &#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if visible then&#xA;&#x9;&#x9;&#x9;&#x9;'check if the connector is shown on other diagrams&#xA;&#x9;&#x9;&#x9;&#x9;' if not we can re-use it, else we need to copy it&#xA;&#x9;&#x9;&#x9;&#x9;if isLinkVisibleOnOtherDiagrams (activityConnector,diagram)  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'copy connector&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set activityConnector = copyConnector(action, activityConnector)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'set relations to action iso activity&#xA;&#x9;&#x9;&#x9;&#x9;if activityConnector.ClientID = activity.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityConnector.ClientID = action.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityConnector.Update&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;if activityConnector.SupplierID = activity.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityConnector.SupplierID = action.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityConnector.Update&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function isLinkVisibleOnOtherDiagrams (connector, diagram)&#xA;&#x9;isLinkVisibleOnOtherDiagrams = false&#xA;&#x9;dim getOtherDiagramsSQL&#xA;&#x9;getOtherDiagramsSQL = &quot;select dl.DiagramID from t_diagramlinks dl &quot; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot; where dl.ConnectorID = &quot; &amp; connector.ConnectorID _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot; and dl.DiagramID &lt;&gt; &quot; &amp; diagram.DiagramID _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot; and dl.Hidden = 0&quot;&#xA;&#x9;dim result &#xA;&#x9;result = Repository.SQLQuery(getOtherDiagramsSQL)&#xA;&#x9;if InStr(result, &quot;DiagramID&quot;) &gt; 0 then&#xA;&#x9;&#x9;isLinkVisibleOnOtherDiagrams = true&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function isElementPresentOnDiagram (elementID, diagram, diagramobjects, count)&#xA;&#x9;if not getDiagramObjectFromArray(elementID, diagramobjects, count) is nothing then&#xA;&#x9;&#x9;isElementPresentOnDiagram = true&#xA;&#x9;else &#xA;&#x9;&#x9;isElementPresentOnDiagram = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'copy the given connector on this element&#xA;function copyConnector(element, connector)&#xA;&#x9;'@STEREO;Name=SequenceFlow;GUID={D48F475E-6647-4e93-9439-753FFCB06902};FQName=BPMN2.0::SequenceFlow;@ENDSTEREO;&#xA;&#x9;'first figure out the type of the connector.&#xA;&#x9;dim connectorTypeSQL&#xA;&#x9;dim connectorTypeResult&#xA;&#x9;connectorTypeSQL = &quot;select x.description from (t_connector c &quot;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot; left join t_xref x on x.Client = c.ea_guid) &quot;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp; &quot; where c.Connector_ID = &quot; &amp; connector.ConnectorID _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&quot; and x.Name = 'Stereotypes' &quot; &#xA;&#x9;Session.Output connectorTypeSQL&#xA;&#x9;connectorTypeResult = Repository.SQLQuery(connectorTypeSQL)&#xA;&#x9;Session.Output connectorTypeResult&#xA;&#x9;dim beginFQName&#xA;&#x9;dim connectorType&#xA;&#x9;connectorType = connector.Type&#xA;&#x9;beginFQName = InStr(connectorTypeResult, &quot;FQName=&quot;)&#xA;&#x9;if beginFQName &gt; 0 then&#xA;&#x9;&#x9;'get the type of the connector from the string&#xA;&#x9;&#x9;dim endFQName&#xA;&#x9;&#x9;beginFQName = beginFQName + len(&quot;FQName=&quot;)&#xA;&#x9;&#x9;endFQName = InStr(beginFQName,connectorTypeResult, &quot;;&quot;)&#xA;&#x9;&#x9;if endFQName &gt; beginFQName then&#xA;&#x9;&#x9;&#x9;connectorType = Mid(connectorTypeResult, beginFQName , endFQName - beginFQName)&#xA;&#x9;&#x9;&#x9;'debug&#xA;&#x9;&#x9;&#x9;Session.Output &quot;connectorType: &quot; &amp; connectorType&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;set copyConnector = element.Connectors.AddNew(&quot;&quot;,connectorType)&#xA;&#x9;'copy connectors attributes&#xA;&#x9;copyConnector.Name = connector.Name&#xA;&#x9;copyConnector.ClientID = connector.ClientID&#xA;&#x9;copyConnector.SupplierID = connector.SupplierID&#xA;&#x9;copyConnector.Direction = connector.Direction&#xA;end function&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getDiagramObjectForElementID(elementID, diagram)&#xA;&#x9;set getDiagramObjectForElementID = nothing&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if diagramObject.ElementID = elementID then&#xA;&#x9;&#x9;&#x9;'MsgBox &quot;diagramObject.ElementID = &quot; &amp; diagramObject.ElementID  &amp; &quot; elementID = &quot;&amp; elementID &#xA;&#x9;&#x9;&#x9;set getDiagramObjectForElementID = diagramObject&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getDiagramObjectFromArray(elementID, diagramObjects, count)&#xA;&#x9;set getDiagramObjectFromArray = nothing&#xA;&#x9;dim i&#xA;&#x9;for i = 1 to count&#xA;&#x9;&#x9;if diagramObjects(i).ElementID = elementID then&#xA;&#x9;&#x9;&#x9;set getDiagramObjectFromArray = diagramObjects(i)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="165"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{256E04A2-E3DD-484E-9C4E-DFE849E0DA02}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FixSequenceFlows&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;Sub Main&#xA;&#x9;dim updateSequenceFlowsQuery&#xA;&#x9;updateSequenceFlowsQuery = &quot;update t_xref set description = '@STEREO;Name=SequenceFlow;GUID={D48F475E-6647-4e93-9439-753FFCB06902};FQName=BPMN2.0::SequenceFlow;@ENDSTEREO;' where description like '@STEREO;Name=SequenceFlow;GUID={12BE6A97-43D3-4184-BA61-77D61267EB62};FQName=BPMN::SequenceFlow;@ENDSTEREO;'&quot;&#xA;&#x9;Repository.Execute updateSequenceFlowsQuery&#xA;End Sub&#xA;&#xA;Main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="166"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{75A9CD0B-4133-4E7D-A23C-673112193A6C}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;UnlockDiagrams&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Old Scripts]&#xA;'[group=Old Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;sub main&#xA;&#x9;Repository.Execute &quot;update t_diagram set locked = 0 where locked = 1&quot;&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="167"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4F12E50A-35DA-4C38-85D1-D106F9DD3BFF}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Group]&#xA;'[group=Project Browser Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;!INC Atrias Scripts.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim treeSelectedElements&#xA;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;else&#xA;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;set selectedItem = Repository.GetTreeSelectedObject&#xA;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="168"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E6F796B7-18C1-4811-AD33-BDA4D29D570D}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link with LDM and FIS&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Group]&#xA;'[group=Project Browser Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: Link with Logical Data Model&#xA;' Author: Geert Bellekens&#xA;' Purpose: Links uses cases and rules to elements Logical Data Model entities they use in their scenariosteps for the use case and in the notes/linked documents for the Business Rules&#xA;' Date: 28/09/2015&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Link to LDM and FIS&quot;&#xA;&#xA;sub main&#xA;&#xA;&#x9;'reference to the domeain model package&#xA;&#x9;dim domainModelPackageGUID &#xA;&#x9;domainModelPackageGUID = &quot;{8A528D7F-D23B-4a85-B89A-15F5B41CE384}&quot;&#xA;'&#x9;dim extendedDomainModelPackageGUID &#xA;'&#x9;extendedDomainModelPackageGUID = &quot;{967ED68D-A6D0-45ea-BBDE-F87E2BE34CE0}&quot;&#xA;&#x9;dim FISPackageGUID&#xA;&#x9;FISPackageGUID = &quot;{A4B198D1-FF9B-4375-8B9B-0015096DE9AD}&quot;&#xA;&#x9;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'set timestamp&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Starting link to LDM and FIS at &quot; &amp; now(), 0&#xA;&#x9;&#xA;&#x9;'first get the pattern from all the classes in the Logical Data Model&#xA;&#x9;dim dictionary&#xA;&#x9;Set dictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;'Logical Data Model&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Creating dictionary from Logical Data Model&quot;, 0&#xA;&#x9;addToClassDictionary domainModelPackageGUID, dictionary&#xA;&#x9;'extended Logical Data Model&#xA;&#x9;'addToClassDictionary extendedDomainModelPackageGUID, dictionary&#xA;&#x9;&#xA;&#x9;'FISSES&#xA;&#x9;addToClassDictionary FISPackageGUID, dictionary&#xA;&#x9;&#xA;&#x9;' and prepare the regex object&#xA;&#x9;dim pattern&#xA;&#x9;'create the pattern based on the names in the dictionary&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Creating regular expression&quot;, 0&#xA;&#x9;pattern = createRegexPattern(dictionary)&#xA;&#x9;Dim regExp  &#xA;&#x9;Set regExp = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;&#x9;regExp.Global = True   &#xA;&#x9;regExp.IgnoreCase = False&#xA;&#x9;regExp.Pattern = pattern&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;dim selectedElements as EA.Collection&#xA;&#x9;&#x9;&#x9;set selectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;&#x9;&#x9;'process use cases&#xA;&#x9;&#x9;&#x9;dim usecases&#xA;&#x9;&#x9;&#x9;set usecases = getUseCasesFromEACollection(selectedElements)&#xA;&#x9;&#x9;&#x9;linkDomainClassesWithUseCases dictionary,regExp,usecases &#xA;&#x9;&#x9;&#x9;'process business rules&#xA;&#x9;&#x9;&#x9;dim businessRules&#xA;&#x9;&#x9;&#x9;set businessRules = getBusinessRulesFromEACollection(selectedElements)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;business rules found: &quot; &amp; businessRules.Count&#xA;&#x9;&#x9;&#x9;linkDomainClassesWithBusinessRules dictionary,regExp, businessRules&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set selectedpackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;'link use domain classes with use cases under the selected package&#xA;&#x9;&#x9;&#x9;linkDomainClassesWithUseCasesInPackage dictionary, regExp,selectedPackage&#xA;&#x9;&#x9;&#x9;'link the domain classes with the business rules under the selected package&#xA;&#x9;&#x9;&#x9;linkDomainClassesWithBusinessRulesInPackage dictionary, regExp,selectedPackage&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Error: wrong type selected. You need to select a package or one or more elements&quot;, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Finished link to LDM and FIS at &quot; &amp; now(), 0&#xA;end sub&#xA;&#xA;function getUseCasesFromEACollection(selectedElements)&#xA;&#x9;dim usecases &#xA;&#x9;set usecases = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in selectedElements&#xA;&#x9;&#x9;if element.Type = &quot;UseCase&quot; then&#xA;&#x9;&#x9;&#x9;usecases.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getUseCasesFromEACollection = usecases&#xA;end function&#xA;&#xA;function getBusinessRulesFromEACollection(selectedElements)&#xA;&#x9;dim businessRules &#xA;&#x9;set businessRules = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in selectedElements&#xA;&#x9;&#x9;if element.Type = &quot;Activity&quot; and element.Stereotype = &quot;Business Rule&quot; then&#xA;&#x9;&#x9;&#x9;businessRules.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getBusinessRulesFromEACollection = businessRules&#xA;end function&#xA;&#xA;function linkDomainClassesWithUseCasesInPackage(dictionary,regExp,selectedPackage)&#xA;&#x9;dim packageList &#xA;&#x9;set packageList = getPackageTree(selectedPackage)&#xA;&#x9;dim packageIDString&#xA;&#x9;packageIDString = makePackageIDString(packageList)&#xA;&#x9;dim getElementsSQL&#xA;&#x9;getElementsSQL = &quot;select uc.Object_ID from t_object uc where uc.Object_Type = 'UseCase' and uc.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)&quot;&#xA;&#x9;dim usecases&#xA;&#x9;set usecases = getElementsFromQuery(getElementsSQL)&#xA;&#x9;linkDomainClassesWithUseCases dictionary,regExp,usecases&#xA;end function&#xA;&#xA;function linkDomainClassesWithUseCases(dictionary,regExp,usecases)&#xA;&#x9;Session.Output usecases.Count &amp; &quot; use cases found&quot;&#xA;&#x9;dim usecase as EA.Element&#xA;&#x9;&#xA;&#x9;'loop de use cases&#xA;&#x9;for each usecase in usecases&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Processing use case: &quot; &amp; usecase.Name, 0&#xA;&#x9;&#x9;'get all dependencies left&#xA;&#x9;&#x9;dim dependencies&#xA;&#x9;&#x9;set dependencies = getDependencies(usecase)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'first remove all automatic traces&#xA;&#x9;&#x9;removeAllAutomaticTraces usecase&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim scenario as EA.Scenario&#xA;&#x9;&#x9;'loop scenarios&#xA;&#x9;&#x9;for each scenario in usecase.Scenarios&#xA;&#x9;&#x9;&#x9;dim scenarioStep as EA.ScenarioStep&#xA;&#x9;&#x9;&#x9;for each scenarioStep in scenario.Steps&#xA;&#x9;&#x9;&#x9;&#x9;'first remove any additional terms in the uses field&#xA;&#x9;&#x9;&#x9;&#x9;scenarioStep.Uses = removeAddionalUses(dependencies,scenarioStep.Uses, dictionary)&#xA;&#x9;&#x9;&#x9;&#x9;dim matches&#xA;&#x9;&#x9;&#x9;&#x9;set matches = regExp.Execute(scenarioStep.Name)&#xA;&#x9;&#x9;&#x9;&#x9;dim classesToMatch &#xA;&#x9;&#x9;&#x9;&#x9;set classesToMatch = getClassesToMatchDictionary(matches, dictionary)&#xA;&#x9;&#x9;&#x9;&#x9;dim classToMatch as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;for each classToMatch in classesToMatch.Items&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;scenarioStep.Uses before &quot; &amp; scenarioStep.Uses&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;dim prefix&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'add the name of the class to the uses column&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;select case classToMatch.Stereotype&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Message&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prefix = &quot;FIS&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;prefix = &quot;LDM&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;'add to the uses field with the correct prefix&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;addUsesToScenarioStep classToMatch, scenarioStep, prefix&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'create the dependency between the use case and the Logical Data Model class&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;linkElementsWithAutomaticTrace usecase, classToMatch&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;adding link between &quot; &amp; usecase.Name &amp; &quot; and &quot; &amp; Prefix &amp; &quot; element &quot; &amp; classToMatch.Name &amp; &quot; because of step &quot; &amp; scenario.Name &amp; &quot;.&quot; &amp; scenarioStep.Name&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;'save scenario step&#xA;&#x9;&#x9;&#x9;&#x9;scenarioStep.Update&#xA;&#x9;&#x9;&#x9;&#x9;scenario.Update&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end function&#xA;&#xA;function addUsesToScenarioStep (classToMatch, scenarioStep, prefix)&#xA;&#x9;if not instr(scenarioStep.Uses,prefix &amp; &quot;-&quot; &amp; classToMatch.Name) &gt; 0 then&#xA;&#x9;&#x9;if len(scenarioStep.Uses) &gt; 0 then &#xA;&#x9;&#x9;&#x9;'add a space if needed&#xA;&#x9;&#x9;&#x9;scenarioStep.Uses = scenarioStep.Uses &amp; &quot; &quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add the name of the class&#xA;&#x9;&#x9;scenarioStep.Uses = scenarioStep.Uses &amp; prefix &amp; &quot;-&quot;  &amp; classToMatch.Name&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function removeAddionalUses( dependencies, uses, dictionary)&#xA;&#x9;dim refName&#xA;&#x9;dim dependency&#xA;&#x9;if Instr(uses,&quot;LDM-&quot;) &gt; 0 _&#xA;&#x9;&#x9;or Instr(uses, &quot;FIS-&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;'first loop all dependencies&#xA;&#x9;&#x9;&#x9;for each dependency in dependencies&#xA;&#x9;&#x9;&#x9;&#x9;'remove LDM-&lt;name&gt;&#xA;&#x9;&#x9;&#x9;&#x9;uses = replace(uses,&quot;LDM-&quot; &amp; dependency,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;'remove FIS-&lt;name&gt;&#xA;&#x9;&#x9;&#x9;&#x9;uses = replace(uses,&quot;FIS-&quot; &amp; dependency,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;for each refName in dictionary.Keys&#xA;&#x9;&#x9;&#x9;&#x9;'remove LDM-&lt;name&gt;&#xA;&#x9;&#x9;&#x9;&#x9;uses = replace(uses,&quot;LDM-&quot; &amp; refName,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;'remove FIS-&lt;name&gt;&#xA;&#x9;&#x9;&#x9;&#x9;uses = replace(uses,&quot;FIS-&quot; &amp; refName,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#x9;removeAddionalUses = uses&#xA;end function&#xA;&#xA;&#xA;'returns a dictionary of elements with the name as key and the element as value.&#xA;function getDependencies(element)&#xA;&#x9;dim getDependencySQL&#xA;&#x9;getDependencySQL =  &quot;select dep.Object_ID from ( t_object dep &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector con on con.End_Object_ID = dep.Object_ID)   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where con.Connector_Type in ('Dependency','Abstraction')  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and con.Start_Object_ID = &quot; &amp; element.ElementID   &#xA;&#x9;set getDependencies = getElementDictionaryFromQuery(getDependencySQL)&#xA;end function&#xA;&#xA;function linkDomainClassesWithBusinessRulesInPackage(dictionary,regExp,selectedPackage)&#xA;&#x9;'get a list of all business rules in the selected package&#xA;&#x9;dim packageList &#xA;&#x9;set packageList = getPackageTree(selectedPackage)&#xA;&#x9;dim packageIDString&#xA;&#x9;packageIDString = makePackageIDString(packageList)&#xA;&#x9;dim getElementsSQL&#xA;&#x9;getElementsSQL = &quot;select r.Object_ID from t_object r where r.stereotype = 'Business Rule' and r.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)&quot;&#xA;&#x9;dim businessRules&#xA;&#x9;set businessRules = getElementsFromQuery(getElementsSQL)&#xA;&#x9;linkDomainClassesWithBusinessRules dictionary,regExp, businessRules&#xA;end function&#xA;&#xA;function linkDomainClassesWithBusinessRules(dictionary,regExp, businessRules)&#xA;&#x9;Session.Output businessRules.Count &amp;&quot; business rules found&quot;&#xA;&#x9;dim businessRule as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim i&#xA;&#x9;for each businessRule in BusinessRules&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Processing Business Rule: &quot; &amp; businessRule.Name, 0&#xA;&#x9;&#x9;'first remove all automatic trace elements&#xA;&#x9;&#x9;removeAllAutomaticTraces(businessRule)&#xA;&#x9;&#x9;dim ruleText&#xA;&#x9;&#x9;'get full text (notes + linked document)&#xA;&#x9;&#x9;ruleText = businessRule.Name&#xA;&#x9;&#x9;ruleText = ruleText &amp; vbNewLine &amp; Repository.GetFormatFromField(&quot;TXT&quot;,businessRule.Notes)&#xA;&#x9;&#x9;ruleText = ruleText &amp; vbNewLine &amp; getLinkedDocumentContent(businessRule, &quot;TXT&quot;)&#xA;&#x9;&#x9;dim matches&#xA;&#x9;&#x9;set matches = regExp.Execute(ruleText)&#xA;&#x9;&#x9;'for each match create a &lt;&lt;trace link&gt;&gt; with business rule&#xA;&#x9;&#x9;linkMatchesWithBusinessRule matches, businessRule, dictionary&#xA;&#x9;next&#xA;&#x9;&#xA;end function&#xA;&#xA;function removeAllAutomaticTraces(element)&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;dim connector as EA.Connector&#xA;&#x9;&#x9;'remove all the traces to Logical Data Model classes&#xA;&#x9;&#x9;for i = element.Connectors.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;set connector = element.Connectors.GetAt(i)&#xA;&#x9;&#x9;&#x9;if connector.Alias = &quot;automatic&quot; and connector.Stereotype = &quot;trace&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;element.Connectors.DeleteAt i,false &#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;end function&#xA;&#xA;function getClassesToMatchDictionary(matches, allClassesDictionary)&#xA;&#x9;dim match&#xA;&#x9;dim classesToMatch&#xA;&#x9;dim className&#xA;&#x9;Set classesToMatch = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;'create list of elements to link&#xA;&#x9;For each match in matches&#xA;&#x9;&#x9;if not allClassesDictionary.Exists(match.Value) then&#xA;&#x9;&#x9;&#x9;'strip the last 's'&#xA;&#x9;&#x9;&#x9;className = left(match.Value, len(match.Value) -1)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;className = match.Value&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not classesToMatch.Exists(className) then&#xA;&#x9;&#x9;&#x9;classesToMatch.Add className, allClassesDictionary(className)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getClassesToMatchDictionary = classesToMatch&#xA;end function&#xA;&#xA;function linkMatchesWithBusinessRule(matches, businessRule, dictionary)&#xA;&#x9;dim classesToMatch&#xA;&#x9;'get the classes to match&#xA;&#x9;Set classesToMatch = getClassesToMatchDictionary(matches,dictionary)&#xA;&#x9;dim classToMatch as EA.Element&#xA;&#x9;'actually link the classes&#xA;&#x9;for each classToMatch in classesToMatch.Items&#xA;&#x9;&#x9;linkElementsWithAutomaticTrace businessRule, classToMatch&#xA;&#x9;next&#xA;end function&#xA;&#xA;function linkElementsWithAutomaticTrace(sourceElement, TargetElement)&#xA;&#x9;dim trace as EA.Connector&#xA;&#x9;set trace = sourceElement.Connectors.AddNew(&quot;&quot;,&quot;trace&quot;)&#xA;&#x9;trace.Alias = &quot;automatic&quot;&#xA;&#x9;trace.SupplierID = TargetElement.ElementID&#xA;&#x9;trace.Update&#xA;end function&#xA;&#xA;function addToClassDictionary(PackageGUID, dictionary)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;set package = Repository.GetPackageByGuid(PackageGUID)&#xA;&#x9;&#xA;&#x9;'get the classes in the dictionary (recursively&#xA;&#x9;addClassesToDictionary package, dictionary&#xA;end function&#xA;&#xA;function addClassesToDictionary(package, dictionary)&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;dim subpackage as EA.Package&#xA;&#x9;'process owned elements&#xA;&#x9;for each classElement in package.Elements&#xA;&#x9;&#x9;'this works for FISSES as well because they are classes with stereotype Message&#xA;&#x9;&#x9;if classElement.Type = &quot;Class&quot; AND len(classElement.Name) &gt; 0 AND not dictionary.Exists(classElement.Name) then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Adding element: &quot; &amp; classElement.Name, 0&#xA;&#x9;&#x9;&#x9;dictionary.Add classElement.Name,  classElement&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;&#x9;'process subpackages&#xA;&#x9;for each subpackage in package.Packages&#xA;&#x9;&#x9;addClassesToDictionary subpackage, dictionary&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;'Create a reges pattern like this &quot;\b(name1|name2|name3)s?\b&quot; based on the &#xA;function createRegexPattern(dictionary)&#xA;&#x9;Dim patternString&#xA;&#x9;dim className&#xA;&#x9;'add begin&#xA;&#x9;patternString = &quot;\b(&quot;&#xA;&#x9;dim addPipe&#xA;&#x9;addPipe = FALSE&#xA;&#x9;for each className in dictionary.Keys&#xA;&#x9;&#x9;&#x9;if addPipe then&#xA;&#x9;&#x9;&#x9;&#x9;patternString = patternString &amp; &quot;|&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;addPipe = True&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;patternString = patternString &amp; className&#xA;&#x9;next&#xA;&#x9;'add end&#xA;&#x9;patternString = patternString &amp; &quot;)s?\b&quot;&#xA;&#x9;'return pattern&#xA;&#x9;createRegexPattern = patternString&#xA;end function&#xA;&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="169"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{491BF0EA-C9BC-45E8-834F-549EE8EFE0CD}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Validate BR uses&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Group]&#xA;'[group=Project Browser Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: Validate BR uses&#xA;' Author: Geert Bellekens&#xA;' Purpose: Lists all Business rules that are linked to a use case but not referenced in the uses column.&#xA;' Date: 23/12/2015&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Check BR links&quot;&#xA;&#xA;sub main&#xA;&#xA;&#x9;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'set timestamp&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Start check BR links at &quot; &amp; now(), 0&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;dim selectedElements as EA.Collection&#xA;&#x9;&#x9;&#x9;set selectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;&#x9;&#x9;'process use cases&#xA;&#x9;&#x9;&#x9;dim usecases&#xA;&#x9;&#x9;&#x9;set usecases = getUseCasesFromEACollection(selectedElements)&#xA;&#x9;&#x9;&#x9;CheckBRLinksForUseCases usecases&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set selectedpackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;'link use domain classes with use cases under the selected package&#xA;&#x9;&#x9;&#x9;CheckBRLinksFromPackage selectedPackage&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Error: wrong type selected. You need to select a package or one or more elements&quot;, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Repository.WriteOutput outPutName, &quot;Finished checking BR links &quot; &amp; now(), 0&#xA;end sub&#xA;&#xA;function getUseCasesFromEACollection(selectedElements)&#xA;&#x9;dim usecases &#xA;&#x9;set usecases = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in selectedElements&#xA;&#x9;&#x9;if element.Type = &quot;UseCase&quot; then&#xA;&#x9;&#x9;&#x9;usecases.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getUseCasesFromEACollection = usecases&#xA;end function&#xA;&#xA;function getBusinessRulesFromEACollection(selectedElements)&#xA;&#x9;dim businessRules &#xA;&#x9;set businessRules = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each element in selectedElements&#xA;&#x9;&#x9;if element.Type = &quot;Activity&quot; and element.Stereotype = &quot;Business Rule&quot; then&#xA;&#x9;&#x9;&#x9;businessRules.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getBusinessRulesFromEACollection = businessRules&#xA;end function&#xA;&#xA;function CheckBRLinksFromPackage(selectedPackage)&#xA;&#x9;dim packageList &#xA;&#x9;set packageList = getPackageTree(selectedPackage)&#xA;&#x9;dim packageIDString&#xA;&#x9;packageIDString = makePackageIDString(packageList)&#xA;&#x9;dim getElementsSQL&#xA;&#x9;getElementsSQL = &quot;select uc.Object_ID from t_object uc where uc.Object_Type = 'UseCase' and uc.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)&quot;&#xA;&#x9;dim usecases&#xA;&#x9;set usecases = getElementsFromQuery(getElementsSQL)&#xA;&#x9;CheckBRLinksForUseCases usecases&#xA;end function&#xA;&#xA;function CheckBRLinksForUseCases(usecases)&#xA;&#x9;Session.Output usecases.Count &amp; &quot; use cases found&quot;&#xA;&#x9;dim usecase as EA.Element&#xA;&#x9;dim businessRule as EA.Element&#xA;&#x9;'loop de use cases&#xA;&#x9;for each usecase in usecases&#xA;&#x9;&#x9;'Repository.WriteOutput outPutName, &quot;Processing use case: &quot; &amp; usecase.Name, 0&#xA;&#x9;&#x9;'first remove all automatic traces&#xA;&#x9;&#x9;removeAllAutomaticTraces usecase&#xA;&#x9;&#x9;'get the scenarios xml&#xA;&#x9;&#x9;dim xmlScenario&#xA;&#x9;&#x9;set xmlScenario = getScenariosXML(usecase)&#xA;&#x9;&#x9;'Session.output xmlScenario.xml&#xA;&#x9;&#x9;'get all dependencies left&#xA;&#x9;&#x9;dim dependencies&#xA;&#x9;&#x9;set dependencies = getDependencies(usecase)&#xA;&#x9;&#x9;for each businessRule in dependencies.Items&#xA;&#x9;&#x9;&#x9;dim businessRuleFound&#xA;&#x9;&#x9;&#x9;businessRuleFound = false&#xA;&#x9;&#x9;&#x9;if businessRule.Stereotype = &quot;Business Rule&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'OK we have a business rule&#xA;&#x9;&#x9;&#x9;&#x9;'first check if &lt;step&gt; exists with the attribute &quot;uses=&quot;&lt;usecasename&gt;&#xA;&#x9;&#x9;&#x9;&#x9;Dim stepNodes, itemnodes, itemnode, attributeNode &#xA;&#x9;&#x9;&#x9;&#x9;Set stepNodes = xmlScenario.SelectNodes(&quot;//step[contains(@uses,&quot; &amp; sanitizeXPathSearch(businessRule.Name) &amp; &quot;)]&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if stepNodes.length &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;businessRuleFound = true&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if not found we look for the node that has the guid of the business rule&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'&lt;item&gt; nodes have an attribute guid= and an attribute oldname=&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set itemnodes = xmlScenario.SelectNodes(&quot;//item[@guid='&quot; &amp; businessRule.elementGUID &amp; &quot;']&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each itemnode in itemnodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each attributeNode in itemNode.Attributes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attributeNode.Name = &quot;oldname&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Set stepNodes = xmlScenario.SelectNodes(&quot;//step[contains(@uses,&quot; &amp; sanitizeXPathSearch(attributeNode.Value) &amp; &quot;)]&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if stepNodes.length &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;businessRuleFound = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'check if businessrule was found&#xA;&#x9;&#x9;&#x9;&#x9;if not businessRuleFound then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Use Case: [&quot; &amp; usecase.Name &amp; &quot;] BR not used: [&quot; &amp; businessRule.Name &amp; &quot;]&quot;, usecase.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end function&#xA;&#xA;function sanitizeXPathSearch(searchValue)&#xA;&#x9;dim searchParts, part, returnValue, first&#x9;&#xA;&#x9;first = true&#xA;&#x9;returnValue = searchValue&#xA;&#x9;'first replace double qoutes by &amp;amp;quot;&#xA;&#x9;returnValue = replace(returnValue,&quot;&quot;&quot;&quot;,&quot;&amp;amp;quot;&quot;)&#xA;&#x9;'then replace any single qotes. &quot;firstpart'secondpart' then becomes &quot;concat('firstpart', &quot;'&quot;,'secondpart',...)&quot;&#xA;&#x9;searchParts = split(returnValue,&quot;'&quot;)&#xA;&#x9;if Ubound(searchParts) &gt; 0 then&#xA;&#x9;&#x9;returnValue = &quot;concat(&quot;&#xA;&#x9;&#x9;for each part in searchParts&#xA;&#x9;&#x9;&#x9;if first then&#xA;&#x9;&#x9;&#x9;&#x9;first = false&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;returnValue = returnValue &amp; &quot;,&quot;&quot;'&quot;&quot;,&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;returnValue = returnValue &amp; &quot;&quot;&quot;&quot; &amp; part &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;returnValue = returnValue &amp; &quot;)&quot;&#xA;&#x9;&#x9;Session.Output &quot;sanitized xpath: &quot; &amp; returnValue&#xA;&#x9;else&#xA;&#x9;&#x9;'enclose in single quotes&#xA;&#x9;&#x9;returnValue = &quot;'&quot; &amp; returnValue &amp; &quot;'&quot;&#xA;&#x9;end if&#xA;&#x9;sanitizeXPathSearch = returnValue&#xA;end function&#xA;&#xA;function getScenariosXML(usecase)&#xA;&#x9;&#x9;dim sqlGet, xmlQueryResult&#xA;&#x9;&#x9;sqlGet = &quot;select ucs.XMLContent from t_objectscenarios ucs where ucs.Object_ID = &quot; &amp; usecase.ElementID&#xA;&#x9;&#x9;xmlQueryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;xmlQueryResult = replace(xmlQueryResult,&quot;&amp;lt;&quot;,&quot;&lt;&quot;)&#xA;&#x9;&#x9;xmlQueryResult = replace(xmlQueryResult,&quot;&amp;gt;&quot;,&quot;&gt;&quot;)&#xA;&#x9;&#x9;'Repository.WriteOutput outPutName, &quot;xmlQueryResult: &quot; &amp; xmlQueryResult  , 0&#xA;&#x9;&#x9;Dim xDoc &#xA;&#x9;&#x9;Set xDoc = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;&#x9;'load the resultset in the xml document&#xA;&#x9;&#x9;xDoc.LoadXML xmlQueryResult&#xA;&#x9;&#x9;'return value&#xA;&#x9;&#x9;set getScenariosXML = xDoc&#xA;end function&#xA;&#xA;&#xA;function addUsesToScenarioStep (classToMatch, scenarioStep, prefix)&#xA;&#x9;if not instr(scenarioStep.Uses,prefix &amp; &quot;-&quot; &amp; classToMatch.Name) &gt; 0 then&#xA;&#x9;&#x9;if len(scenarioStep.Uses) &gt; 0 then &#xA;&#x9;&#x9;&#x9;'add a space if needed&#xA;&#x9;&#x9;&#x9;scenarioStep.Uses = scenarioStep.Uses &amp; &quot; &quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add the name of the class&#xA;&#x9;&#x9;scenarioStep.Uses = scenarioStep.Uses &amp; prefix &amp; &quot;-&quot;  &amp; classToMatch.Name&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function removeAddionalUses(dependencies, uses)&#xA;&#x9;dim dependency&#xA;&#x9;dim filteredUses&#xA;&#x9;filteredUses = &quot;&quot;&#xA;&#x9;if len(uses) &gt; 0 then&#xA;&#x9;&#x9;for each dependency in dependencies.Keys&#xA;&#x9;&#x9;&#x9;if Instr(uses,dependency) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;if len(filteredUses) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;filteredUses = filteredUses &amp; &quot; &quot; &amp; dependency&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;filteredUses = dependency&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#x9;removeAddionalUses = filteredUses&#xA;end function&#xA;&#xA;'returns a dictionary of elements with the name as key and the element as value.&#xA;function getDependencies(element)&#xA;&#x9;dim getDependencySQL&#xA;&#x9;getDependencySQL =  &quot;select dep.Object_ID from ( t_object dep &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector con on con.End_Object_ID = dep.Object_ID)   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where con.Connector_Type = 'Dependency'  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and con.Start_Object_ID = &quot; &amp; element.ElementID   &#xA;&#x9;set getDependencies = getElementDictionaryFromQuery(getDependencySQL)&#xA;end function&#xA;&#xA;function linkDomainClassesWithBusinessRulesInPackage(dictionary,regExp,selectedPackage)&#xA;&#x9;'get a list of all business rules in the selected package&#xA;&#x9;dim packageList &#xA;&#x9;set packageList = getPackageTree(selectedPackage)&#xA;&#x9;dim packageIDString&#xA;&#x9;packageIDString = makePackageIDString(packageList)&#xA;&#x9;dim getElementsSQL&#xA;&#x9;getElementsSQL = &quot;select r.Object_ID from t_object r where r.stereotype = 'Business Rule' and r.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)&quot;&#xA;&#x9;dim businessRules&#xA;&#x9;set businessRules = getElementsFromQuery(getElementsSQL)&#xA;&#x9;linkDomainClassesWithBusinessRules dictionary,regExp, businessRules&#xA;end function&#xA;&#xA;function linkDomainClassesWithBusinessRules(dictionary,regExp, businessRules)&#xA;&#x9;Session.Output businessRules.Count &amp;&quot; business rules found&quot;&#xA;&#x9;dim businessRule as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim i&#xA;&#x9;for each businessRule in BusinessRules&#xA;&#x9;&#x9;'Repository.WriteOutput outPutName, &quot;Processing Business Rule: &quot; &amp; businessRule.Name, 0&#xA;&#x9;&#x9;'first remove all automatic trace elements&#xA;&#x9;&#x9;removeAllAutomaticTraces(businessRule)&#xA;&#x9;&#x9;dim ruleText&#xA;&#x9;&#x9;'get full text (notes + linked document)&#xA;&#x9;&#x9;ruleText = businessRule.Name&#xA;&#x9;&#x9;ruleText = ruleText &amp; vbNewLine &amp; Repository.GetFormatFromField(&quot;TXT&quot;,businessRule.Notes)&#xA;&#x9;&#x9;ruleText = ruleText &amp; vbNewLine &amp; getLinkedDocumentContent(businessRule, &quot;TXT&quot;)&#xA;&#x9;&#x9;dim matches&#xA;&#x9;&#x9;set matches = regExp.Execute(ruleText)&#xA;&#x9;&#x9;'for each match create a &lt;&lt;trace link&gt;&gt; with business rule&#xA;&#x9;&#x9;linkMatchesWithBusinessRule matches, businessRule, dictionary&#xA;&#x9;next&#xA;&#x9;&#xA;end function&#xA;&#xA;function removeAllAutomaticTraces(element)&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;dim connector as EA.Connector&#xA;&#x9;&#x9;'remove all the traces to Logical Data Model classes&#xA;&#x9;&#x9;for i = element.Connectors.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;set connector = element.Connectors.GetAt(i)&#xA;&#x9;&#x9;&#x9;if connector.Alias = &quot;automatic&quot; and connector.Stereotype = &quot;trace&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;element.Connectors.DeleteAt i,false &#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;end function&#xA;&#xA;function getClassesToMatchDictionary(matches, allClassesDictionary)&#xA;&#x9;dim match&#xA;&#x9;dim classesToMatch&#xA;&#x9;dim className&#xA;&#x9;Set classesToMatch = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;'create list of elements to link&#xA;&#x9;For each match in matches&#xA;&#x9;&#x9;if not allClassesDictionary.Exists(match.Value) then&#xA;&#x9;&#x9;&#x9;'strip the last 's'&#xA;&#x9;&#x9;&#x9;className = left(match.Value, len(match.Value) -1)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;className = match.Value&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not classesToMatch.Exists(className) then&#xA;&#x9;&#x9;&#x9;classesToMatch.Add className, allClassesDictionary(className)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getClassesToMatchDictionary = classesToMatch&#xA;end function&#xA;&#xA;function linkMatchesWithBusinessRule(matches, businessRule, dictionary)&#xA;&#x9;dim classesToMatch&#xA;&#x9;'get the classes to match&#xA;&#x9;Set classesToMatch = getClassesToMatchDictionary(matches,dictionary)&#xA;&#x9;dim classToMatch as EA.Element&#xA;&#x9;'actually link the classes&#xA;&#x9;for each classToMatch in classesToMatch.Items&#xA;&#x9;&#x9;linkElementsWithAutomaticTrace businessRule, classToMatch&#xA;&#x9;next&#xA;end function&#xA;&#xA;function linkElementsWithAutomaticTrace(sourceElement, TargetElement)&#xA;&#x9;dim trace as EA.Connector&#xA;&#x9;set trace = sourceElement.Connectors.AddNew(&quot;&quot;,&quot;trace&quot;)&#xA;&#x9;trace.Alias = &quot;automatic&quot;&#xA;&#x9;trace.SupplierID = TargetElement.ElementID&#xA;&#x9;trace.Update&#xA;end function&#xA;&#xA;function addToClassDictionary(PackageGUID, dictionary)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;set package = Repository.GetPackageByGuid(PackageGUID)&#xA;&#x9;&#xA;&#x9;'get the classes in the dictionary (recursively&#xA;&#x9;addClassesToDictionary package, dictionary&#xA;end function&#xA;&#xA;function addClassesToDictionary(package, dictionary)&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;dim subpackage as EA.Package&#xA;&#x9;'process owned elements&#xA;&#x9;for each classElement in package.Elements&#xA;&#x9;&#x9;'this works for FISSES as well because they are classes with stereotype Message&#xA;&#x9;&#x9;if classElement.Type = &quot;Class&quot; AND len(classElement.Name) &gt; 0 AND not dictionary.Exists(classElement.Name) then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Adding element: &quot; &amp; classElement.Name, 0&#xA;&#x9;&#x9;&#x9;dictionary.Add classElement.Name,  classElement&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;&#x9;'process subpackages&#xA;&#x9;for each subpackage in package.Packages&#xA;&#x9;&#x9;addClassesToDictionary subpackage, dictionary&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;'Create a reges pattern like this &quot;\b(name1|name2|name3)s?\b&quot; based on the &#xA;function createRegexPattern(dictionary)&#xA;&#x9;Dim patternString&#xA;&#x9;dim className&#xA;&#x9;'add begin&#xA;&#x9;patternString = &quot;\b(&quot;&#xA;&#x9;dim addPipe&#xA;&#x9;addPipe = FALSE&#xA;&#x9;for each className in dictionary.Keys&#xA;&#x9;&#x9;&#x9;if addPipe then&#xA;&#x9;&#x9;&#x9;&#x9;patternString = patternString &amp; &quot;|&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;addPipe = True&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;patternString = patternString &amp; className&#xA;&#x9;next&#xA;&#x9;'add end&#xA;&#x9;patternString = patternString &amp; &quot;)s?\b&quot;&#xA;&#x9;'return pattern&#xA;&#x9;createRegexPattern = patternString&#xA;end function&#xA;&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="171"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BC1F515F-8C04-4815-A089-A429CC77ABA2}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DivideInPackages&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Package Group]&#xA;'[group=Project Browser Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: DivideInPackages&#xA;' Author: Geert Bellekens&#xA;' Purpose: Puts each BusinessProcess or SubProcess/Activity in each own package. To be run from a package in the project browser&#xA;' Date: 08/09/2015&#xA;'&#xA;sub main&#xA;&#x9;dim package as EA.Package&#xA;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;dim process as EA.Element&#xA;&#x9;for each process in package.Elements&#xA;&#x9;&#x9;if process.Stereotype = &quot;BusinessProcess&quot; _&#xA;&#x9;&#x9;or process.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set subPackage = package.Packages.AddNew(process.Name,&quot;Package&quot;)&#xA;&#x9;&#x9;&#x9;'msgbox subPackage.Name&#xA;&#x9;&#x9;&#x9;subPackage.Update&#xA;&#x9;&#x9;&#x9;process.PackageID = subPackage.PackageID&#xA;&#x9;&#x9;&#x9;process.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;Repository.RefreshModelView package.PackageID&#xA;&#x9;msgbox &quot;finished!&quot;&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="172"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E40ADDE2-CA80-4513-BE8E-1D5B1F3CF418}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Export to XPDL&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Package Group]&#xA;'[group=Project Browser Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: ExportToXPDL&#xA;' Author: Geert Bellekens&#xA;' Purpose: Exports each package to xpdl&#xA;' Date: 08/09/2015&#xA;'&#xA;sub main&#xA;&#x9;dim package as EA.Package&#xA;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;&#xA;&#x9;'get the folder from the user&#xA;&#x9;dim folder&#xA;    set folder = new FileSystemFolder&#xA;&#x9;set folder = folder.getUserSelectedFolder(&quot;&quot;)&#xA;&#x9;'export&#xA;&#x9;if not folder is nothing then&#xA;&#x9;&#x9;exportToXPDL package, folder&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function exportToXPDL(package, folder)&#xA;&#xA;&#x9;'only process if the package has nu subpackages&#xA;&#x9;if package.Packages.Count = 0 then&#xA;&#x9;&#x9;dim projectInterface as EA.Project&#xA;&#x9;&#x9;set projectInterface = Repository.GetProjectInterface()&#xA;&#x9;&#x9;projectInterface.ExportPackageXMIEx package.PackageGUID, xmiXPDL22,1,0,0,0,folder.FullPath &amp; &quot;\&quot; &amp; package.Name &amp; &quot;.xpdl&quot;,epExcludeEAExtensions&#xA;&#x9;else&#xA;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;&#x9;exportToXPDL subPackage, folder&#xA;&#x9;&#x9;next&#xA;&#x9;end  if&#xA;end function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="173"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{116B375B-77A7-4C91-B4BA-9ED244774212}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Get Message Details&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Package Group]&#xA;'[group=Project Browser Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;' Script Name: Show System.Collections.ArrayList&#xA;' Author: Geert Bellekens&#xA;' Purpose: Get Message Details for all messages in this folder and the subfolders and save them to excel&#xA;' Date: 2017-03-15&#xA;'&#xA;&#xA;'name of the output tab&#xA;const outPutName = &quot;Get Message Details&quot;&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#xA;&#x9;&#x9;'get the selected element&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;set selectedPackage = Repository.GetContextObject&#xA;&#x9;if selectedPackage.ObjectType = otPackage then&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Starting Get Message Details for package '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;&#x9;&#x9;'do the actual work&#xA;&#x9;&#x9;getmessageDetails selectedPackage&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Finished Get Message Details for package '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;&#x9;else&#xA;&#x9;&#x9;msgbox &quot;This script only works on Packages. Please select a Package before executing this script&quot;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getmessageDetails(selectedPackage)&#xA;&#x9;'get the messages in the selected package (and it's subpackages)&#xA;&#x9;dim allMessages&#xA;&#x9;set allMessages = getMessages(selectedPackage)&#xA;&#x9;'add all messages to the Excel file&#xA;&#x9;saveToExcelFile allMessages&#xA;end function&#xA;&#xA;function getMessages(selectedPackage)&#xA;&#x9;dim packageIDtree&#xA;&#x9;packageIDtree = getPackageTreeIDString(selectedPackage)&#xA;&#x9;dim sqlGetMessageElements&#xA;&#x9;sqlGetMessageElements =&#x9;&quot;select o.Object_ID from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Stereotype = 'XSDtopLevelElement' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot; &amp; packageIDtree &amp; &quot;)&quot;&#xA;&#x9;dim messageElements&#xA;&#x9;set messageElements = getElementsFromQuery(sqlGetMessageElements)&#xA;&#x9;dim messageElement&#xA;&#x9;dim currentMessage&#xA;&#x9;dim messages&#xA;&#x9;set messages = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'loop the message elements&#xA;&#x9;for each messageElement in messageElements&#xA;&#x9;&#x9;set currentMessage = new Message&#xA;&#x9;&#x9;currentMessage.loadMessage(messageElement)&#xA;&#x9;&#x9;'add the message to the list of messages&#xA;&#x9;&#x9;messages.add currentMessage&#xA;&#x9;&#x9;'tell the user what we are doing&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Processed Message '&quot; &amp; currentMessage.Name &amp; &quot;'&quot;, messageElement.ElementID&#xA;&#x9;next&#xA;&#x9;'return messages&#xA;&#x9;set getMessages = messages&#xA;end function&#xA;&#xA;function saveToExcelFile(allMessages)&#xA;&#x9;dim message&#xA;&#x9;'create the excel file&#xA;&#x9;dim excelOutput&#xA;&#x9;set excelOutput = new ExcelFile&#xA;&#x9;'loop al messages&#xA;&#x9;for each message in allMessages&#xA;&#x9;&#x9;'create tab for types&#xA;&#x9;&#x9;dim messageTypesList&#xA;&#x9;&#x9;set messageTypesList = message.getMessageTypes()&#xA;&#x9;&#x9;dim messageTypesArray&#xA;&#x9;&#x9;messageTypesArray = makeArrayFromArrayLists(messageTypesList)&#xA;&#x9;&#x9;excelOutput.createTab message.Prefix &amp; &quot; Types&quot;, messageTypesArray, true, &quot;TableStyleMedium4&quot;&#xA;&#x9;&#x9;'create tab for message contents&#xA;&#x9;&#x9;dim messageOutputList&#xA;&#x9;&#x9;set messageOutputList = message.createFullOutput()&#xA;&#x9;&#x9;dim messageOutputArray&#xA;&#x9;&#x9;messageOutputArray = makeArrayFromArrayLists(messageOutputList)&#xA;&#x9;&#x9;'add the output to a sheet in excel&#xA;&#x9;&#x9;excelOutput.createTab message.Prefix &amp; &quot; Msg&quot;, messageOutputArray, true, &quot;TableStyleMedium4&quot;&#xA;&#x9;next&#xA;&#x9;'only save if there is anything to save&#xA;&#x9;if allMessages.Count &gt; 0 then&#xA;&#x9;&#x9;'save the excel file&#xA;&#x9;&#x9;excelOutput.save&#xA;&#x9;end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="174"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{50C14BE6-3DD5-4E15-A4BF-41312005C108}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set ldm stereotype&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Package Group]&#xA;'[group=Project Browser Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim package as EA.Package&#xA;&#x9;set package = Repository.GetTreeSelectedPackage()&#xA;&#x9;session.output package.Name&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;if package.Name = &quot;Logical Data Model Entities&quot; then&#xA;&#x9;&#x9;for each classElement in package.Elements&#xA;&#x9;&#x9;&#x9;if classElement.Type = &quot;Class&quot; and classElement.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;classElement.Stereotype = &quot;ldm&quot;&#xA;&#x9;&#x9;&#x9;&#x9;classElement.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#x9;Repository.RefreshModelView package.PackageID&#xA;&#x9;msgbox &quot;finished!&quot;&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="175"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A89BCBD9-D156-42DE-AC2B-DBB8EB5ECCAA}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SetFISDirection&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Project Browser Package Group]&#xA;'[group=Project Browser Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;dim outputTabName&#xA;outputTabName = &quot;FISDirections&quot;&#xA;&#xA;sub main&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting Setting FIS direction&quot;,0&#xA;&#x9;'get selected package&#xA;&#x9;dim selectedPackage&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage&#xA;&#x9;if not selectedPackage is nothing then&#xA;&#x9;&#x9;'get tree of package&#xA;&#x9;&#x9;dim packageTree&#xA;&#x9;&#x9;set packageTree = getPackageTree(selectedPackage)&#xA;&#x9;&#x9;'get id list&#xA;&#x9;&#x9;dim packageIDList&#xA;&#x9;&#x9;packageIDList =&#x9;makePackageIDString(packageTree)&#xA;&#x9;&#x9;'make sql query&#xA;&#x9;&#x9;dim sqlGetAllMessages&#xA;&#x9;&#x9;sqlGetAllMessages = &quot;select o.Object_ID from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Stereotype in ('FIS', 'Message') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot; &amp; packageIDList &amp; &quot;)&quot;&#xA;&#x9;&#x9;dim allMessages&#xA;&#x9;&#x9;set allMessages = Repository.GetElementSet(sqlGetAllMessages,2)&#xA;&#x9;&#x9;dim message as EA.Element&#xA;&#x9;&#x9;for each message in allMessages&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Processing: &quot; &amp; message.Name,0&#xA;&#x9;&#x9;&#x9;dim directionTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set directionTV = getOrCreateTaggedValue (message, &quot;Atrias::Direction&quot;)&#xA;&#x9;&#x9;&#x9;directionTV.Value = getMessageDirection(message)&#xA;&#x9;&#x9;&#x9;directionTV.Update&#xA;'&#x9;&#x9;&#x9;message.StereotypeEx = &quot;Message&quot;&#xA;'&#x9;&#x9;&#x9;message.Update&#xA;'&#x9;&#x9;&#x9;'add tagged value if not exists yet&#xA;'&#x9;&#x9;&#x9;getOrCreateTaggedValue message, &quot;Atrias::Direction&quot;&#xA;'&#x9;&#x9;&#x9;'remove tagged value Direction&#xA;'&#x9;&#x9;&#x9;removeTaggedValue message, &quot;Direction&quot;&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished setting FIS direction&quot;,0&#xA;end sub&#xA;&#xA;function getMessageDirection (message)&#xA;&#x9;dim messageFlows &#xA;&#x9;set messageFlows = findMessageFlows(message)&#xA;&#x9;dim messageFlow as EA.Connector&#xA;&#x9;dim direction&#xA;&#x9;dim previousDirection&#xA;&#x9;previousDirection = &quot;&quot;&#xA;&#x9;for each messageFlow in messageflows&#xA;&#x9;&#x9;direction = getMessageFlowDirection (messageFlow)&#xA;&#x9;&#x9;if previousDirection = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;previousDirection = direction&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if previousDirection &lt;&gt; direction and direction &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;direction = &quot;InOut&quot;&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;getMessageDirection = direction&#xA;end function&#xA;&#xA;function getMessageFlowDirection (messageFlow)&#xA;&#x9;'default empty&#xA;&#x9;getMessageFlowDirection = &quot;&quot;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;set source = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#x9;dim poolClassifier as EA.Element&#xA;&#x9;set poolClassifier = getPoolClassifier(source)&#xA;&#x9;if not poolClassifier is nothing then&#xA;&#x9;&#x9;if poolClassifier.Name = &quot;Central Market System&quot; then&#xA;&#x9;&#x9;&#x9;getMessageFlowDirection = &quot;Out&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;getMessageFlowDirection = &quot;In&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;'try with target&#xA;&#x9;&#x9;dim target as EA.Element&#xA;&#x9;&#x9;set target = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#x9;&#x9;if not poolClassifier is nothing then&#xA;&#x9;&#x9;&#x9;if poolClassifier.Name = &quot;Central Market System&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;getMessageFlowDirection = &quot;In&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;getMessageFlowDirection = &quot;Out&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#x9;&#xA;end function&#xA;&#xA;function getPoolClassifier(element)&#xA;&#x9;'dim element as EA.Element&#xA;&#x9;dim parent  as EA.Element&#xA;&#x9;if not element is nothing then&#xA;&#x9;&#x9;if element.Type = &quot;ActivityPartition&quot;  and element.Stereotype = &quot;Pool&quot; then&#xA;&#x9;&#x9;&#x9;set getPoolClassifier = Repository.GetElementByID(element.ClassfierID)&#xA;&#x9;&#x9;elseif element.type = &quot;Package&quot; or element.ParentID = 0 then &#xA;&#x9;&#x9;&#x9;set getPoolClassifier = nothing&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set parent = Repository.GetElementByID(element.ParentID)&#xA;&#x9;&#x9;&#x9;set getPoolClassifier = getPoolClassifier(parent)&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;set getPoolClassifier = nothing&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function findMessageFlows(message)&#xA;&#x9;dim sqlQuery&#xA;&#x9;sqlQuery = &#x9;&quot;select ctv.ElementID as Connector_ID from t_connectortag ctv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where ctv.Property = 'messageRef' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and ctv.VALUE = '&quot; &amp; message.ElementGUID &amp; &quot;'&quot;&#xA;&#x9;set findMessageFlows = getConnectorsFromQuery(sqlQuery)&#xA;end function&#xA;&#xA;function getOrCreateTaggedValue(element, taggedValueName)&#xA;&#x9;'add tagged value if not exists yet&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim taggedValueExists&#xA;&#x9;taggedValueExists = false&#xA;&#x9;for each taggedValue in element.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;&#x9;&#x9;&#x9;taggedValueExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create tagged value is not existing yet&#xA;&#x9;if taggedValueExists = false then&#xA;&#x9;&#x9;set taggedValue = element.TaggedValues.AddNew(taggedValueName,&quot;&quot;)&#xA;&#x9;&#x9;taggedValue.Update&#xA;&#x9;end if&#xA;&#x9;set getOrCreateTaggedValue = taggedValue&#xA;end function&#xA;&#xA;function removeTaggedValue(element, taggedValueName)&#xA;'&#x9;dim taggedValue as EA.TaggedValue&#xA;'&#x9;dim i&#xA;'&#x9;'loop tagged values&#xA;'&#x9;for i = 0 to element.TaggedValues.Count -1&#xA;'&#x9;&#x9;set taggedValue = element.TaggedValues.Getat(i)&#xA;'&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;'&#x9;&#x9;&#x9;element.TaggedValues.DeleteAt i, false&#xA;'&#x9;&#x9;&#x9;exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;next&#xA;&#x9;'use dirty SQL delete for performance&#xA;&#x9;dim sqlDelete&#xA;&#x9;sqlDelete =&#x9;&quot;delete from  t_objectproperties &quot; &amp; _&#xA;&#x9;&#x9;&quot; where Object_ID = &quot; &amp; element.ElementID &amp; _&#xA;&#x9;&#x9;&quot; and Property = 'Direction'&quot;&#xA;&#x9;Repository.Execute sqlDelete&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="177"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3D84388F-03DE-4768-92C1-20842ECF722E}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Hide LDM stereotypes items&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Rationalisation Data Models]&#xA;'[group=Rationalisation Data Models]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: Hide LDM Stereotypes items&#xA;' Author: Geert Bellekens&#xA;' Purpose: Hide all elements, attributes and associations that have the LDM stereotype&#xA;' Date: 2016-09-09&#xA;'&#xA;sub main&#xA;&#x9;'select source logical&#xA;&#x9;dim DMPackage as EA.Package&#xA;&#x9;msgbox &quot;select the DM package&quot;&#xA;&#x9;set DMPackage = selectPackage()&#xA;&#x9;dim DMPackageIDString, DMPackageTree&#xA;&#x9;set DMPackageTree = getPackageTree(DMPackage)&#xA;&#x9;dmPackageIDString = makePackageIDString(DMPackageTree)&#xA;&#x9;'hide attributes with LDM stereotype&#xA;&#x9;dim updateDiagramObjectsSQL&#xA;&#x9; = &quot;update do set do.ObjectStyle = do.ObjectStyle + 'HideStype=LDM;' &quot; &amp; _&#xA;&#x9;&#x9;&quot; from t_object o  &quot; &amp; _&#xA;&#x9;&#x9;&quot; join t_diagramobjects do on do.Object_ID = o.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&quot; join t_diagram d on d.Diagram_ID = do.Diagram_ID &quot; &amp; _&#xA;&#x9;&#x9;&quot; where d.Package_ID in (&quot; &amp; dmPackageIDString &amp; &quot;) &quot; &amp; _&#xA;&#x9;&#x9;&quot; and do.ObjectStyle not like '%HideStype=%' &quot; &#xA;&#x9;'hide associations with LDM stereotype&#xA;&#x9;dim &#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="179"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1837FF13-F16D-4B8A-A4EA-601F17391CC4}"/>
			<Column name="ScriptAuthor" value="{0BF2B622-AB6E-4D11-8D98-0F8B4EF91F4C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Actor x Use Case x GUI matrix  (in selected package)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Search Group]&#xA;'[group=Search Group]&#xA;&#xA;' Script Name: Use Case UI Matrix (in selected package)&#xA;' Author: Geert Bellekens&#xA;' Purpose: shows the Actor x Use Case x GUI matrix in the search results&#xA;' Date: 2017-02-15&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;const outputTabName = &quot;Actor x UseCase x GUI Matrix&quot;&#xA;&#xA;sub main&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'get the current package ID string&#xA;&#x9;dim currentPackageIDString&#xA;&#x9;currentPackageIDString = getCurrentPackageTreeIDString()&#xA;&#x9;'get all use cases (in the selected package)&#xA;&#x9;dim allUseCases&#xA;&#x9;set allUseCases = getAllUseCases(currentPackageIDString)&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; : Number of use cases found: &quot; &amp; allUseCases.Count ,0&#xA;&#x9;'get all included use cases for each use case&#xA;&#x9;dim includedUseCasesWithExecutionRights&#xA;&#x9;set includedUseCasesWithExecutionRights = getAllIncludesWithExecutionRights(allUseCases,currentPackageIDString)&#xA;&#x9;'show the output&#xA;&#x9;showOutput includedUseCasesWithExecutionRights&#xA;end sub &#xA;&#xA;&#xA;function getAllIncludesWithExecutionRights(allUseCases,currentPackageIDString)&#xA;&#x9;dim useCase as EA.Element&#xA;&#x9;dim includesUseCasesforUseCase&#xA;&#x9;set includesUseCasesforUseCase = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;for each useCase in allUseCases &#xA;&#x9;&#x9;dim includedUseCases&#xA;&#x9;&#x9;set includedUseCases = nothing&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Processing use case: &quot; &amp; useCase.Name , useCase.ElementID&#xA;&#x9;&#x9;set includedUseCases = getIncludedUseCases(useCase, includedUseCases,currentPackageIDString)&#xA;&#x9;&#x9;includesUseCasesforUseCase.Add useCase, includedUseCases&#xA;&#x9;next&#xA;&#x9;dim outputRows&#xA;&#x9;set outputRows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'create output format, and arraylist of arraylists that list actor, use case and GUI element&#xA;&#x9;for each useCase in includesUseCasesforUseCase.Keys&#xA;&#x9;&#x9;'get the actors for this use case&#xA;&#x9;&#x9;dim actors&#xA;&#x9;&#x9;set actors = getActors(useCase)&#xA;&#x9;&#x9;dim includedUseCase&#xA;&#x9;&#x9;'add rows for this use case&#xA;&#x9;&#x9;addOutputRows usecase, actors, true , outputRows&#xA;&#x9;&#x9;for each includedUseCase in includesUseCasesforUseCase(useCase)&#xA;&#x9;&#x9;&#x9;'add rows for included use case&#xA;&#x9;&#x9;&#x9;addOutputRows includedUseCase, actors, false , outputRows&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#x9;'return output&#xA;&#x9;set getAllIncludesWithExecutionRights = outputRows&#xA;end function&#xA;&#xA;function addOutputRows(usecase, actors, directIndicator,outputRows)&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Creating output for use case: &quot; &amp; usecase.Name , usecase.ElementID&#xA;&#x9;'get the user interfaces&#xA;&#x9;dim userInterfaces &#xA;&#x9;set userInterfaces = getUserInterfaces(usecase)&#xA;&#x9;'get packages&#xA;&#x9;'get package0&#xA;&#x9;dim package0 as EA.Package&#xA;&#x9;set package0 = Repository.GetPackageByID(useCase.PackageID)&#xA;&#x9;'get package1&#xA;&#x9;dim package1 as EA.Package&#xA;&#x9;if package0.ParentID &gt; 0 then&#xA;&#x9;&#x9;set package1 = Repository.GetPackageByID(package0.ParentID)&#xA;&#x9;end if&#xA;&#x9;'get package2&#xA;&#x9;dim package2 as EA.Package&#xA;&#x9;if not package1 is nothing and package1.ParentID &gt; 0 then&#xA;&#x9;&#x9;set package2 = Repository.GetPackageByID(package1.ParentID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package2 = nothing&#xA;&#x9;end if&#xA;&#x9;'get package2&#xA;&#x9;dim package3 as EA.Package&#xA;&#x9;if not package2 is nothing and package2.ParentID &gt; 0 then&#xA;&#x9;&#x9;set package3 = Repository.GetPackageByID(package2.ParentID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package3 = nothing&#xA;&#x9;end if&#xA;&#x9;dim row&#xA;&#x9;dim actor as EA.Element&#xA;&#x9;dim userInterface as EA.Element&#xA;&#x9;for each actor in actors&#xA;&#x9;&#x9;dim actorType&#xA;&#x9;&#x9;actorType = getActorType(actor)&#xA;&#x9;&#x9;'add rows for each actor&#xA;&#x9;&#x9;if userInterfaces.Count = 0 then&#xA;&#x9;&#x9;&#x9;set row = getOutputRow(usecase, actor, actorType, directIndicator, nothing, package0, package1, package2, package3)&#xA;&#x9;&#x9;&#x9;outputRows.Add row&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add rows for each user interface&#xA;&#x9;&#x9;for each userInterface in userInterfaces&#xA;&#x9;&#x9;&#x9;set row = getOutputRow(usecase, actor, actorType, directIndicator, userInterface, package0, package1, package2, package3)&#xA;&#x9;&#x9;&#x9;outputRows.Add row&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getActorType(actor)&#xA;&#x9;dim actorPackage as EA.Package&#xA;&#x9;set actorPackage = Repository.GetPackageByID(actor.PackageID)&#xA;&#x9;if instr(actorPackage.Name, &quot;Human&quot;) &gt; 0 then&#xA;&#x9;&#x9;getActorType = &quot;Human&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getActorType = &quot;System&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getOutputRow(usecase, actor, actorType, directIndicator, userInterface, package0, package1, package2, package3)&#xA;&#x9;'create outputrow&#xA;&#x9;dim outputRow&#xA;&#x9;set outputRow = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'add data&#xA;&#x9;outputRow.Add useCase.ElementGUID&#xA;&#x9;outputRow.Add useCase.Type&#xA;&#x9;outputRow.Add actor.Name&#xA;&#x9;outputRow.Add actorType&#xA;&#x9;outputRow.Add useCase.Name&#xA;&#x9;if directIndicator then&#xA;&#x9;&#x9;outputRow.Add &quot;Direct&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;outputRow.Add &quot;Indirect&quot;&#xA;&#x9;end if&#xA;&#x9;if not userInterface is nothing then&#xA;&#x9;&#x9;outputRow.Add userInterface.Name&#xA;&#x9;else&#xA;&#x9;&#x9;outputRow.Add &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;if not package0 is nothing then&#xA;&#x9;&#x9;outputRow.Add package0.Name&#xA;&#x9;else&#xA;&#x9;&#x9;outputRow.Add &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;if not package1 is nothing then&#xA;&#x9;&#x9;outputRow.Add package1.Name&#xA;&#x9;else&#xA;&#x9;&#x9;outputRow.Add &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;if not package2 is nothing then&#xA;&#x9;&#x9;outputRow.Add package2.Name&#xA;&#x9;else&#xA;&#x9;&#x9;outputRow.Add &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;if not package3 is nothing then&#xA;&#x9;&#x9;outputRow.Add package3.Name&#xA;&#x9;else&#xA;&#x9;&#x9;outputRow.Add &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;'return row&#xA;&#x9;set getOutputRow = outputRow&#xA;end function&#xA;&#xA;function showOutput(outputRows)&#xA;&#x9;&#xA;&#x9;'get the headers for the output&#xA;&#x9;dim headers&#xA;&#x9;set headers = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;headers.Add &quot;CLASSGUID&quot;&#xA;&#x9;headers.Add &quot;CLASSTYPE&quot;&#xA;&#x9;headers.Add &quot;Actor&quot;&#xA;&#x9;headers.Add &quot;Actor Type&quot;&#xA;&#x9;headers.Add &quot;Use Case&quot;&#xA;&#x9;headers.Add &quot;Use Case Link Type&quot;&#xA;&#x9;headers.Add &quot;User Interface&quot;&#xA;&#x9;headers.Add &quot;Package_level1 &quot;&#xA;&#x9;headers.Add &quot;Package_level2&quot;&#xA;&#x9;headers.Add &quot;Package_level3&quot;&#xA;&#x9;headers.Add &quot;Package_level4&quot;&#xA;&#x9;'create the output object&#xA;&#x9;dim searchOutput&#xA;&#x9;set searchOutput = new SearchResults&#xA;&#x9;searchOutput.Name = &quot;Use Case UI Matrix&quot;&#xA;&#x9;searchOutput.Fields = headers&#xA;&#x9;'put the contents in the output&#xA;&#x9;dim row&#xA;&#x9;for each row in outputRows&#xA;&#x9;&#x9;'add row the the output&#xA;&#x9;&#x9;searchOutput.Results.Add row&#xA;&#x9;next&#xA;&#x9;'show the output&#xA;&#x9;searchOutput.Show&#xA;end function&#xA;&#xA;function getUserInterfaces(usecase)&#xA;&#x9;'find user interfaces&#xA;&#x9;dim getUserInterfacesSQL&#xA;&#x9;getUserInterfacesSQL =  &quot;select ui.Object_ID                                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from  t_object ac                                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object step on step.ParentID = ac.Object_ID                           &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and step.Object_Type = 'Action'                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector step_ui on step_ui.Start_Object_ID = step.Object_ID         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object ui on step_ui.End_Object_ID = ui.Object_ID                     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and ui.Stereotype = 'ArchiMate_ApplicationInterface'     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where ac.Object_Type = 'Activity'                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and ac.ParentID = &quot; &amp; usecase.ElementID&#xA;&#x9;'return the userinterface&#xA;&#x9;set getUserInterfaces = getElementsFromQuery(getUserInterfacesSQL)&#xA;end function&#xA;&#xA;function getActors(useCase)&#xA;&#x9;'first get the direct actors&#xA;&#x9;dim getDirectActorsSQL&#xA;&#x9;getDirectActorsSQL = &#x9;&quot;select act.Object_ID from t_object act                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector act_uc on act_uc.Start_Object_ID = act.Object_ID               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and act_uc.Connector_Type in ('Association','UseCase')  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and act_uc.End_Object_ID = &quot; &amp; useCase.ElementID &amp; &quot; &#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where act.Object_Type = 'Actor'&#x9;                                                 &#x9;&quot;&#xA;&#x9;dim actors&#xA;&#x9;set actors = getElementsFromQuery(getDirectActorsSQL)&#xA;&#x9;dim allActors&#xA;&#x9;set allActors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;'then get the specialized actors for each actor&#xA;&#x9;dim actor as EA.Element&#xA;&#x9;for each actor in actors&#xA;&#x9;&#x9;'add the actor itself&#xA;&#x9;&#x9;allActors.Add actor&#xA;&#x9;&#x9;set allActors = getSpecializedActors(actor, allActors)&#xA;&#x9;next&#xA;&#x9;'return the actors&#xA;&#x9;set getActors = allActors&#xA;end function&#xA;&#xA;function getSpecializedActors(actor, allActors)&#xA;&#x9;dim allActorsIDString&#xA;&#x9;allActorsIDString = makeIDString(allActors)&#xA;&#x9;dim getChildActorsSQL&#xA;&#x9;getChildActorsSQL = &quot;select act.Object_ID from  t_object act                                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector gen on gen.Start_Object_ID = act.Object_ID               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;and gen.Connector_Type in ('Generalization','Generalisation') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;and gen.End_Object_ID = &quot; &amp; actor.ElementID &amp; &quot;               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where act.Object_Type = 'Actor'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Object_ID not in (&quot; &amp; allActorsIDString &amp; &quot;)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;&#xA;&#x9;dim childActors&#xA;&#x9;set childActors = getElementsFromQuery(getChildActorsSQL)&#xA;&#x9;'add the childActors to the list of all actors&#xA;&#x9;allActors.AddRange(childActors)&#xA;&#x9;'go level deeper&#xA;&#x9;dim childActor&#xA;&#x9;for each childActor in childActors&#xA;&#x9;&#x9;set allActors = getSpecializedActors(actor, allActors)&#xA;&#x9;next&#xA;&#x9;'return the list of actors&#xA;&#x9;set getSpecializedActors = allActors&#xA;end function&#xA;&#xA;function getIncludedUseCases(useCase, includedUseCases,currentPackageIDString)&#xA;&#x9;dim sqlGetIncludes&#xA;&#x9;dim includedUseCasesIdString&#xA;&#x9;dim directIncludes&#xA;&#x9;if not includedUseCases is nothing then&#xA;&#x9;&#x9;includedUseCasesIdString = makeIDString(includedUseCases)&#xA;&#x9;else&#xA;&#x9;&#x9;includedUseCasesIdString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;sqlGetIncludes = &quot;select uc.Object_ID from t_object uc                                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector c on c.End_Object_ID = uc.Object_ID                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where c.Connector_Type in ('Association','UseCase')                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and uc.Object_Type = 'UseCase'                                                      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and c.Start_Object_ID = &quot; &amp; useCase.ElementID &amp; &quot;                                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and uc.Object_ID not in (&quot; &amp;  includedUseCasesIdString &amp; &quot;)                         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and uc.Package_ID in (&quot; &amp;  currentPackageIDString &amp; &quot;)                              &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and not exists                                                                      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;(                                                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;select act.Object_ID from t_object act                                        &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;inner join t_connector act_c on act_c.Start_Object_ID = act.Object_ID         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;inner join t_package act_p on act_p.Package_ID = act.Package_ID               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;where act_c.Connector_Type in ('Association','UseCase')                       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;and act_c.End_Object_ID = uc.Object_ID                                        &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;and act.Object_Type = 'Actor'                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;and act_p.Name like '%Human%'                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;)&quot;&#x9;&#xA;&#x9;'get the new includes&#xA;&#x9;set directIncludes = getElementsFromQuery(sqlGetIncludes)&#xA;&#x9;dim includedUseCase as EA.Element&#xA;&#x9;'if the includes usecases have not been defined yet initialize them with the newincludes&#xA;&#x9;if includedUseCases is nothing then&#xA;&#x9;&#x9;set includedUseCases = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;end if&#xA;&#x9;'add the direct included use cases&#xA;&#x9;includedUseCases.AddRange(directIncludes)&#xA;&#xA;&#x9;'go one level deeper&#xA;&#x9;'loop the direct use cases&#xA;&#x9;for each includedUseCase in directIncludes&#xA;&#x9;&#x9;'get their included use cases&#xA;&#x9;&#x9;set includedUseCases = getIncludedUseCases(includedUseCase,includedUseCases,currentPackageIDString )&#xA;&#x9;next&#xA;&#x9;'return the included use cases&#xA;&#x9;set getIncludedUseCases = includedUseCases&#xA;end function&#xA;&#xA;function getAllUseCases(currentPackageIDString)&#xA;&#x9;dim SQLGetAllUseCases&#xA;&#x9;SQLGetAllUseCases = &quot;select uc.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from t_object uc &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where uc.Object_Type = 'UseCase' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and uc.Package_ID IN (&quot; &amp; currentPackageIDString &amp; &quot;)&quot;&#xA;&#x9;set getAllUseCases = getElementsFromQuery(SQLGetAllUseCases)&#xA;end function&#xA;&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="180"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{14577CCD-B313-4B0B-82CB-D5760A55AF02}"/>
			<Column name="ScriptAuthor" value="{0BF2B622-AB6E-4D11-8D98-0F8B4EF91F4C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;In Linked Documents&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Search Scripts]&#xA;'[group=Search Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' This code has been included from the default Search Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;'&#xA;&#xA;' TODO 1: Define your search specification:&#xA;' The columns that will apear in the Model Search window&#xA;dim SEARCH_SPECIFICATION &#xA;SEARCH_SPECIFICATION = &quot;&lt;ReportViewData&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Fields&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=&quot;&quot;CLASSGUID&quot;&quot;/&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=&quot;&quot;CLASSTYPE&quot;&quot; /&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=&quot;&quot;Element Name&quot;&quot; /&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=&quot;&quot;Comments&quot;&quot; /&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/Fields&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Rows/&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/ReportViewData&gt;&quot;&#xA;&#xA;'&#xA;' Search Script main function&#xA;' &#xA;sub OnSearchScript()&#xA;&#x9;'get the search term&#xA;&#x9;dim searchTerm&#xA;&#x9;searchTerm = InputBox( &quot;Please enter term to search for&quot;, &quot;search term&quot; )&#xA;&#x9;'get the linked documents&#xA;&#x9;dim allLinkedDocuments&#xA;&#x9;set allLinkedDocuments = getAllLinkedDocuments()&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' Create a DOM object to represent the search tree&#xA;&#x9;dim xmlDOM&#xA;&#x9;set xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9;&#xA;&#x9;' Load the search template&#xA;&#x9;if xmlDOM.loadXML( SEARCH_SPECIFICATION ) = true then&#xA;&#x9;&#xA;&#x9;&#x9;dim rowsNode&#xA;&#x9;&#x9;set rowsNode = xmlDOM.selectSingleNode( &quot;//ReportViewData//Rows&quot; )&#xA;&#x9;&#xA;&#x9;&#x9;' TODO 2: Gather the required data from the repository&#xA;&#x9;&#x9;' This template adds a result row for a bogus class to the search document&#xA;&#x9;&#x9;AddRow xmlDOM, rowsNode, &quot;{2917209A-D3E0-4de7-8AED-C7D7F059D96F}&quot;, &quot;ResultClass&quot;, _&#xA;&#x9;&#x9;&#x9;&quot;Here are some comments about this class!&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' Fill the Model Search window with the results&#xA;&#x9;&#x9;Repository.RunModelSearch &quot;&quot;, &quot;&quot;, &quot;&quot;, xmlDOM.xml&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Failed to load search xml&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#x9;&#xA;&#xA;'&#xA;' TODO 3: Modify this function signature to include all information required for the search&#xA;' results. Entire objects (such as elements, attributes, operations etc) may be passed in.&#xA;'&#xA;' Adds an entry to the xml row node 'rowsNode'&#xA;'&#xA;sub AddRow( xmlDOM, rowsNode, elementGUID, elementName, comments )&#xA;&#xA;&#x9;' Create a Row node&#xA;&#x9;dim row&#xA;&#x9;set row = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;&#xA;&#x9;' Add the Model Search row data to the DOM&#xA;&#x9;AddField xmlDOM, row, &quot;CLASSGUID&quot;, elementGUID&#xA;&#x9;AddField xmlDOM, row, &quot;CLASSTYPE&quot;, &quot;Class&quot;&#xA;&#x9;AddField xmlDOM, row, &quot;Name&quot;, elementName&#xA;&#x9;AddField xmlDOM, row, &quot;Comments&quot;, comments&#xA;&#x9;&#xA;&#x9;' Append the newly created row node to the rows node&#xA;&#x9;rowsNode.appendChild( row )&#xA;&#xA;end sub&#xA;&#xA;'&#xA;' Adds an Element to the DOM called Field which makes up the Row data for the Model Search window.&#xA;' &lt;Field name &quot;&quot; value &quot;&quot;/&gt;&#xA;'&#xA;sub AddField( xmlDOM, row, name, value )&#xA;&#xA;&#x9;dim fieldNode&#xA;&#x9;set fieldNode = xmlDOM.createElement( &quot;Field&quot; )&#xA;&#x9;&#xA;&#x9;' Create first attribute for the name&#xA;&#x9;dim nameAttribute&#xA;&#x9;set nameAttribute = xmlDOM.createAttribute( &quot;name&quot; )&#xA;&#x9;nameAttribute.value = name&#xA;&#x9;fieldNode.attributes.setNamedItem( nameAttribute )&#xA;&#x9;&#xA;&#x9;' Create second attribute for the value&#xA;&#x9;dim valueAttribute &#xA;&#x9;set valueAttribute = xmlDOM.createAttribute( &quot;value&quot; )&#xA;&#x9;valueAttribute.value = value&#xA;&#x9;fieldNode.attributes.setNamedItem( valueAttribute )&#xA;&#x9;&#xA;&#x9;' Append the fieldNode&#xA;&#x9;row.appendChild( fieldNode )&#xA;&#xA;end sub&#xA;&#xA;'returns a dictionary of all elements that have a linked document as key and the text of the linked document as value.&#xA;function getAllLinkedDocuments&#xA;&#x9;dim queryString&#xA;&#x9;queryString =&#x9;&quot;select o.object_ID from t_document d &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on d.ElementID = o.ea_guid &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where d.ElementType = 'ModelDocument'&quot;&#xA;&#x9;dim elementsWithLinkedDocument&#xA;&#x9;set elementsWithLinkedDocument = getElementsFromQuery(queryString)&#xA;&#x9;Session.Output &quot;number of elements with a linked document: &quot; &amp; elementsWithLinkedDocument.count&#xA;&#x9;dim linkedDocumentsDictionary&#xA;&#x9;set linkedDocumentsDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;'loop the elements and add element and its linked document to the dictionary&#xA;&#x9;for each element in elementsWithLinkedDocument&#xA;&#x9;&#x9;dim linkedDocumentText&#xA;&#x9;&#x9;linkedDocumentText = getLinkedDocumentContent(element, &quot;TXT&quot;)&#xA;&#x9;&#x9;linkedDocumentsDictionary.Add element, linkedDocumentText&#xA;&#x9;next&#xA;&#x9;set getAllLinkedDocuments = linkedDocumentsDictionary&#xA;end function&#xA;&#xA;&#xA;OnSearchScript()"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="182"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{781DEDF3-DB64-45CB-9E41-E5A33B5F9CA9}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FixCRNotes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Temp]&#xA;'[group=Temp]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-1-','date=2015-01-') from t_objectproperties tv where tv.Notes like '%date=2015-1-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-2-','date=2015-02-') from t_objectproperties tv where tv.Notes like '%date=2015-2-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-3-','date=2015-03-') from t_objectproperties tv where tv.Notes like '%date=2015-3-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-4-','date=2015-04-') from t_objectproperties tv where tv.Notes like '%date=2015-4-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-5-','date=2015-05-') from t_objectproperties tv where tv.Notes like '%date=2015-5-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-6-','date=2015-06-') from t_objectproperties tv where tv.Notes like '%date=2015-6-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-7-','date=2015-07-') from t_objectproperties tv where tv.Notes like '%date=2015-7-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-8-','date=2015-08-') from t_objectproperties tv where tv.Notes like '%date=2015-8-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-9-','date=2015-09-') from t_objectproperties tv where tv.Notes like '%date=2015-9-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-1-','date=2016-01-') from t_objectproperties tv where tv.Notes like '%date=2016-1-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-2-','date=2016-02-') from t_objectproperties tv where tv.Notes like '%date=2016-2-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-3-','date=2016-03-') from t_objectproperties tv where tv.Notes like '%date=2016-3-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-4-','date=2016-04-') from t_objectproperties tv where tv.Notes like '%date=2016-4-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-5-','date=2016-05-') from t_objectproperties tv where tv.Notes like '%date=2016-5-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-6-','date=2016-06-') from t_objectproperties tv where tv.Notes like '%date=2016-6-%'&quot;&#xA;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-1-','date=2015-01-') from t_attributetag tv where tv.Notes like '%date=2015-1-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-2-','date=2015-02-') from t_attributetag tv where tv.Notes like '%date=2015-2-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-3-','date=2015-03-') from t_attributetag tv where tv.Notes like '%date=2015-3-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-4-','date=2015-04-') from t_attributetag tv where tv.Notes like '%date=2015-4-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-5-','date=2015-05-') from t_attributetag tv where tv.Notes like '%date=2015-5-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-6-','date=2015-06-') from t_attributetag tv where tv.Notes like '%date=2015-6-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-7-','date=2015-07-') from t_attributetag tv where tv.Notes like '%date=2015-7-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-8-','date=2015-08-') from t_attributetag tv where tv.Notes like '%date=2015-8-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2015-9-','date=2015-09-') from t_attributetag tv where tv.Notes like '%date=2015-9-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-1-','date=2016-01-') from t_attributetag tv where tv.Notes like '%date=2016-1-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-2-','date=2016-02-') from t_attributetag tv where tv.Notes like '%date=2016-2-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-3-','date=2016-03-') from t_attributetag tv where tv.Notes like '%date=2016-3-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-4-','date=2016-04-') from t_attributetag tv where tv.Notes like '%date=2016-4-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-5-','date=2016-05-') from t_attributetag tv where tv.Notes like '%date=2016-5-%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), 'date=2016-6-','date=2016-06-') from t_attributetag tv where tv.Notes like '%date=2016-6-%'&quot;&#xA;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-1;comments','-01;comments') from t_objectproperties tv where tv.Notes like '%-1;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-2;comments','-02;comments') from t_objectproperties tv where tv.Notes like '%-2;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-3;comments','-03;comments') from t_objectproperties tv where tv.Notes like '%-3;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-4;comments','-04;comments') from t_objectproperties tv where tv.Notes like '%-4;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-5;comments','-05;comments') from t_objectproperties tv where tv.Notes like '%-5;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-6;comments','-06;comments') from t_objectproperties tv where tv.Notes like '%-6;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-7;comments','-07;comments') from t_objectproperties tv where tv.Notes like '%-7;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-8;comments','-08;comments') from t_objectproperties tv where tv.Notes like '%-8;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-9;comments','-09;comments') from t_objectproperties tv where tv.Notes like '%-9;comments%'&quot;&#xA;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-1;comments','-01;comments') from t_attributetag tv where tv.Notes like '%-1;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-2;comments','-02;comments') from t_attributetag tv where tv.Notes like '%-2;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-3;comments','-03;comments') from t_attributetag tv where tv.Notes like '%-3;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-4;comments','-04;comments') from t_attributetag tv where tv.Notes like '%-4;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-5;comments','-05;comments') from t_attributetag tv where tv.Notes like '%-5;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-6;comments','-06;comments') from t_attributetag tv where tv.Notes like '%-6;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-7;comments','-07;comments') from t_attributetag tv where tv.Notes like '%-7;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-8;comments','-08;comments') from t_attributetag tv where tv.Notes like '%-8;comments%'&quot;&#xA;&#x9;Repository.Execute &quot;update tv set tv.Notes = REPLACE(convert(nvarchar(max),tv.Notes), '-9;comments','-09;comments') from t_attributetag tv where tv.Notes like '%-9;comments%'&quot;&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="183"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{ECAEE1A7-C978-4AFE-8ED0-278C140E982A}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set IsQuery Getters&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Temp]&#xA;'[group=Temp]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Set IsQuery Getter&#xA;' Author: Geert Bellekens&#xA;' Purpose: sets the IsQuery property to true for all operations in the selected package with stereotype &quot;get&quot;&#xA;' Date: 2016-01-22&#xA;'&#xA;sub main&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim operation as EA.Method&#xA;&#x9;for each element in selectedPackage.Elements&#xA;&#x9;&#x9;for each operation in element.Methods&#xA;&#x9;&#x9;&#x9;if operation.Stereotype = &quot;get&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;operation.IsQuery = true&#xA;&#x9;&#x9;&#x9;&#x9;operation.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="184"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{90AA1EC4-52A1-47C4-956B-E26A8ED8041F}"/>
			<Column name="ScriptAuthor" value="{DA3B10FC-BBF2-4BC2-B20F-8BA1392D6865}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SetPackageToSchema&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Temp]&#xA;'[group=Temp]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: SetPackageToSchema&#xA;' Author: Geert Bellekens&#xA;' Purpose: Add the contents of the selected package to the selected schema composer artifact&#xA;' Date: 2016-06-01&#xA;'&#xA;const outPutName = &quot;Create Schema From Package&quot;&#xA;&#xA;function Main ()&#xA;&#x9;&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;set selectedElement = Repository.GetTreeSelectedObject()&#xA;&#x9;if not selectedElement is Nothing AND selectedElement.Type = &quot;Artifact&quot; THEN&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'create output tab&#xA;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting Create Schema From Package at &quot; &amp; now(), 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlDOM &#xA;&#x9;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;&#x9;xmlDOM.async = false&#xA;&#x9;&#x9; &#xA;&#x9;&#x9;dim node &#xA;&#x9;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;&#x9;&#x9;xmlDOM.appendChild node&#xA;&#x9;'&#xA;&#x9;&#x9;dim xmlRoot &#xA;&#x9;&#x9;set xmlRoot = xmlDOM.createElement( &quot;message&quot; )&#xA;&#x9;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#x9;&#x9;'add description node&#xA;&#x9;&#x9;xmlRoot.appendChild createDescriptionNode(xmlDOM, selectedElement)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'select package&#xA;&#x9;&#x9;dim selectedPackage&#xA;&#x9;&#x9;set selectedPackage = selectPackage()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if not selectedPackage is nothing then&#xA;&#x9;&#x9;&#x9;dim packageTree &#xA;&#x9;&#x9;&#x9;set packageTree = getPackageTree(selectedPackage)&#xA;&#x9;&#x9;&#x9;dim sqlGetClasses&#xA;&#x9;&#x9;&#x9;sqlGetClasses = &quot;select o.Object_ID from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where o.Object_Type in ('Class', 'DataType', 'Enumeration') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and o.Package_ID in (&quot; &amp; makePackageIDString(packageTree) &amp; &quot;) order by o.Name&quot;&#xA;&#x9;&#x9;&#x9;dim allElements&#xA;&#x9;&#x9;&#x9;set allElements = getElementsFromQuery(sqlGetClasses)&#xA;&#x9;&#x9;&#x9;'add schema node&#xA;&#x9;&#x9;&#x9;dim xmlSchema &#xA;&#x9;&#x9;&#x9;set xmlSchema = xmlDOM.createElement(&quot;schema&quot;)&#xA;&#x9;&#x9;&#x9;'count attribute&#xA;&#x9;&#x9;&#x9;dim xmlcountAtttr &#xA;&#x9;&#x9;&#x9;set xmlcountAtttr = xmlDOM.createAttribute(&quot;count&quot;)&#xA;&#x9;&#x9;&#x9;xmlcountAtttr.nodeValue = allElements.Count&#xA;&#x9;&#x9;&#x9;xmlSchema.setAttributeNode(xmlcountAtttr)&#xA;&#x9;&#x9;&#x9;'add the schema node to the root&#xA;&#x9;&#x9;&#x9;xmlRoot.appendChild xmlSchema&#xA;&#x9;&#x9;&#x9;'add all the elements to the schema&#xA;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;for each element in allElements&#xA;&#x9;&#x9;&#x9;&#x9;'update log&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Processing element &quot; &amp; element.Name, 0&#xA;&#x9;&#x9;&#x9;&#x9;'add node&#xA;&#x9;&#x9;&#x9;&#x9;xmlSchema.appendChild createElementNode(xmlDom, element)&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dim sqlUpdateSchema&#xA;&#x9;&#x9;&#x9;sqlUpdateSchema = &quot;update t_document set StrContent = N'&quot; &amp; xmlDOM.xml &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where ElementType = 'SC_MessageProfile' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and ElementID = '&quot; &amp; selectedElement.ElementGUID &amp; &quot;'&quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute sqlUpdateSchema&#xA;&#x9;&#x9;&#x9;'update log&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Finished Create Schema From Package at &quot; &amp; now(), 0&#xA;&#x9;&#x9;end if &#xA;&#x9;&#x9;writefile &quot;c:\\temp\\schemaContents.xml&quot;, slqUpdateSchema&#xA;&#x9;&#x9;'main = xmlDOM.xml&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function createElementNode(xmlDOM, element)&#xA;&#x9;dim xmlClass&#xA;&#x9;set xmlClass = xmlDOM.createElement( &quot;class&quot; )&#xA;&#x9;&#xA;&#x9;'name attribute&#xA;&#x9;dim xmlNameAtttr &#xA;&#x9;set xmlNameAtttr = xmlDOM.createAttribute(&quot;name&quot;)&#xA;&#x9;xmlNameAtttr.nodeValue = element.Name&#xA;&#x9;xmlClass.setAttributeNode(xmlNameAtttr)&#xA;&#x9;&#xA;&#x9;'guid attribute&#xA;&#x9;dim xmlguidAtttr &#xA;&#x9;set xmlguidAtttr = xmlDOM.createAttribute(&quot;guid&quot;)&#xA;&#x9;xmlguidAtttr.nodeValue = element.ElementGUID&#xA;&#x9;xmlClass.setAttributeNode(xmlguidAtttr)&#xA;&#x9;&#xA;&#x9;'add propertiesnode&#xA;&#x9;dim xmlProperties&#xA;&#x9;set xmlProperties= xmlDOM.createElement(&quot;properties&quot;)&#xA;&#x9;&#xA;&#x9;'add attributes&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;xmlProperties.appendChild createPropertyNode (xmlDOM, attribute.AttributeGUID, &quot;attribute&quot;)&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'add associations only if they start at the given element&#xA;&#x9;dim association as EA.Connector&#xA;&#x9;for each association in element.Connectors&#xA;&#x9;&#x9;if (association.Type = &quot;Association&quot; _&#xA;&#x9;&#x9;   or association.Type = &quot;Aggregation&quot;) _&#xA;&#x9;&#x9;    and association.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;xmlProperties.appendChild createPropertyNode (xmlDOM, association.ConnectorGUID, &quot;association&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'add xmlProperties to class node&#xA;&#x9;xmlClass.appendChild xmlProperties&#xA;&#x9;&#xA;&#x9;'return node&#xA;&#x9;set createElementNode = xmlClass&#xA;end function&#xA;&#xA;function createPropertyNode (xmlDOM, guid, propertyType)&#xA;&#x9;dim xmlProperty&#xA;&#x9;set xmlProperty = xmlDOM.createElement(&quot;property&quot;)&#xA;&#x9;&#xA;&#x9;'guid attribute&#xA;&#x9;dim xmlguidAtttr &#xA;&#x9;set xmlguidAtttr = xmlDOM.createAttribute(&quot;guid&quot;)&#xA;&#x9;xmlguidAtttr.nodeValue = guid&#xA;&#x9;xmlProperty.setAttributeNode(xmlguidAtttr)&#xA;&#x9;&#xA;&#x9;'type attribute&#xA;&#x9;dim xmltypeAtttr &#xA;&#x9;set xmltypeAtttr = xmlDOM.createAttribute(&quot;type&quot;)&#xA;&#x9;xmltypeAtttr.nodeValue = propertyType&#xA;&#x9;xmlProperty.setAttributeNode(xmltypeAtttr)&#xA;&#x9;&#xA;&#x9;'return node&#xA;&#x9;set createPropertyNode = xmlProperty&#xA;end function&#xA;&#xA;&#xA;function createDescriptionNode(xmlDOM, selectedElement)&#xA;&#x9;dim xmlDescription&#xA;&#x9;set xmlDescription = xmlDOM.createElement( &quot;description&quot; )&#xA;&#x9;&#xA;&#x9;'name attribute&#xA;&#x9;dim xmlNameAtttr &#xA;&#x9;set xmlNameAtttr = xmlDOM.createAttribute(&quot;name&quot;)&#xA;&#x9;xmlNameAtttr.nodeValue = selectedElement.Name&#xA;&#x9;xmlDescription.setAttributeNode(xmlNameAtttr)&#xA;&#x9;&#xA;&#x9;'namespace attribute&#xA;&#x9;dim xmlnamespaceAtttr &#xA;&#x9;set xmlnamespaceAtttr = xmlDOM.createAttribute(&quot;namespace&quot;)&#xA;&#x9;xmlnamespaceAtttr.nodeValue = &quot;&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmlnamespaceAtttr)&#xA;&#x9;&#xA;&#x9;'schemaset attribute&#xA;&#x9;dim xmlschemasetAtttr &#xA;&#x9;set xmlschemasetAtttr = xmlDOM.createAttribute(&quot;schemaset&quot;)&#xA;&#x9;xmlschemasetAtttr.nodeValue = &quot;ECDM Message Composer&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmlschemasetAtttr)&#xA;&#x9;&#xA;&#x9;'provider attribute&#xA;&#x9;dim xmlproviderAtttr &#xA;&#x9;set xmlproviderAtttr = xmlDOM.createAttribute(&quot;provider&quot;)&#xA;&#x9;xmlproviderAtttr.nodeValue = &quot;ECDM Message Composer&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmlproviderAtttr)&#xA;&#x9;&#xA;&#x9;'model attribute&#xA;&#x9;dim xmlmodelAtttr &#xA;&#x9;set xmlmodelAtttr = xmlDOM.createAttribute(&quot;model&quot;)&#xA;&#x9;xmlmodelAtttr.nodeValue = Repository.ProjectGUID&#xA;&#x9;xmlDescription.setAttributeNode(xmlmodelAtttr)&#xA;&#x9;&#xA;&#x9;'modelURL attribute&#xA;&#x9;dim xmlmodelURLAtttr &#xA;&#x9;set xmlmodelURLAtttr = xmlDOM.createAttribute(&quot;modelURL&quot;)&#xA;&#x9;xmlmodelURLAtttr.nodeValue = &quot;&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmlmodelURLAtttr)&#xA;&#x9;&#xA;&#x9;'version attribute&#xA;&#x9;dim xmlversionAtttr &#xA;&#x9;set xmlversionAtttr = xmlDOM.createAttribute(&quot;version&quot;)&#xA;&#x9;xmlversionAtttr.nodeValue = &quot;12.1.1230.1230&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmlversionAtttr)&#xA;&#x9;&#xA;&#x9;'xmlns attribute&#xA;&#x9;dim xmlxmlnsAtttr &#xA;&#x9;set xmlxmlnsAtttr = xmlDOM.createAttribute(&quot;xmlns&quot;)&#xA;&#x9;xmlxmlnsAtttr.nodeValue = &quot;Der:&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmlxmlnsAtttr)&#xA;&#x9;&#xA;&#x9;'type attribute&#xA;&#x9;dim xmltypeAtttr &#xA;&#x9;set xmltypeAtttr = xmlDOM.createAttribute(&quot;type&quot;)&#xA;&#x9;xmltypeAtttr.nodeValue = &quot;schema&quot;&#xA;&#x9;xmlDescription.setAttributeNode(xmltypeAtttr)&#xA;&#x9;&#xA;&#x9;'auxiliary node&#xA;&#x9;dim xmlAuxiliary&#xA;&#x9;set xmlAuxiliary = xmlDOM.createElement( &quot;auxiliary&quot; )&#xA;&#x9;&#xA;&#x9;'xmlns attribute&#xA;&#x9;dim xmlxmlnsAtttrA &#xA;&#x9;set xmlxmlnsAtttrA = xmlDOM.createAttribute(&quot;xmlns&quot;)&#xA;&#x9;xmlxmlnsAtttrA.nodeValue = &quot;&quot;&#xA;&#x9;xmlAuxiliary.setAttributeNode(xmlxmlnsAtttrA)&#xA;&#x9;'add auxiliary node&#xA;&#x9;xmlDescription.appendChild xmlAuxiliary&#xA;&#x9;&#xA;&#x9;'return node&#xA;&#x9;set createDescriptionNode = xmlDescription&#xA;end function&#xA;&#xA;'msgbox MyPackageRtfData(3357,&quot;&quot;)&#xA;function writefile(filename, contents)&#xA;&#x9;dim fileSystemObject&#xA;&#x9;dim outputFile&#xA;&#x9;&#x9;&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;set outputFile = fileSystemObject.CreateTextFile(filename, true )&#xA;&#x9;outputFile.Write contents&#xA;&#x9;outputFile.Close&#xA;end function &#xA;&#xA;'test&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="185"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Template fragments"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="186"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9EE29A81-5C74-4CFF-9B36-7A3C927C6838}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DescriptionNLFR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyPackageRtfData(packageID, tagname)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set package = Repository.GetPackageByID(packageID)&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;set element = Repository.GetElementByGuid(package.PackageGUID)&#xA;&#x9;&#x9;if not element is nothing then&#xA;&#x9;&#x9;&#x9;MyPackageRtfData = MyRtfData (element.ElementID, tagname)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;function MyRtfData (objectID, tagname)&#xA;&#x9;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9; &#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(objectID)&#xA;&#x9;&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#xA;&#x9;dim descriptionfull&#xA;&#x9;descriptionfull = getTagContent(element.Notes, tagname)&#xA;&#x9;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#xA;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#x9;&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;'msgbox MyPackageRtfData(3357,&quot;&quot;)&#xA;function test&#xA;&#x9;dim outputString&#xA;&#x9;dim fileSystemObject&#xA;&#x9;dim outputFile&#xA;&#x9;&#xA;&#x9;outputString =  MyRtfData(62899, &quot;definition&quot;)&#xA;&#x9;&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;set outputFile = fileSystemObject.CreateTextFile( &quot;c:\\temp\\NLFRtest.xml&quot;, true )&#xA;&#x9;outputFile.Write outputString&#xA;&#x9;outputFile.Close&#xA;end function &#xA;&#xA;'test"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="187"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C6D769F1-E587-4EE6-9BEF-2DE70D5097B3}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DM_Associations&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyRtfData (objectID, endpoint)&#xA;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9;&#xA;&#x9;'loop the connectors&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(objectID)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;'first get the source and target associations in separate lists&#xA;&#x9;dim sourceAssociations&#xA;&#x9;dim targetAssociations&#xA;&#x9;set sourceAssociations = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;set targetAssociations = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each connector in  element.Connectors&#xA;&#x9;&#x9;if connector.Type = &quot;Association&quot; or connector.type = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;sourceAssociations.Add connector&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;targetAssociations.Add connector&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'then set the appropriate lists&#xA;&#x9;dim associations&#xA;&#x9;if endpoint = &quot;source&quot; then&#xA;&#x9;&#x9;set associations = sourceAssociations&#xA;&#x9;else&#xA;&#x9;&#x9;set associations = targetAssociations&#xA;&#x9;end if&#xA;&#x9;'then loop the list of associations to add the rows&#xA;&#x9;for each connector in associations&#xA;&#x9;&#x9;addRow xmlDOM, xmlData, connector&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'check if we need to add a not applicable row.&#xA;&#x9;'Only needed in case of &quot;source&quot; and bot collections of associations are emtpy&#xA;&#x9;if endpoint = &quot;source&quot; and sourceAssociations.Count = 0 and targetAssociations.Count = 0 then&#xA;&#x9;&#x9;addNotApplicableRow xmlDOM, xmlData&#xA;&#x9;end if&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;function addRow(xmlDOM, xmlData, connector)&#xA;&#x9;&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'source multiplicity&#xA;&#x9;dim xmlSMultiplicity&#xA;&#x9;set xmlSMultiplicity = xmlDOM.createElement( &quot;SMultiplicity&quot; )&#x9;&#xA;&#x9;xmlSMultiplicity.text = connector.ClientEnd.Cardinality&#xA;&#x9;xmlRow.appendChild xmlSMultiplicity&#xA;&#x9;&#xA;&#x9;'target multiplicity&#xA;&#x9;dim xmlTMultiplicity&#xA;&#x9;set xmlTMultiplicity = xmlDOM.createElement( &quot;TMultiplicity&quot; )&#x9;&#xA;&#x9;xmlTMultiplicity.text = connector.SupplierEnd.Cardinality&#xA;&#x9;xmlRow.appendChild xmlTMultiplicity&#xA;&#x9;&#xA;&#x9;'source Name&#xA;&#x9;dim xmlSource&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;set sourceElement = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;set xmlSource = xmlDOM.createElement( &quot;Source&quot; )&#x9;&#xA;&#x9;if not sourceElement is nothing then&#xA;&#x9;&#x9;xmlSource.text = sourceElement.Name&#xA;&#x9;end if&#xA;&#x9;xmlRow.appendChild xmlSource&#xA;&#x9;&#xA;&#x9;'target Name&#xA;&#x9;dim xmlTarget&#xA;&#x9;dim targetElement as EA.Element&#xA;&#x9;set targetElement = Repository.GetElementByID(connector.SupplierID)&#xA;&#x9;set xmlTarget = xmlDOM.createElement( &quot;Target&quot; )&#x9;&#xA;&#x9;if not targetElement is nothing then&#xA;&#x9;&#x9;xmlTarget.text = targetElement.Name&#xA;&#x9;end if&#xA;&#x9;xmlRow.appendChild xmlTarget&#xA;&#x9;&#xA;&#x9;'ConnectorName&#xA;&#x9;dim xmlConnectorName&#xA;&#x9;set xmlConnectorName = xmlDOM.createElement( &quot;ConnectorName&quot; )&#x9;&#xA;&#x9;xmlConnectorName.text = connector.Name&#xA;&#x9;xmlRow.appendChild xmlConnectorName&#xA;&#xA;&#x9;dim descriptionfull&#xA;&#x9;descriptionfull = connector.Notes&#xA;&#x9;&#xA;&#x9;'description NL&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;'&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;'&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#xA;end function&#xA;&#xA;function addNotApplicableRow(xmlDOM, xmlData)&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'source multiplicity&#xA;&#x9;dim xmlSMultiplicity&#xA;&#x9;set xmlSMultiplicity = xmlDOM.createElement( &quot;SMultiplicity&quot; )&#x9;&#xA;&#x9;xmlSMultiplicity.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlSMultiplicity&#xA;&#x9;&#xA;&#x9;'target multiplicity&#xA;&#x9;dim xmlTMultiplicity&#xA;&#x9;set xmlTMultiplicity = xmlDOM.createElement( &quot;TMultiplicity&quot; )&#x9;&#xA;&#x9;xmlTMultiplicity.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlTMultiplicity&#xA;&#x9;&#xA;&#x9;'source Name&#xA;&#x9;dim xmlSource&#xA;&#x9;set xmlSource = xmlDOM.createElement( &quot;Source&quot; )&#x9;&#xA;&#x9;xmlSource.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlSource&#xA;&#x9;&#xA;&#x9;'target Name&#xA;&#x9;dim xmlTarget&#xA;&#x9;set xmlTarget = xmlDOM.createElement( &quot;Target&quot; )&#x9;&#xA;&#x9;xmlTarget.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlTarget&#xA;&#x9;&#xA;&#x9;'ConnectorName&#xA;&#x9;dim xmlConnectorName&#xA;&#x9;set xmlConnectorName = xmlDOM.createElement( &quot;ConnectorName&quot; )&#x9;&#xA;&#x9;xmlConnectorName.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlConnectorName&#xA;&#xA;&#x9;'description NL&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = &quot;Niet van toepassing&quot;&#xA;'&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = &quot;Sans objet&quot;&#xA;'&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#x9;&#xA;end function&#xA;&#xA;'msgbox MyRtfData(74179, &quot;source&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="188"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D09F8B8E-869C-49C4-9F7E-DFC372422A8F}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DM_AttributeConstraintsNLFR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyRtfData (objectID, tagname)&#xA;&#x9;'msgbox &quot;starting MyRTFdata fo element&quot; &amp; objectID&#xA;&#x9;'MyRtfData = &quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot;?&gt;&lt;EADATA&gt;&lt;Dataset_0&gt;&lt;Data&gt;&lt;Row&gt;&lt;ConstraintName&gt;constraint 1&lt;/ConstraintName&gt;&lt;DescriptionNL formatted=&quot;&quot;1&quot;&quot;&gt;Hier staat de nederlandse bescrijving van deze constraint in &amp;lt;b&amp;gt;RichText&amp;lt;/b&amp;gt; (1)&lt;/DescriptionNL&gt;&lt;DescriptionFR formatted=&quot;&quot;1&quot;&quot;&gt;ici le français avec éàè characters &amp;lt;b&amp;gt;dôme&amp;lt;/b&amp;gt;&lt;/DescriptionFR&gt;&lt;/Row&gt;&lt;Row&gt;&lt;ConstraintName&gt;constraint 2&lt;/ConstraintName&gt;&lt;DescriptionNL formatted=&quot;&quot;1&quot;&quot;&gt;Hier staat de nederlandse bescrijving van deze constraint in &amp;lt;b&amp;gt;RichText (2)&amp;lt;/b&amp;gt;&lt;/DescriptionNL&gt;&lt;DescriptionFR formatted=&quot;&quot;1&quot;&quot;&gt;ici le français avec éàè characters &amp;lt;b&amp;gt;dôme (2)&amp;lt;/b&amp;gt;&lt;/DescriptionFR&gt;&lt;/Row&gt;&lt;/Data&gt;&lt;/Dataset_0&gt;&lt;/EADATA&gt;&quot;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9;&#xA;&#x9;'loop the constraints&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(objectID)&#xA;&#x9;dim constraint as EA.Constraint&#xA;&#x9;&#xA;&#x9;if element.Constraints.Count &gt; 0 then&#xA;&#x9;&#x9;for each constraint in  element.Constraints&#xA;&#x9;&#x9;&#x9;addRow xmlDOM, xmlData, constraint&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'no constraints, add N.A row&#xA;&#x9;&#x9;addNotApplicableRow xmlDOM, xmlData&#xA;&#x9;end if&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;function addRow(xmlDOM, xmlData, constraint)&#xA;&#x9;&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'constraint names are the same in NL/FR, except when adding an empty row&#xA;&#x9;dim xmlConstraintNameNL&#xA;&#x9;set xmlConstraintNameNL = xmlDOM.createElement( &quot;ConstraintNameNL&quot; )&#x9;&#xA;&#x9;xmlConstraintNameNL.text = constraint.Name&#xA;&#x9;xmlRow.appendChild xmlConstraintNameNL&#xA;&#x9;&#xA;&#x9;dim xmlConstraintNameFR&#xA;&#x9;set xmlConstraintNameFR = xmlDOM.createElement( &quot;ConstraintNameFR&quot; )&#x9;&#xA;&#x9;xmlConstraintNameFR.text = constraint.Name&#xA;&#x9;xmlRow.appendChild xmlConstraintNameFR&#xA;&#x9;&#xA;&#x9;dim descriptionfull&#xA;&#x9;descriptionfull = constraint.Notes&#xA;&#x9;&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#xA;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;end function&#xA;&#xA;function addNotApplicableRow(xmlDOM, xmlData)&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#xA;&#x9;'constraint names are the same in NL/FR, except when adding an empty row&#xA;&#x9;dim xmlConstraintNameNL&#xA;&#x9;set xmlConstraintNameNL = xmlDOM.createElement( &quot;ConstraintNameNL&quot; )&#x9;&#xA;&#x9;xmlConstraintNameNL.text = &quot;Niet van toepassing&quot;&#xA;&#x9;xmlRow.appendChild xmlConstraintNameNL&#xA;&#x9;&#xA;&#x9;dim xmlConstraintNameFR&#xA;&#x9;set xmlConstraintNameFR = xmlDOM.createElement( &quot;ConstraintNameFR&quot; )&#x9;&#xA;&#x9;xmlConstraintNameFR.text = &quot;Sans objet&quot;&#xA;&#x9;xmlRow.appendChild xmlConstraintNameFR&#xA;&#x9;&#xA;&#x9;'add empty tags for DescriptionNL/FR because otherwise the tag name is shown&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;end function&#xA;&#xA;&#xA;'msgbox MyRtfData(38700, &quot;&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="189"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{37DA0DBA-24B0-49F2-8905-10E0667F093A}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DM_AttributesNLFR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyRtfData (objectID, tagname)&#xA;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9;&#xA;&#x9;'loop the Attributes&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(objectID)&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#xA;&#x9;if element.Attributes.Count &gt; 0 then&#xA;&#x9;&#x9;for each attribute in  element.Attributes&#xA;&#x9;&#x9;&#x9;addRow xmlDOM, xmlData, attribute&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;'no attributes, add N.A row&#xA;&#x9;&#x9;addNotApplicableRow xmlDOM, xmlData&#xA;&#x9;end if&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;function addRow(xmlDOM, xmlData, attribute)&#xA;&#x9;&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'Attribute name&#xA;&#x9;dim xmlAttributeName&#xA;&#x9;set xmlAttributeName = xmlDOM.createElement( &quot;AttributeName&quot; )&#x9;&#xA;&#x9;xmlAttributeName.text = attribute.Name&#xA;&#x9;xmlRow.appendChild xmlAttributeName&#xA;&#xA;&#x9;dim descriptionfull&#xA;&#x9;descriptionfull = attribute.Notes&#xA;&#x9;&#xA;&#x9;'description NL&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;'&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;'&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#xA;&#x9;'multiplicity&#xA;&#x9;dim xmlMultiplicity&#xA;&#x9;set xmlMultiplicity = xmlDOM.createElement( &quot;Multiplicity&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlMultiplicity.text = attribute.LowerBound &amp; &quot;..&quot; &amp; attribute.UpperBound&#xA;&#x9;xmlRow.appendChild xmlMultiplicity&#xA;&#x9;&#xA;&#x9;'IsID&#xA;&#x9;dim xmlIsID&#xA;&#x9;set xmlIsID = xmlDOM.createElement( &quot;IsID&quot; )&#xA;&#x9;if attribute.IsID then&#xA;&#x9;&#x9;xmlIsID.text = &quot;Y&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;xmlIsID.text = &quot;N&quot;&#xA;&#x9;end if&#xA;&#x9;xmlRow.appendChild xmlIsID&#xA;&#x9;&#xA;&#x9;'Format&#xA;&#x9;dim xmlFormat&#xA;&#x9;set xmlFormat = xmlDOM.createElement( &quot;Format&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlFormat.text = attribute.Type&#xA;&#x9;xmlRow.appendChild xmlFormat&#xA;&#x9;&#xA;&#x9;'Alias&#xA;&#x9;dim xmlAlias&#xA;&#x9;set xmlAlias = xmlDOM.createElement( &quot;Alias&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlAlias.text = attribute.Alias&#xA;&#x9;xmlRow.appendChild xmlAlias&#xA;&#x9;&#xA;end function&#xA;&#xA;function addNotApplicableRow(xmlDOM, xmlData)&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'Attribute name&#xA;&#x9;dim xmlAttributeName&#xA;&#x9;set xmlAttributeName = xmlDOM.createElement( &quot;AttributeName&quot; )&#x9;&#xA;&#x9;xmlAttributeName.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlAttributeName&#xA;&#x9;&#xA;&#x9;'description NL&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = &quot;Niet van toepassing&quot;&#xA;'&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = &quot;Sans objet&quot;&#xA;'&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#xA;&#x9;'multiplicity&#xA;&#x9;dim xmlMultiplicity&#xA;&#x9;set xmlMultiplicity = xmlDOM.createElement( &quot;Multiplicity&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlMultiplicity.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlMultiplicity&#xA;&#x9;&#xA;&#x9;'IsID&#xA;&#x9;dim xmlIsID&#xA;&#x9;set xmlIsID = xmlDOM.createElement( &quot;IsID&quot; )&#xA;&#x9;xmlIsID.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlIsID&#xA;&#x9;&#xA;&#x9;'Format&#xA;&#x9;dim xmlFormat&#xA;&#x9;set xmlFormat = xmlDOM.createElement( &quot;Format&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlFormat.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlFormat&#xA;&#x9;&#xA;&#x9;'Alias&#xA;&#x9;dim xmlAlias&#xA;&#x9;set xmlAlias = xmlDOM.createElement( &quot;Alias&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlAlias.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlAlias&#xA;end function&#xA;&#xA;&#xA;'msgbox MyRtfData(38999, &quot;&quot;)&#xA;'msgbox MyRtfData(52460, &quot;&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="190"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7144C6F6-897D-4272-B96A-84594BAF8472}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MA_SolutionRequirements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: MA_SolutionRequirements&#xA;' Author: Geert Bellekens&#xA;' Purpose: Returns the solution requirements refernenced by elements owned by this M&amp;A Specification&#xA;' Date: 2016-05-18&#xA;'&#xA;function MyRtfData (objectID)&#xA;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9;&#xA;&#x9;'get the M&amp;A specification element&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(objectID)&#xA;&#x9;'get all solution requirements linked to an element owned by the M&amp;A element&#xA;&#x9;dim sqlGetRequirements&#xA;&#x9;sqlGetRequirements = &quot;select distinct rq.Object_ID                                         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (((t_object o                                                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object so on so.ParentID = o.Object_ID)                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector soc on soc.Start_Object_ID = so.Object_ID)    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object rq on (soc.End_Object_ID = rq.Object_ID          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and rq.Object_Type = 'Requirement'             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and rq.Stereotype = 'Solution Requirement'))   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.ea_guid = '&quot; &amp; element.ElementGUID &amp; &quot;'&quot;&#xA;&#x9;&#xA;&#x9;dim requirements&#xA;&#x9;set requirements = getElementsFromQuery(sqlGetRequirements)&#xA;&#x9;dim requirement as EA.Element&#xA;&#x9;'then loop requirements and add the rows&#xA;&#x9;for each requirement in requirements&#xA;&#x9;&#x9;addRow xmlDOM, xmlData, requirement&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;function addRow(xmlDOM, xmlData, requirement)&#xA;&#x9;&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'RequirementID&#xA;&#x9;dim xmlRequirementID&#xA;&#x9;set xmlRequirementID = xmlDOM.createElement( &quot;RequirementID&quot; )&#x9;&#xA;&#x9;xmlRequirementID.text = requirement.Name&#xA;&#x9;xmlRow.appendChild xmlRequirementID&#xA;&#x9;&#xA;&#x9;'TitleNL&#xA;&#x9;dim xmlTitleNL&#xA;&#x9;set xmlTitleNL = xmlDOM.createElement( &quot;TitleNL&quot; )&#x9;&#xA;&#x9;xmlTitleNL.text = getTaggedValueValue(requirement, &quot;Title NL&quot;)&#xA;&#x9;xmlRow.appendChild xmlTitleNL&#xA;&#x9;&#xA;&#x9;'TitleFR&#xA;&#x9;dim xmlTitleFR&#xA;&#x9;set xmlTitleFR = xmlDOM.createElement( &quot;TitleFR&quot; )&#x9;&#xA;&#x9;xmlTitleFR.text = getTaggedValueValue(requirement, &quot;Title FR&quot;)&#xA;&#x9;xmlRow.appendChild xmlTitleFR&#xA;&#x9;&#xA;&#x9;dim descriptionfull&#xA;&#x9;descriptionfull = requirement.Notes&#xA;&#x9;&#xA;&#x9;'description NL&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#xA;end function&#xA;&#xA;function addNotApplicableRow(xmlDOM, xmlData)&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'source multiplicity&#xA;&#x9;dim xmlSMultiplicity&#xA;&#x9;set xmlSMultiplicity = xmlDOM.createElement( &quot;SMultiplicity&quot; )&#x9;&#xA;&#x9;xmlSMultiplicity.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlSMultiplicity&#xA;&#x9;&#xA;&#x9;'target multiplicity&#xA;&#x9;dim xmlTMultiplicity&#xA;&#x9;set xmlTMultiplicity = xmlDOM.createElement( &quot;TMultiplicity&quot; )&#x9;&#xA;&#x9;xmlTMultiplicity.text = &quot;&quot;&#xA;&#x9;xmlRow.appendChild xmlTMultiplicity&#xA;&#x9;&#xA;&#x9;'source Name&#xA;&#x9;dim xmlSource&#xA;&#x9;set xmlSource = xmlDOM.createElement( &quot;Source&quot; )&#x9;&#xA;&#x9;xmlSource.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlSource&#xA;&#x9;&#xA;&#x9;'target Name&#xA;&#x9;dim xmlTarget&#xA;&#x9;set xmlTarget = xmlDOM.createElement( &quot;Target&quot; )&#x9;&#xA;&#x9;xmlTarget.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlTarget&#xA;&#x9;&#xA;&#x9;'ConnectorName&#xA;&#x9;dim xmlConnectorName&#xA;&#x9;set xmlConnectorName = xmlDOM.createElement( &quot;ConnectorName&quot; )&#x9;&#xA;&#x9;xmlConnectorName.text = &quot;N/A&quot;&#xA;&#x9;xmlRow.appendChild xmlConnectorName&#xA;&#xA;&#x9;'description NL&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = &quot;n.v.t.&quot;&#xA;&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = &quot;S.O.&quot;&#xA;&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#x9;&#xA;end function&#xA;&#xA;'msgbox MyRtfData(83755)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="191"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2E3A2495-5884-43F3-A41D-0B974F7D9636}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ProcessSpecificActitiviesNLFR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyRtfData (objectID)&#xA;&#x9;&#xA;&#x9;dim xmlDOM &#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9; &#xA;&#x9;dim activities&#xA;&#x9;set activities = getProcessSpecificActivities(objectID)&#xA;&#x9;dim activity as EA.Element&#xA;&#x9;for each activity in activities&#xA;&#x9;&#x9;'Add the rows here&#xA;&#x9;&#x9;'check the notes of the activty&#xA;&#x9;&#x9;if len (activity.Notes) = 0 then&#xA;&#x9;&#x9;&#x9;set activity = getCallingProcess(activity)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;addRow xmlData, xmlDOM, activity&#xA;&#x9;next&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;function getCallingProcess (element)&#xA;&#x9;set getCallingProcess = element&#xA;&#x9;if element.Type = &quot;Activity&quot; AND element.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;set calledActivityTV = element.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;set referenceActivityTV = element.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;&#x9;if not calledActivityTV is nothing and not referenceActivityTV is nothing then&#xA;&#x9;&#x9;&#x9;'only do something when the Activity is types a CalledActivity&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;calledActivityTV.Value : &quot; &amp; calledActivityTV.Value &#xA;&#x9;&#x9;&#x9;'Session.Output &quot;referenceActivityTV.Value :&quot; &amp; referenceActivityTV.Value&#xA;&#x9;&#x9;&#x9;if calledActivityTV.Value = &quot;true&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim calledActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;set calledActivity = Repository.GetElementByGuid(referenceActivityTV.Value)&#xA;&#x9;&#x9;&#x9;&#x9;if not calledActivity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set getCallingProcess = calledActivity&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getProcessSpecificActivities(objectID)&#xA;&#x9;dim businessProcess as EA.Element&#xA;&#x9;set businessProcess = Repository.GetElementByID(objectID)&#xA;&#x9;dim activities&#xA;&#x9;set activities = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;if not businessProcess.CompositeDiagram is nothing then&#xA;&#x9;&#x9;set activities = getSubProcesses(businessProcess.CompositeDiagram)&#xA;&#x9;end if&#xA;&#x9;set getProcessSpecificActivities = activities&#xA;end function&#xA;&#xA;function addRow (xmlData, xmlDOM, element)&#xA;&#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;'name&#xA;&#x9;dim xmlActivityName&#xA;&#x9;set xmlActivityName = xmlDOM.createElement( &quot;ActivityName&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlActivityName.text = element.Name&#xA;&#x9;xmlRow.appendChild xmlActivityName&#xA;&#x9;&#xA;&#x9;'description&#xA;&#x9;dim descriptionfull&#xA;&#x9;descriptionfull = getTagContent(element.Notes, &quot;definition&quot;)&#xA;&#x9;&#xA;&#x9;dim formattedAttr &#xA;&#x9;&#xA;&#x9;'description NL&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#xA;&#x9;dim xmlDescNL&#xA;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#xA;&#x9;'description FR&#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#xA;&#x9;dim xmlDescFR&#xA;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getSubProcesses(diagram)&#xA;&#x9;dim sortedDiagramObjects&#xA;&#x9;dim sortedSubProcesses&#xA;&#x9;set sortedSubProcesses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;set sortedDiagramObjects = sortDiagramObjectsCollection(diagram.DiagramObjects)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim subProcess as EA.Element&#xA;&#x9;for each diagramObject in sortedDiagramObjects&#xA;&#x9;&#x9;set subProcess = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if subProcess.Stereotype = &quot;ArchiMate_BusinessProcess&quot; OR subProcess.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;sortedSubProcesses.Add subProcess&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getSubProcesses = sortedSubProcesses&#xA;end function&#xA;&#xA;&#xA;function sortDiagramObjectsCollection (diagramObjects)&#xA;&#x9;dim sortedDiagramObjects &#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set sortedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each diagramObject in diagramObjects&#xA;&#x9;&#x9;sortedDiagramObjects.Add (diagramObject)&#xA;&#x9;next&#xA;&#x9;set sortDiagramObjectsCollection = sortDiagramObjectsArrayList(sortedDiagramObjects)&#xA;end function&#xA;&#xA;function sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.DiagramObject&#xA;&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;for i = 0 to diagramObjects.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = diagramObjects(i)&#xA;&#x9;&#x9;set nextElement = diagramObjects(i +1)&#xA;&#x9;&#x9;if  diagramObjectIsAfterYX(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;diagramObjects.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;diagramObjects.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set diagramObjects = sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortDiagramObjectsArrayList = diagramObjects&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterYX(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;elseif thisElement.top = nextElement.top then&#xA;&#x9;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterXY(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;elseif thisElement.left = nextElement.left then&#xA;&#x9;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'Session.Output MyRtfData(9721)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="192"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{03797934-7A90-4D2E-9852-6C93D9D93B27}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ProcessSpecificMessagesNLFR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Template fragments]&#xA;'[group=Template fragments]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyRtfData (objectID)&#xA;&#x9;&#xA;&#x9;dim xmlDOM &#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9; &#xA;&#x9;dim messages&#xA;&#x9;set messages = getProcessSpecificMessages(objectID)&#xA;&#x9;dim message as EA.Connector&#xA;&#x9;for each message in messages&#xA;&#x9;&#x9;addRow xmlData, xmlDOM, message&#xA;&#x9;next&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;&#xA;function getProcessSpecificMessages(objectID)&#xA;&#x9;dim businessProcess as EA.Element&#xA;&#x9;set businessProcess = Repository.GetElementByID(objectID)&#xA;&#x9;dim messages&#xA;&#x9;set messages = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;if not businessProcess.CompositeDiagram is nothing then&#xA;&#x9;&#x9;set messages = getMessages(businessProcess.CompositeDiagram)&#xA;&#x9;end if&#xA;&#x9;set getProcessSpecificMessages = messages&#xA;end function&#xA;&#xA;function addRow (xmlData, xmlDOM, messageFlow)&#xA;&#x9;&#xA;&#x9;dim messageElement as EA.Element&#xA;&#x9;set messageElement = getMessageFromMessageFlow(messageFlow)&#xA;&#x9;if not messageElement is nothing then&#xA;&#x9;&#x9;dim technicalMessage as EA.Element&#xA;&#x9;&#x9;set technicalMessage = getTechnicalMessageFromMessage(messageElement)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlRow&#xA;&#x9;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;&#x9;xmlData.appendChild xmlRow&#xA;&#xA;&#x9;&#x9;dim xmlFISName&#xA;&#x9;&#x9;set xmlFISName = xmlDOM.createElement( &quot;FISName&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;xmlFISName.text = messageElement.Name&#xA;&#x9;&#x9;xmlRow.appendChild xmlFISName&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlMessageName&#xA;&#x9;&#x9;set xmlMessageName = xmlDOM.createElement( &quot;MessageName&quot; )&#x9;&#xA;&#x9;&#x9;if not technicalMessage is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;xmlMessageName.text = technicalMessage.Name&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;xmlMessageName.text = &quot;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;xmlRow.appendChild xmlMessageName&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'description&#xA;&#x9;&#x9;dim notes&#xA;&#x9;&#x9;if len(messageFlow.Notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;notes = messageFlow.Notes&#xA;&#x9;&#x9;elseif len(messageElement.Notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;notes = messageElement.Notes&#xA;&#x9;&#x9;elseif not technicalMessage is nothing then&#xA;&#x9;&#x9;&#x9;notes = technicalMessage.Notes&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim descriptionfull&#xA;&#x9;&#x9;descriptionfull = getTagContent(notes, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim formattedAttr &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'description NL&#xA;&#x9;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlDescNL&#xA;&#x9;&#x9;set xmlDescNL = xmlDOM.createElement( &quot;DescriptionNL&quot; )&#x9;&#xA;&#x9;&#x9;xmlDescNL.text = getTagContent(descriptionfull, &quot;NL&quot;)&#xA;&#x9;&#x9;xmlDescNL.setAttributeNode(formattedAttr)&#xA;&#x9;&#x9;xmlRow.appendChild xmlDescNL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'description FR&#xA;&#x9;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlDescFR&#xA;&#x9;&#x9;set xmlDescFR = xmlDOM.createElement( &quot;DescriptionFR&quot; )&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;xmlDescFR.text = getTagContent(descriptionfull, &quot;FR&quot;)&#xA;&#x9;&#x9;xmlDescFR.setAttributeNode(formattedAttr)&#xA;&#x9;&#x9;xmlRow.appendChild xmlDescFR&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getTechnicalMessageFromMessage(messageElement)&#xA;&#x9;set getTechnicalMessageFromMessage = nothing&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;'Session.Output &quot;MessageElement.Name: &quot; &amp; messageElement.Name &amp; &quot; Connectors.Count: &quot; &amp; messageElement.Connectors.Count&#xA;&#x9;for each connector in messageElement.Connectors&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'check if it is a realization&#xA;&#x9;&#x9;if connector.Type = &quot;Realization&quot; OR  connector.Type = &quot;Realisation&quot; then&#xA;&#x9;&#x9;&#x9;dim technicalElement as EA.Element&#xA;&#x9;&#x9;&#x9;set technicalElement = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;if technicalElement.Stereotype = &quot;Message&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set getTechnicalMessageFromMessage = technicalElement&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;function getMessages(diagram)&#xA;&#x9;dim sortedDiagramObjects&#xA;&#x9;dim sortedMessages&#xA;&#x9;set sortedMessages = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim messageFlows&#xA;&#x9;Set messageFlows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim messageFlowLinks&#xA;&#x9;Set messageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim message as EA.Element&#xA;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#x9;dim messageFlow as EA.Connector&#xA;&#x9;for each messageFlowLink in diagram.DiagramLinks&#xA;&#x9;&#x9;if messageFlowLink.IsHidden = false then&#xA;&#x9;&#x9;&#x9;set messageFlow = Repository.GetConnectorByID(messageFlowLink.ConnectorID)&#xA;&#x9;&#x9;&#x9;if messageFlow.Stereotype = &quot;MessageFlow&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'ok, found a messageflow, add messageFlow and messageFlowLink&#xA;&#x9;&#x9;&#x9;&#x9;messageFlows.Add messageFlow&#xA;&#x9;&#x9;&#x9;&#x9;messageFlowLinks.Add messageFlowLink&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'sort the messageFlows&#xA;&#x9;sortMessageFlows messageFlows, messageFlowLinks,diagram&#xA;&#x9;'return them&#xA;&#x9;set getMessages = messageFlows&#xA;end function&#xA;&#xA;&#xA;function getMessageFromMessageFlow(messageFlow)&#xA;&#x9;set getMessageFromMessageFlow = nothing&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#x9;'Get the messageRef tagged value&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; 0 then&#xA;&#x9;&#x9;&#x9; set getMessageFromMessageFlow = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getConnectorTag(messageFlow, tagName)&#xA;&#x9;dim connectorTag as EA.ConnectorTag&#xA;&#x9;set getConnectorTag = nothing&#xA;&#x9;for each connectorTag in messageFlow.TaggedValues&#xA;&#x9;&#x9;if connectorTag.Name = tagName then&#xA;&#x9;&#x9;&#x9;set getConnectorTag = connectorTag&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram)&#xA;&#x9;dim messageFlow as EA.Connector&#xA;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#x9;dim sortedMessageFlows&#xA;&#x9;dim sortedMessageFlowLinks&#xA;&#x9;dim sortedHeights&#xA;&#x9;Set sortedMessageFlows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;Set sortedMessageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;Set sortedHeights = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim i&#xA;&#x9;for i = 0 to messageFlows.Count -1&#xA;&#x9;&#x9;set messageFlow = messageFlows(i)&#xA;&#x9;&#x9;set messageFlowLink = messageFlowLinks(i)&#xA;&#x9;&#x9;dim height&#xA;&#x9;&#x9;height = getStartingHeight(messageFlow, messageFlowLink,compositeDiagram)&#xA;&#x9;&#x9;dim added&#xA;&#x9;&#x9;added = false&#xA;&#x9;&#x9;'loop the already sorted elements&#xA;&#x9;&#x9;dim j&#xA;&#x9;&#x9;for j = 0 to sortedMessageFlows.Count -1&#xA;&#x9;&#x9;&#x9;dim sortedHeight&#xA;&#x9;&#x9;&#x9;sortedHeight = sortedHeights(j)&#xA;&#x9;&#x9;&#x9;if sortedHeight &lt; height then&#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlows.Insert j, messageFlow &#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Insert j, messageFlowLink&#xA;&#x9;&#x9;&#x9;&#x9;sortedHeights.Insert j, height&#xA;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if it is the first element then just add it&#xA;&#x9;&#x9;if not added then&#xA;&#x9;&#x9;&#x9;sortedMessageFlows.Add messageFlow&#xA;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Add messageFlowLink&#xA;&#x9;&#x9;&#x9;sortedHeights.Add height&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;set messageFlows = sortedMessageFlows&#xA;&#x9;set messageFlowLinks = sortedMessageFlowLinks&#xA;&#x9;set sortMessageFlows = sortedHeights&#xA;end function&#xA;&#xA;function sortDiagramObjectsCollection (diagramObjects)&#xA;&#x9;dim sortedDiagramObjects &#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set sortedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each diagramObject in diagramObjects&#xA;&#x9;&#x9;sortedDiagramObjects.Add (diagramObject)&#xA;&#x9;next&#xA;&#x9;set sortDiagramObjectsCollection = sortDiagramObjectsArrayList(sortedDiagramObjects)&#xA;end function&#xA;&#xA;function sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.DiagramObject&#xA;&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;for i = 0 to diagramObjects.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = diagramObjects(i)&#xA;&#x9;&#x9;set nextElement = diagramObjects(i +1)&#xA;&#x9;&#x9;if  diagramObjectIsAfterYX(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;diagramObjects.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;diagramObjects.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set diagramObjects = sortDiagramObjectsArrayList (diagramObjects)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortDiagramObjectsArrayList = diagramObjects&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterYX(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;elseif thisElement.top = nextElement.top then&#xA;&#x9;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterYX = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterYX = true&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns true if thisElement should come after the nextElement (both diagramObjects)&#xA;function diagramObjectIsAfterXY(thisElement, nextElement)&#xA;'&#x9;dim thisElement as EA.DiagramObject&#xA;'&#x9;dim nextElement as EA.DiagramObject&#xA;&#x9;if thisElement.left &gt; nextElement.left then&#xA;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;elseif thisElement.left = nextElement.left then&#xA;&#x9;&#x9;if thisElement.top &gt; nextElement.top then&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = true&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;diagramObjectIsAfterXY = false&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getStartingHeight(connector, diagramLink, diagram)&#xA;&#x9;'check start element&#xA;&#x9;dim startElement as EA.Element&#xA;&#x9;dim elementID&#xA;&#x9;set startElement = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;elementID = startElement.ElementID&#xA;&#x9;if startElement.Type = &quot;ActivityPartition&quot; then&#xA;&#x9;&#x9;'check end element&#xA;&#x9;&#x9;dim endElement as EA.Element&#xA;&#x9;&#x9;set endElement = Repository.GetElementByID(connector.SupplierID)&#xA;&#x9;&#x9;if endElement.Type &lt;&gt; &quot;ActivityPartition&quot; then&#xA;&#x9;&#x9;&#x9;elementID = endElement.ElementID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;set diagramObject = getDiagramObjectForElementID(ElementID, diagram)&#xA;&#x9;if not diagramObject is nothing then&#xA;&#x9;&#x9;getStartingHeight = diagramObject.top&#xA;&#x9;else&#xA;&#x9;&#x9;getStartingHeight = 0&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getDiagramObjectForElementID(elementID, diagram)&#xA;&#x9;set getDiagramObjectForElementID = nothing&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if diagramObject.ElementID = elementID then&#xA;&#x9;&#x9;&#x9;set getDiagramObjectForElementID = diagramObject&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function test&#xA;&#x9;dim outputString&#xA;&#x9;dim fileSystemObject&#xA;&#x9;dim outputFile&#xA;&#x9;&#xA;&#x9;outputString = MyRtfData(9721)&#xA;&#x9;&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;set outputFile = fileSystemObject.CreateTextFile( &quot;c:\\temp\\processSpecificMessages.txt&quot;, true )&#xA;&#x9;outputFile.Write outputString&#xA;&#x9;outputFile.Close&#xA;&#x9;&#xA;end function&#xA;&#xA;'test"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="193"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF - Data architecture"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="194"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{09ECCBD6-B8C8-4334-B78C-E4016A504C50}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CreateDefaultViews&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Create default views&#xA;' Author: Geert Bellekens&#xA;' Purpose: Creates a default view for each table&#xA;' Date: 2016-07-14&#xA;'&#xA;&#xA;const outPutName = &quot;Create Default Views&quot;&#xA;&#xA;&#xA;sub main&#xA;&#x9;'select database&#xA;&#x9;dim databasePackage as EA.Package&#xA;&#x9;&#xA;&#x9;msgbox &quot;select the «Database» or «DataModel» package&quot;&#xA;&#x9;set databasePackage = selectPackage()&#xA;&#x9;if not databasePackage is nothing then&#xA;&#x9;&#x9;if databasePackage.StereotypeEx = &quot;Database&quot; or databasePackage.StereotypeEx = &quot;DataModel&quot; then&#xA;&#x9;&#x9;&#x9;'create output tab&#xA;&#x9;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;&#x9;'timestamp&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting create default views &quot; &amp; now(), 0&#xA;&#x9;&#x9;&#x9;'get the viewsPackage&#xA;&#x9;&#x9;&#x9;dim viewsPackage&#xA;&#x9;&#x9;&#x9;set viewsPackage = getViewsPackage(databasePackage)&#xA;&#x9;&#x9;&#x9;'find all tables&#xA;&#x9;&#x9;&#x9;dim packageIDstring&#xA;&#x9;&#x9;&#x9;packageIDstring = getPackageTreeIDString(databasePackage)&#xA;&#x9;&#x9;&#x9;dim getElementsQuery&#xA;&#x9;&#x9;&#x9;getElementsQuery = &quot;select * from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Stereotype = 'table' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot;&amp; packageIDstring &amp;&quot;) &quot;&#xA;&#x9;&#x9;&#x9;dim tables&#xA;&#x9;&#x9;&#x9;set tables = getElementsFromQuery(getElementsQuery)&#xA;&#x9;&#x9;&#x9;dim table&#xA;&#x9;&#x9;&#x9;'loop the tables and make a view for each table&#xA;&#x9;&#x9;&#x9;for each table in tables&#xA;&#x9;&#x9;&#x9;&#x9;dim viewName&#xA;&#x9;&#x9;&#x9;&#x9;viewname = left(table.Name,2) &amp; &quot;V&quot; &amp; mid(table.Name,4)&#xA;&#x9;&#x9;&#x9;&#x9;'check if view doesn't exist yet&#xA;&#x9;&#x9;&#x9;&#x9;if not elementExistsInPackage (viewsPackage, viewname) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'create new view&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Adding view  &quot; &amp; viewname, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createDefaultView viewsPackage, viewName, table&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'timestamp end&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Finished create default views &quot; &amp; now(), 0&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end sub&#xA;&#xA;function createDefaultView(viewsPackage, viewName, table)&#xA;&#x9;dim newView as EA.Element&#xA;&#x9;set newView = viewsPackage.Elements.AddNew(viewName,&quot;EAUML::view&quot;)&#xA;&#x9;newView.Gentype = table.Gentype&#xA;&#x9;newView.Update&#xA;&#x9;'add the definition and owner&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in newView.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = &quot;Owner&quot; then&#xA;&#x9;&#x9;&#x9;taggedValue.Value = getTaggedValueValue(table, &quot;Owner&quot;)&#xA;&#x9;&#x9;&#x9;taggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add the viewdef&#xA;&#x9;set taggedValue = newView.TaggedValues.AddNew(&quot;viewdef&quot;,&quot;&quot;)&#xA;&#x9;taggedValue.Value = &quot;&lt;memo&gt;&quot;&#xA;&#x9;taggedValue.Notes = &quot;select * from &quot; &amp; getTaggedValueValue(table, &quot;Owner&quot;) &amp; &quot;.&quot; &amp; table.Name&#xA;&#x9;taggedValue.Update&#xA;end function&#xA;&#xA;function elementExistsInPackage (package, elementName)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;elementExistsInPackage = false&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.Name = elementName then&#xA;&#x9;&#x9;&#x9;elementExistsInPackage = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'gets the views package for this datase.&#xA;'It is the package wiht the name &quot;Views&quot; on either this level or the next level.&#xA;'if not found then the datbaase package is returned&#xA;function getViewsPackage(databasePackage)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;dim subSubPackage as EA.Package&#xA;&#x9;dim viewsPackage&#xA;&#x9;'default&#xA;&#x9;set viewsPackage = databasePackage&#xA;&#x9;'loop packages&#xA;&#x9;for each subPackage in databasePackage.Packages&#xA;&#x9;&#x9;if subPackage.Name = &quot;Views&quot; then&#xA;&#x9;&#x9;&#x9;set viewsPackage = subPackage&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'loop subPackages&#xA;&#x9;&#x9;&#x9;for each subSubPackage in subPackage.Packages&#xA;&#x9;&#x9;&#x9;&#x9;if subSubPackage.Name = &quot;Views&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set viewsPackage = subSubPackage&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getViewsPackage = viewsPackage&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="195"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0006C655-4EBC-4A5D-A847-20E1B343AEE0}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FixDatabasesAfterODBCImport&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;option explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;'&#xA;' Script Name:&#xA;' Author: Geert Bellekens&#xA;' Purpose: sets datatypes to uppercase&#xA;' - updates connector roles to primary keys&#xA;' - sets the &quot;DEFAULT&quot; for any &quot;not null&quot; field that isn't part of a FK or PK&#xA;' Date: 2016-1-10&#xA;'&#xA;sub main&#xA;       dim sqlUpdate&#xA;       'update attribute types&#xA;       sqlUpdate = &quot;update a set a.type = upper(a.type) from t_attribute a where a.Stereotype = 'column'&quot;&#xA;       Repository.Execute sqlUpdate&#xA;     &#xA;       'update parameter types&#xA;       sqlUpdate = &quot;update opp set opp.Type = UPPER(opp.type) &quot; &amp; _&#xA;                           &quot; from t_operationparams opp &quot; &amp; _&#xA;                           &quot; inner join t_operation op on op.OperationID = opp.OperationID &quot; &amp; _&#xA;                           &quot; inner join t_object o on o.Object_ID = op.Object_ID &quot; &amp; _&#xA;                           &quot; where o.Stereotype = 'table' &quot;&#xA;       Repository.Execute sqlUpdate&#xA;     &#xA;       'update connector roles for primary keys&#xA;       sqlUpdate = &quot;update c set c.DestRole = op.Name, c.StyleEx = 'FKINFO=SRC=' + c.SourceRole + ':DST=' + op.Name + ':;' &quot; &amp; _&#xA;                           &quot; from t_connector c &quot; &amp; _&#xA;                           &quot; inner join t_object o on o.Object_ID = c.End_Object_ID &quot; &amp; _&#xA;                           &quot; inner join t_operation op on op.Object_ID = o.Object_ID &quot; &amp; _&#xA;                                                                           &quot; and op.Name like 'PK%' &quot; &amp; _&#xA;                                                                           &quot; and op.Stereotype = 'PK' &quot; &amp; _&#xA;                           &quot; where c.SourceRole like 'FK%' &quot; &amp; _&#xA;                           &quot; and  &quot; &amp; _&#xA;                           &quot; (isnull(c.DestRole,'') &lt;&gt;  op.Name &quot; &amp; _&#xA;                           &quot; or &quot; &amp; _&#xA;                           &quot; isnull(convert( varchar(500),c.StyleEx),'') &lt;&gt; 'FKINFO=SRC=' + c.SourceRole + ':DST=' + op.Name + ':;')&quot;&#xA;       Repository.Execute sqlUpdate&#xA;         'set the &quot;with default&quot; values&#xA;         sqlUpdate = &quot;begin tran update a set a.[Default] = 'DEFAULT' &quot; &amp; _&#xA;                                  &quot; from t_attribute a  &quot; &amp; _&#xA;                                  &quot; inner join t_object o on o.Object_ID = a.Object_ID &quot; &amp; _&#xA;                                  &quot; inner join t_package p on p.Package_ID = o.Package_ID &quot; &amp; _&#xA;                                  &quot; where a.Stereotype = 'column' &quot; &amp; _&#xA;                                  &quot; and a.AllowDuplicates = 1 &quot; &amp; _&#xA;                                  &quot; and (a.[Default] is null or convert(varchar(500),a.[Default]) like 'CURRENT%') &quot; &amp; _&#xA;                                  &quot; and isnull(convert(varchar(500),a.[Default]),'') &lt;&gt; 'DEFAULT' &quot; &amp; _&#xA;                                  &quot; and not exists &quot; &amp; _ &#xA;                                  &quot; (select opp.ea_guid from t_operation op &quot; &amp; _ &#xA;                                  &quot; inner join t_operationparams opp on op.OperationID = opp.OperationID &quot; &amp; _&#xA;                                  &quot; where op.Object_ID = o.object_id &quot; &amp; _&#xA;                                  &quot; and op.Stereotype in ('PK','FK') &quot; &amp; _&#xA;                                  &quot; and opp.Name = a.Name) &quot;&#xA;         Repository.Execute sqlUpdate&#xA;end sub&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="196"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4007E4C9-4952-4DCB-BFD4-2BF0D647797F}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ForeignKeyExample&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;'&#xA;' Create a foreign key relationship between two database columns (attributes)&#xA;'&#xA;' @param[in] fkField (EA.Attribute) &#xA;' @param[in] pkField (EA.Attribute) &#xA;'&#xA;sub DefineForeignKey(fkField, pkField)&#xA;    dim pkOpName, fkOpName&#xA;    dim fkTable as EA.Element&#xA;    dim keyTable as EA.Element&#xA;    dim fkConnector as EA.Connector&#xA;    dim fkOperation as EA.Method&#xA;    dim op as EA.Method&#xA;    dim param as EA.Parameter&#xA;&#xA;    set fkTable = Repository.GetElementByID(fkField.ParentID)&#xA;    set keyTable = Repository.GetElementByID(pkField.ParentID)&#xA;    &#xA;    ' get target Primary Key name&#xA;    for each op in keyTable.Methods&#xA;        if op.Stereotype = &quot;PK&quot; Then&#xA;            for each param in op.Parameters&#xA;                if param.Name = pkField.Name then&#xA;                    pkOpName = op.Name&#xA;                    exit for&#xA;                end if&#xA;            next&#xA;        end if&#xA;    next&#xA;    &#xA;    ' define Foreign Key Name&#xA;    fkOpName = &quot;FK_&quot; &amp; fkTable.Name &amp; &quot;_&quot; &amp; keyTable.Name&#xA;    &#xA;    ' define connector&#xA;    Set fkConnector = fkTable.Connectors.AddNew(&quot;&quot;, &quot;Association&quot;)&#xA;    fkConnector.SupplierID = pkField.ParentID&#xA;    fkConnector.StyleEx = &quot;FKINFO=SRC=&quot; &amp; fkOpName &amp; &quot;:DST=&quot; &amp; pkOpName &amp; &quot;:;&quot;&#xA;    fkConnector.StereotypeEx = &quot;EAUML::FK&quot;&#xA;    fkConnector.ClientEnd.Role = fkOpName&#xA;    fkConnector.ClientEnd.Cardinality = &quot;0..*&quot;&#xA;    fkConnector.SupplierEnd.Role = pkOpName&#xA;    fkConnector.SupplierEnd.Cardinality = &quot;1&quot;&#xA;    fkConnector.Update&#xA;    &#xA;    ' define fk operation&#xA;    set fkOperation = fkTable.Methods.AddNew(fkOpName, &quot;&quot;)&#xA;    fkOperation.StereotypeEx = &quot;EAUML::FK&quot;&#xA;    fkOperation.Update&#xA;    &#xA;    set param = fkOperation.Parameters.AddNew(fkField.Name, fkField.Type)&#xA;    param.Update&#xA;    &#xA;    'set &quot;On Delete&quot; and &quot;On Update&quot; (optional)&#xA;    SetMethodTag fkOperation, &quot;Delete&quot;, &quot;Cascade&quot;&#xA;    SetMethodTag fkOperation, &quot;Update&quot;, &quot;Set Null&quot;&#xA;    SetMethodTag fkOperation, &quot;property&quot;, &quot;Delete Cascade=1;Update Set Null=1;&quot;&#xA;&#x9;&#xA;    ' update attribute details&#xA;    fkField.IsCollection = true&#xA;    fkField.Update&#xA;    &#xA;end sub&#xA;&#xA;function SetMethodTag(theMethod, tagName, tagValue)&#xA;    dim tag as EA.MethodTag&#xA;    set tag = theMethod.TaggedValues.GetByName(tagName)&#xA;    if tag is nothing then&#xA;        set tag = theMethod.TaggedValues.AddNew(tagName, &quot;&quot;)&#xA;    end if&#xA;    tag.Value = tagValue&#xA;    tag.Update&#xA;&#xA;    set SetMethodTag = tag&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="197"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6D9F5704-77A1-414E-A597-5C53BD1157D4}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import database mappings&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Import Database mappings&#xA;' Author: Geert Bellekens&#xA;' Purpose: Import the database mappings from a csv file exported from MEGA&#xA;' Date: 2016-07-07&#xA;const outPutName = &quot;Import database mappings&quot;&#xA;&#xA;&#xA;sub main&#xA;&#x9;dim mappingFile&#xA;&#x9;set mappingFile = New TextFile&#xA;&#x9;'select source logical&#xA;&#x9;dim logicalPackage as EA.Package&#xA;&#x9;msgbox &quot;select the logical package root (S-OAA-...)&quot;&#xA;&#x9;set logicalPackage = selectPackage()&#xA;&#x9;'select source database&#xA;&#x9;dim physicalPackage as EA.Package&#xA;&#x9;msgbox &quot;select the database package (example: «database» GBDOAA01)&quot;&#xA;&#x9;set physicalPackage = selectPackage()&#xA;&#x9;'first select the mapping file&#xA;&#x9;if mappingFile.UserSelect(&quot;C:\Temp\&quot;,&quot;CSV Files (*.csv)|*.csv&quot;) _&#xA;&#x9;&#x9;AND not logicalPackage is nothing _&#xA;&#x9;&#x9;AND not physicalPackage is nothing then&#xA;&#x9;&#x9;'create output tab&#xA;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting import database mappings &quot; &amp; now(), 0&#xA;&#x9;&#x9;'split into lines&#xA;&#x9;&#x9;dim lines&#xA;&#x9;&#x9;lines = Split(mappingFile.Contents, vbCrLf)&#xA;&#x9;&#x9;dim line&#xA;&#x9;&#x9;dim associationDictionary&#xA;&#x9;&#x9;set associationDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;dim packagesTraced&#xA;&#x9;&#x9;packagesTraced = false&#xA;&#x9;&#x9;for each line in lines&#xA;&#x9;&#x9;&#x9;'replace any &quot;.&quot; with &quot;::&quot; &#xA;&#x9;&#x9;&#x9;line = Replace(line,&quot;.&quot;,&quot;::&quot;)&#xA;&#x9;&#x9;&#x9;'split into logical and physical part&#xA;&#x9;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;&#x9;parts = Split(line,&quot;;&quot;)&#xA;&#x9;&#x9;&#x9;if Ubound(parts) = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;dim logicalPath&#xA;&#x9;&#x9;&#x9;&#x9;dim physicalPath&#xA;&#x9;&#x9;&#x9;&#x9;logicalPath = parts(0)&#xA;&#x9;&#x9;&#x9;&#x9;physicalPath = parts(1)&#xA;&#x9;&#x9;&#x9;&#x9;dim logicalObject&#xA;&#x9;&#x9;&#x9;&#x9;dim physicalObject&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set logicalObject = selectObjectFromQualifiedName(logicalPackage,nothing, logicalPath, &quot;::&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;set physicalObject = selectObjectFromQualifiedName(physicalPackage,nothing, physicalPath, &quot;::&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if not physicalObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not logicalObject is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;logical: type = &quot; &amp; TypeName(logicalObject) &amp; &quot; name= &quot; &amp; logicalObject.Name &amp; &quot; =&gt; Physical: &quot; &amp; physicalObject.Name , 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if logicalObject.ObjectType = otElement AND physicalObject.ObjectType = otElement then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if the packages are not traced yet then we do that now&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not packagesTraced then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;tracePackages logicalObject,physicalPackage&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;packagesTraced = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'make a trace between the elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;traceElements logicalObject, physicalObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elseif physicalObject.ObjectType = otAttribute and logicalObject.ObjectType = otAttribute then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;traceAttributes logicalObject, physicalObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elseif physicalObject.ObjectType = otAttribute and logicalObject.ObjectType = otConnector then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;traceFeatureToAssociation logicalObject, physicalObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elseif physicalObject.ObjectType = otMethod then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'logical object is not found and physicalObject an operation so we might be dealing with an association to FK mapping&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Associations have their mega ID in the name like [F19bgUYLMv70]&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not associationDictionary.Exists(logicalPath) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;associationDictionary.Add logicalPath, physicalObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Mapping associations&quot; , 0&#xA;&#x9;&#x9;mapAssociations logicalPackage, associationDictionary&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Finished import database mappings &quot; &amp; now(), 0&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function tracePackages (logicalObject,physicalPackage)&#xA;&#x9;dim pkconPackage as EA.Package&#xA;&#x9;set pkconPackage = Repository.GetPackageByID(logicalObject.PackageID)&#xA;&#x9;if not pkconPackage is nothing then&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Making trace between package &quot; &amp; pkconPackage.Name &amp; &quot; and package &quot; &amp; physicalPackage.Name,0&#xA;&#x9;&#x9;&#x9;'check if the connector exists already&#xA;&#x9;&#x9;for each connector in physicalPackage.Connectors&#xA;&#x9;&#x9;&#x9;if connector.SupplierID = pkconPackage.Element.ElementID _&#xA;&#x9;&#x9;&#x9;AND connector.Type = &quot;Abstraction&quot; _&#xA;&#x9;&#x9;&#x9;AND connector.Stereotype = &quot;trace&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;traceExists = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if it doesn't exist yet we create a new one&#xA;&#x9;&#x9;if traceExists = false then&#xA;&#x9;&#x9;&#x9;set trace = physicalPackage.Connectors.AddNew(&quot;&quot;,&quot;Abstraction&quot;)&#xA;&#x9;&#x9;&#x9;trace.SupplierID = pkconPackage.Element.ElementID&#xA;&#x9;&#x9;&#x9;trace.Stereotype = &quot;trace&quot;&#xA;&#x9;&#x9;&#x9;trace.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function mapAssociations (logicalPackage, associationDictionary)&#xA;&#x9;dim logicalPath,bracketPosition, associationName&#xA;&#x9;dim FKOperation as EA.Method&#xA;&#x9;for each logicalPath in associationDictionary.Keys&#xA;&#x9;&#x9;set FKOperation = associationDictionary.Item(logicalPath)&#xA;&#x9;&#x9;'get the actual associationName&#xA;&#x9;&#x9;bracketPosition = InstrRev(logicalPath, &quot;[&quot;, -1, 1)&#xA;&#x9;&#x9;if bracketPosition &gt; 0 then&#xA;&#x9;&#x9;&#x9;associationName = Mid(logicalPath,1,bracketPosition -2)&#xA;&#x9;&#x9;&#x9;dim sqlGetAssociations, associations, association&#xA;&#x9;&#x9;&#x9;sqlGetAssociations = &quot;select c.Connector_ID  from t_connector c &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object sob on c.Start_Object_ID = sob.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object tob on c.End_Object_ID = tob.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector dob_sob on dob_sob.End_Object_ID in (sob.Object_ID, tob.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; and dob_sob.Connector_Type = 'Abstraction' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; and dob_sob.Stereotype = 'trace' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object dob on dob_sob.Start_Object_ID = dob.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &quot; and dob.Stereotype = 'table' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_operation op on op.Object_ID = dob.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector fkcon on fkcon.Start_Object_ID = dob.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and fkcon.SourceRole = op.Name &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object dtob on dtob.Object_ID = fkcon.End_Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector dtobtr on dtobtr.Start_Object_ID = dtob.Object_ID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and dtobtr.Connector_Type = 'Abstraction' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and dtobtr.Stereotype = 'trace' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and dtobtr.End_Object_ID in (c.Start_Object_ID, c.End_Object_ID) &quot; &amp; _&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where '&quot; &amp; associationName &amp; &quot;' in (c.DestRole + ' ' + c.SourceRole, c.SourceRole + ' ' + c.DestRole) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and op.OperationID = &quot; &amp; FKOperation.MethodID&#xA;&#x9;&#x9;&#x9;set associations = getConnectorsFromQuery(sqlGetAssociations)&#xA;&#x9;&#x9;&#x9;for each association in associations&#xA;&#x9;&#x9;&#x9;&#x9;'map FKOperation to association&#xA;&#x9;&#x9;&#x9;&#x9;traceFeatureToAssociation association, FKOperation&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;&#xA;function traceElements (originalElement,copyElement)&#xA;'&#x9;dim originalElement as EA.Element&#xA;'&#x9;dim copyElement as EA.Element&#xA;&#x9;'add trace relation&#xA;&#x9;dim trace as EA.Connector&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim traceExists&#xA;&#x9;traceExists = false&#xA;&#x9;'check if the connector exists already&#xA;&#x9;for each connector in copyElement.Connectors&#xA;&#x9;&#x9;if connector.SupplierID = originalElement.ElementID _&#xA;&#x9;&#x9;AND connector.Type = &quot;Abstraction&quot; _&#xA;&#x9;&#x9;AND connector.Stereotype = &quot;trace&quot; then&#xA;&#x9;&#x9;&#x9;traceExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if it doesn't exist yet we create a new one&#xA;&#x9;if traceExists = false then&#xA;&#x9;&#x9;set trace = copyElement.Connectors.AddNew(&quot;&quot;,&quot;Abstraction&quot;)&#xA;&#x9;&#x9;trace.SupplierID = originalElement.ElementID&#xA;&#x9;&#x9;trace.Stereotype = &quot;trace&quot;&#xA;&#x9;&#x9;trace.Update&#xA;&#x9;end if&#xA;&#x9;'set the alias on the original element with the name of the copyElement&#xA;&#x9;originalElement.Alias = copyElement.Name&#xA;&#x9;originalElement.Update&#xA;end function&#xA;&#xA;function traceAttributes(originalAttribute,copyAttribute)&#xA;&#x9;'add trace tag&#xA;&#x9;dim traceTag as EA.AttributeTag&#xA;&#x9;set traceTag = getExistingOrNewTaggedValue(copyAttribute,&quot;sourceAttribute&quot;)&#xA;&#x9;traceTag.Value = originalAttribute.AttributeGUID&#xA;&#x9;traceTag.Update&#xA;&#x9;'set the alias on the original element with the name of the copyElement&#xA;&#x9;originalAttribute.Alias = copyAttribute.Name&#xA;&#x9;if not copyAttribute.AllowDuplicates then&#xA;&#x9;&#x9;originalAttribute.LowerBound = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;originalAttribute.Update&#xA;end function&#xA;&#xA;function traceFeatureToAssociation(originalConnector,copyFeature)&#xA;&#x9;'add trace tag&#xA;&#x9;dim traceTag as EA.ConnectorTag&#xA;&#x9;set traceTag = getExistingOrNewTaggedValue(copyFeature,&quot;sourceAssociation&quot;)&#xA;&#x9;traceTag.Value = originalConnector.ConnectorGUID&#xA;&#x9;traceTag.Update&#xA;&#x9;'set the alias on the original element with the name of the copyElement&#xA;&#x9;originalConnector.Alias = copyFeature.Name&#xA;&#x9;originalConnector.Update&#xA;end function&#xA;&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="198"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C260F532-8A88-4DC8-BCF6-36BA7CCDC652}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import Identifiers&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Import Identifiers&#xA;' Author: Geert Bellekens&#xA;' Purpose: Import the identifiers exported from MEGA's Candidate key members&#xA;' Date: 2016-07-14&#xA;'&#xA;&#xA;const outPutName = &quot;Import Identifiers&quot;&#xA;&#xA;&#xA;sub main&#xA;&#x9;dim mappingFile&#xA;&#x9;set mappingFile = New TextFile&#xA;&#x9;'select source logical&#xA;&#x9;dim logicalPackage as EA.Package&#xA;&#x9;msgbox &quot;select the logical package root (S-OAA-...)&quot;&#xA;&#x9;set logicalPackage = selectPackage()&#xA;&#x9;'first select the mapping file&#xA;&#x9;if mappingFile.UserSelect(&quot;&quot;,&quot;CSV Files (*.csv)|*.csv&quot;) _&#xA;&#x9;   AND not logicalPackage is nothing then&#xA;&#x9;   'create output tab&#xA;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting import identifiers &quot; &amp; now(), 0&#xA;&#x9;&#x9;'split into lines&#xA;&#x9;&#x9;dim lines&#xA;&#x9;&#x9;lines = Split(mappingFile.Contents, vbCrLf)&#xA;&#x9;&#x9;dim line&#xA;&#x9;&#x9;for each line in lines&#xA;&#x9;&#x9;&#x9;'replace any &quot;.&quot; with &quot;::&quot; &#xA;&#x9;&#x9;&#x9;line = Replace(line,&quot;.&quot;,&quot;::&quot;)&#xA;&#x9;&#x9;&#x9;'split into logical and physical part&#xA;&#x9;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;&#x9;parts = Split(line,&quot;;&quot;)&#xA;&#x9;&#x9;&#x9;'there should be 4 parts in the csv file: Identifier - Attribute or Role Name - AttributePath - RoleName + [ID]&#xA;&#x9;&#x9;&#x9;'we should have enough info from the name, and the fact that we know whether it is an attribut or a RoleName&#xA;&#x9;&#x9;&#x9;if Ubound(parts) = 3 then&#xA;&#x9;&#x9;&#x9;&#x9;dim IdentifierFQN, idName, isAttribute&#xA;&#x9;&#x9;&#x9;&#x9;IdentifierFQN = parts(0)&#xA;&#x9;&#x9;&#x9;&#x9;'check if the IdentifierFQN is not empty and is a valid FQN&#xA;&#x9;&#x9;&#x9;&#x9;if len(IdentifierFQN) &gt; 0 AND instrRev(IdentifierFQN,&quot;::&quot;) &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;idName = parts(1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(parts(2)) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isAttribute = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isAttribute = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim classFQN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'remove the last part of of the IdentifierFQN in order to get the class name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classFQN = mid(IdentifierFQN , 1 , instrRev(IdentifierFQN,&quot;::&quot;) - 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if isAttribute then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set identifier on attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setIdentifierAttribute logicalPackage,classFQN,idName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set identifier on association end&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setIdenfifierAssociation logicalPackage,classFQN,idName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;End import identifiers &quot; &amp; now(), 0&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function setIdentifierAttribute(logicalPackage,classFQN,idName)&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;set attribute = selectObjectFromQualifiedName(logicalPackage,nothing, classFQN &amp; &quot;::&quot; &amp; idName , &quot;::&quot;) &#xA;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;'set isID property on attribute&#xA;&#x9;&#x9;'log progress&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;setting {id} on attribute &quot; &amp; classFQN &amp; &quot;.&quot; &amp; attribute.Name,0&#xA;&#x9;&#x9;attribute.IsID = true&#xA;&#x9;&#x9;attribute.Update&#xA;&#x9;else&#xA;&#x9;&#x9;'log the fact that we didn't find it&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;ERROR: could not find attribute for &quot; &amp; classFQN &amp; &quot;.&quot; &amp; idName,0&#xA;&#x9;end if&#xA;&#x9;&#xA;end function&#xA;&#xA;function setIdenfifierAssociation(logicalPackage,classFQN,idName)&#xA;&#x9;dim classElement as EA.Element&#xA;&#x9;set classElement = selectObjectFromQualifiedName(logicalPackage,nothing, classFQN, &quot;::&quot;)&#xA;&#x9;if not classElement is nothing then&#xA;&#x9;&#x9;'find the associationEnd&#xA;&#x9;&#x9;dim association as EA.Connector&#xA;&#x9;&#x9;'register the fact that we found it or not&#xA;&#x9;&#x9;dim foundIt&#xA;&#x9;&#x9;foundIt = false&#xA;&#x9;&#x9;for each association in classElement.Connectors&#xA;&#x9;&#x9;&#x9;if association.Type = &quot;Association&quot; or association.Type = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim associationEnd as EA.ConnectorEnd&#xA;&#x9;&#x9;&#x9;&#x9;set associationEnd = nothing 'initialize to be sure&#xA;&#x9;&#x9;&#x9;&#x9;if association.ClientID = classElement.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set associationEnd = association.SupplierEnd&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set associationEnd = association.ClientEnd&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;if not associationEnd is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if associationEnd.Role = idName _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND left(associationEnd.Cardinality,1) = &quot;1&quot; then 'only for obligatory associations&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not foundIt then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'log progress&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;setting {id} on association &quot; &amp; classFQN &amp; &quot;.&quot; &amp; idName,0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'found the correct one&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;associationEnd.Constraint = &quot;id&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;associationEnd.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'register that we found one&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;foundIt = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;ERROR: found duplicate rolename for &quot; &amp; classFQN &amp; &quot;.&quot; &amp; idName,0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;if not foundIt then&#xA;&#x9;&#x9;&#x9;'log the fact that we didn't find it&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;ERROR: could not find association role for &quot; &amp; classFQN &amp; &quot;.&quot; &amp; idName,0&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="199"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{905618F6-6981-4255-8CAC-3B1931BD3B66}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import KBC Codes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'TODO: finish!&#xA;'&#xA;' Script Name: Import KBC Codes&#xA;' Author: Geert Bellekens&#xA;' Purpose: Import the KBC Codes on Attributes&#xA;' Date: 2016-07-14&#xA;'&#xA;&#xA;const outPutName = &quot;Import KBC Codes&quot;&#xA;&#xA;&#xA;sub main&#xA;&#x9;dim mappingFile&#xA;&#x9;set mappingFile = New TextFile&#xA;&#x9;'select source logical&#xA;&#x9;dim logicalPackage as EA.Package&#xA;&#x9;msgbox &quot;select the logical package root (S-OAA-...)&quot;&#xA;&#x9;set logicalPackage = selectPackage()&#xA;&#x9;'first select the mapping file&#xA;&#x9;if mappingFile.UserSelect(&quot;&quot;,&quot;CSV Files (*.csv)|*.csv&quot;) _&#xA;&#x9;   AND not logicalPackage is nothing then&#xA;&#x9;   'create output tab&#xA;&#x9;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Starting import KBC codes &quot; &amp; now(), 0&#xA;&#x9;&#x9;'split into lines&#xA;&#x9;&#x9;dim lines&#xA;&#x9;&#x9;lines = Split(mappingFile.Contents, vbCrLf)&#xA;&#x9;&#x9;dim line&#xA;&#x9;&#x9;for each line in lines&#xA;&#x9;&#x9;&#x9;'replace any &quot;.&quot; with &quot;::&quot; &#xA;&#x9;&#x9;&#x9;line = Replace(line,&quot;.&quot;,&quot;::&quot;)&#xA;&#x9;&#x9;&#x9;'split into logical and physical part&#xA;&#x9;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;&#x9;parts = Split(line,&quot;;&quot;)&#xA;&#x9;&#x9;&#x9;'there should be 3 parts in the csv file: ClassFQN, attribute name and KBC Code&#xA;&#x9;&#x9;&#x9;if Ubound(parts) = 2 then&#xA;&#x9;&#x9;&#x9;&#x9;dim IdentifierFQN, idName, isAttribute, KBCCode&#xA;&#x9;&#x9;&#x9;&#x9;IdentifierFQN = parts(0)&#xA;&#x9;&#x9;&#x9;&#x9;'log progress&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Processing &quot; &amp; IdentifierFQN,0&#xA;&#x9;&#x9;&#x9;&#x9;'check if the IdentifierFQN is not empty and is a valid FQN&#xA;&#x9;&#x9;&#x9;&#x9;if len(IdentifierFQN) &gt; 0 AND instrRev(IdentifierFQN,&quot;::&quot;) &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;idName = parts(1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;KBCCode = parts(2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'set KBCCode on attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setKBCCodeOnAttribute logicalPackage,IdentifierFQN,idName,KBCCode&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'set timestamp&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Finished import KBC codes  &quot; &amp; now(), 0&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function setKBCCodeOnAttribute(logicalPackage,classFQN,attributeName, KBCCode)&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;set attribute = selectObjectFromQualifiedName(logicalPackage,nothing, classFQN &amp; &quot;::&quot; &amp; attributeName , &quot;::&quot;) &#xA;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;'set isID property on attribute&#xA;&#x9;&#x9;'log progress&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;setting KBC Code &amp;  on attribute &quot; &amp; classFQN &amp; &quot;.&quot; &amp; attribute.Name,0&#xA;&#x9;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set taggedValue = getOrCreateTaggedValue(attribute,&quot;KBC Code&quot;)&#xA;&#x9;&#x9;taggedValue.Value = KBCCode&#xA;&#x9;&#x9;taggedValue.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="200"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{26201EEE-D3F4-42C6-9DF8-CD4C52D306D2}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Merge Packages&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Merge Packages&#xA;' Author: Geert Bellekens&#xA;' Purpose: Merge packages containing conceptually the same elements moving all references to references to the master element&#xA;' Date: 2016-07-28&#xA;'&#xA;&#xA;dim outputTabName&#xA;outputTabName = &quot;Merge Packages&quot;&#xA;&#xA;sub main&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'select source logical&#xA;&#x9;dim fromPackage as EA.Package&#xA;&#x9;msgbox &quot;select the FROM package&quot;&#xA;&#x9;set fromPackage = selectPackage()&#xA;&#x9;'select master package&#xA;&#x9;dim masterPackage as EA.Package&#xA;&#x9;msgbox &quot;select the TO (master) package&quot;&#xA;&#x9;set masterPackage = selectPackage()&#xA;&#x9;if not fromPackage is nothing and not masterPackage is nothing then &#xA;&#x9;&#x9;dim response&#xA;&#x9;&#x9;response = Msgbox(&quot;Merge package &quot;&quot;&quot; &amp; fromPackage.Name &amp; &quot;&quot;&quot; to package &quot;&quot;&quot; &amp; masterPackage.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Merge Package&quot;)&#xA;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting merge package &quot;&quot;&quot; &amp; fromPackage.Name &amp; &quot;&quot;&quot; to package &quot;&quot;&quot; &amp; masterPackage.Name &amp; &quot;&quot;&quot;&quot; ,0&#xA;&#x9;&#x9;&#x9;mergePackages fromPackage, masterPackage&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished merge package &quot;&quot;&quot; &amp; fromPackage.Name &amp; &quot;&quot;&quot; to package &quot;&quot;&quot; &amp; masterPackage.Name &amp; &quot;&quot;&quot;&quot; ,0&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;msgbox &quot;finished&quot;&#xA;end sub&#xA;&#xA;&#xA;function mergePackages(fromPackage, masterPackage)&#xA;&#x9;dim fromElement as EA.Element&#xA;&#x9;'merge owned elements&#xA;&#x9;for each fromElement in fromPackage.Elements&#xA;&#x9;&#x9;dim masterElement as EA.Element&#xA;&#x9;&#x9;set masterElement = getCorrespondingElement(masterPackage, fromElement)&#xA;&#x9;&#x9;if not masterElement is nothing then&#xA;&#x9;&#x9;&#x9;'found corresponding element, merge te two&#xA;&#x9;&#x9;&#x9;mergeElements fromElement, masterElement&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, &quot;Moving &quot;&quot;&quot; &amp; fromElement.Name &amp; &quot;&quot;&quot; to the master package&quot; ,0&#xA;&#x9;&#x9;&#x9;'no corresponding element found, move the element to the master package&#xA;&#x9;&#x9;&#x9;fromElement.PackageID = masterPackage.PackageID&#xA;&#x9;&#x9;&#x9;fromElement.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'merge owned packages&#xA;&#x9;dim fromSubPackage as EA.Package&#xA;&#x9;for each fromSubPackage in fromPackage.Packages&#xA;&#x9;&#x9;dim masterSubPackage as EA.Package&#xA;&#x9;&#x9;set masterSubPackage = getCorrespondingPackage(fromSubPackage, masterPackage)&#xA;&#x9;&#x9;if not masterSubPackage is nothing then&#xA;&#x9;&#x9;&#x9;mergePackages fromSubPackage, masterSubPackage&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getCorrespondingPackage(fromSubPackage, masterPackage)&#xA;&#x9;dim candidatePackage as EA.Package&#xA;&#x9;'initialize empty&#xA;&#x9;set getCorrespondingPackage = nothing&#xA;&#x9;for each candidatePackage in masterPackage.Packages&#xA;&#x9;&#x9;if candidatePackage.Name = fromSubPackage.Name then&#xA;&#x9;&#x9;&#x9;set getCorrespondingPackage = candidatePackage&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'merging elements is the fastest if we use database updates&#xA;function mergeElements(fromElement, masterElement)&#xA;&#x9;Repository.WriteOutput outputTabName, &quot;Merging &quot;&quot;&quot; &amp; fromElement.Name &amp; &quot;&quot;&quot; to &quot;&quot;&quot; &amp; masterElement.Name &amp; &quot;&quot;&quot;&quot; ,0&#xA;&#x9;'attribute datatypes&#xA;&#x9;dim sqlUpdateDatatypes &#xA;&#x9;slqUpdateDatatypes = &quot;update t_attribute set classifier = &quot; &amp; masterElement.ElementID &amp; &quot; where classifier = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute slqUpdateDatatypes&#xA;&#x9;'connectors (not for connectors to self)&#xA;&#x9;dim sqlUpdateConnectorSource, sqlUpdateConnectorTarget&#xA;&#x9;sqlUpdateConnectorSource = &quot;update t_connector set Start_Object_ID = &quot; &amp; masterElement.ElementID &amp; &quot; where Start_Object_ID &lt;&gt; End_Object_ID and Start_Object_ID = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute sqlUpdateConnectorSource&#xA;&#x9;sqlUpdateConnectorTarget = &quot;update t_connector set End_Object_ID = &quot; &amp; masterElement.ElementID &amp; &quot; where Start_Object_ID &lt;&gt; End_Object_ID and End_Object_ID = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute sqlUpdateConnectorTarget&#xA;&#x9;'diagramObjects&#xA;&#x9;dim slqUpdateDiagramObjects&#xA;&#x9;slqUpdateDiagramObjects = &quot;update t_diagramobjects set Object_ID= &quot; &amp; masterElement.ElementID &amp; &quot; where Object_ID = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute slqUpdateDiagramObjects &#xA;&#x9;'parameter types&#xA;&#x9;dim sqlUpdateParameters&#xA;&#x9;sqlUpdateParameters = &quot;update t_operationparams set Classifier =  &quot; &amp; masterElement.ElementID &amp; &quot;  where Classifier = &quot; &amp; fromElement.ElementID&#xA;&#x9;Repository.Execute sqlUpdateParameters&#xA;&#x9;'tagged values (elements)&#xA;&#x9;updateTaggedValues &quot;t_objectproperties&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'tagged values (attributes)&#xA;&#x9;updateTaggedValues &quot;t_attributetag&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'tagged values (operations)&#xA;&#x9;updateTaggedValues &quot;t_operationtag&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'tagged values (connectors)&#xA;&#x9;updateTaggedValues &quot;t_connectortag&quot;, masterElement.ElementGUID , fromElement.ElementGUID&#xA;&#x9;'merge references to attributes&#xA;&#x9;mergeAttributeReferences fromElement, masterElement&#xA;end function&#xA;&#xA;function mergeAttributeReferences(fromElement, masterElement)&#xA;&#x9;dim fromAttribute as EA.Attribute&#xA;&#x9;dim masterAttribute as EA.Attribute&#xA;&#x9;for each fromAttribute in fromElement.Attributes&#xA;&#x9;&#x9;set masterAttribute = getCorrespondingAttribute(fromAttribute,masterElement)&#xA;&#x9;&#x9;if not masterAttribute is nothing then&#xA;&#x9;&#x9;&#x9;'tagged values (attributes)&#xA;&#x9;&#x9;&#x9;updateTaggedValues &quot;t_attributetag&quot;, masterAttribute.AttributeGUID, fromAttribute.AttributeGUID &#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getCorrespondingAttribute(fromAttribute,masterElement)&#xA;&#x9;'initialize empty&#xA;&#x9;set getCorrespondingAttribute = nothing&#xA;&#x9;dim candidateAttribute as EA.Attribute&#xA;&#x9;for each candidateAttribute in masterElement.Attributes&#xA;&#x9;&#x9;if candidateAttribute.Name = fromAttribute.Name then&#xA;&#x9;&#x9;&#x9;set getCorrespondingAttribute = candidateAttribute&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function updateTaggedValues (tableName, newValue, oldValue)&#xA;&#x9;dim sqlUpdateTaggedValues&#xA;&#x9;sqlUpdateTaggedValues = &quot;update &quot; &amp; tableName &amp; &quot; set value = '&quot; &amp; newValue &amp; &quot;' where value = '&quot; &amp; oldValue &amp; &quot;'&quot;&#xA;&#x9;Repository.Execute sqlUpdateTaggedValues &#xA;end function&#xA;&#xA;&#xA;function getCorrespondingElement(masterPackage, fromElement)&#xA;&#x9;dim sqlGetElement&#xA;&#x9;'initialize to nothing&#xA;&#x9;set getCorrespondingElement = nothing&#xA;&#x9;sqlGetElement = &quot;select o.Object_ID from t_object o &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Package_ID = &quot; &amp; masterPackage.PackageID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Object_Type = '&quot; &amp; fromElement.Type &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Name = '&quot; &amp; fromElement.Name &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and (o.Stereotype is null or o.Stereotype = '&quot; &amp; fromElement.Stereotype &amp; &quot;') &quot;&#xA;&#x9;dim masterElement as EA.Element&#xA;&#x9;dim elementCollection&#xA;&#x9;set elementCollection = getElementsFromQuery(sqlGetElement)&#xA;&#x9;for each masterElement in elementCollection&#xA;&#x9;&#x9;'return the first element&#xA;&#x9;&#x9;set getCorrespondingElement = masterElement&#xA;&#x9;&#x9;exit for&#xA;&#x9;next&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="201"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BD0DBA75-7577-40FA-9CE4-55C365C8A462}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element-&amp;gt; RemoveAliases&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     RemoveAliasesFromSelectedPackage&#xA;' Author:          Giu Platania&#xA;' Purpose:         Removes all aliases from elements and their attributes in the currently selected package in EA.&#xA;' Date:            2025-08-06&#xA;' Version:         1.0&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;Sub main()&#xA;    Dim selectedPackage As EA.Package&#xA;    Set selectedPackage = Repository.GetTreeSelectedPackage&#xA;&#xA;    If Not selectedPackage Is Nothing Then&#xA;        RemoveAliases selectedPackage&#xA;        Session.Output &quot;Aliases removed from package: &quot; &amp; selectedPackage.Name&#xA;    Else&#xA;        MsgBox &quot;Please select a package in the Project Browser and try again.&quot;, vbExclamation, &quot;No package selected&quot;&#xA;    End If&#xA;End Sub&#xA;&#xA;' Removes aliases from all elements and their attributes in the given package (does not recurse into subpackages).&#xA;Sub RemoveAliases(package)&#xA;    Dim element As EA.Element&#xA;    For Each element In package.Elements&#xA;        element.Alias = &quot;&quot;&#xA;        element.Update&#xA;        ' Remove aliases from all attributes of the element&#xA;        Dim attribute As EA.Attribute&#xA;        For Each attribute In element.Attributes&#xA;            attribute.Alias = &quot;&quot;&#xA;            attribute.Update&#xA;        Next&#xA;    Next&#xA;End Sub&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="202"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7A762240-BFCD-4AD3-8030-4046EC032111}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RenameDataModel&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: RenameDataModel&#xA;' Author: Geert Bellekens&#xA;' Purpose: Renames a data model created by the model wizard&#xA;' Date: 2016-10-07&#xA;'&#xA;sub main&#xA;&#x9;dim dataModel as EA.Package;&#xA;&#x9;set dataModel = Repository.GetTreeSelectedPackage&#xA;&#x9;if not dataModel is nothing then&#xA;&#x9;&#x9;if dataModel.Element.Stereotype = &quot;DataModel&quot; then&#xA;&#x9;&#x9;&#x9;dim originalName&#xA;&#x9;&#x9;&#x9;originalName = dataModel.Name&#xA;&#x9;&#x9;&#x9;'ask user for name&#xA;&#x9;&#x9;&#x9;dim modelName&#xA;&#x9;&#x9;&#x9;modelName = InputBox( &quot;Please enter new name for the data model&quot;, &quot;Data Model Name&quot; )&#xA;&#x9;&#x9;&#x9;if len(modelName) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'rename data model package&#xA;&#x9;&#x9;&#x9;&#x9;dataModel.Name = modelName&#xA;&#x9;&#x9;&#x9;&#x9;dataModel.Update&#xA;&#x9;&#x9;&#x9;&#x9;'rename diagram(s) under data model&#xA;&#x9;&#x9;&#x9;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;&#x9;for each diagram in dataModel.Diagrams&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagram.Name = originalName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.Name = modelName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;'rename elements under data model&#xA;&#x9;&#x9;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;for each element in dataModel.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if element.Name = originalName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Name = modelName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;'rename packages under data model&#xA;&#x9;&#x9;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;&#x9;&#x9;for each subPackage in dataModel.Packages&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if subPackage.Name = originalName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;subPackage.Name = modelName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;subPackage.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update any diagrams under this package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each diagram in subPackage.Diagrams&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if diagram.Name = originalName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.Name = modelName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;msgbox &quot;Finished renaming&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;msgbox &quot;Please select a package with stereotype «DataModel»&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="203"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8D8F2AA7-84EB-4C7E-8FBA-A034BBB536A5}"/>
			<Column name="ScriptAuthor" value="{60DFF558-312D-47E0-9E7E-E4F27B3883C2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; ResetAttributeOrder&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project AC]&#xA;'[group=Acerta Scripts]&#xA;&#xA;' Script Name:     Reset Attribute Order&#xA;' Author:          Geert Bellekens &amp; Giu Platania&#xA;' Purpose:         Reset the logical attributes in the Logical Data Model to match the order of the corresponding columns in the physical database tables.&#xA;' Date:            2025-08-06&#xA;' Version:         1.1&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;Const outputTabName = &quot;Reset Attribute order&quot;&#xA;&#xA;Sub main()&#xA;    Dim mappingFile&#xA;    Set mappingFile = New TextFile&#xA;&#xA;    ' Select Logical Data Model package&#xA;    Dim logicalPackage As EA.Package&#xA;    MsgBox &quot;Select the Logical Data Model Package (PK CON ...)&quot;&#xA;    Set logicalPackage = selectPackage()&#xA;    &#xA;    ' Select Physical Database package&#xA;    Dim physicalPackage As EA.Package&#xA;    MsgBox &quot;Select the database package (example: «database» GBDOAA01)&quot;&#xA;    Set physicalPackage = selectPackage()&#xA;&#xA;    If Not physicalPackage Is Nothing And Not logicalPackage Is Nothing Then&#xA;        Repository.EnableUIUpdates = False&#xA;&#xA;        ' Create and clear output tab&#xA;        Repository.CreateOutputTab outputTabName&#xA;        Repository.ClearOutput outputTabName&#xA;        Repository.EnsureOutputVisible outputTabName&#xA;&#xA;        ' Start process&#xA;        Repository.WriteOutput outputTabName, Now() &amp; &quot;: Starting reset attribute order&quot;, 0&#xA;        resetAttributeOrder logicalPackage, physicalPackage&#xA;        Repository.WriteOutput outputTabName, Now() &amp; &quot;: Finished reset attribute order&quot;, 0&#xA;&#xA;        Repository.EnableUIUpdates = True&#xA;        Repository.RefreshModelView logicalPackage.PackageID&#xA;    End If&#xA;End Sub&#xA;&#xA;' Recursively aligns logical class attribute order with physical database table column order&#xA;Function resetAttributeOrder(logicalPackage, physicalPackage)&#xA;    Dim table As EA.Element&#xA;    For Each table In physicalPackage.Elements&#xA;        If LCase(table.Stereotype) = &quot;table&quot; Then&#xA;            ' Get logical classes traced from this table&#xA;            Dim logicalClasses&#xA;            Set logicalClasses = getLogicalClasses(table)&#xA;            ' Set attribute order for all traced logical attributes&#xA;            setAttributeOrder table, logicalClasses&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Process sub-packages recursively&#xA;    Dim subPackage As EA.Package&#xA;    For Each subPackage In physicalPackage.Packages&#xA;        resetAttributeOrder logicalPackage, subPackage&#xA;    Next&#xA;End Function&#xA;&#xA;' For each physical column, sets position of traced logical attributes to match column position&#xA;Function setAttributeOrder(table, logicalClasses)&#xA;    Repository.WriteOutput outputTabName, &quot;Processing table: &quot; &amp; table.Name, 0&#xA;    Dim column As EA.Attribute&#xA;    For Each column In table.Attributes&#xA;        Dim logicalAttributes&#xA;        Set logicalAttributes = getLogicalAttributes(column, logicalClasses)&#xA;        Dim logicalAttribute As EA.Attribute&#xA;        For Each logicalAttribute In logicalAttributes&#xA;            logicalAttribute.Pos = column.Pos&#xA;            logicalAttribute.Update&#xA;        Next&#xA;    Next&#xA;End Function&#xA;&#xA;' Finds logical attributes traced from a physical column&#xA;Function getLogicalAttributes(column, logicalClasses)&#xA;    Dim logicalAttributes&#xA;    Set logicalAttributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;    Dim traceTag As EA.AttributeTag&#xA;    For Each traceTag In column.TaggedValues&#xA;        If traceTag.Name = &quot;sourceAttribute&quot; And traceTag.Value &lt;&gt; &quot;&quot; Then&#xA;            Dim logicalAttribute As EA.Attribute&#xA;            Set logicalAttribute = Repository.GetAttributeByGuid(traceTag.Value)&#xA;            If Not logicalAttribute Is Nothing Then&#xA;                If attributeIsOwnedBy(logicalAttribute, logicalClasses) Then&#xA;                    logicalAttributes.Add logicalAttribute&#xA;                End If&#xA;            End If&#xA;        End If&#xA;    Next&#xA;    Set getLogicalAttributes = logicalAttributes&#xA;End Function&#xA;&#xA;' Checks if the logical attribute belongs to one of the supplied logical classes&#xA;Function attributeIsOwnedBy(logicalAttribute, logicalClasses)&#xA;    attributeIsOwnedBy = False&#xA;    Dim logicalClass As EA.Element&#xA;    For Each logicalClass In logicalClasses&#xA;        If logicalClass.ElementID = logicalAttribute.ParentID Then&#xA;            attributeIsOwnedBy = True&#xA;            Exit For&#xA;        End If&#xA;    Next&#xA;End Function&#xA;&#xA;' Gets logical classes traced from a physical table via &quot;Abstraction&quot; (trace) connectors&#xA;Function getLogicalClasses(table)&#xA;    Dim logicalClasses&#xA;    Set logicalClasses = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;    Dim trace As EA.Connector&#xA;    For Each trace In table.Connectors&#xA;        If trace.ClientID = table.ElementID _&#xA;            And trace.Type = &quot;Abstraction&quot; _&#xA;            And trace.Stereotype = &quot;trace&quot; Then&#xA;&#xA;            Dim logicalClass As EA.Element&#xA;            Set logicalClass = Repository.GetElementByID(trace.SupplierID)&#xA;            If logicalClass.Type = &quot;Class&quot; Then&#xA;                logicalClasses.Add logicalClass&#xA;            End If&#xA;        End If&#xA;    Next&#xA;    Set getLogicalClasses = logicalClasses&#xA;End Function&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="205"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6DC2CA16-2F3F-416A-9ECA-4410CF779186}"/>
			<Column name="ScriptAuthor" value="{BD1CF4D6-A54A-4CAB-B301-8551988DB85F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove AttributeType Dependencies&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project B\Baloise Modeling Standards]&#xA;'[group=Baloise Modeling Standards]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Remove Attribute Type Dependencies&#xA;' Author: Geert Bellekens&#xA;' Purpose: This script will remove all attribute type dependencies created by the EA Message Composer&#xA;'    script can be executed as custom script after generating a message, or as a diagram group script.&#xA;&#x9;&#x9;&#xA;' Date: '2017-04-20&#xA;'&#xA;sub RemoveAttributeDependenciesFromCurrentDiagram()&#xA;&#x9;' get the message package&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim messagePackage as EA.Package&#xA;&#x9;&#x9;set messagePackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;&#x9;' ask the user for confirmation before updating the tags just in case something went wrong with the generation of the subset and we have the wrong diagram&#xA;&#x9;&#x9;dim response&#xA;&#x9;&#x9;response = msgbox(&quot;Remove all attribute type dependencies in '&quot; &amp; messagePackage.Name &amp; &quot;'?&quot;, vbYesNo+vbQuestion, &quot;Remove attribute type dependencies?&quot;)&#xA;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;dim packageIDString&#xA;&#x9;&#x9;&#x9;packageIDString = getPackageTreeIDString(messagePackage)&#xA;&#x9;&#x9;&#x9;dim sqlDeleteDependencies&#xA;&#x9;&#x9;&#x9;sqlDeleteDependencies = &quot;delete c                                                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from ((t_connector c                                       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object so on c.Start_Object_ID = so.Object_ID)&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_attribute a on (a.Object_ID = so.Object_ID    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and a.Name = c.Name                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and a.Classifier = c.End_Object_ID)) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where c.Connector_Type = 'dependency'                      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and so.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)             &quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute sqlDeleteDependencies&#xA;&#x9;&#x9;&#x9;'reload the diagram&#xA;&#x9;&#x9;&#x9;dim saveDiagram&#xA;&#x9;&#x9;&#x9;saveDiagram = msgbox(&quot;Save the current diagram '&quot; &amp; currentDiagram.Name &amp; &quot;' before reloading?&quot;, vbYesNo+vbQuestion, &quot;Save Diagram?&quot;)&#xA;&#x9;&#x9;&#x9;if saveDiagram = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;'get the package id string of the given package tree&#xA;function getPackageTreeIDString(package)&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(package)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;RemoveAttributeDependenciesFromCurrentDiagram"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="206"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{81B4F374-11C4-446B-922A-DF516908DDFF}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove Attribute Type Dependencies&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project B\DiagramGroup]&#xA;'[group=DiagramGroup]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Baloise Modeling Standards.Remove AttributeType Dependencies&#xA;&#xA;'&#xA;' Script Name: Remove Attribute Type Dependencies&#xA;' Author: Geert Bellekens&#xA;' Purpose: This script will remove all attribute type dependencies created by the EA Message Composer&#xA;'    script can be executed as custom script after generating a message, or as a diagram group script.&#xA;&#x9;&#x9;&#xA;' Date: '2017-04-20&#xA;'&#xA;'Call is already made by including the script"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="208"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{687DD1A4-9A36-45BC-845A-06E05B13BB18}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Use Case Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project Bellekens\Bellekens Docgen]&#xA;'[group=Bellekens DocGen]&#xA;option explicit&#xA;&#xA;!INC Bellekens DocGen.UseCaseDocument&#xA;&#xA;' Script Name: Create Use Case Document&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a Use Case Document based on the open diagram&#xA;' &#x9;&#x9;&#x9;Copy this script in a Diagram Group to call it from the diagram directly.&#xA;' Date: 11/11/2015&#xA;'&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;dim documentsPackage as EA.Package&#xA;&#x9;'select the package to generate the virtual document in&#xA;&#x9;Msgbox &quot;Please select the package to generate the virtual document in&quot;,vbOKOnly+vbQuestion,&quot;Document Package&quot;&#xA;&#x9;set documentsPackage = selectPackage()&#xA;&#x9;if not documentsPackage is nothing then&#xA;&#x9;&#x9;' Get a reference to the current diagram&#xA;&#x9;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;&#x9;createUseCaseDocument currentDiagram, documentsPackage.PackageGUID &#xA;&#x9;&#x9;&#x9;Msgbox &quot;Select the Master Document and press F8 to generate document&quot;,vbOKOnly+vbInformation,&quot;Finished!&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="209"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{73895E9C-D6D3-41A7-90DF-CA8E683FC913}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DocGenHelpers&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project Bellekens\Bellekens Docgen]&#xA;'[group=Bellekens DocGen]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: DocGenHelpers&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts for document generation&#xA;' Date: 01/11/2015&#xA;&#x9;&#xA;&#xA;function addMasterDocument (packageGUID, documentName)&#xA;&#x9;dim domainName&#xA;&#x9;dim splittedDocumentName&#xA;&#x9;splittedDocumentName = Split(documentName)&#xA;&#x9;domainName = splittedDocumentName(Ubound(splittedDocumentName))&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(documentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Alias = domainName&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocument = masterDocumentPackage&#xA;end function&#xA;&#xA;function addMasterDocumentWithDetails (packageGUID, documentName,documentVersion,documentAlias)&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;dim masterDocumentPackage as EA.Package&#xA;&#x9;set masterDocumentPackage = ownerPackage.Packages.AddNew(documentName, &quot;package&quot;)&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;masterDocumentPackage.Element.Stereotype = &quot;master document&quot;&#xA;&#x9;masterDocumentPackage.Alias = documentAlias&#xA;&#x9;masterDocumentPackage.Version = documentVersion&#xA;&#x9;masterDocumentPackage.Update&#xA;&#x9;'link to the master template&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in masterDocumentPackage.Element.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = &quot;(model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: (model document: master template)&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return&#xA;&#x9;set addMasterDocumentWithDetails = masterDocumentPackage&#xA;end function&#xA;&#xA;function addModelDocumentForDiagram(masterDocument,diagram, treepos, template)&#xA;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;set diagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;addModelDocumentForPackage masterDocument,diagramPackage,diagram.Name &amp; &quot; diagram&quot;, treepos, template&#xA;end function&#xA;&#xA;function addModelDocumentForPackage(masterDocument,package,name, treepos, template)&#xA;&#x9;dim modelDocElement as EA.Element&#xA;&#x9;set modelDocElement = masterDocument.Elements.AddNew(name, &quot;Class&quot;)&#xA;&#x9;'set the position&#xA;&#x9;modelDocElement.TreePos = treepos&#xA;&#x9;modelDocElement.StereotypeEx = &quot;model document&quot;&#xA;&#x9;modelDocElement.Update&#xA;&#x9;'add tagged values&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add attribute&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;set attribute = modelDocElement.Attributes.AddNew(package.Name, &quot;Package&quot;)&#xA;&#x9;attribute.ClassifierID = package.Element.ElementID&#xA;&#x9;attribute.Update&#xA;end function&#xA;&#xA;function addModelDocument(masterDocument, template,elementName, elementGUID, treepos)&#xA;&#x9;addModelDocumentWithSearch masterDocument, template,elementName, elementGUID, treepos,&quot;ZDG_ElementByGUID&quot;&#xA;end function&#xA;&#xA;&#xA;function addModelDocumentWithSearch(masterDocument, template,elementName, elementGUID, treepos, searchName)&#xA;&#x9;dim modelDocElement as EA.Element;&#xA;&#x9;set modelDocElement = masterDocument.Elements.AddNew(elementName, &quot;Class&quot;)&#xA;&#x9;'set the position&#xA;&#x9;modelDocElement.TreePos = treepos&#xA;&#x9;modelDocElement.StereotypeEx = &quot;model document&quot;&#xA;&#x9;modelDocElement.Update&#xA;&#x9;dim templateTag as EA.TaggedValue&#xA;&#x9;if len(elementGUID) &gt; 0 then&#xA;&#x9;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;elseif templateTag.Name = &quot;SearchName&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = searchName&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;elseif templateTag.Name = &quot;SearchValue&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = elementGUID&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add tagged values&#xA;&#x9;&#x9;for each templateTag in modelDocElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if templateTag.Name = &quot;RTFTemplate&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Value = template&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Notes = &quot;Default: Model Report&quot;&#xA;&#x9;&#x9;&#x9;&#x9;templateTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'no GUID provided. Set masterdocument package ID as dummy attribute to make the template work&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;set attribute = modelDocElement.Attributes.AddNew(masterDocument.Name, &quot;Package&quot;)&#xA;&#x9;&#x9;attribute.ClassifierID = masterDocument.Element.ElementID&#xA;&#x9;&#x9;attribute.Update&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="210"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{16EA028E-4C4E-457B-A087-47FBF4C4D9B1}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;UseCaseDocument&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project Bellekens\Bellekens Docgen]&#xA;'[group=Bellekens DocGen]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Bellekens DocGen.DocGenHelpers&#xA;!INC Bellekens DocGen.Util&#xA;'&#xA;&#xA;' Script Name: UseCaseDocuemnt&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a Use Case Document based on the given diagram&#xA;' Date: 11/11/2015&#xA;'&#xA;&#xA;dim useCaseDocumentsPackageGUID&#xA;&#xA;function createUseCaseDocument( diagram, documentsPackageGUID)&#xA;&#x9;&#xA;&#x9;useCaseDocumentsPackageGUID = documentsPackageGUID&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = makeUseCaseMasterDocument(diagram)&#xA;&#x9;if not masterDocument is nothing then&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;i = 0&#xA;&#x9;&#x9;'use case diagram part 1&#xA;&#x9;&#x9;addModelDocumentForDiagram masterDocument,diagram, i, &quot;UCD_Use Case Diagram&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'add Actors&#xA;&#x9;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;&#x9;set diagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;&#x9;addModelDocumentForPackage masterDocument, diagramPackage, diagram.Name &amp; &quot; Actors&quot;, i, &quot;UCD_Actors&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;' We only want to report the use cases that are shown within the scope boundary on this diagram&#xA;&#x9;&#x9;'get the boundary diagram object in the diagram&#xA;&#x9;&#x9;dim boundaries&#xA;&#x9;&#x9;set boundaries = getDiagramObjects(diagram,&quot;Boundary&quot;)&#xA;&#x9;&#x9;Session.Output boundaries.Count&#xA;&#x9;&#x9;'get the use cases&#xA;&#x9;&#x9;dim usecases&#x9;&#x9;&#xA;&#x9;&#x9;if boundaries.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;set usecases = getElementsFromDiagramInBoundary(diagram, &quot;UseCase&quot;,boundaries(0))&#xA;&#x9;&#x9;&#x9;Session.Output &quot;boundary found&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set usecases = getElementsFromDiagram(diagram, &quot;UseCase&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'sort use cases alphabetically&#xA;&#x9;&#x9;set usecases = sortElementsByName(usecases)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add the use cases&#xA;&#x9;&#x9;i = addUseCases(masterDocument, usecases, i)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.RefreshModelView(masterDocument.PackageID)&#xA;&#x9;&#x9;'select the created master document in the project browser&#xA;&#x9;&#x9;Repository.ShowInProjectView(masterDocument)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function makeUseCaseMasterDocument(currentDiagram)&#xA;&#x9;'we should ask the user for a version&#xA;&#x9;dim documentTitle&#xA;&#x9;dim documentVersion&#xA;&#x9;dim documentName&#xA;&#x9;dim diagramName&#xA;&#x9;set makeUseCaseMasterDocument = nothing&#xA;&#x9;diagramName = currentDiagram.Name&#xA;&#x9;'to make sure document version is filled in&#xA;&#x9;documentVersion = &quot;&quot;&#xA;&#x9;documentVersion = InputBox(&quot;Please enter the version of this document&quot;, &quot;Document version&quot;, &quot;x.y.z&quot; )&#xA;&#x9;if documentVersion &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'OK, we have a version, continue&#xA;&#x9;&#x9;documentName = &quot;UCD - &quot; &amp; diagramName &amp; &quot; v. &quot; &amp; documentVersion&#xA;&#x9;&#x9;dim masterDocument as EA.Package&#xA;&#x9;&#x9;set masterDocument = addMasterDocumentWithDetails(useCaseDocumentsPackageGUID, documentName,documentVersion,diagramName)&#xA;&#x9;&#x9;set makeUseCaseMasterDocument = masterDocument&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'add the use cases to the document&#xA;function addUseCases(masterDocument, usecases, i)&#xA;&#x9;dim usecase as EA.Element&#xA;&#x9;for each usecase in usecases&#xA;&#x9;&#x9;'use case part 1&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;UCD_Use Case details part1&quot;, &quot;UC &quot; &amp; usecase.Name &amp; &quot; Part 1&quot;, usecase.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'get the nested scenario diagram&#xA;&#x9;&#x9;dim activity as EA.Element&#xA;&#x9;&#x9;set activity = getActivityForUsecase(usecase)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add scenario diagram&#xA;&#x9;&#x9;if not activity is nothing then&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;UCD_Use Case Scenarios Diagram&quot;, &quot;UC &quot; &amp; usecase.Name &amp; &quot; Scenarios diagram&quot;, activity.ElementGUID, i&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'use case part 2&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;UCD_Use Case details part2&quot;,&quot;UC &quot; &amp;  usecase.Name &amp; &quot; Part 2&quot;, usecase.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;'return the new i&#xA;&#x9;addUseCases = i&#xA;end function&#xA;&#xA;function getActivityForUsecase(usecase)&#xA;&#x9;set getActivityForUsecase = getNestedDiagramOnwerForElement(usecase, &quot;Activity&quot;)&#xA;end function&#xA;&#xA;function getInteractionForUseCase(usecase)&#xA;&#x9;set getInteractionForUseCase = getNestedDiagramOnwerForElement(usecase, &quot;Interaction&quot;)&#xA;end function&#xA;&#xA;function getNestedDiagramOnwerForElement(element, elementType)&#xA;&#x9;dim diagramOnwer as EA.Element&#xA;&#x9;set diagramOnwer = nothing&#xA;&#x9;dim nestedElement as EA.Element&#xA;&#x9;for each nestedElement in element.Elements&#xA;&#x9;&#x9;if nestedElement.Type = elementType and nestedElement.Diagrams.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;set diagramOnwer = nestedElement&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getNestedDiagramOnwerForElement = diagramOnwer&#xA;end function&#xA;&#xA;&#xA;'sort the elements in the given ArrayList of EA.Elements by their name &#xA;function sortElementsByName (elements)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.Element&#xA;&#x9;dim nextElement as EA.Element&#xA;&#x9;for i = 0 to elements.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = elements(i)&#xA;&#x9;&#x9;set nextElement = elements(i +1)&#xA;&#x9;&#x9;if  elementIsAfter(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;elements.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;elements.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set elements = sortElementsByName (elements)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortElementsByName = elements&#xA;end function&#xA;&#xA;'check if the name of the next element is bigger then the name of the first element&#xA;function elementIsAfter (thisElement, nextElement)&#xA;&#x9;dim compareResult&#xA;&#x9;compareResult = StrComp(thisElement.Name, nextElement.Name,1)&#xA;&#x9;if compareResult &gt; 0 then&#xA;&#x9;&#x9;elementIsAfter = True&#xA;&#x9;else&#xA;&#x9;&#x9;elementIsAfter = False&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="213"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A76B2D82-B310-48BF-9071-264073D841C0}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set LineStyles&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project Bellekens\DiagramGroup]&#xA;'[group=DiagramGroup]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: DefaultLineStyles&#xA;' Author: Geert Bellekens&#xA;' Purpose: Allows to change the linestyles to their default&#xA;' Date: 27/04/2015&#xA;'&#xA;dim lsDirectMode, lsAutoRouteMode, lsCustomMode, lsTreeVerticalTree, lsTreeHorizontalTree, _&#xA;lsLateralHorizontalTree, lsLateralVerticalTree, lsOrthogonalSquareTree, lsOrthogonalRoundedTree&#xA;&#xA;lsDirectMode = &quot;1&quot;&#xA;lsAutoRouteMode = &quot;2&quot; &#xA;lsCustomMode = &quot;3&quot;&#xA;lsTreeVerticalTree = &quot;V&quot;&#xA;lsTreeHorizontalTree = &quot;H&quot;&#xA;lsLateralHorizontalTree = &quot;LH&quot;&#xA;lsLateralVerticalTree = &quot;LC&quot;&#xA;lsOrthogonalSquareTree = &quot;OS&quot;&#xA;lsOrthogonalRoundedTree = &quot;OR&quot;&#xA;&#xA;dim defaultStyle&#xA;dim menuDefaultLines&#xA;&#xA;&#xA;'*********EDIT BETWEEN HERE*************&#xA;&#xA;&#xA;' set here the default style to be used&#xA;defaultStyle = lsOrthogonalSquareTree&#xA;&#xA;' set there the style to be used for each type of connector&#xA;function determineStyle(connector)&#xA;&#x9;dim connectorType&#xA;&#x9;connectorType = connector.Type&#xA;&#x9;select case connectorType&#xA;&#x9;&#x9;case &quot;ControlFlow&quot;, &quot;StateFlow&quot;,&quot;ObjectFlow&quot;,&quot;InformationFlow&quot;&#xA;&#x9;&#x9;&#x9;determineStyle = lsOrthogonalRoundedTree&#xA;&#x9;&#x9;case &quot;Generalization&quot;, &quot;Realization&quot;, &quot;Realisation&quot;&#xA;&#x9;&#x9;&#x9;determineStyle = lsTreeVerticalTree&#xA;&#x9;&#x9;case &quot;UseCase&quot;, &quot;Dependency&quot;,&quot;NoteLink&quot;&#xA;&#x9;&#x9;&#x9;determineStyle = lsDirectMode&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;determineStyle = defaultStyle&#xA;&#x9;end select&#xA;end function&#xA;'************AND HERE****************&#xA;&#xA;&#xA;sub main&#xA;&#x9;&#x9;dim diagram &#xA;&#x9;&#x9;dim diagramLink&#xA;&#x9;&#x9;dim connector&#xA;&#x9;&#x9;dim dirty&#xA;&#x9;&#x9;dirty = false&#xA;&#x9;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;&#x9;'save the diagram first&#xA;&#x9;&#x9;Repository.SaveDiagram diagram.DiagramID&#xA;&#x9;&#x9;'then loop all diagramLinks&#xA;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'set the connectorstyle&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setConnectorStyle diagramLink, determineStyle(connector)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'save the diagramlink&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramLink.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dirty = true&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'reload the diagram if we changed something&#xA;&#x9;&#x9;&#x9;if dirty then&#xA;&#x9;&#x9;&#x9;&#x9;'reload the diagram to show the link style&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram diagram.DiagramID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;end sub&#xA;&#xA;main&#xA;&#xA;&#xA;'gets the diagram link object&#xA;function getdiagramLinkForConnector(connector, diagram)&#xA;&#x9;dim diagramLink &#xA;&#x9;set getdiagramLinkForConnector = nothing&#xA;&#x9;for each diagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;if diagramLink.ConnectorID = connector.ConnectorID then&#xA;&#x9;&#x9;&#x9;set getdiagramLinkForConnector = diagramLink&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'actually sets the connector style&#xA;function setConnectorStyle(diagramLink, connectorStyle)&#xA;&#x9;'split the style into its parts&#xA;&#x9;dim styleparts&#xA;&#x9;dim styleString&#xA;&#x9;styleString = diagramLink.Style&#xA;&#x9;styleparts = Split(styleString,&quot;;&quot;)&#xA;&#x9;dim stylePart&#xA;&#x9;dim mode&#xA;&#x9;dim modeIndex&#xA;&#x9;modeIndex = -1&#xA;&#x9;dim tree&#xA;&#x9;dim treeIndex&#xA;&#x9;treeIndex = -1&#xA;&#x9;mode = &quot;&quot;&#xA;&#x9;tree = &quot;&quot;&#xA;&#x9;dim i&#xA;&#x9;'find if Mode and Tree are already defined&#xA;&#x9;for i = 0 to Ubound(styleparts) -1 &#xA;&#x9;&#x9;stylePart = styleparts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;modeIndex = i&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;treeIndex = i&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'these connectorstyles use mode=3 and the tree&#xA;&#x9;if  connectorStyle = lsTreeVerticalTree or _&#xA;&#x9;&#x9;connectorStyle = lsTreeHorizontalTree or _&#xA;&#x9;&#x9;connectorStyle = lsLateralHorizontalTree or _&#xA;&#x9;&#x9;connectorStyle = lsLateralVerticalTree or _&#xA;&#x9;&#x9;connectorStyle = lsOrthogonalSquareTree or _&#xA;&#x9;&#x9;connectorStyle = lsOrthogonalRoundedTree then&#xA;&#x9;&#x9;mode = &quot;3&quot;&#xA;&#x9;&#x9;tree = connectorStyle&#xA;&#x9;else&#xA;&#x9;&#x9;mode = connectorStyle&#xA;&#x9;end if&#xA;&#x9;'set the mode value&#xA;&#x9;if modeIndex &gt;= 0 then&#xA;&#x9;&#x9;styleparts(modeIndex) = &quot;Mode=&quot; &amp; mode&#xA;&#x9;&#x9;diagramLink.Style = join(styleparts,&quot;;&quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;diagramLink.Style = &quot;Mode=&quot; &amp; mode&amp; &quot;;&quot;&amp; diagramLink.Style&#xA;&#x9;end if&#xA;&#x9;'set the tree value&#xA;&#x9;if treeIndex &gt;= 0 then&#xA;&#x9;&#x9;if len(tree) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleparts(treeIndex) = &quot;TREE=&quot; &amp; tree&#xA;&#x9;&#x9;&#x9;diagramLink.Style = join(styleparts,&quot;;&quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'remove tree part&#xA;&#x9;&#x9;&#x9;diagramLink.Style = replace(diagramLink.Style,styleparts(treeIndex)&amp;&quot;;&quot; , &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;diagramLink.Style = diagramLink.Style &amp; &quot;TREE=&quot; &amp; tree &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getConnectorStyle(diagramLink)&#xA;&#x9;'split the style&#xA;&#x9;dim styleparts&#xA;&#x9;styleparts = Split(diagramLink.Style,&quot;;&quot;)&#xA;&#x9;dim stylePart&#xA;&#x9;dim mode&#xA;&#x9;dim tree&#xA;&#x9;mode = &quot;&quot;&#xA;&#x9;tree = &quot;&quot;&#xA;&#x9;for each stylepart in styleparts&#xA;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;mode = right(stylepart, 1)&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;tree = replace(stylepart, &quot;TREE=&quot;, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if tree &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;getConnectorStyle = tree&#xA;&#x9;else&#xA;&#x9;&#x9;getConnectorStyle = mode&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="214"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1B06D807-F841-42A5-BFAA-2ADCA148A11A}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\Diagram Group]&#xA;'[group=Diagram Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC General Scripts.Util&#xA;!INC General Scripts.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;dim selectedItems&#xA;&#x9;&#x9;set selectedItems = getSelectedElements(diagram)&#xA;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;linkItemToCR nothing, selectedItems&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getSelectedElements(diagram)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim selectedDiagramObjects&#xA;&#x9;set selectedDiagramObjects = diagram.SelectedObjects&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;for each selectedDiagramObject in selectedDiagramObjects&#xA;&#x9;&#x9;dim selectedElement&#xA;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedDiagramObject.ElementID)&#xA;&#x9;&#x9;if not selectedElement is nothing then&#xA;&#x9;&#x9;&#x9;selectedElements.Add selectedElement&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSelectedElements = selectedElements&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="215"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4A6D2021-20BF-44E7-903D-D40D96565AFC}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Copy Schema into This&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\Element Group]&#xA;'[group=Element Group]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub main&#xA;&#x9;dim selectedSchema as EA.Element&#xA;&#x9;set selectedSchema = Repository.GetContextObject()&#xA;&#x9;if selectedSchema.ObjectType = otElement then&#xA;&#x9;&#x9;if selectedSchema.Type = &quot;Artifact&quot; then&#xA;&#x9;&#x9;&#x9;msgbox &quot;Please select the schema artifact to copy&quot;&#xA;&#x9;&#x9;&#x9;dim schemaID&#xA;&#x9;&#x9;&#x9;dim schemaToCopy as EA.Element&#xA;&#x9;&#x9;&#x9;schemaID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Artifact&quot;) &#xA;&#x9;&#x9;&#x9;if schemaID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set schemaToCopy = Repository.GetElementByID(schemaID)&#xA;&#x9;&#x9;&#x9;&#x9;dim response&#xA;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;copy the schema of &quot;&quot;&quot; &amp; schemaToCopy.Name &amp; &quot;&quot;&quot; to &quot;&quot;&quot; &amp; selectedSchema.Name &amp; &quot;&quot;&quot; ?&quot;, vbYesNo+vbQuestion, &quot;Copy Schema?&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;'check the response&#xA;&#x9;&#x9;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim sqlUpdate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sqlupdate = &quot;update t_document set StrContent =  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;(select replace(convert(varchar(max),d.StrContent),'&lt;description name=&quot;&quot;&quot; &amp; schemaToCopy.Name &amp; &quot;&quot;&quot;','&lt;description name=&quot;&quot;&quot; &amp; selectedSchema.Name &amp; &quot;&quot;&quot;') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;from t_document d  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;where d.ElementType = 'SC_MessageProfile' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#x9;and  d.ElementID = '&quot; &amp; schemaToCopy.ElementGUID &amp; &quot;') &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where ElementType = 'SC_MessageProfile' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and  ElementID = '&quot; &amp; selectedSchema.ElementGUID &amp; &quot;' &quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.Execute sqlupdate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'refresh element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange selectedSchema.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="217"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{28122AC9-BAFB-465E-8928-2FD33E6C1392}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;AddInitialCRToOwnedObjects&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\General Scripts]&#xA;'[group=General Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;'&#xA;' Script Name: AddInitialCRtoOwnedObject&#xA;' Author: Geert Bellekens&#xA;' Purpose: adds the initial CR as a tagged value to all owned elements int this package&#xA;' and its subpackackages.&#xA;' It also add's the tagged value to all attributes of those elements&#xA;' Date: 30/01/2015&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;&#xA;Dim CRGuid&#xA;CRGuid = &quot;{03DE6415-5FD7-40e3-8ADB-9B8FDE574B95}&quot;  'Change this GUID into the GUID of the actual initial CR&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#xA;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' We only do something for a package&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;AddCRToOwnedElements thePackage&#xA;&#x9;&#x9;&#x9;MsgBox &quot;Ready!&quot;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;end sub&#xA;&#xA;'adds the initial CR to all elements owned by this package and its subpackages.&#xA;'The CR is also added to all attributes of the elements found.&#xA;Function AddCRToOwnedElements(package)&#xA;    Dim element&#xA;    Dim taggedValue&#xA;    For Each element In package.Elements&#xA;        'first check if the tagged value already exists&#xA;&#x9;&#x9;set taggedValue = Nothing&#xA;&#x9;&#x9;dim existingTag&#xA;&#x9;&#x9;set existingTag = nothing&#xA;        For Each existingTag In element.TaggedValues&#xA;            If existingTag.name = &quot;CR&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;Set taggedValue = existingTag&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;        Next&#xA;        'if it doesn't exist yet then add it&#xA;        If taggedValue Is Nothing Then&#xA;            Set taggedValue = element.TaggedValues.AddNew(&quot;CR&quot;, &quot;&quot;)&#xA;            taggedValue.Value = CRGuid&#xA;            taggedValue.Update&#xA;        End If&#xA;&#x9;&#x9;'Do the same for all attributes&#xA;&#x9;&#x9;AddCRtoOwnedAttributes element&#xA;    Next&#xA;&#x9;'then recursively do all sub-packages&#xA;&#x9;dim subPackage&#xA;&#x9;For Each subPackage In package.Packages&#xA;&#x9;&#x9;AddCRToOwnedElements subPackage&#xA;&#x9;Next&#xA;End Function&#xA;&#xA;'adds the CR as tagged value to all attributes owned by the given element&#xA;function AddCRtoOwnedAttributes(element)&#xA;&#x9;Dim attribute&#xA;    Dim taggedValue&#xA;    For Each attribute In element.Attributes&#xA;        'first check if the tagged value already exists&#xA;&#x9;&#x9;set taggedValue = Nothing&#xA;&#x9;&#x9;dim existingTag&#xA;&#x9;&#x9;set existingTag = nothing&#xA;        For Each existingTag In attribute.TaggedValues&#xA;            If existingTag.name = &quot;CR&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;Set taggedValue = existingTag&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;        Next&#xA;        'if it doesn't exist yet then add it&#xA;        If taggedValue Is Nothing Then&#xA;            Set taggedValue = attribute.TaggedValues.AddNew(&quot;CR&quot;, &quot;&quot;)&#xA;            taggedValue.Value = CRGuid&#xA;            taggedValue.Update&#xA;        End If&#xA;    Next&#xA;end function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="219"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2A91B3B0-D0FB-470B-801B-FB810F34C51D}"/>
			<Column name="ScriptAuthor" value="{173EE89B-4942-406C-84F2-947F692C0F55}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LinkToCRMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\General Scripts]&#xA;'[group=General Scripts]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC General Scripts.Util&#xA;&#xA;' Script Name: LinkToCRMain&#xA;' Author: Geert Bellekens&#xA;' Purpose: Link Elemnents to a change&#xA;' Date: 2015-10-30&#xA;'&#xA;'&#xA;&#xA;&#xA;function linkItemToCR(selectedItem, selectedItems)&#xA;&#x9;dim groupProcessing&#xA;&#x9;groupProcessing = false&#xA;&#x9;'if the collection is given then we initialize the first item.&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;if not selectedItems is nothing then&#xA;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set selectedItem = selectedItems(0)&#xA;&#x9;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;groupProcessing = true&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if selectedItem is nothing then&#xA;&#x9;&#x9;set selectedItem = Repository.GetContextObject()&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'get the select context item type&#xA;&#x9;dim selectedItemType&#xA;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;select case selectedItemType&#xA;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;'if the selectedItem is a package then we use the Element part of the package&#xA;&#x9;&#x9;if selectedItemType = otPackage then&#xA;&#x9;&#x9;&#x9;dim selectedPackage&#xA;&#x9;&#x9;&#x9;'remember the package object&#xA;&#x9;&#x9;&#x9;set selectedPackage = selectedItem&#xA;&#x9;&#x9;&#x9;'get the element part of the package&#xA;&#x9;&#x9;&#x9;set selectedItem = selectedItem.Element&#xA;&#x9;&#x9;&#x9;'ask user if he wants to add the change to all owned elements of this package and its sub packages&#xA;&#x9;&#x9;&#x9;dim responsePackageTree&#xA;&#x9;&#x9;&#x9;responsePackageTree = Msgbox(&quot;Link all elements in package tree?&quot;, vbYesNoCancel+vbQuestion, &quot;Link package tree?&quot;)&#xA;&#x9;&#x9;&#x9;'check the response&#xA;&#x9;&#x9;&#x9;select case responsePackageTree&#xA;&#x9;&#x9;&#x9;&#x9;case vbYes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get all elements from package tree&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set selectedItems = getAllElementsInPackageTree(selectedPackage)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the package itself as well&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;selectedItems.Add selectedItem&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if selectedItems.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;groupProcessing = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;case vbCancel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'user cancelled, stop altogether&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Exit function&#xA;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'get the logged in user&#xA;&#x9;&#x9;Dim userLogin&#xA;&#x9;&#x9;userLogin = getUserLogin&#xA;&#x9;&#x9;dim lastCR as EA.Element&#xA;&#x9;&#x9;set lastCR = nothing&#xA;&#x9;&#x9;dim CRtoUse as EA.Element&#xA;&#x9;&#x9;set CRtoUse = nothing&#xA;&#x9;&#x9;set lastCR = getLastUsedCR(userLogin)&#xA;&#x9;&#x9;'get most recent used CR by this user&#xA;&#xA;&#x9;&#x9;if not selectedItem is nothing then&#xA;&#x9;&#x9;&#x9;dim lastComments&#xA;&#x9;&#x9;&#x9;lastComments = vbNullString&#xA;&#x9;&#x9;&#x9;'if there is a last CR then we ask the user if we need to use that one&#xA;&#x9;&#x9;&#x9;if not lastCR is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim response&#xA;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link all &quot; &amp; selectedItems.Count &amp; &quot; elements to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elseif not isCRLinked(selectedItem,lastCR) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;response = Msgbox(&quot;Link element &quot;&quot;&quot; &amp; selectedItem.Name &amp; &quot;&quot;&quot; to change: &quot;&quot;&quot; &amp; lastCR.Name &amp; &quot;&quot;&quot;?&quot;, vbYesNoCancel+vbQuestion, &quot;Link to CR&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'check the response&#xA;&#x9;&#x9;&#x9;&#x9;select case response&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbYes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = lastCR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case vbCancel&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'user cancelled, stop altogether&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exit function&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'If there was no last CR, or the user didn't want to link that one we let the user choose one&#xA;&#x9;&#x9;&#x9;if CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim CR_id &#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;CR_ID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Change&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;if CR_ID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set CRToUse = Repository.GetElementByID(CR_ID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'user selected same change as last time. So he might want to reuse his comments as well&#xA;&#x9;&#x9;&#x9;&#x9;lastComments = getLastUsedComment(userLogin)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'if the CRtoUse is now selected then we link it to the selected element&#xA;&#x9;&#x9;&#x9;if not CRToUse is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;dim linkCounter&#xA;&#x9;&#x9;&#x9;&#x9;linkCounter = 0&#xA;&#x9;&#x9;&#x9;&#x9;'first check if this CR is not already linked&#xA;&#x9;&#x9;&#x9;&#x9;if isCRLinked(selectedItem,CRToUse) and not groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR was already linked to this item&quot;, vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'get the comments to use&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;comments = InputBox(&quot;Please enter comments for this change&quot;, &quot;Change Comments&quot;,lastComments)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if len(comments) &gt; 2 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if groupProcessing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each selectedItem in selectedItems&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'check the object type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;selectedItemType = selectedItem.ObjectType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case selectedItemType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case otElement, otPackage, otAttribute, otMethod, otConnector :&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not isCRLinked(selectedItem,CRToUse) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkCounter = linkCounter + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if linkCounter &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Successfully linked &quot; &amp; selectedItems.Count &amp; &quot; elements to change &quot;&quot;&quot; &amp; CRToUse.Name&amp; &quot;&quot;&quot;&quot;  , vbOKOnly + vbInformation ,&quot;Elements linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;No links created to change &quot; &amp; CRToUse.Name &amp; &quot;.&quot; &amp; vbNewLine &amp; &quot;They are probably already linked&quot; , vbOKOnly + vbExclamation ,&quot;Already Linked&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;linkToCR selectedItem, selectedItemType, CRToUse, userLogin, comments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;The CR has not been linked because no comment was provided&quot;, vbOKOnly + vbExclamation ,&quot;No CR link&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;case else&#xA;&#x9;&#x9;MsgBox &quot;Cannot link this type of element to a CR&quot; &amp; vbNewline &amp; &quot;Supported element types are: Element, Package, Attribute, Operation and Relation&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;&#xA;&#xA;function isCRLinked(item, CR)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;isCRLinked = false&#xA;&#x9;for each taggedValue in item.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Value = CR.ElementGUID then&#xA;&#x9;&#x9;&#x9;isCRLinked = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function linkToCR(selectedItem, selectedItemType, CRToUse, userLogin, comments)&#xA;&#x9;Session.Output &quot;CRToUse: &quot; &amp; CRToUse.Name &amp; &quot; userLogin: &quot; &amp; userLogin &amp; &quot; comments: &quot; &amp; comments&#xA;&#x9;dim crTag &#xA;&#x9;set crTag = nothing&#xA;&#x9;set crTag = selectedItem.TaggedValues.AddNew(&quot;CR&quot;,&quot;&quot;)&#xA;&#x9;if not crTag is nothing then&#xA;&#x9;&#x9;crTag.Value = CRToUse.ElementGUID&#xA;&#x9;&#x9;crTag.Notes = &quot;user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;date=&quot; &amp; Year(Date) &amp; &quot;-&quot; &amp; Month(Date) &amp; &quot;-&quot; &amp; Day(Date) &amp; &quot;;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;comments=&quot; &amp; comments&#xA;&#x9;&#x9;crTag.Update&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getLastUsedCR(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;dim top&#xA;&#x9;dim limit&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;&#x9;top = &quot;top 1&quot;&#xA;&#x9;&#x9;limit = &quot;&quot;&#xA;&#x9;Elseif Repository.RepositoryType = &quot;MYSQL&quot; then&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, instr('date=',tv.[Notes]) + length('date='),10) &quot;&#xA;&#x9;&#x9;top = &quot;&quot;&#xA;&#x9;&#x9;limit = &quot;limit 1&quot;&#xA;&#x9;else 'SQL Server&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;&#x9;top = &quot;top 1&quot;&#xA;&#x9;&#x9;limit = &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select &quot;&amp; top &amp;&quot; o.Object_id &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot; &amp; limit&#xA;&#x9;Session.Output &quot;SQLGetString = &quot; &amp; sqlGetString&#xA;&#x9;dim CRs&#xA;&#x9;dim CR as EA.Element&#xA;&#x9;set CR = nothing&#xA;&#x9;'get the last CR&#xA;&#x9;set CRs = getElementsFromQuery(sqlGetString)&#xA;&#x9;if CRs.Count &gt; 0 then&#xA;&#x9;&#x9;set CR = CRs(0)&#xA;&#x9;end if&#xA;&#xA;&#x9;set getLastUsedCR = CR&#xA;end function&#xA;&#xA;function getLastUsedComment(userLogin)&#xA;&#x9;dim wildcard&#xA;&#x9;dim sqlDateString&#xA;&#x9;dim sqlCommentsString&#xA;&#x9;dim top&#xA;&#x9;dim limit&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;wildcard = &quot;*&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; mid(tv.Notes, instr(tv.[Notes],'date=') + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; mid(tv.Notes, instr(tv.[Notes],'comments=') + len('comments=')) &quot;&#xA;&#x9;&#x9;top = &quot;top 1&quot;&#xA;&#x9;&#x9;limit = &quot;&quot;&#xA;&#x9;Elseif Repository.RepositoryType = &quot;MYSQL&quot; then&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, instr('date=',tv.[Notes]) + length('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; substring(tv.Notes, instr('comments=',tv.[Notes]) + length('comments='))  &quot;&#xA;&#x9;&#x9;top = &quot;&quot;&#xA;&#x9;&#x9;limit = &quot;limit 1&quot;&#x9;&#x9;&#x9;&#xA;&#x9;Else 'SQL Server&#xA;&#x9;&#x9;wildcard = &quot;%&quot;&#xA;&#x9;&#x9;sqlDateString = &quot; substring(tv.Notes, charindex('date=',tv.[Notes]) + len('date='),10) &quot;&#xA;&#x9;&#x9;sqlCommentsString = &quot; substring(tv.Notes, charindex('comments=',tv.[Notes]) + len('comments='), datalength(tv.Notes))  &quot;&#xA;&#x9;&#x9;top = &quot;top 1&quot;&#xA;&#x9;&#x9;limit = &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;dim sqlGetString&#xA;&#x9;sqlGetString = &quot;select &quot; &amp; top &amp; sqlCommentsString &amp; &quot; as comments &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (t_objectproperties tv &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = tv.VALUE) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where tv.[Notes] like 'user=&quot; &amp; userLogin &amp; &quot;;&quot; &amp; wildcard &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by  &quot; &amp; sqlDateString &amp; &quot; desc, tv.PropertyID desc &quot; &amp; limit&#xA;&#x9;dim queryResult &#xA;&#x9;queryResult = Repository.SQLQuery(sqlGetString)&#xA;&#x9;Session.Output queryResult&#xA;&#x9;dim results&#xA;&#x9;results = convertQueryResultToArray(queryResult)&#xA;&#x9;if Ubound(results) &gt; 0 then&#xA;&#x9;&#x9;getLastUsedComment = results(0,0)&#xA;&#x9;else&#xA;&#x9;&#x9;getLastUsedComment = vbNullString&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="220"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{94190523-993A-4BEE-84CB-3C8CEF6BD642}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ServiceDocument&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\General Scripts]&#xA;'[group=General Scripts]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC General Scripts.DocGenHelpers&#xA;!INC General Scripts.Util&#xA;'&#xA;&#xA;' Script Name: UseCaseDocuemnt&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for a Use Case Document based on the given diagram&#xA;' Date: 17/02/2016&#xA;'&#xA;&#xA;&#xA;function createServiceDocument( service, documentsPackage)&#xA;&#x9;'dim service as EA.Element&#xA;&#x9;'first create a master document&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = makeServiceMasterDocument(service,documentsPackage)&#xA;&#x9;if not masterDocument is nothing then&#xA;&#x9;&#x9;dim servicePackage as EA.Package&#xA;&#x9;&#x9;set servicePackage = Repository.GetPackageByID(service.PackageID) 'get the package owning the service&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;i = 0&#xA;&#x9;&#x9;'introduction&#xA;&#x9;&#x9;'tell the user what he is expected&#xA;&#x9;&#x9;msgbox &quot;Please select the introduction artifact&quot;&#xA;&#x9;&#x9;dim introductionElement as EA.Element&#xA;&#x9;&#x9;set introductionElement = nothing&#xA;&#x9;&#x9;dim introductionID&#xA;&#xA;&#x9;&#x9;introductionID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Artifact;Selection=&quot; &amp; servicePackage.PackageGUID &amp; &quot;;&quot;)&#xA;&#x9;&#x9;if introductionID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set introductionElement = Repository.GetElementByID(introductionID)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not introductionElement is nothing then&#xA;&#x9;&#x9;&#x9;addModelDocument masterDocument, &quot;Enexis Linked Document Template&quot;, service.Name &amp; &quot; Inleiding&quot;, introductionElement.ElementGUID, i&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'the service part&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;ESD_Service&quot;, service.Name &amp; &quot; Service&quot;, service.ElementGUID, i&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'the service diagram&#xA;&#xA;&#x9;&#x9;addModelDocumentForPackage masterDocument,servicePackage,&quot;Diagram &quot; &amp; service.Name , i, &quot;ESD_Diagram&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add interfaces&#xA;&#x9;&#x9;i = addInterfaces(masterDocument, service, i)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'add data model&#xA;&#x9;&#x9;dim serviceDeclaration as EA.Package&#xA;&#x9;&#x9;set serviceDeclaration = Repository.GetPackageByID(servicePackage.ParentID)&#xA;&#x9;&#x9;addModelDocumentForPackage masterDocument,serviceDeclaration,&quot;DataModel &quot; &amp; service.Name , i, &quot;ESD_DataModel&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.RefreshModelView(masterDocument.PackageID)&#xA;&#x9;&#x9;'select the created master document in the project browser&#xA;&#x9;&#x9;Repository.ShowInProjectView(masterDocument)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function makeServiceMasterDocument(service,documentsPackage)&#xA;&#x9;'we should ask the user for a version&#xA;&#x9;dim documentTitle&#xA;&#x9;dim documentVersion&#xA;&#x9;dim documentName&#xA;&#x9;dim diagramName&#xA;&#x9;set makeServiceMasterDocument = nothing&#xA;&#x9;'get version of the doucment&#xA;&#x9;documentVersion = InputBox(&quot;Please enter document version&quot;, &quot;Document version&quot;, service.Version )&#xA;&#x9;if documentVersion &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'OK, we have a version, continue&#xA;&#x9;&#x9;documentName = &quot;SVD - &quot; &amp; service.Name &amp; &quot; v. &quot; &amp; documentVersion&#xA;&#x9;&#x9;dim masterDocument as EA.Package&#xA;&#x9;&#x9;set masterDocument = addMasterDocumentWithDetails(documentsPackage.PackageGUID, documentName,documentVersion,service.Name)&#xA;&#x9;&#x9;set makeServiceMasterDocument = masterDocument&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'add the interfaces to the document&#xA;function addInterfaces(masterDocument, service, i)&#xA;&#x9;'get the interfaces from the service&#xA;&#x9;dim interfaces&#xA;&#x9;set interfaces = getInterfacesForService(service)&#xA;&#x9;dim interface&#xA;&#x9;for each interface in interfaces&#xA;&#x9;&#x9;'interface&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;ESD_Interface&quot;, &quot;Interface &quot; &amp; interface.Name, interface.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'interface operations&#xA;&#x9;&#x9;i = addOperations(masterDocument, interface, i)&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;'return the new i&#xA;&#x9;addInterfaces = i&#xA;end function&#xA;&#xA;'add the operations to the document&#xA;function addOperations(masterDocument, interface, i)&#xA;&#x9;'get the interfaces from the service&#xA;&#x9;dim operations&#xA;&#x9;set operations = getOperationsForInterface(interface)&#xA;&#x9;dim operation&#xA;&#x9;for each operation in operations&#xA;&#x9;&#x9;'operation&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;ESD_Operation&quot;, &quot;Operation &quot; &amp; operation.Name, operation.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'messages&#xA;&#x9;&#x9;i = addMessages(masterDocument, operation, i)&#xA;&#x9;next&#xA;&#x9;'return the new i&#xA;&#x9;addOperations = i&#xA;end function&#xA;&#xA;'add the operations to the document&#xA;function addMessages(masterDocument, operation, i)&#xA;&#x9;'get the interfaces from the service&#xA;&#x9;dim messages&#xA;&#x9;set messages = getMessagesForOperation(operation)&#xA;&#x9;dim message&#xA;&#x9;for each message in messages&#xA;&#x9;&#x9;'message&#xA;&#x9;&#x9;addModelDocument masterDocument, &quot;ESD_Message&quot;, &quot;Message &quot; &amp; message.Name, message.ElementGUID, i&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'message diagram&#xA;&#x9;&#x9;dim messagePackage&#xA;&#x9;&#x9;set messagePackage = getMessagePackage(message)&#xA;&#x9;&#x9;if not messagePackage is nothing then&#xA;&#x9;&#x9;&#x9;addModelDocumentForPackage masterDocument,messagePackage,&quot;Diagram &quot; &amp; Message.Name , i, &quot;ESD_Diagram&quot;&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return the new i&#xA;&#x9;addMessages = i&#xA;end function&#xA;&#xA;function getMessagePackage(message)&#xA;&#x9;'get the Message assemby linked to the message&#xA;&#x9;dim elementTypes&#xA;&#x9;dim stereotypes&#xA;&#x9;dim connectorTypes&#xA;&#x9;dim messageAssemblies&#xA;&#x9;dim messageAssembly as EA.Element&#xA;&#x9;set getMessagePackage = nothing&#xA;&#x9;elementTypes = Array(&quot;Class&quot;)&#xA;&#x9;stereotypes = Array(&quot;MessageAssembly&quot;)&#xA;&#x9;connectorTypes = Array(&quot;Association&quot;,&quot;Aggregation&quot;)&#xA;&#x9;set messageAssemblies = getRelatedElements(message,elementTypes,stereotypes, connectorTypes)&#xA;&#x9;if messageAssemblies.Count &gt; 0 then&#xA;&#x9;&#x9;set messageAssembly = messageAssemblies(0)&#xA;&#x9;&#x9;set getMessagePackage = Repository.GetPackageByID(messageAssembly.PackageID)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getMessagesForOperation(operation)&#xA;&#x9;dim elementTypes&#xA;&#x9;dim stereotypes&#xA;&#x9;dim connectorTypes&#xA;&#x9;elementTypes = Array(&quot;Class&quot;)&#xA;&#x9;stereotypes = Array(&quot;BusinessMessage&quot;)&#xA;&#x9;connectorTypes = Array(&quot;Association&quot;,&quot;Aggregation&quot;)&#xA;&#x9;set getMessagesForOperation = getRelatedElements(operation,elementTypes,stereotypes, connectorTypes)&#xA;end function&#xA;&#xA;function getOperationsForInterface(interface)&#xA;&#x9;dim elementTypes&#xA;&#x9;dim stereotypes&#xA;&#x9;dim connectorTypes&#xA;&#x9;elementTypes = Array(&quot;Class&quot;)&#xA;&#x9;stereotypes = Array(&quot;Operation&quot;)&#xA;&#x9;connectorTypes = Array(&quot;Association&quot;,&quot;Aggregation&quot;)&#xA;&#x9;set getOperationsForInterface = getRelatedElements(interface,elementTypes,stereotypes, connectorTypes)&#xA;end function&#xA;&#xA;function getInterfacesForService(service)&#xA;&#x9;dim elementTypes&#xA;&#x9;dim stereotypes&#xA;&#x9;dim connectorTypes&#xA;&#x9;elementTypes = Array(&quot;Class&quot;)&#xA;&#x9;stereotypes = Array(&quot;InterfaceContract&quot;)&#xA;&#x9;connectorTypes = Array(&quot;Association&quot;,&quot;Aggregation&quot;)&#xA;&#x9;set getInterfacesForService = getRelatedElements(service,elementTypes,stereotypes, connectorTypes)&#xA;end function&#xA;&#xA;function getRelatedElements(element,elementTypes,stereotypes, connectorTypes)&#xA;&#x9;dim sqlGet&#xA;&#x9;sqlGet = &quot;select oo.Object_ID from ((t_object o &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_connector c on (o.Object_ID = c.Start_Object_ID &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or o.Object_ID = c.End_Object_ID)) &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; inner join t_object oo on ((oo.Object_ID = c.Start_Object_ID &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or oo.Object_ID = c.End_Object_ID) &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and o.Object_ID &lt;&gt; oo.Object_ID)) &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; where &quot; &amp;_ &#xA;&#x9;&#x9;&#x9;&quot; o.Object_ID = &quot; &amp; element.ElementID &amp;_&#xA;&#x9;&#x9;&#x9;&quot; and c.Connector_Type in ('&quot; &amp; Join(connectorTypes,&quot;','&quot;) &amp; &quot;') &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; and oo.Object_Type in ('&quot; &amp; Join(elementTypes,&quot;','&quot;) &amp; &quot;') &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&quot; and oo.Stereotype in ('&quot; &amp; Join(stereotypes,&quot;','&quot;) &amp; &quot;') &quot;&#xA;&#x9;'get the elements&#xA;&#x9;set getRelatedElements = getElementsFromQuery(sqlGet)&#xA;end function&#xA;&#xA;&#xA;function getNestedDiagramOnwerForElement(element, elementType)&#xA;&#x9;dim diagramOnwer as EA.Element&#xA;&#x9;set diagramOnwer = nothing&#xA;&#x9;dim nestedElement as EA.Element&#xA;&#x9;for each nestedElement in element.Elements&#xA;&#x9;&#x9;if nestedElement.Type = elementType and nestedElement.Diagrams.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;set diagramOnwer = nestedElement&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getNestedDiagramOnwerForElement = diagramOnwer&#xA;end function&#xA;&#xA;&#xA;'sort the elements in the given ArrayList of EA.Elements by their name &#xA;function sortElementsByName (elements)&#xA;&#x9;dim i&#xA;&#x9;dim goAgain&#xA;&#x9;goAgain = false&#xA;&#x9;dim thisElement as EA.Element&#xA;&#x9;dim nextElement as EA.Element&#xA;&#x9;for i = 0 to elements.Count -2 step 1&#xA;&#x9;&#x9;set thisElement = elements(i)&#xA;&#x9;&#x9;set nextElement = elements(i +1)&#xA;&#x9;&#x9;if  elementIsAfter(thisElement, nextElement) then&#xA;&#x9;&#x9;&#x9;elements.RemoveAt(i +1)&#xA;&#x9;&#x9;&#x9;elements.Insert i, nextElement&#xA;&#x9;&#x9;&#x9;goAgain = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'if we had to swap an element then we go over the list again&#xA;&#x9;if goAgain then&#xA;&#x9;&#x9;set elements = sortElementsByName (elements)&#xA;&#x9;end if&#xA;&#x9;'return the sorted list&#xA;&#x9;set sortElementsByName = elements&#xA;end function&#xA;&#xA;'check if the name of the next element is bigger then the name of the first element&#xA;function elementIsAfter (thisElement, nextElement)&#xA;&#x9;dim compareResult&#xA;&#x9;compareResult = StrComp(thisElement.Name, nextElement.Name,1)&#xA;&#x9;if compareResult &gt; 0 then&#xA;&#x9;&#x9;elementIsAfter = True&#xA;&#x9;else&#xA;&#x9;&#x9;elementIsAfter = False&#xA;&#x9;end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="221"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1A560107-1D4F-4008-8D99-D6A0064FD72C}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\General Scripts]&#xA;'[group=General Scripts]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Repository types&#xA;'dim rpt_MSQL, rpt_SQLSVR, rpt_ADOJET, rpt_ORACLE, rpt_POSTGRES, rpt_ASA, rpt_OPENEDGE, rpt_ACCESS2007, rpt_FireBird&#xA;'rpt_MSQL = 0&#xA;'rpt_SQLSVR = 2&#xA;'rpt_ADOJET = 3&#xA;'rpt_ORACLE = 4 &#xA;'rpt_POSTGRES = 5 &#xA;'rpt_ASA = 6&#xA;'rpt_OPENEDGE = 7 &#xA;'rpt_ACCESS2007 = 8&#xA;'rpt_FireBird = 9&#xA;&#xA;&#xA;'&#xA;' Script Name: Util&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts&#xA;' Date: 28/09/2015&#xA;'&#xA;' Synchronises the names of the selected objects or BPMN Activities with their classifier/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;function synchronizeElement (element)&#xA;&#x9;'first check if this is an object or an action&#xA;&#x9;if not element is Nothing then&#xA;&#x9;&#x9;if (element.Type = &quot;Object&quot; OR element.Type = &quot;Action&quot;) _&#xA;&#x9;&#x9;AND element.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;&#x9;set classifier = Repository.GetElementByID(element.ClassifierID)&#xA;&#x9;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;element.Name = classifier.Name&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = classifier.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(element.ElementID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'elements of type object should also point to the composite diagram of the classifier&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;set compositeDiagram = classifier.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; AND element.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'BPMN activities that call another BPMN activity need to get the same name and same composite diagram&#xA;&#x9;&#x9;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set calledActivityTV = element.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;&#x9;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set referenceActivityTV = element.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;&#x9;&#x9;if not calledActivityTV is nothing and not referenceActivityTV is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'only do something when the Activity is types a CalledActivity&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;calledActivityTV.Value : &quot; &amp; calledActivityTV.Value &#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;referenceActivityTV.Value :&quot; &amp; referenceActivityTV.Value&#xA;&#x9;&#x9;&#x9;&#x9;if calledActivityTV.Value = &quot;true&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim calledActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set calledActivity = Repository.GetElementByGuid(referenceActivityTV.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not calledActivity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set name to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Name = calledActivity.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Set composite diagram to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, calledActivity.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;'set the given diagram as composite diagram for this element&#xA;function setCompositeDiagram (element, diagram)&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;'Tell EA this element is composite&#xA;&#x9;&#x9;dim objectQuery&#xA;&#x9;&#x9;objectQuery = &quot;update t_object set NType = 8 where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;Repository.Execute objectQuery&#xA;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;'Tell EA which diagram is the composite diagram&#xA;&#x9;&#x9;&#x9;dim xrefQuery&#xA;&#x9;&#x9;&#x9;xrefquery = &quot;insert into t_xref (XrefID, Name, Type, Visibility, Partition, Client, Supplier) values ('&quot;&amp;CreateGuid&amp;&quot;', 'DefaultDiagram', 'element property', 'Public', '0', '&quot;&amp; element.ElementGUID &amp; &quot;', '&quot;&amp; diagram.DiagramGUID &amp;&quot;')&quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute xrefquery&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'for activities we need to update PDATA1 with the diagramID&#xA;&#x9;&#x9;&#x9;dim updatequery&#xA;&#x9;&#x9;&#x9;updatequery = &quot;update t_object set PDATA1 = &quot;&amp; diagram.DiagramID &amp; &quot; where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;Repository.Execute updatequery&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' Returns a unique Guid on every call. Removes any cruft.&#xA;Function CreateGuid()&#xA;    CreateGuid = Left(CreateObject(&quot;Scriptlet.TypeLib&quot;).Guid,38)&#xA;End Function&#xA;&#xA;&#xA;'make an action into a calling activity&#xA;function makeCallingActivity(action, activity)&#xA;&#x9;action.Type = &quot;Activity&quot;&#xA;&#x9;action.ClassfierID = 0&#xA;&#x9;action.Stereotype = &quot;Activity&quot;&#xA;&#x9;action.Update&#xA;&#x9;action.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;Activity&quot;&#xA;&#x9;action.TaggedValues.Refresh&#xA;&#x9;'first copy the tagged values values&#xA;&#x9;copyTaggedValuesValues activity, action&#xA;&#x9;'set tagged values correctly&#xA;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;set calledActivityTV = action.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;calledActivityTV.Value = &quot;true&quot;&#xA;&#x9;calledActivityTV.Update&#xA;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;set referenceActivityTV = action.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;referenceActivityTV.Value = activity.ElementGUID&#xA;&#x9;referenceActivityTV.Update&#xA;&#x9;action.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setFontOnDiagramObject(diagramObject, font, size )&#xA;&#x9;dim styleParts&#xA;&#x9;styleParts = Split (diagramObject.Style , &quot;;&quot;) &#xA;&#x9;dim i&#xA;&#x9;dim stylepart&#xA;&#x9;dim fontpart &#xA;&#x9;fontpart = &quot;font=&quot; &amp; font&#xA;&#x9;dim fontSet&#xA;&#x9;fontSet = false&#xA;&#x9;dim sizePart&#xA;&#x9;sizePart = &quot;fontsz=&quot; &amp; size * 10&#xA;&#x9;dim sizeSet&#xA;&#x9;sizeSet = false&#xA;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;font=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = fontpart&#xA;&#x9;&#x9;&#x9;fontSet = true&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;fontsz=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = sizePart&#xA;&#x9;&#x9;&#x9;sizeSet = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;diagramObject.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;if not fontSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; fontpart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;&#x9;if not sizeSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; sizePart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'returns all elements in the package tree (so elements in the package and all subpackages recursively)&#xA;function getAllElementsInPackageTree(package)&#xA;&#x9;dim packageList &#xA;&#x9;set packageList = getPackageTree(package)&#xA;&#x9;dim packageIDString&#xA;&#x9;packageIDString = makePackageIDString(packageList)&#xA;&#x9;dim getElementsSQL&#xA;&#x9;getElementsSQL = &quot;select o.Object_ID from t_object o where o.Package_ID in (&quot; &amp; packageIDString &amp; &quot;)&quot;&#xA;&#x9;dim elements&#xA;&#x9;set elements = getElementsFromQuery(getElementsSQL)&#xA;&#x9;set getAllElementsInPackageTree = elements&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if not result.Exists(element.Name) then&#xA;&#x9;&#x9;result.Add element.Name, element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'make an id string out of the ID's of the given elements&#xA;function makeIDString(elements)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; element.ElementID&#xA;&#x9;next &#xA;&#x9;'if there are no elements then we return &quot;0&quot;&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makeIDString = idString&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;function getElementsFromDiagram(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagram = selectedElements&#xA;end function&#xA;&#xA;'returns the diagram objects in an ArrayList for elements of the given type from the given diagram&#xA;function getDiagramObjects(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add diagramObject&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getDiagramObjects = selectedElements&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;'the boundary element should be passed as a DiagramObject&#xA;function getElementsFromDiagramInBoundary(diagram, elementType,boundary)&#xA;&#x9;'dim boundary as EA.DiagramObject&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if (diagramObject.left &gt;= boundary.left and _&#xA;&#x9;&#x9;&#x9;diagramObject.left =&lt; boundary.right and _&#xA;&#x9;&#x9;&#x9;diagramObject.top =&lt; boundary.top and _&#xA;&#x9;&#x9;&#x9;diagramObject.top &gt;= boundary.bottom) then&#xA;&#x9;&#x9;&#x9;'get the element and check the type&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagramInBoundary = selectedElements&#xA;end function&#xA;&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim positionString&#xA;&#x9;'determine height and width&#xA;&#x9;dim width &#xA;&#x9;dim height&#xA;&#x9;dim elementType&#xA;&#x9;dim setVPartition &#xA;&#x9;setVPartition = false&#xA;&#x9;elementType = element.Type&#xA;&#x9;select case elementType       &#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#x9;&#x9;case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 90&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;'default width and height&#x9;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#x9;end select&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#x9;x = x - width/2&#xA;&#x9;'set the position of the diagramObject&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#x9;Session.Output &quot;positionString voor element &quot;&amp; element.Name &amp; &quot; : &quot; &amp;  positionString&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;if setVPartition then&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;end function&#xA;&#xA;'gets the content of the linked document in the given format (TXT, RTF or EA)&#xA;function getLinkedDocumentContent(element, format)&#xA;&#x9;dim linkedDocumentRTF&#xA;&#x9;dim linkedDocumentEA&#xA;&#x9;dim linkedDocumentPlainText&#xA;&#x9;linkedDocumentRTF = element.GetLinkedDocument()&#xA;&#x9;if format = &quot;RTF&quot; then&#xA;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentRTF&#xA;&#x9;else&#xA;&#x9;&#x9;linkedDocumentEA = Repository.GetFieldFromFormat(&quot;RTF&quot;,linkedDocumentRTF)&#xA;&#x9;&#x9;if format = &quot;EA&quot; then&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentEA&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;linkedDocumentPlainText = Repository.GetFormatFromField(&quot;TXT&quot;,linkedDocumentEA)&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentPlainText&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns the currently logged in user&#xA;'if security is not enabled then the logged in user is defaulted to me&#xA;function getUserLogin()&#xA;&#x9;'get the currently logged in user&#xA;&#x9;Dim userLogin&#xA; &#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;userLogin = Repository.GetCurrentLoginUser(false)&#xA; &#x9;else&#xA;&#x9;&#x9;dim network&#xA; &#x9;&#x9;Set network = CreateObject(&quot;Wscript.Network&quot;)&#xA;&#x9;&#x9;userLogin = network.UserName&#xA; &#x9;end if&#xA;&#x9;getUserLogin = userLogin&#xA;end function&#x9;&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;'let the user select a package&#xA;function selectPackage()&#xA;&#x9;dim documentPackageElementID &#x9;&#x9;&#xA;&#x9;documentPackageElementID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Package&quot;) &#xA;&#x9;if documentPackageElementID &gt; 0 then&#xA;&#x9;&#x9;dim packageElement as EA.Element&#xA;&#x9;&#x9;set packageElement = Repository.GetElementByID(documentPackageElementID)&#xA;&#x9;&#x9;dim package as EA.Package&#xA;&#x9;&#x9;set package = Repository.GetPackageByGuid(packageElement.ElementGUID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package = nothing&#xA;&#x9;end if &#xA;&#x9;set selectPackage = package&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;'get the description from the given notes &#xA;'that is the text between &lt;NL&gt; and &lt;/NL&gt; or &lt;FR&gt; and &lt;/FR&gt;&#xA;function getTagContent(notes, tag)&#xA;&#x9;if tag = &quot;&quot; then&#xA;&#x9;&#x9;getTagContent = notes&#xA;&#x9;else&#xA;&#x9;&#x9;getTagContent = &quot;&quot;&#xA;&#x9;&#x9;dim startTagPosition&#xA;&#x9;&#x9;dim endTagPosition&#xA;&#x9;&#x9;startTagPosition = InStr(notes,&quot;&amp;lt;&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;endTagPosition = InStr(notes,&quot;&amp;lt;/&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;'Session.Output &quot;notes: &quot; &amp; notes &amp; &quot; startTagPosition: &quot; &amp; startTagPosition &amp; &quot; endTagPosition: &quot; &amp;endTagPosition&#xA;&#x9;&#x9;if startTagPosition &gt; 0 and endTagPosition &gt; startTagPosition then&#xA;&#x9;&#x9;&#x9;dim startContent&#xA;&#x9;&#x9;&#x9;startContent = startTagPosition + len(tag) + 8&#xA;&#x9;&#x9;&#x9;dim length &#xA;&#x9;&#x9;&#x9;length = endTagPosition - startContent&#xA;&#x9;&#x9;&#x9;getTagContent = mid(notes, startContent, length)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="222"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{91A69E97-5348-48E9-9B73-1BB49E0B7C5C}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\Project Browser Group]&#xA;'[group=Project Browser Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC General Scripts.Util&#xA;!INC General Scripts.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim treeSelectedElements&#xA;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;else&#xA;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;set selectedItem = Repository.GetTreeSelectedObject&#xA;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="223"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{361A1115-0BF1-4166-B008-CCD691E2FD09}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Link To CR_E&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project E\Project Browser Group]&#xA;'[group=Project Browser Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC General Scripts.Util&#xA;!INC General Scripts.LinkToCRMain&#xA;&#xA;'This script only calls the function defined in the main script.&#xA;'Ths script is to be copied in Diagram, Search and Project Browser groups&#xA;&#xA;'Execute main function defined in LinkToCRMain&#xA;sub main&#xA;&#x9;dim treeSelectedElements&#xA;&#x9;set treeSelectedElements = Repository.GetTreeSelectedElements()&#xA;&#x9;if treeSelectedElements.Count &gt; 0 then&#xA;&#x9;&#x9;linkItemToCR nothing, treeSelectedElements&#xA;&#x9;else&#xA;&#x9;&#x9;dim selectedItem&#xA;&#x9;&#x9;set selectedItem = Repository.GetTreeSelectedObject&#xA;&#x9;&#x9;linkItemToCR selectedItem, nothing&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="224"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{98B99AEC-1E6E-4911-AF7A-E9AB7C3D1675}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen Excel- Export Programme Tree&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project EC\EAC scripts]&#xA;'[group=EAC scripts]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Export Programme Tree to Excel&#xA;' Author: Geert Bellekens&#xA;' Purpose: Exports the Programme tree to an excel file&#xA;' Date: 2017-03-30&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Export Programme Tree&quot;&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'get the selected element&#xA;&#x9;msgbox &quot;Please select the package that contains the program tree&quot;&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;set selectedPackage = selectPackage()&#xA;&#x9;if selectedPackage.ObjectType = otPackage then&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Starting Export Proramme Tree '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;&#x9;&#x9;'do the actual export&#xA;&#x9;&#x9;exportProgrammeTree(selectedPackage)&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, now() &amp; &quot; Finished Export Proramme Tree '&quot; &amp; selectedPackage.Name &amp; &quot;'&quot;, selectedPackage.Element.ElementID&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function exportProgrammeTree(selectedPackage)&#xA;&#x9;dim packageTreeIDs&#xA;&#x9;packageTreeIDs = getPackageTreeIDString(selectedPackage)&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;getPogrammeTreeContents = &#x9;&quot;select 'Programme' as Programme, 'Area' as Area ,'Key Action' as KeyAction, 'Action' as Action,'Action Type' as ActionType, 'Activity Type' as   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  ActivityType,'Package Name' as PackageName, 'Package_1' as PackageLevel1, 'Package_2'as PackageLevel2 , 'Package_3' as PackageLevel3 &#x9;&#x9;  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;union                                                                                                                                   &#x9;&#x9;  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;select o.Name as Programme, ar.[Name] as Area, ka.Name as KeyAction, ac.Name as Action, at.Name as ActionType, avt.Name as ActivityType&#x9;&#x9;  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ,package.name as PackageName ,package_p1.name as PackageLevel1,package_p2.name as PackageLevel2 ,package_p3.name as PackageLevel3               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (((((((((((((( t_object o                                                                                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_connector o_ar on (o_ar.[End_Object_ID] = o.[Object_ID]                                                                             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                               and o_ar.[Connector_Type] in ('Association', 'Aggregation')))                                                     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_object ar on (o_ar.[Start_Object_ID] = ar.[Object_ID]                                                                               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                          and ar.[Stereotype] = 'Area'))                                                                                         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_connector ar_ka on (ar_ka.[End_Object_ID] = ar.[Object_ID]                                                                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                               and ar_ka.[Connector_Type] in ('Association', 'Aggregation')))                                                    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_object ka on (ar_ka.[Start_Object_ID] = ka.[Object_ID]                                                                              &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                          and ka.[Stereotype] = 'Key Action'))                                                                                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_connector ka_ac on (ka_ac.[End_Object_ID] = ka.[Object_ID]                                                                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                               and ka_ac.[Connector_Type] in ('Association', 'Aggregation')))                                                    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_object ac on (ka_ac.[Start_Object_ID] = ac.[Object_ID]                                                                              &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                          and ac.[Stereotype] = 'Action'))                                                                                       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_connector ac_at on (ac_at.[End_Object_ID] = ac.[Object_ID]                                                                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                               and ac_at.[Connector_Type] in ('Association', 'Aggregation')))                                                    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_object at on (ac_at.[Start_Object_ID] = at.[Object_ID]                                                                              &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                          and at.[Stereotype] = 'Action Type'))                                                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_connector at_avt on (at_avt.[End_Object_ID] = at.[Object_ID]                                                                        &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                               and at_avt.[Connector_Type] in ('Association', 'Aggregation')))                                                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_object avt on (at_avt.[Start_Object_ID] = avt.[Object_ID]                                                                           &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                          and avt.[Stereotype] = 'Activity Type'))     &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_package package on o.package_id = package.package_id)                                                                              &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_package package_p1 on package_p1.package_id = package.parent_id)                                                                    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_package package_p2 on package_p2.package_id = package_p1.parent_id)                                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left join t_package package_p3 on package_p3.package_id = package_p2.parent_id)                                                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.Package_ID in (&quot; &amp; packageTreeIDs &amp; &quot;)                                                                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.[Stereotype] = 'Programme'                                                                                                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by 1 desc                                                                                                              &#x9;&#x9;&#x9;&#x9;&#x9;  &quot; &#xA;&#x9;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getPogrammeTreeContents)&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#x9;'create the excel file&#xA;&#x9;&#x9;dim excelOutput&#xA;&#x9;&#x9;set excelOutput = new ExcelFile&#xA;&#x9;&#x9;excelOutput.createTab &quot;Programme Tree&quot;, arrayResult, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;excelOutput.save&#xA;&#x9;end if&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="225"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F0411240-ADBA-4D42-B132-3FCE04F50EB2}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set composition source and target&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\DiagramGroup]&#xA;'[group=DiagramGroup]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Set composition source and target&#xA;' Author: Geert Bellekens&#xA;' Purpose: Make sure that the whole end is always the source, and the part end is always the target&#xA;' Date: 18/11/2015&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;'first save the diagram&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;&#x9;set selectedConnector = currentDiagram.SelectedConnector&#xA;&#xA;&#x9;&#x9;if not selectedConnector is nothing then&#xA;&#x9;&#x9;&#x9;'correct the composition direction for a single composition&#xA;&#x9;&#x9;&#x9;correctCompositionDirection selectedConnector&#xA;&#x9;&#x9;&#x9;'reload diagram to show changes&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'correct the composition direction for all compositions in the diagram&#xA;&#x9;&#x9;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#x9;&#x9;&#x9;for each diagramLink in currentDiagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;&#x9;'get connector from diagram link&#xA;&#x9;&#x9;&#x9;&#x9;dim connector as EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;&#x9;&#x9;'set composition source and target&#xA;&#x9;&#x9;&#x9;&#x9;correctCompositionDirection connector&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'reload diagram to show changes&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;function correctCompositionDirection(relation)&#xA;&#x9;if relation.Type = &quot;Association&quot; or _&#xA;&#x9;&#x9;relation.Type = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;'check aggregationKind&#xA;&#x9;&#x9;if relation.SupplierEnd.Aggregation &lt;&gt; 0 _&#xA;&#x9;&#x9;&#x9;and relation.ClientEnd.Aggregation = 0 then&#xA;&#x9;&#x9;&#x9;'switch source and target&#xA;&#x9;&#x9;&#x9;'switch ID's&#xA;&#x9;&#x9;&#x9;dim tempID&#xA;&#x9;&#x9;&#x9;tempID = relation.ClientID&#xA;&#x9;&#x9;&#x9;relation.ClientID = relation.SupplierID&#xA;&#x9;&#x9;&#x9;relation.SupplierID = tempID&#xA;&#x9;&#x9;&#x9;'switch Ends&#xA;&#x9;&#x9;&#x9;switchRelationEnds relation&#xA;&#x9;&#x9;&#x9;'save relation&#xA;&#x9;&#x9;&#x9;relation.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function switchRelationEnds (relation)&#xA;&#x9;dim tempVar&#xA;&#x9;tempvar = relation.ClientEnd.Aggregation&#xA;&#x9;relation.ClientEnd.Aggregation = relation.SupplierEnd.Aggregation&#xA;&#x9;relation.SupplierEnd.Aggregation       = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Alias&#xA;&#x9;relation.ClientEnd.Alias = relation.SupplierEnd.Alias&#xA;&#x9;relation.SupplierEnd.Alias             = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.AllowDuplicates&#xA;&#x9;relation.ClientEnd.AllowDuplicates = relation.SupplierEnd.AllowDuplicates&#xA;&#x9;relation.SupplierEnd.AllowDuplicates   = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Cardinality&#xA;&#x9;relation.ClientEnd.Cardinality = relation.SupplierEnd.Cardinality&#xA;&#x9;relation.SupplierEnd.Cardinality       = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Constraint&#xA;&#x9;relation.ClientEnd.Constraint = relation.SupplierEnd.Constraint&#xA;&#x9;relation.SupplierEnd.Constraint        = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Containment&#xA;&#x9;relation.ClientEnd.Containment = relation.SupplierEnd.Containment&#xA;&#x9;relation.SupplierEnd.Containment       = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Derived&#xA;&#x9;relation.ClientEnd.Derived = relation.SupplierEnd.Derived&#xA;&#x9;relation.SupplierEnd.Derived           = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.DerivedUnion&#xA;&#x9;relation.ClientEnd.DerivedUnion = relation.SupplierEnd.DerivedUnion&#xA;&#x9;relation.SupplierEnd.DerivedUnion      = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.IsChangeable&#xA;&#x9;relation.ClientEnd.IsChangeable = relation.SupplierEnd.IsChangeable&#xA;&#x9;relation.SupplierEnd.IsChangeable      = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.IsNavigable&#xA;&#x9;relation.ClientEnd.IsNavigable = relation.SupplierEnd.IsNavigable&#xA;&#x9;relation.SupplierEnd.IsNavigable       = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Navigable&#xA;&#x9;relation.ClientEnd.Navigable = relation.SupplierEnd.Navigable&#xA;&#x9;relation.SupplierEnd.Navigable         = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Ordering&#xA;&#x9;relation.ClientEnd.Ordering = relation.SupplierEnd.Ordering&#xA;&#x9;relation.SupplierEnd.Ordering          = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.OwnedByClassifier&#xA;&#x9;relation.ClientEnd.OwnedByClassifier = relation.SupplierEnd.OwnedByClassifier&#xA;&#x9;relation.SupplierEnd.OwnedByClassifier = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Qualifier&#xA;&#x9;relation.ClientEnd.Qualifier = relation.SupplierEnd.Qualifier&#xA;&#x9;relation.SupplierEnd.Qualifier         = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Role&#xA;&#x9;relation.ClientEnd.Role = relation.SupplierEnd.Role&#xA;&#x9;relation.SupplierEnd.Role              = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.RoleNote&#xA;&#x9;relation.ClientEnd.RoleNote = relation.SupplierEnd.RoleNote&#xA;&#x9;relation.SupplierEnd.RoleNote          = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.RoleType&#xA;&#x9;relation.ClientEnd.RoleType = relation.SupplierEnd.RoleType&#xA;&#x9;relation.SupplierEnd.RoleType          = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Stereotype&#xA;&#x9;relation.ClientEnd.Stereotype = relation.SupplierEnd.Stereotype&#xA;&#x9;relation.SupplierEnd.Stereotype        = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.StereotypeEx&#xA;&#x9;relation.ClientEnd.StereotypeEx = relation.SupplierEnd.StereotypeEx&#xA;&#x9;relation.SupplierEnd.StereotypeEx      = tempvar&#xA;'&#x9;tempvar = relation.ClientEnd.TaggedValues&#xA;'&#x9;relation.ClientEnd.TaggedValues = relation.SupplierEnd.TaggedValues&#xA;'&#x9;relation.SupplierEnd.TaggedValues      = tempvar&#xA;&#x9;tempvar = relation.ClientEnd.Visibility&#xA;&#x9;relation.ClientEnd.Visibility = relation.SupplierEnd.Visibility&#xA;&#x9;relation.SupplierEnd.Visibility        = tempvar&#xA;&#x9;relation.ClientEnd.Update&#xA;&#x9;relation.SupplierEnd.Update&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="226"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5F8ED380-0766-4F8D-AC5C-98CA8AEF0C76}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Fix Enumeratie Waarden&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Fix Enumeratie Waarden&#xA;' Author: Geert Bellekens&#xA;' Purpose: the name of enumeration values in the different models should remain the same in the different models SIM, UGM, BSM.&#xA;'         This script will check if the name of the enumeration value is different and make it the same for the selected package and everthing underneath.&#xA;' Date: 2017-03-11&#xA;'&#xA;&#xA;const outputTabName = &quot;Fix Enumeratie Waarden&quot;&#xA;&#xA;sub main&#xA;&#x9;'setup output&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'disable gui updates&#xA;&#x9;Repository.EnableUIUpdates = 0&#xA;&#x9;'tell the user we are starting&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting Fixing Enumeratie Waarden&quot;,0&#x9;&#xA;&#x9;'select all the tagged values in the current &#xA;&#x9;'first get the currently package id tree string&#xA;&#x9;dim selectedPackageIDString&#xA;&#x9;selectedPackageIDString = getSelectedPackageIDString()&#xA;&#x9;'fix enumeration values&#xA;    fixEnumerationValues selectedPackageIDString             &#xA;&#x9;'disable gui updates&#xA;&#x9;Repository.EnableUIUpdates = 1&#xA;&#x9;'reload &#xA;&#x9;Repository.RefreshModelView(0)&#xA;&#x9;'tell the user we are finished&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished Fixing Enumeratie Waarden&quot;,0&#x9;&#xA;end sub&#xA;&#xA;function fixEnumerationValues(selectedPackageIDString)&#xA;&#x9;dim getEnumerationValues&#xA;&#x9;getEnumerationValues =  &quot;select a.[ID],ao.name from (((t_attribute a                                                               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.[Object_ID] = a.[Object_ID])                                                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join [t_attributetag] tv on tv.[ElementID] = a.[ID])                                               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join [t_attribute] ao on ao.[ea_guid] like tv.VALUE)                                               &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where (o.[Object_Type] = 'Enumeration' or (o.[Object_Type] = 'Class' and o.[Stereotype] = 'Enumeration'))&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and a.[Name] &lt;&gt; ao.[Name]                                                                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot;&amp; getSelectedPackageIDString &amp;&quot;)       &#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &quot;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;       &#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(getEnumerationValues)&#xA;&#x9;dim enumValues&#xA;&#x9;enumValues = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim i&#xA;&#x9;for i = Lbound(enumValues) to Ubound(enumValues) -1 step 1&#xA;&#x9;&#x9;'get the values from the array&#xA;&#x9;&#x9;dim attributeID&#xA;&#x9;&#x9;dim originalName&#xA;&#x9;&#x9;attributeID = enumValues(i,0)&#xA;&#x9;&#x9;originalName = enumValues(i,1)&#xA;&#x9;&#x9;'get the attribute object&#xA;&#x9;&#x9;dim attribute as EA.Attribute&#xA;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;if not attribute is nothing _&#xA;&#x9;&#x9;and attribute.Name &lt;&gt; originalName then&#xA;&#x9;&#x9;&#x9;'get the owner of th attribute for reporting&#xA;&#x9;&#x9;&#x9;dim owner as EA.Element&#xA;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(attribute.ParentID)&#xA;&#x9;&#x9;&#x9;'tell the user we are updating an attribute&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Updating value '&quot; &amp; owner.name &amp; &quot;.&quot; &amp; attribute.Name &amp; &quot;' from '&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.Name &amp; &quot;' to '&quot; &amp; originalName &amp; &quot;'&quot; ,owner.ElementID&#xA;&#x9;&#x9;&#x9;attribute.Name = originalName &#xA;&#x9;&#x9;&#x9;attribute.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getSelectedPackageIDString()&#xA;&#x9;'get IDString the currently selected package in the project project (recursively)&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;'initialize&#xA;&#x9;set selectedPackage = nothing&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;dim packageTree&#xA;&#x9;set packageTree = getPackageTree(selectedPackage)&#xA;&#x9;'return the package ID string&#xA;&#x9;getSelectedPackageIDString = makePackageIDString(packageTree)&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;function getattributesFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim attributeIDs&#xA;&#x9;attributeIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim attributes &#xA;&#x9;set attributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim attributeID&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attributeID in attributeIDs&#xA;&#x9;&#x9;if attributeID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;attributes.Add(attribute)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getattributesFromQuery = attributes&#xA;end function&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="227"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B2670C09-58BB-4895-B9A5-00337D099E1C}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Fix Indicatie Kerngegeven&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Fix Indicatie Kerngegeven&#xA;' Author: Geert Bellekens&#xA;' Purpose: fix duplicate instances of the tagged value Indicatie kerngegeven in order to only keep one per attribute (or association)&#xA;' the rules to folow are&#xA;'  - if there are different values in the different tagged values then &quot;Ja&quot; should be used&#xA;'  - if all the values are the same then that value should be used&#xA;'  - all other tagged values with the same name should be removed &#xA;' Date: 2017-03-11&#xA;'&#xA;&#xA;const outputTabName = &quot;Fix Indicatie Kerngegeven&quot;&#xA;&#xA;sub main&#xA;&#x9;'setup output&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;'tell the user we are starting&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Starting Fixing Indicatie Kerngegeven&quot;,0&#x9;&#xA;&#x9;'select all the tagged values in the current &#xA;&#x9;'first get the currently package id tree string&#xA;&#x9;dim selectedPackageIDString&#xA;&#x9;selectedPackageIDString = getSelectedPackageIDString()&#xA;&#x9;'fix attribute tags&#xA;    fixAttributeTags selectedPackageIDString             &#xA;&#x9;'fix connector tags&#xA;&#x9;fixConnectorTags selectedPackageIDString&#xA;&#x9;'tell the user we are finished&#xA;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Finished Fixing Indicatie Kerngegeven&quot;,0&#x9;&#xA;end sub&#xA;&#xA;function fixAttributeTags(getSelectedPackageIDString)&#xA;&#x9;dim getAttributesSQL&#xA;&#x9;getAttributesSQL =  &quot;select distinct a.ID from (((t_attributetag tv              &#x9;&#x9;&#x9;   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_attributetag tv2 on tv2.ElementID = tv.ElementID)           &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_attribute a on tv.ElementID = a.ID)                         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.Object_ID = a.Object_ID)                      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where (tv.Property = 'Indicatie kerngegeven'                             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; or tv.Property = 'Indicate kerngegeven')                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and o.Package_ID in (&quot;&amp; getSelectedPackageIDString &amp;&quot;)       &#x9;&#x9;&#x9;   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and (tv2.Property = 'Indicatie kerngegeven'  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; or tv2.Property = 'Indicate kerngegeven')                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and tv2.ea_guid &lt;&gt; tv.ea_guid             &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;       &quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dim attributes&#xA;&#x9;set attributes = getattributesFromQuery(getAttributesSQL)&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attribute in attributes&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Processing attribute '&quot; &amp; attribute.Name &amp; &quot;'&quot;  ,attribute.ParentID&#x9;&#xA;&#x9;&#x9;fixKernGegevenTags attribute&#xA;&#x9;next&#xA;end function&#xA;&#xA;function fixConnectorTags(getSelectedPackageIDString)&#xA;&#x9;dim getConnectorsSQL&#xA;&#x9;getConnectorsSQL =  &quot;select distinct c.[Connector_ID]                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from (((t_connectortag tv              &#x9;&#x9;&#x9;             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connectortag tv2 on tv2.ElementID = tv.ElementID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_connector c on tv.[ElementID] = c.[Connector_ID]) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object ost on ost.Object_ID = c.[Start_Object_ID])&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where (tv.Property = 'Indicatie kerngegeven'                   &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; or tv.Property = 'Indicate kerngegeven')                       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and ost.Package_ID in (&quot;&amp; getSelectedPackageIDString &amp;&quot;)       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and (tv2.Property = 'Indicatie kerngegeven'  &#x9;&#x9;&#x9;&#x9;&#x9; &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; or tv2.Property = 'Indicate kerngegeven')                      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and tv2.ea_guid &lt;&gt; tv.ea_guid                                  &quot;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dim connectors&#xA;&#x9;set connectors = getconnectorsFromQuery(getConnectorsSQL)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connector in connectors&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Processing connector '&quot; &amp; connector.Name &amp; &quot;'&quot;  ,connector.ClientID&#x9;&#xA;&#x9;&#x9;fixKernGegevenTags connector&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;function fixKernGegevenTags(tagOwner)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;'initialize tagged value&#xA;&#x9;set taggedValue = nothing&#xA;&#x9;dim currentTag as EA.TaggedValue&#xA;&#x9;dim tagValue&#xA;&#x9;'loop backward through the tagged values to keep only one&#xA;&#x9;'get all tagged values with the kerngegeven name and remember the one to keep&#xA;&#x9;dim kerngegevenTags&#xA;&#x9;set kerngegevenTags = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;for each currentTag in tagOwner.TaggedValues&#xA;&#x9;&#x9;if currentTag.Name = &quot;Indicatie kerngegeven&quot; _&#xA;&#x9;&#x9;OR currentTag.Name = &quot;Indicate kerngegeven&quot; then&#xA;&#x9;&#x9;&#x9;'if it has the correct name and is part of the profile&#xA;&#x9;&#x9;&#x9;'then keep remember this one as the one to keep&#xA;&#x9;&#x9;&#x9;if currentTag.Name = &quot;Indicatie kerngegeven&quot; _&#xA;&#x9;&#x9;&#x9;AND instr(currentTag.FQName,&quot;::&quot;) &gt; 0 _&#xA;&#x9;&#x9;&#x9;AND taggedValue is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;set taggedValue = currentTag&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;'add the tag to the list&#xA;&#x9;&#x9;kerngegevenTags.Add currentTag&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'check if the we one to keep. If not take the first one and update its name as well&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = kerngegevenTags(0)&#xA;&#x9;end if&#xA;&#x9;'first determine the value kerngegeven&#xA;&#x9;tagValue = getValueForKerngegeven(kerngegevenTags)&#xA;&#x9;'set the value for the kerngegeven, only update if needed&#xA;&#x9;if taggedValue.Value &lt;&gt; tagValue _&#xA;&#x9;OR taggedValue.Name &lt;&gt; &quot;Indicatie kerngegeven&quot; then&#xA;&#x9;&#x9;'tell the user we are updating a tag&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: updating tag '&quot; &amp; taggedValue.Name &amp; &quot;' to name 'Indicatie Kerngegeven' and value '&quot; &amp; tagValue &amp; &quot;'&quot;  ,0&#x9;&#xA;&#x9;&#x9;taggedValue.Name = &quot;Indicatie kerngegeven&quot;&#xA;&#x9;&#x9;taggedValue.Value = tagValue&#xA;&#x9;&#x9;taggedValue.Update&#xA;&#x9;end if&#xA;&#x9;'now delete all the others&#xA;&#x9;dim i&#xA;&#x9;for i = tagOwner.TaggedValues.Count -1 to 0 step -1&#xA;&#x9;&#x9;'get the current tag&#xA;&#x9;&#x9;set currentTag = tagOwner.TaggedValues(i)&#xA;&#x9;&#x9;'check if not the one we want to keep&#xA;&#x9;&#x9;if currentTag.TagGUID &lt;&gt; taggedValue.TagGUID then&#xA;&#x9;&#x9;&#x9;'if the name matches then delete it&#xA;&#x9;&#x9;&#x9;if currentTag.Name = &quot;Indicatie kerngegeven&quot; _&#xA;&#x9;&#x9;&#x9;OR currentTag.Name = &quot;Indicate kerngegeven&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we are deleting a tag&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot;: Removing tag '&quot; &amp; currentTag.Name &amp; &quot;'&quot; ,0&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'delete the duplicate&#xA;&#x9;&#x9;&#x9;&#x9;tagOwner.TaggedValues.DeleteAt i, false &#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getValueForKerngegeven(kerngegevenTags)&#xA;&#x9;getValueForKerngegeven = &quot;&quot; '(default value)&#xA;&#x9;'first determine the value the tagged value should have&#xA;&#x9;dim taggedValue&#xA;&#x9;for each taggedValue in kerngegevenTags&#xA;&#x9;&#x9;if getValueForKerngegeven = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;'set the vaue for the first time&#xA;&#x9;&#x9;&#x9;getValueForKerngegeven = taggedValue.Value&#xA;&#x9;&#x9;elseif getValueForKerngegeven &lt;&gt; taggedValue.Value AND taggedValue.Value &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;&#x9;'difference found so default value = 'Ja'&#xA;&#x9;&#x9;&#x9;getValueForKerngegeven = &quot;Ja&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getSelectedPackageIDString()&#xA;&#x9;'get IDString the currently selected package in the project project (recursively)&#xA;&#x9;dim selectedPackage as EA.Package&#xA;&#x9;'initialize&#xA;&#x9;set selectedPackage = nothing&#xA;&#x9;set selectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;dim packageTree&#xA;&#x9;set packageTree = getPackageTree(selectedPackage)&#xA;&#x9;'return the package ID string&#xA;&#x9;getSelectedPackageIDString = makePackageIDString(packageTree)&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;function getattributesFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim attributeIDs&#xA;&#x9;attributeIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim attributes &#xA;&#x9;set attributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim attributeID&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attributeID in attributeIDs&#xA;&#x9;&#x9;if attributeID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;attributes.Add(attribute)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getattributesFromQuery = attributes&#xA;end function&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="228"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BD5AAEDB-7A78-469A-ABE1-B38083D39AD9}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove all maintenance info&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sqlDelete&#xA;&#x9;sqlDelete = &quot;delete from [t_objectproblems]&quot;&#xA;&#x9;dim response&#xA;&#x9;response = Msgbox(&quot;Alle issues en changes verwijderen?&quot;, _&#xA;        vbYesNo, &quot;Maintenance opkuisen&quot;)&#xA;&#xA;&#x9;If response = vbYes Then&#xA;&#x9;&#x9;Repository.Execute sqlDelete&#xA;&#x9;&#x9;msgbox &quot;Klaar!&quot;&#xA;&#x9;End If&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="229"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F6FBDBA9-18A4-499A-8161-0C31E3606020}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove Attribute Aliasses&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate =&#x9;&quot;update t_attribute set Style = null &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where Style is not null &quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; and stereotype &lt;&gt; 'enum' &quot;&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="230"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5C93CB55-5CDD-459C-A262-83570A0F97DB}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove Gegevensgroeptype alias&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sqlupdate&#xA;&#x9;sqlupdate = &quot;update t_object set Alias = null &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where [Stereotype] = 'gegevensgroeptype' and ALIAS is not null&quot;&#xA;&#x9;Repository.Execute sqlupdate&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="231"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9122BE6A-3DC5-48BC-A547-0BFB240E49F9}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove rolenames&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update t_connector set SourceRole = null, DestRole = null &quot; &amp;_&#xA;&#x9;&quot; where ([SourceRole] like '*' or [DestRole] like '*' )&quot; &amp;_&#xA;&#x9;&quot; and [Start_Object_ID] &lt;&gt; [End_Object_ID] &quot;&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="232"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CED9E5A1-8B95-40B3-9718-1E024343287A}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove stereotype notes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;'unlink the notes linked to the attributes on the stereotypes in order to preserve the information&#xA;&#x9;dim sqlUnlinkNotes&#xA;&#x9;sqlUnlinkNotes =&quot;update ((t_object o &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_attribute a on a.[ID] like o.[PDATA2]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object p on p.Object_ID = a.Object_ID) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; set o.[PDATA1] = null, o.[PDATA2] = null, o.[PDATA3] = null, o.[PDATA4] = null &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o.[Object_Type] = 'Note' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and p.[Stereotype] = 'stereotype' &quot;&#xA;&#x9;Repository.Execute sqlUnlinkNotes&#xA;&#x9;'remove the notes from the attributes on the stereotypes&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update (t_attribute t &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.Object_ID = t.Object_ID ) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; set t.[NOTES] = null   &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where o.stereotype = 'stereotype' &quot;&#xA;&#x9;'Session.Output sqlUpdate&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="233"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2955C37E-3886-4A23-8FAF-F34E6914730A}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Remove Tagged Values&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;'object tagged values&#xA;&#x9;dim objectTVsToDelete&#xA;&#x9;set objectTVsToDelete = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addObjectTVsToDelete objectTVsToDelete &#xA;&#x9;dim tvToDelete&#xA;&#x9;dim updateSQL&#xA;&#x9;for each tvToDelete in objectTVsToDelete&#xA;&#x9;&#x9;updateSQL = &quot;delete from t_objectproperties where [Property] = '&quot; &amp; tvToDelete &amp; &quot;'&quot;&#xA;&#x9;&#x9;Repository.Execute updateSQL&#xA;&#x9;next&#xA;&#x9;'attribute tagged values&#xA;&#x9;dim attributeTVsToDelete&#xA;&#x9;set attributeTVsToDelete = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addAttributeTVsToDelete attributeTVsToDelete &#xA;&#x9;for each tvToDelete in attributeTVsToDelete&#xA;&#x9;&#x9;updateSQL = &quot;delete from t_attributetag where [Property] = '&quot; &amp; tvToDelete &amp; &quot;'&quot;&#xA;&#x9;&#x9;Repository.Execute updateSQL&#xA;&#x9;next&#xA;&#x9;'connector tagged values&#xA;&#x9;dim connectorTVsToDelete&#xA;&#x9;set connectorTVsToDelete = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addConnectorTVsToDelete connectorTVsToDelete &#xA;&#x9;for each tvToDelete in connectorTVsToDelete&#xA;&#x9;&#x9;updateSQL = &quot;delete from t_connectortag where [Property] = '&quot; &amp; tvToDelete &amp; &quot;'&quot;&#xA;&#x9;&#x9;Repository.Execute updateSQL&#xA;&#x9;next&#xA;&#x9;msgbox &quot;Finished&quot;&#xA;end sub&#xA;&#xA;sub addObjectTVsToDelete(objectTVsToDelete)&#xA;&#x9;objectTVsToDelete.Add &quot;Aanduiding brondocument&quot;&#xA;&#x9;objectTVsToDelete.Add &quot;Aanduiding gebeurtenis&quot;&#xA;&#x9;objectTVsToDelete.Add &quot;Indicatie gebeurtenis&quot;&#xA;end sub&#xA;&#xA;sub addAttributeTVsToDelete(attributeTVsToDelete)&#xA;&#x9;attributeTVsToDelete.Add &quot;Aanduiding brondocument&quot;&#xA;&#x9;attributeTVsToDelete.Add &quot;Aanduiding gebeurtenis&quot;&#xA;&#x9;attributeTVsToDelete.Add &quot;Indicatie gebeurtenis&quot;&#xA;end sub&#xA;&#xA;sub addConnectorTVsToDelete(connectorTVsToDelete)&#xA;&#x9;connectorTVsToDelete.Add &quot;Aanduiding brondocument&quot;&#xA;&#x9;connectorTVsToDelete.Add &quot;Aanduiding gebeurtenis&quot;&#xA;&#x9;connectorTVsToDelete.Add &quot;Indicatie gebeurtenis&quot;&#xA;&#x9;connectorTVsToDelete.Add &quot;Naam terugrelatie&quot;&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="234"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6C085BAD-4449-4992-8FAC-C7491EB2BE4A}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rename Stereotypes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Rename Stereotypes&#xA;' Author: Geert Bellekens&#xA;' Purpose: Rename stereotypes on all types of elements &#xA;' Environment: Tested on .eap file.&#xA;' Date: 13/10/2015&#xA;'&#xA;sub main&#xA;&#x9;renameElementStereotypes &quot;Groepattribuutsoort&quot;, &quot;Gegevensgroeptype&quot;&#xA;&#x9;renameAttributeStereotypes &quot;Referentiegegeven&quot;, &quot;Referentie element&quot;&#xA;'&#x9;renameConnectorStereotypes &quot;FromStereo&quot;, &quot;ToStereo&quot;&#xA;'&#x9;renameOperationStereotypes &quot;FromStereo&quot;, &quot;ToStereo&quot;&#xA;'&#x9;renameDiagramStereotypes &quot;FromStereo&quot;, &quot;ToStereo&quot;&#xA;&#x9;Repository.RefreshModelView(0)&#xA;&#x9;msgbox &quot;Finished renaming stereotypes&quot;&#xA;end sub&#xA;&#xA;sub renameElementStereotypes(fromStereo, toStereo)&#xA;&#x9;renameStereotypes &quot;t_object&quot;, fromStereo, toStereo&#xA;end sub&#xA;sub renameAttributeStereotypes(fromStereo, toStereo)&#xA;&#x9;renameStereotypes &quot;t_attribute&quot;, fromStereo, toStereo&#xA;end sub&#xA;sub renameConnectorStereotypes(fromStereo, toStereo)&#xA;&#x9;renameStereotypes &quot;t_connector&quot;, fromStereo, toStereo&#xA;end sub&#xA;sub renameOperationStereotypes(fromStereo, toStereo)&#xA;&#x9;renameStereotypes &quot;t_operation&quot;, fromStereo, toStereo&#xA;end sub&#xA;sub renameDiagramStereotypes(fromStereo, toStereo)&#xA;&#x9;renameStereotypes &quot;t_diagram&quot;, fromStereo, toStereo&#xA;end sub&#xA;&#xA;sub renameStereotypes (baseTable, fromStereo, toStereo)&#xA;&#x9;dim updateSQL&#xA;&#x9;'first the second part of of t_xref description&#xA;&#x9;updateSQL = &quot;update (&quot; &amp; baseTable &amp; &quot; o inner join t_xref x on o.[ea_guid] = x.[Client]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot; set x.Description = MID( x.Description, 1, INSTR(  x.Description, ':&quot; &amp; fromStereo &amp; &quot;') - 1) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; + ':&quot; &amp; toStereo &amp; &quot;' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; + MID(x.Description,INSTR(  x.Description, ':&quot; &amp; fromStereo &amp; &quot;') &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; + LEN(':&quot; &amp; fromStereo &amp; &quot;'), LEN(x.Description)  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; - INSTR(  x.Description, ':&quot; &amp; fromStereo &amp; &quot;') &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; - LEN(':&quot; &amp; fromStereo &amp; &quot;')+ 1) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot; where o.Stereotype = '&quot; &amp; fromStereo &amp; &quot;' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot;  and x.Name = 'Stereotypes' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot; and INSTR(  x.Description, ':&quot; &amp; fromStereo &amp; &quot;') &gt; 0  &quot;&#x9;&#x9;&#x9;   &#xA;&#x9;Repository.Execute updateSQL&#xA;&#x9;'then the first part of t_xref description&#xA;&#x9;updateSQL = &quot;update (&quot; &amp; baseTable &amp; &quot; o inner join t_xref x on o.[ea_guid] = x.[Client]) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot; set x.Description = MID( x.Description, 1, INSTR(  x.Description, '=&quot; &amp; fromStereo &amp; &quot;') - 1) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; + '=&quot; &amp; toStereo &amp; &quot;' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; + MID(x.Description,INSTR(  x.Description, '=&quot; &amp; fromStereo &amp; &quot;') &quot;&amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; + LEN('=&quot; &amp; fromStereo &amp; &quot;'), LEN(x.Description)  &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; - INSTR(  x.Description, '=&quot; &amp; fromStereo &amp; &quot;') &quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot; - LEN('=&quot; &amp; fromStereo &amp; &quot;')+ 1) &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot; where o.Stereotype = '&quot; &amp; fromStereo &amp; &quot;' &quot;&amp;_&#xA;&#x9;&#x9;&#x9;   &quot;  and x.Name = 'Stereotypes' &quot;&amp;_&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;   &quot; and INSTR(  x.Description, '=&quot; &amp; fromStereo &amp; &quot;') &gt; 0  &quot;&#xA;&#x9;Repository.Execute updateSQL&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;'then the stereotype itself&#xA;&#x9;updateSQL = &quot; update &quot; &amp; baseTable &amp; &quot; o &quot;&amp;_&#xA;&#x9;&#x9;&#x9;    &quot; set o.[Stereotype] = '&quot; &amp; toStereo &amp; &quot;' &quot;&amp;_&#xA;&#x9;            &quot; where o.Stereotype = '&quot; &amp; fromStereo &amp; &quot;' &quot;&#xA;&#x9;Repository.Execute updateSQL&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="235"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{091E8B3D-B42A-4072-97BC-A5BD9872F815}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Rename Tagged Values&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;'object tagged values&#xA;&#x9;dim objectTVNamePairs&#xA;&#x9;set objectTVNamePairs = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addObjectTVNamePairs objectTVNamePairs &#xA;&#x9;dim tvpair&#xA;&#x9;dim updateSQL&#xA;&#x9;for each tvpair in objectTVNamePairs&#xA;&#x9;&#x9;updateSQL = &quot;update t_objectproperties set [Property] = '&quot; &amp; tvpair(1) &amp; &quot;' where [Property] = '&quot; &amp; tvpair(0) &amp; &quot;'&quot;&#xA;&#x9;&#x9;Repository.Execute updateSQL&#xA;&#x9;next&#xA;&#x9;'attribute tagged values&#xA;&#x9;dim attributeTVNamePairs&#xA;&#x9;set attributeTVNamePairs = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addAttributeTVNamePairs attributeTVNamePairs&#xA;&#x9;for each tvpair in attributeTVNamePairs&#xA;&#x9;&#x9;updateSQL = &quot;update t_attributetag set [Property] = '&quot; &amp; tvpair(1) &amp; &quot;' where [Property] = '&quot; &amp; tvpair(0) &amp; &quot;'&quot;&#xA;&#x9;&#x9;Repository.Execute updateSQL&#xA;&#x9;next&#xA;&#x9;'connector tagged values&#xA;&#x9;dim connectorTVNamePairs&#xA;&#x9;set connectorTVNamePairs = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addConnectorTVNamePairs connectorTVNamePairs&#xA;&#x9;for each tvpair in connectorTVNamePairs&#xA;&#x9;&#x9;updateSQL = &quot;update t_connectortag set [Property] = '&quot; &amp; tvpair(1) &amp; &quot;' where [Property] = '&quot; &amp; tvpair(0) &amp; &quot;'&quot;&#xA;&#x9;&#x9;Session.Output updateSQL&#xA;&#x9;&#x9;Repository.Execute updateSQL&#xA;&#x9;next&#xA;end sub&#xA;&#xA;sub addObjectTVNamePairs(objectTVNamePairs)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Code objecttype&quot;,&quot;Code&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Datum opname objecttype&quot;,&quot;Datum opname&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst definitie objecttype&quot;,&quot;Herkomst definitie&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst objecttype&quot;,&quot;Herkomst&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Kwaliteitsbegrip objecttype&quot;,&quot;Kwaliteitsbegrip&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Populatie objecttype&quot;,&quot;Populatie&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Toelichting objecttype&quot;,&quot;Toelichting&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst attribuutsoort&quot;,&quot;Herkomst&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Code attribuutsoort&quot;,&quot;Code&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst definitie attribuutsoort&quot;,&quot;Herkomst definitie&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Datum opname attribuutsoort&quot;,&quot;Datum opname&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Toelichting attribuutsoort&quot;,&quot;Toelichting&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Regels attribuutsoort&quot;,&quot;Regels&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Datum opname referentielijst&quot;,&quot;Datum opname&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst definitie referentielijst&quot;,&quot;Herkomst definitie&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst referentielijst&quot;,&quot;Herkomst&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Toelichting referentielijst&quot;,&quot;Toelichting&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Code referentielijst&quot;,&quot;Code&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Datum opname union&quot;,&quot;Datum opname&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Herkomst union&quot;,&quot;Herkomst&quot;)&#xA;&#x9;objectTVNamePairs.Add Array(&quot;Aanduiding  strijdigheid/nietigheid&quot;,&quot;Aanduiding strijdigheid/nietigheid&quot;)&#xA;end sub&#xA;&#xA;sub addAttributeTVNamePairs(attributeTVNamePairs)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Herkomst attribuutsoort&quot;,&quot;Herkomst&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Code attribuutsoort&quot;,&quot;Code&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Herkomst definitie attribuutsoort&quot;,&quot;Herkomst definitie&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Datum opname attribuutsoort&quot;,&quot;Datum opname&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Toelichting attribuutsoort&quot;,&quot;Toelichting&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Waardenverzameling&quot;,&quot;Patroon&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Regels attribuutsoort&quot;,&quot;Regels&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Herkomst referentiegegeven&quot;,&quot;Herkomst&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Code referentiegegeven&quot;,&quot;Code&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Herkomst definitie referentiegegeven&quot;,&quot;Herkomst definitie&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Datum opname referentiegegeven&quot;,&quot;Datum opname&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Toelichting referentiegegeven&quot;,&quot;Toelichting&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Datum opname union element&quot;,&quot;Datum opname&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Herkomst union element&quot;,&quot;Herkomst&quot;)&#xA;&#x9;attributeTVNamePairs.Add Array(&quot;Aanduiding  strijdigheid/nietigheid&quot;,&quot;Aanduiding strijdigheid/nietigheid&quot;)&#xA;end sub&#xA;&#xA;sub addConnectorTVNamePairs(connectorTVNamePairs)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Herkomst relatiesoort&quot;,&quot;Herkomst&quot;)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Code relatiesoort&quot;,&quot;Code&quot;)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Herkomst definitie relatiesoort&quot;,&quot;Herkomst definitie&quot;)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Datum opname relatiesoort&quot;,&quot;Datum opname&quot;)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Toelichting relatiesoort&quot;,&quot;Toelichting&quot;)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Regels relatiesoort&quot;,&quot;Regels&quot;)&#xA;&#x9;connectorTVNamePairs.Add Array(&quot;Aanduiding  strijdigheid/nietigheid&quot;,&quot;Aanduiding strijdigheid/nietigheid&quot;)&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="236"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FF6E2925-7907-4966-845B-272E4AF2D872}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Reset Attribute Multiplicity&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;dim sqlUpdate&#xA;&#x9;sqlUpdate = &quot;update t_attribute set upperbound = '*' &quot; &amp;_&#xA;&#x9;&#x9;&#x9;  &quot;where upperbound not in ('1', '*') &quot;&#xA;&#x9;Repository.Execute sqlUpdate&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="237"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{20BBD97E-E5B6-4FE6-AA35-D811CD4E4B72}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SetTraceabilityMain&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Set traceability&#xA;' Author: Geert Bellekens&#xA;' Purpose: Adds traceability from the copy package selected in the project browser to the original package selected by the user.&#xA;' Date: 2016-02-08&#xA;'&#xA;&#xA;dim outputTabName&#xA;outputTabName = &quot;Set Traceability&quot;&#xA;dim isTransform&#xA;isTransform = false&#xA;&#xA;sub SetTraceability(withTransformation)&#xA;&#xA;&#x9;Repository.CreateOutputTab outputTabName&#xA;&#x9;Repository.ClearOutput outputTabName&#xA;&#x9;Repository.EnsureOutputVisible outputTabName&#xA;&#x9;Repository.EnableUIUpdates = false&#xA;&#x9;&#xA;&#x9;isTransform = withTransformation&#xA;&#x9;dim copyPackage as EA.Package&#xA;&#x9;dim originalPackage as EA.Package&#xA;&#x9;'the copy packag is the one selected in the project browser&#xA;&#x9;set copyPackage = Repository.GetTreeSelectedPackage&#xA;&#x9;msgbox &quot;Please select the original package&quot;&#xA;&#x9;'the original package is the one selected by the user&#xA;&#x9;dim originalPackageID&#xA;&#x9;dim originalPackageElementID&#xA;&#x9;originalPackageElementID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Package;Selection=&quot; &amp; copyPackage.PackageGUID)&#xA;&#x9;if originalPackageElementID &gt; 0 then&#xA;&#x9;&#x9;dim originalPackageElement as EA.Element&#xA;&#x9;&#x9;set originalPackageElement = Repository.GetElementByID(originalPackageElementID)&#xA;&#x9;&#x9;set originalPackage = Repository.GetPackageByGuid(originalPackageElement.ElementGUID)&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Starting adding traces&quot;,0&#xA;&#x9;&#x9;'start the trace&#x9;&#x9;&#xA;&#x9;&#x9;tracePackageElements originalPackage, copyPackage&#xA;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Finished adding traces&quot;,0&#xA;&#x9;end if&#xA;&#x9;Repository.EnableUIUpdates = true&#xA;&#x9;Repository.RefreshModelView copyPackage.PackageID&#xA;end sub&#xA;&#xA;function tracePackageElements(originalPackage, copyPackage)&#xA;&#x9;dim originalElement as EA.Element&#xA;&#x9;dim copyElement as EA.Element&#xA;&#x9;'find corresponding element&#xA;&#x9;for each originalElement in originalPackage.Elements&#xA;&#x9;&#x9;'only process elements that have a name&#xA;&#x9;&#x9;if len(originalElement.Name) &gt; 0 then&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput outputTabName, now() &amp; &quot; Processing &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;&#x9;&#x9;&#x9;dim matchFound&#xA;&#x9;&#x9;&#x9;matchFound = false&#xA;&#x9;&#x9;&#x9;for each copyElement in copyPackage.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if copyElement.Name = originalElement.Name then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'found a match&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;traceElements originalElement,copyElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if isTransform then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transformElement originalElement,copyElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;matchFound = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;if matchFound then&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Match found for &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outputTabName, now() &amp; &quot; Match NOT found for &quot; &amp; originalElement.Type &amp; &quot;: &quot; &amp; originalElement.Name ,0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'process subpackages&#xA;&#x9;dim originalSubPackage&#xA;&#x9;dim copySubpackage&#xA;&#x9;for each originalSubPackage in originalPackage.Packages&#xA;&#x9;&#x9;for each copySubpackage in copyPackage.Packages&#xA;&#x9;&#x9;&#x9;if originalSubPackage.Name = copySubpackage.Name then&#xA;&#x9;&#x9;&#x9;&#x9;'found a match&#xA;&#x9;&#x9;&#x9;&#x9;tracePackageElements originalSubPackage, copySubpackage&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end function&#xA;&#xA;function traceElements (originalElement,copyElement)&#xA;'&#x9;dim originalElement as EA.Element&#xA;'&#x9;dim copyElement as EA.Element&#xA;&#x9;'add trace relation&#xA;&#x9;dim trace as EA.Connector&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;'delete the original traces if they exist&#xA;&#x9;dim keepDeleting&#xA;&#x9;keepDeleting = true&#xA;&#x9;do&#xA;&#x9;&#x9; keepDeleting = deleteOriginalTraces(originalElement,copyElement)&#xA;&#x9;loop while keepDeleting&#xA;&#x9;&#xA;&#x9;dim traceExists&#xA;&#x9;traceExists = false&#xA;&#x9;'check if the connector exists already&#xA;&#x9;for each connector in copyElement.Connectors&#xA;&#x9;&#x9;if connector.SupplierID = originalElement.ElementID _&#xA;&#x9;&#x9;AND connector.Type = &quot;Abstraction&quot; _&#xA;&#x9;&#x9;AND connector.Stereotype = &quot;trace&quot; then&#xA;&#x9;&#x9;&#x9;traceExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'if it doesn't exist yet we create a new one&#xA;&#x9;if traceExists = false then&#xA;&#x9;&#x9;set trace = copyElement.Connectors.AddNew(&quot;&quot;,&quot;Abstraction&quot;)&#xA;&#x9;&#x9;trace.SupplierID = originalElement.ElementID&#xA;&#x9;&#x9;trace.Stereotype = &quot;trace&quot;&#xA;&#x9;&#x9;trace.Update&#xA;&#x9;end if&#xA;&#x9;'trace attributes&#xA;&#x9;traceAttributes originalElement,copyElement&#xA;&#x9;'trace associations&#xA;&#x9;traceAssociations originalElement,copyElement&#xA;end function&#xA;&#xA;function deleteOriginalTraces(originalElement,copyElement)&#xA;&#x9;dim i&#xA;&#x9;dim copyConnector as EA.Connector&#xA;&#x9;deleteOriginalTraces = false&#xA;&#x9;'make sure the connectors are refreshed&#xA;&#x9;copyElement.Connectors.Refresh&#xA;&#x9;originalElement.Connectors.Refresh&#xA;&#x9;'remove all the traces to domain model classes&#xA;&#x9;for each copyConnector in copyElement.Connectors&#xA;&#x9;&#x9;if copyConnector.Type = &quot;Abstraction&quot; AND copyConnector.Stereotype = &quot;trace&quot; then&#xA;&#x9;&#x9;&#x9;'check if the original element has the same trace&#xA;&#x9;&#x9;&#x9;dim originalConnector as EA.Connector&#xA;&#x9;&#x9;&#x9;for each originalConnector in originalElement.Connectors&#xA;&#x9;&#x9;&#x9;&#x9;if copyConnector.Type = &quot;Abstraction&quot; AND _&#xA;&#x9;&#x9;&#x9;&#x9;copyConnector.Stereotype = &quot;trace&quot; AND _&#xA;&#x9;&#x9;&#x9;&#x9;copyConnector.SupplierID = originalConnector.SupplierID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;deleteConnector copyElement, copyConnector&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'refresh again and exit function&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;copyElement.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;originalElement.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'found on, try again&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;deleteOriginalTraces = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function traceAttributes(originalElement,copyElement)&#xA;&#x9;dim originalAttribute as EA.Attribute&#xA;&#x9;dim copyAttribute as EA.Attribute&#xA;&#x9;for each originalAttribute in originalElement.Attributes&#xA;&#x9;&#x9;for each copyAttribute in copyElement.Attributes&#xA;&#x9;&#x9;&#x9;if copyAttribute.Name = originalAttribute.Name then&#xA;&#x9;&#x9;&#x9;&#x9;if isTransform then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;transformAttribute originalAttribute,originalElement, copyAttribute &#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'found match, add trace tag&#xA;&#x9;&#x9;&#x9;&#x9;dim traceTag as EA.AttributeTag&#xA;&#x9;&#x9;&#x9;&#x9;set traceTag = getExistingOrNewTaggedValue(copyAttribute,&quot;SourceAttribute&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;traceTag.Value = originalAttribute.AttributeGUID&#xA;&#x9;&#x9;&#x9;&#x9;traceTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end function&#xA;&#xA;function traceAssociations (originalElement,copyElement)&#xA;&#x9;'make sure the connectors are refreshed&#xA;&#x9;copyElement.Connectors.Refresh&#xA;&#x9;originalElement.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;dim originalConnector as EA.Connector&#xA;&#x9;dim copyConnector as EA.Connector&#xA;&#x9;for each originalConnector in originalElement.Connectors&#xA;&#x9;&#x9;'we process only associations that start from the original element&#xA;&#x9;&#x9;if (originalConnector.Type = &quot;Association&quot; or originalConnector.Type = &quot;Aggregation&quot;) _&#xA;&#x9;&#x9;&#x9;AND originalConnector.ClientID =  originalElement.ElementID then&#xA;&#x9;&#x9;&#x9;for each copyConnector in copyElement.Connectors&#xA;&#x9;&#x9;&#x9;&#x9;if copyConnector.Type = originalConnector.Type _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.Name = originalConnector.Name _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.ClientEnd.Cardinality = originalConnector.ClientEnd.Cardinality _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.ClientEnd.Role = originalConnector.ClientEnd.Role _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.ClientEnd.Aggregation = originalConnector.ClientEnd.Aggregation _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.SupplierEnd.Cardinality = originalConnector.SupplierEnd.Cardinality _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.SupplierEnd.Role = originalConnector.SupplierEnd.Role _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND copyConnector.SupplierEnd.Aggregation = originalConnector.SupplierEnd.Aggregation then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'connector properties match, now check the other ends&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim originalOtherEnd as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim copyOtherEnd as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set originalOtherEnd = Repository.GetElementByID(originalConnector.SupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set copyOtherEnd = Repository.GetElementByID(copyConnector.SupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if copyOtherEnd.Name = originalOtherEnd.Name _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or isTransformedFrom(originalOtherEnd, copyOtherEnd) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'associations with stereotype 'tekentechnisch' need to be removed&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if isTransform AND copyConnector.Stereotype = &quot;Tekentechnisch&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;deleteConnector copyElement, copyConnector&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;copyElement.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'transform&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if isTransform then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;transformAssociations originalConnector,copyConnector&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'found a match, add trace tag&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;dim traceTag as EA.ConnectorTag&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set traceTag = getExistingOrNewTaggedValue(copyConnector,&quot;SourceAssociation&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;traceTag.Value = originalConnector.ConnectorGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;traceTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function deleteConnector (owner, connector)&#xA;&#x9;dim currentConnector as EA.Connector&#xA;&#x9;dim i&#xA;&#x9;for i = 0 to owner.Connectors.Count -1&#xA;&#x9;&#x9;set currentConnector = owner.Connectors.GetAt(i)&#xA;&#x9;&#x9;if currentConnector.ConnectorID = connector.ConnectorID then&#xA;&#x9;&#x9;&#x9;owner.Connectors.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;' the copyElement is transformed from the originalElement if it has a trace relationship to the originalElement&#xA;function isTransformedFrom(originalElement, copyElement)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;isTransformedFrom = false&#xA;&#x9;for each connector in copyElement.Connectors&#xA;&#x9;&#x9;if connector.Stereotype = &quot;trace&quot; and connector.SupplierID = originalElement.ElementID then&#xA;&#x9;&#x9;&#x9;isTransformedFrom = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim returnTag as EA.TaggedValue&#xA;&#x9;set returnTag = nothing&#xA;&#x9;'check if a tag with that name alrady exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = tagName then&#xA;&#x9;&#x9;&#x9;set returnTag = taggedValue&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create new one if not found&#xA;&#x9;if returnTag is nothing then&#xA;&#x9;&#x9;set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function transformElement(originalElement,copyElement)&#xA;&#x9;'set stereotype&#xA;&#x9;select case originalElement.Stereotype&#xA;&#x9;&#x9;case &quot;Objecttype&quot;&#xA;&#x9;&#x9;&#x9;copyElement.StereotypeEx = &quot;Entiteittype&quot;&#xA;&#x9;&#x9;&#x9;copyElement.Name = getCamelCase(originalElement.Name)&#xA;'&#x9;&#x9;&#x9;copyElement.Name = originalElement.Alias&#xA;'&#x9;&#x9;&#x9;copyElement.Alias = getCamelCase(originalElement.Name)&#xA;&#x9;&#x9;case &quot;Gegevensgroeptype&quot;&#xA;&#x9;&#x9;&#x9;copyElement.StereotypeEx = &quot;Groep&quot;&#xA;&#x9;&#x9;&#x9;copyElement.Name = getCamelCase(originalElement.Name)&#xA;&#x9;&#x9;case &quot;Referentielijst&quot;&#xA;&#x9;&#x9;&#x9;copyElement.StereotypeEx = &quot;Tabel-entiteit&quot;&#xA;&#x9;&#x9;&#x9;copyElement.Name = getCamelCase(originalElement.Name)&#xA;'&#x9;&#x9;&#x9;copyElement.Name = originalElement.Alias&#xA;'&#x9;&#x9;&#x9;copyElement.Alias = getCamelCase(originalElement.Name)&#xA;&#x9;&#x9;case &quot;Relatieklasse&quot;&#xA;&#x9;&#x9;&#x9;copyElement.StereotypeEx = &quot;Relatie-entiteit&quot;&#xA;&#x9;&#x9;&#x9;copyElement.Name = getCamelCase(originalElement.Name)&#xA;&#x9;&#x9;case &quot;Complex datatype&quot;&#xA;&#x9;&#x9;&#x9;copyElement.StereotypeEx = &quot;MUG Complex datatype&quot;&#xA;&#x9;&#x9;case &quot;Union&quot;&#xA;&#x9;&#x9;&#x9;copyElement.StereotypeEx = &quot;MUG Union&quot;&#xA;&#x9;end select&#xA;&#x9;'remove notes for all elements&#xA;'&#x9;copyElement.Notes = &quot;&quot; 'not yet&#xA;&#x9;copyElement.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalElement.Notes&#xA;&#x9;copyElement.Update&#xA;&#x9;'copy tagged values&#xA;&#x9;copyTaggedValueValues originalElement, copyElement&#xA;end function&#xA;&#xA;function transformAttribute(originalAttribute,originalElement, copyAttribute)&#xA;&#x9;'set stereotype&#xA;&#x9;select case originalAttribute.Stereotype&#xA;&#x9;&#x9;case &quot;Attribuutsoort&quot;&#xA;&#x9;&#x9;&#x9;copyAttribute.StereotypeEx = &quot;Element&quot;&#xA;&#x9;&#x9;&#x9;copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;&#xA;&#x9;&#x9;case &quot;Referentie element&quot;&#xA;&#x9;&#x9;&#x9;copyAttribute.StereotypeEx = &quot;Tabel element&quot;&#xA;&#x9;&#x9;&#x9;'copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;&#x9;&#x9;case &quot;Union element&quot;&#xA;&#x9;&#x9;&#x9;copyAttribute.StereotypeEx = &quot;MUG Union Element&quot;&#xA;&#x9;&#x9;case &quot;Data element&quot;&#xA;&#x9;&#x9;&#x9;copyAttribute.StereotypeEx = &quot;MUG Data element&quot;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;'not for enum values. Enum Values have a parent of type enumeration and have not &quot;IsLiteral=0&quot; in the styleEx field&#xA;&#x9;if NOT(originalElement.Type = &quot;Enumeration&quot; _&#xA;&#x9;&#x9;or instr(originalAttribute.StyleEx, &quot;IsLiteral=1;&quot;) &gt; 0 _&#xA;&#x9;&#x9;or originalElement.Stereotype = &quot;Enumeration&quot;) then&#xA;&#x9;&#x9;'name =&gt; camelCase&#xA;&#x9;&#x9;copyAttribute.Name = getCamelCase(originalAttribute.Name)&#xA;&#x9;end if&#xA;&#x9;'notes&#xA;&#x9;copyAttribute.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalAttribute.Notes&#xA;&#x9;copyAttribute.Update&#xA;&#x9;'cop tagged values&#xA;&#x9;copyTaggedValueValues originalAttribute, copyAttribute&#xA;&#x9;'kerngegeven stereotype&#xA;'&#x9;if isKernGegeven(originalAttribute) then&#xA;'&#x9;&#x9;copyAttribute.StereotypeEx = copyAttribute.StereotypeEx  &amp; &quot;,Kerngegeven&quot;&#xA;'&#x9;end if&#xA;end function&#xA;&#xA;function isKernGegeven(attribute)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;isKernGegeven = false&#xA;&#x9;for each taggedValue in attribute.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = &quot;Indicatie kerngegeven&quot; then&#xA;&#x9;&#x9;&#x9;if taggedValue.Value = &quot;Ja&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;isKernGegeven = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function transformAssociations (originalConnector,copyConnector)&#xA;&#x9;'set stereotype&#xA;&#x9;select case originalConnector.Stereotype&#xA;&#x9;&#x9;case &quot;Relatiesoort&quot;&#xA;&#x9;&#x9;&#x9;copyConnector.StereotypeEx = &quot;Relatie&quot;&#xA;&#x9;&#x9;case &quot;Relatieklasse&quot;&#xA;&#x9;&#x9;&#x9;copyConnector.StereotypeEx = &quot;Relatie-entiteit&quot;&#xA;&#x9;end select&#xA;&#x9;'name =&gt; camelCase&#xA;&#x9;copyConnector.Name = getCamelCase(originalConnector.Name)&#xA;&#x9;'notes&#xA;&#x9;copyConnector.Notes = vbNewLine &amp; &quot;--&quot; &amp; vbNewLine &amp; originalConnector.Notes&#xA;&#x9;copyConnector.Update&#xA;&#x9;'cop tagged values&#xA;&#x9;copyTaggedValueValues originalConnector,copyConnector&#xA;end function&#xA;&#xA;function getCamelCase(nameToConvert)&#xA;&#x9;  Dim arr, i&#xA;&#x9;  arr = Split(nameToConvert, &quot; &quot;)&#xA;&#x9;  For i = LBound(arr) To UBound(arr)&#xA;&#x9;&#x9;if i = 0 then&#xA;&#x9;&#x9;&#x9;arr(i) = LCase(arr(i))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;arr(i) = UCase(Left(arr(i), 1)) &amp; LCase(Mid(arr(i), 2))&#xA;&#x9;&#x9;end if&#xA;&#x9;  Next&#xA;  getCamelCase = Join(arr, &quot;&quot;)&#xA;end function&#xA;&#xA;function copyTaggedValueValues(originalElement, copyElement)&#xA;&#x9;dim copyTV as EA.TaggedValue&#xA;&#x9;dim originalTV as EA.TaggedValue&#xA;&#x9;for each copyTV in copyElement.TaggedValues&#xA;&#x9;&#x9;for each originalTV in originalElement.TaggedValues&#xA;&#x9;&#x9;&#x9;if copyTV.Name = originalTV.Name then&#xA;&#x9;&#x9;&#x9;&#x9;copyTV.Value = originalTV.Value&#xA;&#x9;&#x9;&#x9;&#x9;copyTV.Notes = originalTV.Notes&#xA;&#x9;&#x9;&#x9;&#x9;copyTV.Update&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;end function&#xA;&#xA;function removeTaggedValuesExcept(item, tvsToKeep)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim i&#xA;&#x9;for i = item.TaggedValues.Count -1 to 0 step -1&#xA;&#x9;&#x9;set taggedValue = item.TaggedValues(i)&#xA;&#x9;&#x9;if not tvsToKeep.contains(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;item.TaggedValues.DeleteAt i, false&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="238"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8158CC29-C525-4C52-A291-6C89150D2628}"/>
			<Column name="ScriptAuthor" value="{547E6325-1C4D-430B-A299-44628B155556}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Update t_xref stereotypes&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\KING Scripts]&#xA;'[group=KING Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;&#x9;' TODO: Enter script code here!&#xA;&#x9;&#xA;&#x9;updateXref &quot;Attribuutsoort&quot;&#xA;&#x9;updateXref &quot;Complex datatype&quot;&#xA;&#x9;updateXref &quot;Data element&quot;&#xA;&#x9;updateXref &quot;External&quot;&#xA;&#x9;updateXref &quot;Externe koppeling&quot;&#xA;&#x9;updateXref &quot;Gegevensgroep compositie&quot;&#xA;&#x9;updateXref &quot;Gegevensgroeptype&quot;&#xA;&#x9;updateXref &quot;Generalisatie&quot;&#xA;&#x9;updateXref &quot;Objecttype&quot;&#xA;&#x9;updateXref &quot;Referentie element&quot;&#xA;&#x9;updateXref &quot;Referentielijst&quot;&#xA;&#x9;updateXref &quot;Relatieklasse&quot;&#xA;&#x9;updateXref &quot;Relatiesoort&quot;&#xA;&#x9;updateXref &quot;Tekentechnisch&quot;&#xA;&#x9;updateXref &quot;Union&quot;&#xA;&#x9;updateXref &quot;Union element&quot;&#xA;&#x9;updateXref &quot;View&quot;&#xA;&#xA;end sub&#xA;&#xA;function updateXref(stereotype)&#xA;&#xA;&#x9;dim sqlupdate &#xA;&#x9;sqlupdate = &quot;update  t_xref  set description = '@STEREO;Name=&quot; &amp; stereotype &amp; &quot;;FQName=MIG::&quot; &amp; stereotype &amp; &quot;;@ENDSTEREO;'&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where [Description]  like '@STEREO;Name=&quot; &amp; stereotype &amp; &quot;*'&quot;&#xA;&#x9;'Session.Output sqlupdate&#xA;&#x9;Repository.Execute sqlupdate&#xA;&#x9;&#xA;end function&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="239"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{257EEE06-6B68-4423-AB6D-09AA30563DDC}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Message Composer Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="240"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6EB16E34-3E8A-4615-92E3-0675FDBDEB47}"/>
			<Column name="ScriptAuthor" value="{257EEE06-6B68-4423-AB6D-09AA30563DDC}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Transform Message&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\Message Composer Scripts]&#xA;'[group=Message Composer Scripts]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: Transform Message&#xA;' Author: Geert Bellekens&#xA;' Purpose: script to be executed as custom script after generating a message using the EA Message Composer.&#xA;' &#x9;&#x9;   this script will update all values of the tagged value &quot;Mogelijk geen waarde&quot; to the value &quot;Ja&quot; in the just created/updated message.&#xA;' Date: '2017-03-21&#xA;'&#xA;sub main&#xA;&#x9;' get the message package&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim messagePackage as EA.Package&#xA;&#x9;&#x9;set messagePackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;&#x9;' ask the user for confirmation before updating the tags just in case something went wrong with the generation of the subset and we have the wrong diagram&#xA;&#x9;&#x9;dim response&#xA;&#x9;&#x9;response = msgbox(&quot;Update all 'Mogelijk geen waarde' of the subset in '&quot; &amp; messagePackage.Name &amp; &quot;' to the value 'Ja'?&quot;, vbYesNo+vbQuestion, &quot;Update 'Mogelijk geen waarde' tags?&quot;)&#xA;&#x9;&#x9;if response = vbYes then&#xA;&#x9;&#x9;&#x9;' get the package ID's of the package branch to be used in the SQL update statement&#xA;&#x9;&#x9;&#x9;dim packageIDTreeString &#xA;&#x9;&#x9;&#x9;packageIDTreeString = getPackageTreeIDString(messagePackage)&#xA;&#x9;&#x9;&#x9;' update the tagged values using an SQL update statement&#xA;&#x9;&#x9;&#x9;dim updateAttributeTagsSQL&#xA;&#x9;&#x9;&#x9;updateAttributeTagsSQL = &quot;update t_attributetag set [Value] = 'Ja'                     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where [Property] = 'Mogelijk geen waarde'                    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and [ElementID] in                                           &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; (                                                            &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  select a.ID from t_attribute a                              &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  inner join t_object o on a.[Object_ID] = o.[Object_ID]      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  where o.[Package_ID] in (&quot; &amp; packageIDTreeString &amp; &quot;)       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; )                                                            &quot;&#xA;&#x9;&#x9;&#x9;'execute the update&#xA;&#x9;&#x9;&#x9;Repository.Execute updateAttributeTagsSQL&#xA;&#x9;&#x9;&#x9;dim updateConnectortagsSQL&#xA;&#x9;&#x9;&#x9;updateConnectortagsSQL = &quot;update t_connectorTag set [Value] = 'Ja'                     &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where [Property] = 'Mogelijk geen waarde'                    &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and [ElementID] in                                           &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; (                                                            &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  select c.[Connector_ID] from t_connector c                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  inner join t_object o on c.[Start_Object_ID] = o.[Object_ID]&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  where o.[Package_ID] in (&quot; &amp; packageIDTreeString &amp; &quot;)       &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; )                                                            &quot;&#xA;&#x9;&#x9;&#x9;'execute the update&#xA;&#x9;&#x9;&#x9;Repository.Execute updateConnectortagsSQL&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;'get the package id string of the given package tree&#xA;function getPackageTreeIDString(package)&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(package)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if packages.Count = 0 then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="241"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{3F32C815-0956-4223-902F-AD776A9B359A}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Package Group"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="242"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BF098DFE-B0E1-479B-9C3A-56DFDC523390}"/>
			<Column name="ScriptAuthor" value="{3F32C815-0956-4223-902F-AD776A9B359A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Traceability with Transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\Package Group]&#xA;'[group=Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC KING scripts.SetTraceabilityMain&#xA;&#xA;'&#xA;' Script Name: Set traceability&#xA;' Author: Geert Bellekens&#xA;' Purpose: Adds traceability from the copy package selected in the project browser to the original package selected by the user.&#xA;' Date: 2016-02-08&#xA;'&#xA;SetTraceability true"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="243"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{242DD718-016C-47CD-A1DA-56FBB32CE3B1}"/>
			<Column name="ScriptAuthor" value="{3F32C815-0956-4223-902F-AD776A9B359A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Traceability without Transformation&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project K\Package Group]&#xA;'[group=Package Group]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC KING scripts.SetTraceabilityMain&#xA;&#xA;'&#xA;' Script Name: Set Traceability without Transformation&#xA;' Author: Geert Bellekens&#xA;' Purpose: Set traceability between elements, attributes and associations, but without the metamodel transformation&#xA;' Date: 2016-08-05&#xA;&#xA;SetTraceability false"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="244"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4C34C7BE-1DE2-410F-9059-EB12FBC9F830}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Add defaults from template diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project M\Diagram Group]&#xA;'[group=Diagram Group]&#xA;'[group_type=DIAGRAM]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;'&#xA;' Script Name: Set Default Diagram Template&#xA;' Author: Geert Bellekens&#xA;' Purpose: Copy the elements from the default diagram in the template package&#xA;' Date: 2016-06-10&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;'set currentDiagram = Repository.GetDiagramByGuid(&quot;{BE3217CD-E80B-4848-ACF5-135A1D61BCC2}&quot;)&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;'get template package&#xA;&#x9;&#x9;dim templatePackage as EA.Package&#xA;&#x9;&#x9;set templatePackage = getTemplatePackage&#xA;&#x9;&#x9;'get the corresponding diagram&#xA;&#x9;&#x9;dim templateDiagram as EA.Diagram&#xA;&#x9;&#x9;set templateDiagram = getCorrespondingDiagram(currentDiagram, templatePackage)&#xA;&#x9;&#x9;if not templateDiagram is nothing then&#xA;&#x9;&#x9;&#x9;copyDiagramTemplate currentDiagram, templateDiagram&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;msgbox &quot;No template diagram found for this type of diagram: &quot; &amp; vbNewLine &amp; currentDiagram.Type &amp; &quot; - &quot; &amp; currentDiagram.MetaType _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;, vbExclamation, &quot;No template diagram found&quot;&#xA;&#x9;&#x9;end if &#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;'copy all elements from the template diagram to the current diagram&#xA;'depending on the type of element we make a duplicate or use a link to the same element (a bit like a smart copy)&#xA;function copyDiagramTemplate(currentDiagram, templateDiagram)&#xA;&#x9;'loop all diagramObjects&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;for each diagramObject in templateDiagram.DiagramObjects&#xA;&#x9;&#x9;dim element as EA.Element&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;select case element.Type&#xA;&#x9;&#x9;case &quot;Text&quot;, &quot;Note&quot;, &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;set element = duplicate(element, ownerPackage)&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;dim newDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;'add the element to the  diagram&#xA;&#x9;&#x9;set newDiagramObject = currentDiagram.DiagramObjects.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;'copy properties of the diagramobject&#xA;&#x9;&#x9;newDiagramObject.ElementID = element.ElementID&#xA;&#x9;&#x9;newDiagramObject.left = diagramObject.left&#xA;&#x9;&#x9;newDiagramObject.right = diagramObject.right&#xA;&#x9;&#x9;newDiagramObject.top = diagramObject.top&#xA;&#x9;&#x9;newDiagramObject.bottom = diagramObject.bottom&#xA;&#x9;&#x9;newDiagramObject.Style = diagramObject.Style&#xA;&#x9;&#x9;newDiagramObject.Sequence = diagramObject.Sequence&#xA;&#x9;&#x9;'save diagramObject&#xA;&#x9;&#x9;newDiagramObject.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function duplicate(original, ownerPackage)&#xA;'&#x9;dim original as EA.Element&#xA;'&#x9;dim ownerPackage as EA.Package&#xA;&#x9;dim newElement as EA.Element&#xA;&#x9;set newElement = ownerPackage.Elements.AddNew(original.Name, original.Type)&#xA;&#x9;'copy all features&#xA;&#x9;newElement.Notes= original.Notes&#xA;&#x9;newElement.StereotypeEx = original.StereotypeEx&#xA;&#x9;newElement.StyleEx = original.StyleEx&#xA;&#x9;newElement.Subtype = original.Subtype&#xA;&#x9;'save new element&#xA;&#x9;newElement.Update&#xA;&#x9;'return element&#xA;&#x9;set duplicate = newElement&#xA;end function&#xA;&#xA;function getCorrespondingDiagram(currentDiagram, templatePackage)&#xA;&#x9;'initialize at nothing&#xA;&#x9;set getCorrespondingDiagram = nothing&#xA;&#x9;'loop diagrams&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;for each diagram in templatePackage.Diagrams&#xA;&#x9;&#x9;'look for the first diagram with the same type and stereotype&#xA;&#x9;&#x9;if diagram.Type = currentDiagram.Type AND _&#xA;&#x9;&#x9;&#x9;diagram.Stereotype = currentDiagram.Stereotype and _&#xA;&#x9;&#x9;&#x9;diagram.MetaType = currentDiagram.MetaType then&#xA;&#x9;&#x9;&#x9;set getCorrespondingDiagram = diagram&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getTemplatePackage()&#xA;&#x9;'initialize at nothing&#xA;&#x9;set getTemplatePackage = nothing&#xA;&#x9;dim sqlGetPackageObject &#xA;&#x9;sqlGetPackageObject = &quot;select o.Object_ID from ((t_package p &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join usys_system syst on (syst.Property = 'TemplatePkg' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and syst.Value = p.Package_ID)) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_object o on o.ea_guid = p.ea_guid) &quot;&#xA;    dim packageObjectCollection&#xA;&#x9;set packageObjectCollection = Repository.GetElementSet(sqlGetPackageObject, 2)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dim packageObject as EA.Element&#xA;&#x9;dim templatePackage as EA.Package&#xA;&#x9;for each packageObject in packageObjectCollection&#xA;&#x9;&#x9;set templatePackage = Repository.GetPackageByGuid(packageObject.ElementGUID)&#xA;&#x9;&#x9;set getTemplatePackage = templatePackage&#xA;&#x9;&#x9;exit for&#xA;&#x9;next&#xA;end function&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="246"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF -Document generation"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="247"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{240EE6A9-EE9D-4BDE-9678-C46530487FB5}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Business Process Document Main&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project M\Metallo Modelling Standards]&#xA;'[group=Metallo Modelling Standards]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;'&#xA;' Script Name: Business Process Document Main&#xA;' Author: Geert Bellekens&#xA;' Purpose: Create the virtual document for the Business Process Document based on the selected Archimate Process&#xA;' Date: 2017-02-16&#xA;'&#xA;const outputName = &quot;Create Business Process Document&quot;&#xA;&#xA;sub createNewBusinessProcessDocument(businessProcessDocumentsPackageGUID, rootBusinessProcess)&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;'inform user we are starting&#xA;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; Starting Create Business Process Document&quot;  , 0&#xA;&#x9;'validate input&#xA;&#x9;if validateInput(rootBusinessProcess) then&#xA;&#x9;&#x9;'get the virtual documents package from the user&#xA;&#x9;&#x9;dim virtualDocumentPackage as EA.Package&#xA;&#x9;&#x9;set virtualDocumentPackage = getVirtualDocumentPackage(businessProcessDocumentsPackageGUID)&#xA;&#x9;&#x9;if not virtualDocumentPackage is nothing then&#xA;&#x9;&#x9;&#x9;'ask the user the language&#xA;&#x9;&#x9;&#x9;dim documentLanguage&#xA;&#x9;&#x9;&#x9;documentLanguage = getUserSelectedLanguage()&#xA;&#x9;&#x9;&#x9;if len(documentLanguage) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'we can now start the actual creation of the document&#xA;&#x9;&#x9;&#x9;&#x9;'try locking the Virtual Document package&#xA;&#x9;&#x9;&#x9;&#x9;if isRequireUserLockEnabled() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not virtualDocumentPackage.ApplyUserLock() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;msgbox &quot;Please apply user lock to the virtual document package&quot;,vbOKOnly+vbExclamation,&quot;Virtual Document Pakage not locked!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit sub&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;createBusinessProcessDocument virtualDocumentPackage, rootBusinessProcess, documentLanguage&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'Reload completely&#xA;&#x9;&#x9;Repository.RefreshModelView 0&#xA;&#x9;&#x9;'select the virtual document&#xA;&#x9;&#x9;Repository.ShowInProjectView(virtualDocumentPackage)&#xA;&#x9;end if&#xA;&#x9;'inform user the document is finished&#xA;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; Finished Create Business Process Document&quot;  , 0&#xA;end sub&#xA;&#xA;function getUserSelectedLanguage()&#xA;&#x9;dim messageBoxResult&#xA;&#x9;messageBoxResult = msgbox(&quot;Generate the document in English?&quot; &amp; vbNewline &amp; &quot;Press 'No' for Dutch&quot;,vbYesNoCancel+vbQuestion, &quot;Select Document Language&quot;)&#xA;&#x9;select case messageBoxResult&#xA;&#x9;&#x9;case vbYes&#xA;&#x9;&#x9;&#x9;getUserSelectedLanguage = &quot;EN&quot;&#xA;&#x9;&#x9;case vbNo&#xA;&#x9;&#x9;&#x9;getUserSelectedLanguage = &quot;NL&quot;&#xA;&#x9;&#x9;case vbCancel&#xA;&#x9;&#x9;&#x9;getUserSelectedLanguage = &quot;&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;'create the actual document&#xA;function createBusinessProcessDocument(virtualDocumentPackage,rootBusinessProcess,language)&#xA;&#x9;dim masterDocumentName,documentAlias,documentName,documentTitle,documentVersion,documentStatus&#xA;&#x9;documentVersion = rootBusinessProcess.Version&#xA;&#x9;documentName = rootBusinessProcess.Name&#xA;&#x9;documentAlias = &quot;Business Process Document&quot;&#xA;&#x9;documentTitle = documentName&#xA;&#x9;documentStatus = rootBusinessProcess.Status&#xA;&#x9;masterDocumentName = rootBusinessProcess.Name &amp; &quot; v.&quot; &amp; documentVersion &amp; &quot;_&quot; &amp; language&#xA;&#x9;'delete previous version if it exists&#xA;&#x9;deletePreviousVersion virtualDocumentPackage, masterDocumentName&#xA;&#x9;'create the master document&#xA;&#x9;dim virtualPackageGUID&#xA;&#x9;virtualPackageGUID = virtualDocumentPackage.PackageGUID&#xA;&#x9;dim masterDocument as EA.Package&#xA;&#x9;set masterDocument = addMasterDocumentWithDetailTags(virtualPackageGUID,masterDocumentName,documentAlias,documentName,documentTitle,documentVersion,documentStatus)&#xA;&#x9;'add the root business process to the document&#xA;&#x9;addE2EProcessToDocument masterDocument, rootBusinessProcess,language&#xA;end function &#xA;&#xA;function addE2EProcessToDocument(masterDocument, rootBusinessProcess, language)&#xA;&#x9;'set the counter&#xA;&#x9;dim i&#xA;&#x9;i = 0&#xA;&#x9;'start with the rootBusinessProcess BP_E2E Archimate Process_EN&#xA;&#x9;addModelDocument masterDocument, &quot;BP_E2E Archimate Process_&quot; &amp; language, rootBusinessProcess.Name &amp; &quot; Element&quot;, rootBusinessProcess.ElementGUID, i&#xA;&#x9;i = i + 1&#xA;&#x9;'get the composite diagram&#xA;&#x9;dim rootDiagram as EA.Diagram&#xA;&#x9;set rootDiagram = rootBusinessProcess.CompositeDiagram&#xA;&#x9;if not rootDiagram is nothing then&#xA;&#x9;&#x9;dim diagramToUse as EA.Diagram&#xA;&#x9;&#x9;set diagramToUse = rootDiagram&#xA;&#x9;&#x9;' case of NL then we should create the dutch diagram and add a section to the document&#xA;&#x9;&#x9;if language &lt;&gt; &quot;EN&quot; then&#xA;&#x9;&#x9;&#x9;dim dutchDiagram&#xA;&#x9;&#x9;&#x9;set dutchDiagram = createDutchDiagram(rootDiagram,masterDocument)&#xA;&#x9;&#x9;&#x9;if not dutchDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;set diagramToUse = dutchDiagram&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'actually add the diagram&#xA;&#x9;&#x9;addModelDocumentForDiagram masterDocument,diagramToUse, i, &quot;BP_PackageDiagram&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'get the Archimate Business Processes shown on the composite diagram&#xA;&#x9;&#x9;dim businessProcesses&#xA;&#x9;&#x9;dim sqlGetBusinessProcesses&#xA;&#x9;&#x9;sqlGetBusinessProcesses = &#x9;&quot;select act.Object_ID from (t_object act                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_diagramobjects do on do.Object_ID = act.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where do.Diagram_ID = &quot; &amp; rootDiagram.DiagramID &amp; &quot;             &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Object_Type = 'Activity'                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Stereotype = 'ArchiMate_BusinessProcess'                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by do.RectLeft, do.RectTop                                &quot;&#xA;&#x9;&#x9;set businessProcesses = getElementsFromQuery(sqlGetBusinessProcesses)&#xA;&#x9;&#x9;'loop the business processes and add them to the document&#xA;&#x9;&#x9;dim businessprocess as EA.Element&#xA;&#x9;&#x9;for each businessprocess in businessProcesses&#xA;&#x9;&#x9;&#x9;i = addBusinessProcessToDocument(masterDocument,businessprocess,i, language)&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function createDutchDiagram(diagram,masterDocument)&#xA;&#x9;dim dutchDiagram as EA.Diagram&#xA;&#x9;set dutchDiagram = nothing&#xA;&#x9;'get the diagram package&#xA;&#x9;dim NlDiagramPackage as EA.Package&#xA;&#x9;set NlDiagramPackage = getOrCreateDiagramPackage(masterDocument)&#xA;&#x9;'add a package for the diagram&#xA;&#x9;dim originalDiagramPackage as EA.Package&#xA;&#x9;set originalDiagramPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;dim diagrampackage&#xA;&#x9;set diagrampackage = NlDiagramPackage.Packages.AddNew(originalDiagramPackage.Name, &quot;&quot;)&#xA;&#x9;diagrampackage.Update&#xA;&#x9;'add a copy of the diagram with he &quot;use alias if available&quot; enabled&#xA;&#x9;'the only way to copy a diagram is to clone the package containing the diagram and then remove everything except for the diagram&#xA;&#x9;set dutchDiagram = copyDiagram(diagram, diagrampackage)&#xA;&#x9;'tell the user if it went wrong&#xA;&#x9;if dutchDiagram is nothing then&#xA;&#x9;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; ERROR: Failed to create Dutch diagram for '&quot; &amp; diagram &amp; &quot;'&quot;  , 0&#xA;&#x9;else&#xA;&#x9;&#x9;'set the &quot;use alias switch&#xA;&#x9;&#x9;if instr(dutchDiagram.ExtendedStyle, &quot;UseAlias=0&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;dutchDiagram.ExtendedStyle = replace(dutchDiagram.ExtendedStyle,&quot;UseAlias=0&quot;,&quot;UseAlias=1&quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;dutchDiagram.ExtendedStyle = dutchDiagram.ExtendedStyle &amp; &quot;UseAlias=1;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;dutchDiagram.Update&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set createDutchDiagram = dutchDiagram&#xA;end function&#xA;&#xA;&#xA;&#xA;function getOrCreateDiagramPackage(masterDocument)&#xA;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;'initialize at nothing&#xA;&#x9;set diagramPackage = nothing&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;'refresh the packages to make sure we don't create duplicates&#xA;&#x9;masterDocument.Packages.Refresh&#xA;&#x9;for each currentPackage in masterDocument.Packages&#xA;&#x9;&#x9;if currentPackage.Name = &quot;Diagrams_NL&quot; then&#xA;&#x9;&#x9;&#x9;set diagramPackage = currentPackage&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'check if diagramPackage was found, if not create it&#xA;&#x9;if diagramPackage is nothing then&#xA;&#x9;&#x9;set diagramPackage = masterDocument.Packages.AddNew(&quot;Diagrams_NL&quot;,&quot;&quot;)&#xA;&#x9;&#x9;diagramPackage.Update&#xA;&#x9;end if&#xA;&#x9;'return the diagramPackage&#xA;&#x9;set getOrCreateDiagramPackage = diagramPackage&#xA;end function&#xA;&#xA;function addBusinessProcessToDocument(masterDocument,businessprocess,i, language)&#xA;&#x9;'add the part for the element&#xA;&#x9;addModelDocument masterDocument, &quot;BP_Archimate Process_&quot; &amp; language, businessprocess.Name &amp; &quot; Element&quot;, businessprocess.ElementGUID, i&#xA;&#x9;i = i + 1&#xA;&#x9;'add the part for the diagram&#xA;&#x9;dim compositeDiagram as EA.Diagram&#xA;&#x9;set compositeDiagram = businessprocess.CompositeDiagram&#xA;&#x9;'Check if the language is Dutch. In that case we have to make a dutch version of the diagram and use that in the document&#xA;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;dim diagramToUse as EA.Diagram&#xA;&#x9;&#x9;set diagramToUse = compositeDiagram&#xA;&#x9;&#x9;' case of NL then we should create the dutch diagram and add a section to the document&#xA;&#x9;&#x9;if language &lt;&gt; &quot;EN&quot; then&#xA;&#x9;&#x9;&#x9;dim dutchDiagram&#xA;&#x9;&#x9;&#x9;set dutchDiagram = createDutchDiagram(compositeDiagram,masterDocument)&#xA;&#x9;&#x9;&#x9;if not dutchDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;set diagramToUse = dutchDiagram&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'actually add the diagram&#xA;&#x9;&#x9;addModelDocumentForDiagram masterDocument,diagramToUse, i, &quot;BP_PackageDiagram&quot;&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;'then add all the workprocesses on the diagram&#xA;&#x9;&#x9;dim workProcesses&#xA;&#x9;&#x9;dim sqlGetworkProcesses&#xA;&#x9;&#x9;sqlGetworkProcesses = &#x9;&quot;select act.Object_ID from (t_object act                         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_diagramobjects do on do.Object_ID = act.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where do.Diagram_ID = &quot; &amp; compositeDiagram.DiagramID &amp; &quot;        &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Object_Type = 'Activity'                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Stereotype = 'Activity'             &#x9;&#x9;&#x9;&#x9;      &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by do.RectLeft, do.RectTop                                &quot;&#xA;&#x9;&#x9;set workProcesses = getElementsFromQuery(sqlGetworkProcesses)&#xA;&#x9;&#x9;'loop the workprocesses and add them to the document&#xA;&#x9;&#x9;dim workProcess&#xA;&#x9;&#x9;for each workProcess in workProcesses&#xA;&#x9;&#x9;&#x9;i = addWorkProcessToDocument(masterDocument,workProcess,i,language)&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#x9;'return position&#xA;&#x9;addBusinessProcessToDocument = i&#xA;end function&#xA;&#xA;function addWorkProcessToDocument(masterDocument,workProcess,i,language)&#xA;&#x9;'add the part for the element&#xA;&#x9;addModelDocument masterDocument, &quot;BP_BPMN Process_&quot; &amp; language, workProcess.Name &amp; &quot; Element&quot;, workProcess.ElementGUID, i&#xA;&#x9;i = i + 1&#xA;&#x9;'add the part for the diagram&#xA;&#x9;dim compositeDiagram as EA.Diagram&#xA;&#x9;set compositeDiagram = workProcess.CompositeDiagram&#xA;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;' case of NL then we should create the dutch diagram and add a section to the document&#xA;&#x9;&#x9;dim diagramToUse as EA.Diagram&#xA;&#x9;&#x9;if language &lt;&gt; &quot;EN&quot; then&#xA;&#x9;&#x9;&#x9;dim dutchDiagram&#xA;&#x9;&#x9;&#x9;set dutchDiagram = createDutchDiagram(compositeDiagram,masterDocument)&#xA;&#x9;&#x9;&#x9;if not dutchDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;set diagramToUse = dutchDiagram&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;addModelDocumentForDiagram masterDocument,compositeDiagram, i, &quot;BP_WP Diagram Details_&quot; &amp; language&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;end if &#xA;&#x9;addWorkProcessToDocument = i&#xA;end function&#xA;&#xA;'Delete the previous version if it exists&#xA;function deletePreviousVersion(virtualDocumentPackage, masterDocumentName)&#xA;&#x9;dim i&#xA;&#x9;virtualDocumentPackage.Packages.Refresh&#xA;&#x9;for i = 0 to virtualDocumentPackage.Packages.Count -1&#xA;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;set currentPackage = virtualDocumentPackage.Packages.GetAt(i)&#xA;&#x9;&#x9;if currentPackage.Name =  masterDocumentName AND currentPackage.Element.Stereotype = &quot;master document&quot; then&#xA;&#x9;&#x9;&#x9;if currentPackage.ApplyUserLockRecursive(true, true, true) then&#xA;&#x9;&#x9;&#x9;&#x9;virtualDocumentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName,now() &amp; &quot; WARNING! Previous version of virtual document could not be deleted!&quot;  , currentPackage.Element.ElementID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getVirtualDocumentPackage(businessProcessDocumentsPackageGUID)&#xA;&#x9;msgbox &quot;Please select the package to create the virtual document in&quot;, vbOKOnly,&quot;Select Virtual Documents Package&quot;&#xA;&#x9;'let the user select the package but propose the given package if it exists&#xA;&#x9;dim virtualDocumentElementID &#xA;&#x9;virtualDocumentElementID = Repository.InvokeConstructPicker(&quot;IncludedTypes=Package;Selection=&quot; &amp; businessProcessDocumentsPackageGUID &amp; &quot;;&quot;)&#xA;&#x9;if virtualDocumentElementID &gt; 0 then&#xA;&#x9;&#x9;dim packageElement as EA.Element&#xA;&#x9;&#x9;set packageElement = Repository.GetElementByID(virtualDocumentElementID)&#xA;&#x9;&#x9;set getVirtualDocumentPackage = Repository.GetPackageByGuid(packageElement.ElementGUID)&#xA;&#x9;else&#xA;&#x9;&#x9;set getVirtualDocumentPackage = nothing&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function validateInput(rootBusinessProcess)&#xA;&#x9;'check the root business process&#xA;&#x9;dim rootProcessValid&#xA;&#x9;rootProcessValid = false&#xA;&#x9;if not rootBusinessProcess is nothing then&#xA;&#x9;&#x9;if rootBusinessProcess.ObjectType = otElement then&#xA;&#x9;&#x9;&#x9;if rootBusinessProcess.Type = &quot;Activity&quot; AND rootBusinessProcess.Stereotype = &quot;ArchiMate_BusinessProcess&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;rootProcessValid = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'inform the user in case the rootprocess is not valid&#xA;&#x9;if not rootProcessValid then&#xA;&#x9;&#x9;msgbox &quot;Please select an Archimate Business Process to start the document creation&quot;,vbOKOnly+vbExclamation,&quot;Invalid Element Selection!&quot;&#xA;&#x9;end if&#xA;&#x9;validateInput = rootProcessValid&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="248"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5D6B50CF-2E6D-43D4-8709-23DC0492AD8D}"/>
			<Column name="ScriptAuthor" value="{87E5FBC8-4435-4482-9EC7-AA3B1F170E46}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Business Process Document&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project M\Metallo Modelling Standards]&#xA;'[group=Metallo Modelling Standards]&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Business Process Document Main&#xA;'&#xA;' Script Name: Create Business Process Document&#xA;' Author: Geert Bellekens&#xA;' Purpose: Call the main function to create the virtual document for the Business Process Document based on the selected Archimate Process &#xA;' Date: 2017-02-16&#xA;'&#xA;&#xA;'update this value to correspond to the package where the virtual documents should be created&#xA;const businessProcessDocumentsPackageGUID = &quot;{6C6AFA41-B06C-4d65-B11C-1816EF5811CD}&quot;&#xA;&#xA;sub main&#xA;&#x9;'get the selected element&#xA;&#x9;dim rootBusinessProcess&#xA;&#x9;set rootBusinessProcess = Repository.GetContextObject()&#xA;&#x9;'call the main function&#xA;&#x9;createNewBusinessProcessDocument businessProcessDocumentsPackageGUID, rootBusinessProcess&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="249"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7988272E-62DE-4525-8C1B-CA4B63C2BC38}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DescriptionTranslated&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project M\Template fragments]&#xA;'[group=Template fragments]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;function MyPackageRtfData(packageID, tagname)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set package = Repository.GetPackageByID(packageID)&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;set element = Repository.GetElementByGuid(package.PackageGUID)&#xA;&#x9;&#x9;if not element is nothing then&#xA;&#x9;&#x9;&#x9;MyPackageRtfData = MyRtfData (element.ElementID, tagname)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;function MyRtfData (objectID, tagname)&#xA;&#x9;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9; &#xA;&#x9;dim xmlRow&#xA;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;set element = Repository.GetElementByID(objectID)&#xA;&#x9;&#xA;&#x9;dim formattedAttr &#xA;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;dim xmlDescription&#xA;&#x9;set xmlDescription = xmlDOM.createElement( &quot;Description&quot; )&#x9;&#xA;&#xA;&#x9;xmlDescription.text = getTagContent(element.Notes, tagname)&#xA;&#x9;xmlDescription.setAttributeNode(formattedAttr)&#xA;&#x9;xmlRow.appendChild xmlDescription&#xA;&#x9;&#x9;&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;'msgbox MyPackageRtfData(3357,&quot;&quot;)&#xA;function test&#xA;&#x9;dim outputString&#xA;&#x9;dim fileSystemObject&#xA;&#x9;dim outputFile&#xA;&#x9;&#xA;&#x9;outputString =  MyRtfData(6343, &quot;EN&quot;)&#xA;&#x9;&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;set outputFile = fileSystemObject.CreateTextFile( &quot;c:\\temp\\NLFRtest.xml&quot;, true )&#xA;&#x9;outputFile.Write outputString&#xA;&#x9;outputFile.Close&#xA;end function &#xA;&#xA;'test"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="250"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A1B2557F-66AB-4B4C-8944-11E09230C410}"/>
			<Column name="ScriptAuthor" value="{2A90462F-0F08-4DF7-A00E-E8DAB253722B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;WPActivitiesTranslated&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project M\Template fragments]&#xA;'[group=Template fragments]&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: WPActivitiesTranslated&#xA;' Author: Geert Bellekens&#xA;' Purpose: Returns the data needed for the template fragment WP Activities. &#xA;' It returns name and translated description for each activity on the diagram in the given package&#xA;' Date: &#xA;'&#xA;&#xA;function MyRtfData (packageID, tagname)&#xA;&#x9;&#xA;&#x9;dim xmlDOM &#xA;&#x9;set  xmlDOM = CreateObject( &quot;Microsoft.XMLDOM&quot; )&#xA;&#x9;'set  xmlDOM = CreateObject( &quot;MSXML2.DOMDocument.4.0&quot; )&#xA;&#x9;xmlDOM.validateOnParse = false&#xA;&#x9;xmlDOM.async = false&#xA;&#x9; &#xA;&#x9;dim node &#xA;&#x9;set node = xmlDOM.createProcessingInstruction( &quot;xml&quot;, &quot;version='1.0'&quot;)&#xA;    xmlDOM.appendChild node&#xA;'&#xA;&#x9;dim xmlRoot &#xA;&#x9;set xmlRoot = xmlDOM.createElement( &quot;EADATA&quot; )&#xA;&#x9;xmlDOM.appendChild xmlRoot&#xA;&#xA;&#x9;dim xmlDataSet&#xA;&#x9;set xmlDataSet = xmlDOM.createElement( &quot;Dataset_0&quot; )&#xA;&#x9;xmlRoot.appendChild xmlDataSet&#xA;&#x9; &#xA;&#x9;dim xmlData &#xA;&#x9;set xmlData = xmlDOM.createElement( &quot;Data&quot; )&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9;&#xA;&#x9;'create the rows for each Activity on the diagram&#xA;&#x9;createRows xmlDOM, xmlData, packageID, tagname&#xA;&#x9;&#xA;&#x9;MyRtfData = xmlDOM.xml&#xA;end function&#xA;&#xA;function createRows(xmlDOM, xmlData,packageID, tagname)&#xA;&#x9;'first get the activities we need&#xA;&#x9;dim activities&#xA;&#x9;dim sqlGetActivities&#xA;&#x9;sqlGetActivities = &#x9;&quot;select act.Object_ID from ((t_object act                         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_diagramobjects do on do.Object_ID = act.Object_ID) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; inner join t_diagram d on d.Diagram_ID = do.Diagram_ID)         &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where d.Package_ID = &quot; &amp; packageID &amp; &quot;                          &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Object_Type = 'Activity'                                &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and act.Stereotype = 'Activity'                                 &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by do.RectLeft, do.RectTop                                &quot;&#xA;&#x9;&#xA;&#x9;set activities = getElementsFromQuery(sqlGetActivities)&#xA;&#x9;'create row for each activity&#xA;&#x9;dim activity as EA.Element&#xA;&#x9;for each activity in activities&#xA;&#x9;&#x9;dim xmlRow&#xA;&#x9;&#x9;set xmlRow = xmlDOM.createElement( &quot;Row&quot; )&#xA;&#x9;&#x9;xmlData.appendChild xmlRow&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'name&#xA;&#x9;&#x9;dim xmlActivityName&#xA;&#x9;&#x9;set xmlActivityName = xmlDOM.createElement( &quot;ActivityName&quot; )&#xA;&#x9;&#x9;if tagname = &quot;EN&quot; then&#xA;&#x9;&#x9;&#x9;xmlActivityName.text = activity.Name&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if len(activity.Alias) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;xmlActivityName.text = activity.Alias&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;xmlActivityName.text = activity.Name&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;xmlRow.appendChild xmlActivityName&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'description&#xA;&#x9;&#x9;dim formattedAttr &#xA;&#x9;&#x9;set formattedAttr = xmlDOM.createAttribute(&quot;formatted&quot;)&#xA;&#x9;&#x9;formattedAttr.nodeValue=&quot;1&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;dim xmlDescription&#xA;&#x9;&#x9;set xmlDescription = xmlDOM.createElement( &quot;Description&quot; )&#x9;&#xA;&#xA;&#x9;&#x9;xmlDescription.text = getTagContent(activity.Notes, tagname)&#xA;&#x9;&#x9;'fall back to english if needed&#xA;&#x9;&#x9;if len(xmlDescription.text) = 0 then&#xA;&#x9;&#x9;&#x9;xmlDescription.text = getTagContent(activity.Notes, &quot;EN&quot;)&#xA;&#x9;&#x9;end if &#xA;&#x9;&#x9;'fall back to full description if needed&#xA;&#x9;&#x9;if len(xmlDescription.text) = 0 then&#xA;&#x9;&#x9;&#x9;xmlDescription.text = activity.Notes&#xA;&#x9;&#x9;end if &#xA;&#x9;&#x9;xmlDescription.setAttributeNode(formattedAttr)&#xA;&#x9;&#x9;xmlRow.appendChild xmlDescription&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;&#xA;end function&#xA;&#xA;'msgbox MyPackageRtfData(3357,&quot;&quot;)&#xA;function test&#xA;&#x9;dim outputString&#xA;&#x9;dim fileSystemObject&#xA;&#x9;dim outputFile&#xA;&#x9;&#xA;&#x9;outputString =  MyRtfData(598, &quot;EN&quot;)&#xA;&#x9;&#xA;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;set outputFile = fileSystemObject.CreateTextFile( &quot;c:\\temp\\NLFRtest.xml&quot;, true )&#xA;&#x9;outputFile.Write outputString&#xA;&#x9;outputFile.Close&#xA;end function &#xA;&#xA;test"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="251"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0DE0A8F8-C10E-4e5b-91C0-6525C38AB3C8}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; Populate Properties&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Scripts to populate element tagged values from user-defined. WIP &#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC TM Forum Scripts.Utility Scripts&#xA;&#xA;const CW_DATA_TYPE_LOOKUP1 = &quot;7&quot;&#xA;const CW_DATA_TYPE_LOOKUP2 = &quot;9&quot;&#xA;&#xA;dim metamodelPropertyList 'as Scripting.Dictionary&#xA;&#xA;populateElementProperties &quot;{528F1124-6C38-4822-86CF-8DECFFED8B36}&quot; ' Business Processes&#xA;'populateElementProperties &quot;{ED525874-1825-41a4-AD9E-3E97C73AF111}&quot; ' Process&#xA;'populateElementProperties &quot;{4001E562-BC3A-40db-9D8A-1619B1BE37F2}&quot; ' Metrics&#xA;'populateElementProperties &quot;{DB857CCA-C67C-4438-837F-4ADBF5262897}&quot; ' TAM&#xA;'populateElementProperties &quot;{CA3C3C3B-361A-46e6-9DC1-DB94AC483E00}&quot; ' Touchpoints&#xA;&#xA;sub populateElementProperties(topPackageGUID)&#xA;&#xA;&#x9;dim topPackage &#x9;&#x9;as EA.Package&#xA;&#xA;&#x9;set metamodelPropertyList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;Session.Output vbCRLF &amp; &quot;Populating Element tagged values from CW user-defined properties....&quot;&#xA;&#xA;&#x9;set topPackage = Repository.GetPackageByGuid(topPackageGUID)&#xA;&#xA;&#x9;updatePackageElements topPackage, 0&#xA;&#xA;&#x9;Session.Output vbCRLF &amp; &quot;Finished!&quot;&#xA;&#xA;end sub&#xA;&#xA;sub updatePackageElements( package, level)&#xA;&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim childPackage&#x9;as EA.Package&#xA;&#xA;&#x9;Session.Output String(level * 2, &quot;.&quot;) &amp; &quot;Package '&quot; &amp; package.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;level = level + 1&#xA;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;updateElement element, level&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;updatePackageElements childPackage, level&#xA;&#x9;next&#xA;&#xA;&#x9;level = level - 1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub updateElement( element, level)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim xmlString&#x9;   'as String&#xA;&#x9;dim xmlDoc&#x9;&#x9;   'as XMLDOM&#xA;&#x9;dim nodeList&#x9;   'as XMLNodeList&#xA;&#x9;dim propNode&#x9;   'as XMLNode&#xA;&#x9;dim propName&#x9;   'as String&#xA;&#x9;dim propValue&#x9;   'as String&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;&#xA;&#x9;set taggedValue = element.TaggedValues.GetByName(&quot;USERDEFINED&quot;)&#xA;&#x9;&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;Session.Output String(level * 2, &quot;.&quot;) &amp; &quot;&lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; &quot; &amp; element.Name &amp; &quot; [&quot; &amp; element.Type &amp; &quot;] - No USERDEFINED properties; Skipping...&quot;&#xA;&#x9;else&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String(level * 2, &quot;.&quot;) &amp; element.Name &amp; &quot; element - Processing USERDEFINED properties...&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;xmlString = taggedValue.Notes&#xA;&#xA;&#x9;&#x9;set xmlDoc = CreateObject( &quot;Microsoft.XMLDOM&quot;)&#xA;&#xA;&#x9;&#x9;xmlDoc.Async = false&#xA;&#x9;&#x9;xmlDoc.LoadXML xmlString&#xA;&#xA;&#x9;&#x9;set nodeList = xmlDoc.SelectNodes(&quot;//property&quot;)&#xA;&#xA;&#x9;&#x9;for each propNode in nodeList&#xA;&#xA;&#x9;&#x9;&#x9;propName = propNode.GetAttribute( &quot;scriptname&quot;)&#xA;&#x9;&#x9;&#x9;propValue = propNode.Text&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setElementPropertyValue element, propName, propValue&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;level = level + 1&#xA;&#xA;&#x9;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;&#x9;updateElement childElement, level&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;level = level - 1&#xA;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub setElementPropertyValue( element, propName, propValue)&#xA;&#xA;&#x9;dim propList&#x9;&#x9;   'as Dictionary&#xA;&#x9;dim dataType&#x9;&#x9;   'as String&#xA;&#x9;dim classProp  &#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim lookupValueElement&#x9;as EA.Element&#xA;&#xA;&#x9;set propList = getMetamodelPropertyList( element.Stereotype)&#xA;&#x9;&#xA;&#x9;if propList.Exists( propName) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set classProp = propList.Item( propName)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dataType = getElementTaggedValueValue( classProp, &quot;PPT_DATA_TYPE&quot;)&#xA;&#xA;&#x9;&#x9;if dataType = CW_DATA_TYPE_LOOKUP1 or dataType = CW_DATA_TYPE_LOOKUP2 then&#xA;&#xA;&#x9;&#x9;&#x9;set lookupValueElement = lookupElementTaggedValue( &quot;LU_ID&quot;, propValue, &quot;lookupValue&quot;, &quot;Part&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;propValue = lookupValueElement.Name&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;setElementTaggedValueValue element, classProp.Name, propValue&#xA;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Output &quot;***ERROR*** No metamodel class mapping property found for '&quot; &amp; propName &amp; &quot;'&quot;&#xA;&#x9;end if&#x9;&#xA;&#x9;&#xA;end sub&#xA;&#xA;function getMetamodelPropertyList( stereotype)&#xA;&#xA;&#x9;dim metamodelClassName 'as String&#xA;&#x9;dim metamodelElement&#x9;as EA.Element&#xA;&#x9;dim propList&#x9;&#x9;   'as Scripting.Dictionary&#xA;&#x9;dim classProp&#x9;&#x9;   'as String&#xA;&#x9;dim propName&#x9;&#x9;   'as String&#xA;&#x9;&#xA;&#x9;select case stereotype&#xA;&#x9;&#x9;case &quot;TMF_Application&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Application&quot;&#xA;&#x9;&#x9;case &quot;TMF_Function&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Function&quot;&#xA;&#x9;&#x9;case &quot;TMF_Domain&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Domain&quot;&#xA;&#x9;&#x9;case &quot;ArchiMate_BusinessInteraction&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Business Scenario&quot;&#xA;&#x9;&#x9;case &quot;TMF_Metric&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Metric&quot;&#xA;&#x9;&#x9;case &quot;TMF_BusinessProcess&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Process&quot;&#xA;&#x9;&#x9;case &quot;ArchiMate_BusinessService&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Frameworx Touchpoint&quot;&#xA;&#x9;&#x9;case &quot;ArchiMate_BusinessProcess&quot;&#xA;&#x9;&#x9;&#x9;metamodelClassName = &quot;Process&quot; &#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;metamodelClassName = vbNullString&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if metamodelClassName = vbNullString then&#xA;&#x9;&#x9;Session.Output &quot;***ERROR*** No metamodel class mapping for stereotype '&quot; &amp; stereotype &amp; &quot;'&quot;&#xA;&#x9;&#x9;set propList = nothing&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;if metamodelPropertyList.Exists( stereotype) then&#xA;&#x9;&#x9;&#x9;set propList = metamodelPropertyList.Item( stereotype)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Building property list for '&quot; &amp; stereotype &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set metamodelElement = lookupElementName( metamodelClassName, vbNullString, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set propList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each classProp in metamodelElement.Elements&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;propName = getElementTaggedValueValue( classProp, &quot;PPT_SCRPT_NAME&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if propName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;propList.Add propName, classProp&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;metamodelPropertyList.Add stereotype, propList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;set getMetamodelPropertyList = propList&#xA;&#x9;&#xA;end function&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="252"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{5F19D88C-1CF6-4350-AAB7-6788F152F66D}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="BIZBOK Report Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="253"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3C3356F9-26C0-44bc-9E4C-76C7C9032C7C}"/>
			<Column name="ScriptAuthor" value="{5F19D88C-1CF6-4350-AAB7-6788F152F66D}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Value Stream Report&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     Value Stream → Stage List XML&#xA;' Author:          Giu Platania&#xA;' Purpose:         Build an XML (rows/columns) of all &quot;Value Stream Stage&quot; elements under a Value Stream,&#xA;'                  ordered by TreePos (then uniquely keyed), including basic details and related Value Items.&#xA;' Date:            2025-08-28&#xA;' Version:         1.1&#xA;' Notes:&#xA;'   • Robust against duplicate SortedList keys (TreePos/Name collisions) by appending ElementID.&#xA;'   • Defensive initialization of xmlDoc/xmlData in case the included library does not set them.&#xA;'   • Verbose logging to Script window for troubleshooting.&#xA;'   • Preserves and uses existing helper functions assumed from includes: createXMLDocument, addColumn,&#xA;'     getTaggedValueValue, getRelatedElementList (from your utility libs).&#xA;'   • Returns a well‑formed XML string.&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Report Scripts.Report Script Library&#xA;&#xA;'===========================&#xA;' Globals for XML document&#xA;'===========================&#xA;Dim xmlDoc         ' Microsoft.XMLDOM.XMLDocument (late-bound)&#xA;Dim xmlData        ' Microsoft.XMLDOM.XMLNode (late-bound) – points to &lt;Data&gt; container&#xA;&#xA;'===========================&#xA;' Logging helpers&#xA;'===========================&#xA;Private Sub EnsureOutput()&#xA;    On Error Resume Next&#xA;    Repository.EnsureOutputVisible &quot;Script&quot;&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;Private Sub LOG(msg)&#xA;    On Error Resume Next&#xA;    Session.Output CStr(Now) &amp; &quot;: &quot; &amp; msg&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;'=========================================&#xA;' Safe XML bootstrap (if include doesn’t do it)&#xA;'=========================================&#xA;Private Sub EnsureXmlBootstrapped()&#xA;    On Error Resume Next&#xA;    If (xmlDoc Is Nothing) Then&#xA;        Set xmlDoc = CreateObject(&quot;MSXML2.DOMDocument.6.0&quot;)&#xA;        xmlDoc.appendChild xmlDoc.createProcessingInstruction(&quot;xml&quot;, &quot;version='1.0' encoding='utf-8'&quot;)&#xA;        Dim root, data&#xA;        Set root = xmlDoc.createElement(&quot;Rows&quot;)&#xA;        xmlDoc.appendChild root&#xA;        Set data = xmlDoc.createElement(&quot;Data&quot;)&#xA;        root.appendChild data&#xA;        Set xmlData = data&#xA;        LOG &quot;XML bootstrapped locally (&lt;Rows&gt;&lt;Data/&gt;).&quot;&#xA;    ElseIf (xmlData Is Nothing) Then&#xA;        Dim root2&#xA;        Set root2 = xmlDoc.documentElement&#xA;        If Not root2 Is Nothing Then&#xA;            Set xmlData = xmlDoc.createElement(&quot;Data&quot;)&#xA;            root2.appendChild xmlData&#xA;            LOG &quot;xmlData initialized onto existing xmlDoc root.&quot;&#xA;        Else&#xA;            ' Fallback: rebuild minimal structure&#xA;            Set xmlDoc = Nothing&#xA;            EnsureXmlBootstrapped&#xA;        End If&#xA;    End If&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;'=========================================&#xA;' Main entry: build XML for a Value Stream’s stages&#xA;'=========================================&#xA;Public Function getValueStreamStageList(valueStreamID)&#xA;    Dim valueStream    ' As EA.Element&#xA;    Dim elementList    ' As System.Collections.SortedList (late-bound)&#xA;    Dim streamStage    ' As EA.Element&#xA;    Dim elementIndex   ' As Integer&#xA;    Dim elementKey     ' Variant (TreePos or Name)&#xA;&#xA;    EnsureOutput&#xA;    LOG &quot;getValueStreamStageList: start (ValueStreamID=&quot; &amp; valueStreamID &amp; &quot;)&quot;&#xA;&#xA;    ' Resolve the Value Stream element&#xA;    Set valueStream = Repository.GetElementByID(valueStreamID)&#xA;    If valueStream Is Nothing Then&#xA;        LOG &quot;ERROR: Element not found for ID=&quot; &amp; valueStreamID&#xA;        getValueStreamStageList = &quot;&quot;&#xA;        Exit Function&#xA;    End If&#xA;&#xA;    ' Prepare XML document (prefer library routine, then ensure locally)&#xA;    On Error Resume Next&#xA;    createXMLDocument ' From included library – expected to assign xmlDoc and xmlData&#xA;    On Error GoTo 0&#xA;    EnsureXmlBootstrapped&#xA;&#xA;    ' Sorted list to maintain order by TreePos/Name with stable uniqueness&#xA;    Set elementList = CreateObject(&quot;System.Collections.Sortedlist&quot;)&#xA;&#xA;    ' Collect stages&#xA;    For Each streamStage In valueStream.Elements&#xA;        If streamStage.Stereotype = &quot;Value Stream Stage&quot; Then&#xA;            elementKey = streamStage.TreePos&#xA;            If (CLng(0) = 0) Then ' dummy statement to satisfy Option Explicit with CLng usage&#xA;            End If&#xA;            If (elementKey = 0) Then elementKey = streamStage.Name&#xA;&#xA;            ' Add with duplicate-key resilience (SortedList.Add throws on duplicates)&#xA;            Dim added&#xA;            added = False&#xA;            On Error Resume Next&#xA;            elementList.Add elementKey, streamStage&#xA;            If Err.Number &lt;&gt; 0 Then&#xA;                ' Likely duplicate key – append ElementID to ensure uniqueness while preserving ordering intent&#xA;                Err.Clear&#xA;                elementKey = CStr(elementKey) &amp; &quot;_&quot; &amp; CStr(streamStage.ElementID)&#xA;                elementList.Add elementKey, streamStage&#xA;            End If&#xA;            If Err.Number = 0 Then added = True&#xA;            On Error GoTo 0&#xA;&#xA;            If added Then&#xA;                LOG &quot; + Stage queued: key=&quot; &amp; elementKey &amp; &quot; | Name=&quot; &amp; streamStage.Name &amp; &quot; | TreePos=&quot; &amp; streamStage.TreePos&#xA;            Else&#xA;                LOG &quot; ! WARNING: Failed to queue stage: Name=&quot; &amp; streamStage.Name&#xA;            End If&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Emit rows to XML in sorted order&#xA;    For elementIndex = 0 To elementList.Count - 1&#xA;        Set streamStage = elementList.GetByIndex(elementIndex)&#xA;        addDetailRow streamStage&#xA;    Next&#xA;&#xA;    getValueStreamStageList = xmlDoc.XML&#xA;    LOG &quot;getValueStreamStageList: end (Rows=&quot; &amp; elementList.Count &amp; &quot;)&quot;&#xA;End Function&#xA;&#xA;'=========================================&#xA;' Append one Row with the stage’s details&#xA;'=========================================&#xA;Private Sub addDetailRow(element)&#xA;    Dim xmlRow ' As Microsoft.XMLDOM.IXMLDOMNode&#xA;    Set xmlRow = xmlDoc.createElement(&quot;Row&quot;)&#xA;    xmlData.appendChild xmlRow&#xA;&#xA;    addColumn xmlRow, &quot;Name&quot;, Nz(element.Name), False&#xA;    addColumn xmlRow, &quot;Notes&quot;, Nz(element.Notes), True&#xA;    addColumn xmlRow, &quot;EntranceCriteria&quot;, Nz(getTaggedValueValue(element, &quot;Entrance Criteria&quot;)), False&#xA;    addColumn xmlRow, &quot;ExitCriteria&quot;, Nz(getTaggedValueValue(element, &quot;Exit Criteria&quot;)), False&#xA;    addColumn xmlRow, &quot;ValueItemList&quot;, Nz(getValueItemList(element)), False&#xA;End Sub&#xA;&#xA;'=========================================&#xA;' Build a CRLF-delimited list of related Value Items (by offers association)&#xA;'=========================================&#xA;Private Function getValueItemList(element)&#xA;    Dim dict ' As Scripting.Dictionary&#xA;    Dim relatedElement ' As EA.Element&#xA;    Dim nameList ' As String&#xA;&#xA;    Set dict = getRelatedElementList(element, &quot;Association&quot;, &quot;offers&quot;, &quot;Class&quot;, &quot;Value Item&quot;)&#xA;&#xA;    nameList = vbNullString&#xA;    If Not dict Is Nothing Then&#xA;        For Each relatedElement In dict.Items&#xA;            If nameList &lt;&gt; vbNullString Then nameList = nameList &amp; vbCrLf&#xA;            nameList = nameList &amp; Nz(relatedElement.Name)&#xA;        Next&#xA;    End If&#xA;&#xA;    getValueItemList = nameList&#xA;End Function&#xA;&#xA;'=========================================&#xA;' Simple Null/Empty helper (returns empty string for Null/Empty)&#xA;'=========================================&#xA;Private Function Nz(val)&#xA;    If IsObject(val) Then&#xA;        If val Is Nothing Then Nz = &quot;&quot; Else Nz = val&#xA;    Else&#xA;        If IsNull(val) Or IsEmpty(val) Then Nz = &quot;&quot; Else Nz = val&#xA;    End If&#xA;End Function&#xA;&#xA;'=========================================&#xA;' Quick test harness (leave commented in production)&#xA;'=========================================&#xA;'Private Sub test()&#xA;'    EnsureOutput&#xA;'    Session.Output getValueStreamStageList(404)&#xA;'End Sub&#xA;' 'test()&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="254"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CC62AC2B-9C36-40a7-A1F2-71358BD27C61}"/>
			<Column name="ScriptAuthor" value="{5F19D88C-1CF6-4350-AAB7-6788F152F66D}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Report Script Library&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'' Moved to Model Management Utilities&#xA;&#xA;function getTaggedValueValue( element, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue &#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueValue   'as String&#xA;&#x9;&#xA;&#x9;set taggedValue = element.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;taggedValueValue = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;taggedValueValue = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;getTaggedValueValue = taggedValueValue&#xA;&#x9;&#xA;end function&#xA;&#xA;function getRelatedElement( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#xA;&#x9;&#xA;&#x9;set relatedElementList = getRelatedElementList( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getRelatedElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;function getSortedRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;System.Collections.SortedList&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.Name, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSortedRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;sub addColumn( xmlRow, name, text, formatted)&#xA;&#xA;&#x9;dim xmlColumn 'as Microsoft.XMLDOM.XMLNode&#xA;&#x9;dim xmlAttr   'as Microsoft.XMLDOM.XMLAttribute&#xA;&#x9;&#xA;&#x9;set xmlColumn = xmlDoc.createElement( name)&#xA;&#x9;xmlColumn.Text = text&#xA;&#x9;&#xA;&#x9;if formatted then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set xmlAttr = xmlDoc.CreateAttribute( &quot;formatted&quot;)&#xA;&#x9;&#x9;xmlAttr.Value = &quot;1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;xmlColumn.Attributes.SetNamedItem xmlAttr&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;xmlRow.appendChild xmlColumn&#xA;&#xA;end sub&#xA;&#xA;function createXMLDocument()&#xA;&#xA;&#x9;dim xmlProc &#x9;'as Microsoft.XMLDOM.XMLNode&#xA;&#x9;dim xmlRoot&#x9;&#x9;'as Microsoft.XMLDOM.XMLNode&#xA;&#x9;dim xmlDataset&#x9;'as Microsoft.XMLDOM.XMLNode &#xA;&#x9;&#xA;&#x9;set xmlDoc = CreateObject( &quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;&#xA;&#x9;xmlDoc.validateOnParse = false&#xA;&#x9;xmlDoc.async = false&#xA;&#x9;&#xA;&#x9;set xmlProc = xmlDoc.createProcessingInstruction(&quot;xml&quot;, &quot;version='1.0' encoding='ISO-8859-1'&quot;)&#xA;&#x9;xmlDoc.appendChild xmlProc&#xA;&#x9;&#xA;&#x9;set xmlRoot = xmlDoc.createElement( &quot;EADATA&quot;)&#xA;&#x9;xmlDoc.appendChild xmlRoot&#xA;&#x9;&#xA;&#x9;set xmlDataset = xmlDoc.createElement( &quot;Dataset_0&quot;)&#xA;&#x9;xmlRoot.appendChild xmlDataset&#xA;&#x9;&#xA;&#x9;set xmlData = xmlDoc.createElement( &quot;Data&quot;)&#xA;&#x9;xmlDataSet.appendChild xmlData&#xA;&#x9;&#xA;&#x9;set createXMLDocument = xmlDoc&#xA;&#x9;&#xA;end function&#xA;&#xA;function getOwnedElementNameList( element, ownedMetatypeList)&#xA;&#xA;&#x9;dim ownedElement &#x9;as EA.Element&#xA;&#x9;dim nameList&#x9;   'as String&#xA;&#x9;dim typeID&#x9;&#x9;   'as Integer&#xA;&#x9;dim typeElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementName&#x9;   'as String&#xA;&#x9;dim objectState&#x9;   'as String&#xA;&#x9;&#xA;&#x9;nameList = vbNullString&#xA;&#x9;&#xA;&#x9;if ownedMetatypeList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;ownedMetatypeList = ownedMetatypeList &amp; &quot;,&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each ownedElement in element.EmbeddedElements&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if InStr( ownedMetatypeList, ownedElement.MetaType &amp; &quot;,&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;typeID = ownedElement.PropertyType&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;typeID = ownedElement.ClassfierID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;elementName = ownedElement.Name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set typeElement = Repository.GetElementByID( typeID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementName = typeElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if nameList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; vbCRLF&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;nameList = nameList &amp; elementName&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectState = getCustomPropertyValue( ownedElement, &quot;objectState&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectState &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; &quot; [&quot; &amp; objectState &amp; &quot;]&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;getOwnedElementNameList = nameList&#xA;&#xA;end function&#xA;&#xA;function getCustomPropertyValue( ownedElement, propertyName)&#xA;&#xA;&#x9;dim customProperty as EA._CustomProperty&#xA;&#x9;dim propertyValue 'as String&#xA;&#x9;&#xA;&#x9;propertyValue = vbNullString&#xA;&#x9;&#xA;&#x9;for each customProperty in ownedElement.CustomProperties&#xA;&#x9;&#xA;&#x9;&#x9;if customProperty.Name = propertyName then&#xA;&#x9;&#x9;&#x9;propertyValue = customProperty.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;getCustomPropertyValue = propertyValue&#xA;&#x9;&#xA;end function&#xA;&#xA;function getAncestorPackage( element, ancestorPackageLevel)&#xA;&#xA;&#x9;dim packageLevel&#x9;   'as Integer&#xA;&#x9;dim packageID&#x9;&#x9;   'as Integer&#xA;&#x9;dim package&#x9;&#x9;&#x9;&#x9;as EA.Package&#xA;&#xA;&#x9;packageID = element.PackageID&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;&#xA;&#x9;for packageLevel = 2 to ancestorPackageLevel&#xA;&#x9;&#xA;&#x9;&#x9;packageID = package.ParentID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if packageID = 0 then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set getAncestorPackage = package&#xA;&#x9;&#xA;end function&#xA;&#xA;function getChildElementList( parentElement, childStereotype)&#xA;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;for each childElement in parentElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = childStereotype then&#xA;&#x9;&#x9;&#x9;childElementList.Add childElement.ElementGUID, childElement&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildElementList = childElementList&#x9;&#xA;end function&#xA;&#xA;function getChildDiagram( parentElement, childDiagramName)&#xA;&#xA;&#x9;dim childDiagram &#x9;as EA.Diagram&#xA;&#x9;dim foundDiagram&#x9;as EA.Diagram&#xA;&#x9;&#xA;&#x9;set foundDiagram = nothing&#xA;&#x9;&#xA;&#x9;for each childDiagram in parentElement.Diagrams&#x9;&#xA;&#x9;&#x9;if childDiagram.Name = childDiagramName then&#xA;&#x9;&#x9;&#x9;set foundDiagram = childDiagram&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildDiagram = foundDiagram&#xA;&#x9;&#xA;end function&#xA;&#xA;function createChildInstance( parentElement, childClassifier, childStereotype)&#xA;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim foundInstance &#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set foundInstance = nothing&#xA;&#x9;&#xA;&#x9;for each childElement in parentElement.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if childElement.ClassifierID = childClassifier.ElementID then&#xA;&#x9;&#x9;&#x9;set foundInstance = childElement&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if foundInstance is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;set foundInstance = parentElement.Elements.AddNew( &quot;&quot;, &quot;Object&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;foundInstance.Stereotype = childStereotype&#xA;&#x9;&#x9;foundInstance.ClassifierID = childClassifier.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;foundInstance.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;parentElement.Elements.Refresh&#xA;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;set createChildInstance = foundInstance&#xA;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="256"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FF16BF15-A780-4f3a-8613-181857C3539B}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Biz -Create Value Stream Stage Capability Cross-Map Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to automatically build a Value Stream Stage to Capability cross-map diagram. WIP&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Report Scripts.Report Script Library&#xA;&#xA;const HORIZ_PADDING = 40&#xA;const VERT_PADDING = 20&#xA;const DIAGRAM_LEFT_OFFSET = 40&#xA;const DIAGRAM_VERT_OFFSET = 10&#xA;const ELEMENT_WIDTH = 100&#xA;const ELEMENT_HEIGHT = 50&#xA;&#xA;const vbYesNo = 4&#xA;const vbYes = 6&#xA;&#x9;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;if treeSelectedType = otElement then&#xA;&#x9;&#xA;&#x9;&#x9;dim valueStream as EA.Element&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set valueStream = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if valueStream.Stereotype = &quot;Value Stream&quot; then&#xA;&#x9;&#x9;&#x9;createCapabilityCrossMap valueStream&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Must select a Value Stream element for this script.&quot;, promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Must select a Value Stream element for this script.&quot;, promptOK&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub createCapabilityCrossMap( valueStream)&#xA;&#xA;&#x9;dim diagramName&#x9; &#x9;   'as String&#xA;&#x9;dim diagram &#x9;&#x9;&#x9;as EA.Diagram&#xA;&#x9;dim overwriteDiagram   'as Boolean&#xA;&#x9;&#xA;&#x9;diagramName = valueStream.Name &amp; &quot; - Capability Cross-Map&quot;&#xA;&#x9;&#xA;&#x9;diagramName = InputBox( &quot;Enter diagram name:&quot;, &quot;Create Capability Cross-Map&quot;, diagramName)&#xA;&#x9;&#xA;&#x9;if diagramName &lt;&gt; &quot;&quot; then&#xA;&#x9;&#xA;&#x9;&#x9;set diagram = getChildDiagram( valueStream, diagramName)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if diagram is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Creating capability cross-map diagram...&quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set diagram = valueStream.Diagrams.AddNew( diagramName, &quot;Object&quot;)&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;diagram.StyleEx = diagram.StyleEx &amp; &quot;MDGDgm=BIZBOK Value Mapping Diagrams::Value Cross Mapping;&quot;&#xA;&#xA;&#x9;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;updateCapabilityCrossMapDiagram diagram, valueStream, diagramName&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;overwriteDiagram = MsgBox( &quot;Diagram already exists. Overwrite?&quot;, vbYesNo)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if overwriteDiagram = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;deleteDiagramObjects diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;updateCapabilityCrossMapDiagram diagram, valueStream, diagramName&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub deleteDiagramObjects( diagram)&#xA;&#xA;&#x9;dim diagramObject&#x9;as EA.DiagramObject&#xA;&#x9;dim objectCount    'as Integer&#xA;&#x9;dim objectIndex&#x9;   'as Integer&#xA;&#x9;&#xA;&#x9;objectCount = diagram.DiagramObjects.Count&#xA;&#x9;&#xA;&#x9;for objectIndex = objectCount - 1 to 0 step -1&#xA;&#x9;&#x9;diagram.DiagramObjects.Delete( objectIndex)&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;diagram.Update&#xA;&#x9;&#xA;end sub&#xA;&#x9;&#xA;sub updateCapabilityCrossMapDiagram( diagram, valueStream, diagramName)&#xA;&#xA;&#x9;Repository.OpenDiagram(diagram.DiagramID)&#xA;&#xA;&#x9;addValueStreamStages valueStream, diagram&#xA;&#x9;&#xA;&#x9;valueStream.Diagrams.Refresh&#xA;&#x9;&#xA;&#x9;Repository.RefreshModelView( valueStream.PackageID)&#xA;&#x9;&#xA;&#x9;Repository.SaveDiagram(diagram.diagramID)&#xA;&#xA;&#x9;Repository.ReloadDiagram(diagram.DiagramID)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Finished!&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub addValueStreamStages( valueStream, diagram)&#xA;&#xA;&#x9;dim stageList&#x9;   'as List&#xA;&#x9;dim stage&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim diagramObject&#x9;as EA.DiagramObject&#xA;&#x9;dim leftPos&#x9;&#x9;   'as Integer&#xA;&#x9;dim left&#x9;&#x9;   'as Integer&#xA;&#x9;dim right&#x9;&#x9;   'as Integer&#xA;&#x9;dim top&#x9;&#x9;&#x9;   'as Integer&#xA;&#x9;dim bottom&#x9;&#x9;   'as Integer&#xA;&#x9;&#xA;&#x9;set stageList = getChildElementList( valueStream, &quot;Value Stream Stage&quot;)&#xA;&#x9;&#xA;&#x9;leftPos = DIAGRAM_LEFT_OFFSET&#xA;&#x9;&#xA;&#x9;for each stage in stageList.Items&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Adding &quot; &amp; stage.Name&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;left = leftPos&#xA;&#x9;&#x9;right = leftPos + ELEMENT_WIDTH&#xA;&#x9;&#x9;top = DIAGRAM_VERT_OFFSET&#xA;&#x9;&#x9;bottom = DIAGRAM_VERT_OFFSET + ELEMENT_HEIGHT&#xA;&#x9;&#xA;&#x9;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; right &amp; &quot;;t=&quot; &amp; top &amp; &quot;;b=&quot; &amp; bottom, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramObject.ElementID = stage.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.ReloadDiagram(diagram.DiagramID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;addCapabilityInstances diagram, stage, leftPos, bottom&#xA;&#xA;&#x9;&#x9;leftPos = right + HORIZ_PADDING&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub addCapabilityInstances( diagram, stage, parentLeft, parentBottom)&#xA;&#xA;&#x9;dim capabilityList&#x9;   'as System.Collections.Sortedlist&#xA;&#x9;dim capability &#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim capabilityInstance &#x9;as EA.Element&#xA;&#x9;dim diagramObject&#x9;&#x9;as EA.DiagramObject&#xA;&#x9;dim bottomPos&#x9;&#x9;   'as Integer&#xA;&#x9;dim index&#x9;&#x9;&#x9;   'as Integer&#xA;&#x9;dim left&#x9;&#x9;&#x9;   'as Integer&#xA;&#x9;dim right&#x9;&#x9;&#x9;   'as Integer&#xA;&#x9;dim top&#x9;&#x9;&#x9;&#x9;   'as Integer&#xA;&#x9;dim bottom&#x9;&#x9;&#x9;   'as Integer&#xA;&#x9;&#xA;&#x9;set capabilityList = getSortedRelatedElementList( stage, &quot;Association&quot;, &quot;enables&quot;, &quot;Class&quot;, &quot;Capability&quot;)&#xA;&#x9;&#xA;&#x9;bottomPos = parentBottom&#xA;&#xA;&#x9;for index = 0 to capabilityList.Count - 1&#xA;&#x9;&#xA;&#x9;&#x9;set capability = capabilityList.GetByIndex( index)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set capabilityInstance = createChildInstance( stage, capability, &quot;Capability Instance&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;left = parentLeft&#xA;&#x9;&#x9;right = parentLeft + ELEMENT_WIDTH&#xA;&#x9;&#x9;top = bottomPos + DIAGRAM_VERT_OFFSET&#xA;&#x9;&#x9;bottom = bottomPos + DIAGRAM_VERT_OFFSET + ELEMENT_HEIGHT&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;- Adding &quot; &amp; capability.Name&#xA;'&#x9;&#x9;Session.Output &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; right &amp; &quot;;t=&quot; &amp; top &amp; &quot;;b=&quot; &amp; bottom&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; right &amp; &quot;;t=&quot; &amp; top &amp; &quot;;b=&quot; &amp; bottom, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramObject.ElementID = capabilityInstance.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.ReloadDiagram(diagram.DiagramID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;bottomPos = bottom&#xA;&#x9;&#x9;&#xA;'&#x9;&#x9;Session.Output &quot;bottomPos=&quot; &amp; bottomPos&#xA;&#x9;&#x9;&#xA;&#x9;next &#xA;&#x9;&#xA;end sub&#xA;&#xA;sub runTest&#xA;&#xA;&#x9;dim valueStream as EA.Element&#xA;&#x9;&#xA;&#x9;set valueStream = Repository.GetElementByGuid( &quot;{7B1A45DF-84A8-4952-A140-EBFD1A885C19}&quot;)&#xA;&#x9;&#xA;&#x9;createCapabilityCrossMap valueStream&#xA;&#x9;&#xA;end sub&#xA;&#xA;'runTest&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="257"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{40416E36-7C16-4b5e-86AA-4685EE697315}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="BIZBOK Diagram Utility Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="258"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9A8485DC-1605-4bc4-974E-6A960AF05B9C}"/>
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Nested Hierarchy Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="&#xA;' v1.5: 20220610: 1. Updated to allow for different metatypes at different levels (with new HierarchyLevel.elementMetatype property).&#xA;'&#x9;&#x9;&#x9;&#x9;  2. Updated to allow specifying object dimenisions at different levels (with new HierarchyLevel properties).&#xA;'                 3. Added new base parameter to specify diagram type (instead of always defaulting to &quot;Package&quot;).&#xA;'&#x9;&#x9;&#x9;&#x9;  4. Added new base parameter to sepcify whether diagram should be open while building. Diagrams are created&#xA;'                    more quickly if they are not opened.&#xA;'                 5. Updated so diagrams that are children of elements are marked as the composite diagram.&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Set Diagram Styles&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;!INC Utils.Model Management Utilities&#xA;&#xA;const HIERARCHY_TAB = &quot;Nested Hierarchy Diagram&quot;&#xA;&#xA;const TOP_DOWN_FLOW_DIRECTION = 1 &#x9;' as Integer&#xA;const LEFT_RIGHT_FLOW_DIRECTION = 2&#x9;' as Integer&#xA;&#xA;const ELEMENT_SUBTYPE_COMPOSITE = 8&#xA;&#xA;const XREF_NAME_DEFAULT_DIAGRAM = &quot;DefaultDiagram&quot;&#xA;const XREF_TYPE_ELEMENT = &quot;element property&quot;&#xA;const XREF_VISIBILITY_PUBLIC = &quot;public&quot;&#xA;&#xA;Function isInArray(value, arr)&#xA;&#x9;dim i&#xA;    If IsArray(arr) Then&#xA;        isInArray = False&#xA;        For i = 0 To UBound(arr)&#xA;            If arr(i) = value Then&#xA;                isInArray = True&#xA;                Exit Function&#xA;            End If&#xA;        Next&#xA;    Else&#xA;        isInArray = (value = arr)&#xA;    End If&#xA;End Function&#xA;&#xA;class HierarchyDiagram&#xA;&#xA;&#x9;public objectHeight&#x9;&#x9;' as Integer&#xA;&#x9;public objectWidth&#x9;&#x9;' as Integer&#xA;&#x9;public horizOffset&#x9;&#x9;' as Integer&#xA;&#x9;public horizSpace&#x9;&#x9;' as Integer&#xA;&#x9;public vertOffset&#x9;&#x9;' as Integer&#xA;&#x9;public vertSpace&#x9;&#x9;' as Integer&#xA;&#x9;public seqIndex&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public levelList&#x9;&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;public childObjectList&#x9;' as Scripting.Dictionary(Of HierarchyObject)&#xA;&#x9;public parentItem&#x9;&#x9;' as EA.Package/Element&#xA;&#x9;public diagram &#x9;&#x9;&#x9;' as EA.Diagram&#xA;&#x9;public includeParent    ' as Boolean&#xA;&#x9;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;seqIndex = 9999&#xA;&#x9;&#x9;set levelList = nothing&#xA;&#x9;&#x9;set childObjectList = nothing&#xA;&#x9;&#x9;set parentItem = nothing&#xA;&#x9;&#x9;set diagram = nothing&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub createDiagram( diagramType)&#xA;&#x9;&#xA;&#x9;&#x9;dim diagramName&#x9;'as String&#x9;&#x9;&#xA;&#x9;&#x9;diagramName = parentItem.Name&#x9;&#xA;&#x9;&#x9;set diagram = parentItem.Diagrams.AddNew( diagramName, diagramType)&#x9;&#xA;&#x9;&#x9;diagram.Update&#x9;&#xA;&#x9;&#x9;setDiagramStyle diagram, &quot;HideEStereo=1&quot;&#x9;&#xA;&#x9;&#x9;setParentElement&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub loadRootObjectList&#xA;&#x9;&#xA;&#x9;&#x9;dim rootObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim rootLevel&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim elementMetatype ' as String&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' check whether or not to use the updated version of the script to maintain legacy support&#xA;&#x9;&#x9;if includeParent then&#xA;&#x9;&#x9;&#x9;set rootLevel = levelList.Item(2)&#x9;&#xA;&#x9;&#x9;&#x9;set childObjectList = createParentHierarchyObjectListUpdated( Me, parentItem, rootLevel)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set rootLevel = levelList.Item(1)&#x9;&#xA;&#x9;&#x9;&#x9;elementMetatype = rootLevel.elementMetatype&#xA;&#x9;&#x9;&#x9;set childObjectList = createParentHierarchyObjectList( Me, parentItem, elementMetatype)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;for each rootObject in childObjectList.Items&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set rootObject.diagram = Me&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;--&gt; Loading Root Element '&quot; &amp; rootObject.element.Name &amp; &quot;'...&quot;, 0&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if levelList.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;rootObject.LoadChildObjectList&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub drawRootObjects&#x9;&#xA;&#x9;&#x9;dim rootObject&#x9;&#x9;' as HierarchyObject&#x9;&#x9;&#xA;&#x9;&#x9;drawObjectList Me, childObjectList, 1&#xA;&#x9;&#x9;for each rootObject in childObjectList.Items&#xA;&#x9;&#x9;&#x9;rootObject.drawChildObjects&#xA;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;diagram.Update&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub hideConnectors&#xA;&#x9;&#xA;&#x9;&#x9;dim link&#x9; &#x9;' as EA.DiagramLink&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each link in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;link.IsHidden = true&#xA;&#x9;&#x9;&#x9;link.Update&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub addObject( anObject)&#xA;&#x9;&#xA;&#x9;&#x9;dim nextSeqIndex&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set anObject.diagram = Me&#x9;&#x9;&#xA;&#x9;&#x9;set anObject.diagramObject = Me.diagram.DiagramObjects.AddNew(&quot;&quot;, &quot;&quot;)&#x9;&#x9;&#xA;&#x9;&#x9;anObject.diagramObject.ElementID = anObject.element.ElementID&#x9;&#x9;&#xA;&#x9;&#x9;nextSeqIndex = Me.SeqIndex - 1&#x9;&#x9;&#xA;&#x9;&#x9;anObject.diagramObject.sequence = nextSeqIndex&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Me.seqIndex = nextSeqIndex&#xA;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;private sub setParentElement()&#xA;&#xA;&#x9;&#x9;if parentItem.ObjectType = otElement then&#xA;            diagram.ParentID = parentItem.ElementID&#xA;            diagram.PackageID = parentItem.PackageID&#xA;            diagram.Update()&#xA;            parentItem.Subtype = ELEMENT_SUBTYPE_COMPOSITE&#xA;            parentItem.Update()&#xA;            setElementPDATA parentItem, 1, diagram.DiagramID&#xA;            insertXrefRow XREF_NAME_DEFAULT_DIAGRAM, XREF_TYPE_ELEMENT, XREF_VISIBILITY_PUBLIC, vbNullString, &quot;0&quot;, vbNullString, parentItem.ElementGUID, diagram.DiagramGUID&#xA;        End If&#xA;    End Sub&#x9;&#xA;end Class&#xA;&#xA;private sub setElementPDATA(element, PDATAIndex, PDATAValue)&#xA;&#xA;&#x9;dim SQLString 'As String&#xA;&#x9;dim PDATAColumnName 'As String&#xA;&#x9;PDATAColumnName = &quot;PDATA&quot; &amp; PDATAIndex&#xA;&#x9;SQLString = &quot;UPDATE t_object SET &quot; &amp; PDATAColumnName &amp; &quot;='&quot; &amp; PDATAValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;Repository.Execute(SQLString)&#xA;&#x9;element.Refresh()&#xA;&#xA;end sub&#xA;&#xA;private sub insertXrefRow(name, xrefType, visibility, behavior, partition, description, client, supplier)&#xA;&#xA;&#x9;dim typeLib ' as TypeLib&#xA;&#x9;Dim SQLString 'as String&#xA;&#x9;Dim xrefGUID 'as String&#xA;&#xA;&#x9;set typeLib = CreateObject(&quot;Scriptlet.TypeLib&quot;)&#xA;&#x9;&#xA;&#x9;xrefGUID = typeLib.Guid&#xA;&#x9;xrefGUID= Left( xrefGUID, Len( xrefGUID) - 2)&#xA;&#xA;&#x9;SQLString = &quot;INSERT INTO t_xref (XrefID, Name, Type, Visibility, Behavior, Partition, Description, Client, Supplier) VALUES (&quot;&#xA;&#x9;SQLString = SQLString &amp; &quot;'&quot; &amp; xrefGUID &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp; &quot;'&quot; &amp; name &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; xrefType &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; visibility &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; behavior &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; partition &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; description &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; client &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; supplier &amp; &quot;')&quot;&#xA;&#xA;&#x9;Repository.Execute(SQLString)&#xA;&#xA;end sub&#xA;&#xA;&#x9;&#xA;class ElementProfile&#xA;&#x9;public elementMetatype    ' as String&#xA;&#x9;public relationProfiles ' as List of RelationProfile&#xA;&#x9;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#x9;set relationProfiles = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;end sub&#xA;End class&#xA;&#xA;class RelationProfile&#xA;&#x9;public nestingType        ' as String   Related | Nested&#xA;&#x9;public relationType       ' as String&#xA;&#x9;public relationStereotype ' as String&#xA;&#x9;public relatedStereotype ' as String&#xA;&#x9;public relatedType        ' as String&#xA;&#x9;&#xA;End class&#xA;&#xA;class HierarchyLevel&#xA;&#x9;public elementMetatype    ' as String&#xA;&#x9;public elementProfiles    &#xA;    public levelNumber&#x9;&#x9;  ' as Integer&#xA;&#x9;public numObjects&#x9;&#x9;  ' as Integer = numRows when flowDirection = TOP_DOWN; = numColumns when flowDirection = LEFT_RIGHT&#xA;&#x9;public flowDirection&#x9;  ' as Integer&#xA;&#x9;public objectStyle&#x9;&#x9;  ' as ObjectStyle&#xA;&#x9;public objectHeight&#x9;&#x9;  ' as Integer&#xA;&#x9;public objectWidth&#x9;&#x9;  ' as Integer&#xA;&#x9;public horizOffset&#x9;&#x9;  ' as Integer&#xA;&#x9;public horizSpace&#x9;&#x9;  ' as Integer&#xA;&#x9;public vertOffset&#x9;&#x9;  ' as Integer&#xA;&#x9;public vertSpace&#x9;  &#x9;  ' as Integer&#xA;&#x9;public isParent           ' as Boolean&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#x9;set elementProfiles = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;set objectStyle = new HierarchyObjectStyle&#xA;&#x9;&#x9;isParent = False&#xA;&#x9;&#x9;objectHeight = -1&#xA;&#x9;&#x9;objectWidth = -1&#xA;&#x9;&#x9;horizOffset = -1&#xA;&#x9;&#x9;horizSpace = -1&#xA;&#x9;&#x9;vertOffset = -1&#xA;&#x9;&#x9;vertSpace = -1&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;End class&#xA;&#xA;class HierarchyObjectStyle&#xA;&#xA;&#x9;public fillColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public lineWidth&#x9;&#x9;' as Integer&#xA;&#x9;public lineColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public fontName&#x9;&#x9;&#x9;' as String&#xA;&#x9;public fontSize&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public fontColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public fontBold&#x9;&#x9;&#x9;' as Boolean&#xA;&#x9;public fontItalic&#x9;&#x9;' as Boolean&#xA;&#x9;public fontUnderline&#x9;' as Boolean&#xA;&#x9;&#xA;End Class&#xA;&#xA;class HierarchyObject&#xA;&#xA;&#x9;public levelNumber&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public row&#x9;&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public column&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public parentObject&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;public childObjectList&#x9;&#x9;' as Scripting.Dictionary(Of HierarchyObject)&#xA;&#x9;public diagram&#x9;&#x9;&#x9;&#x9;' as HierarchyDiagram&#xA;&#x9;public element&#x9;&#x9;&#x9;&#x9;' as EA.Element&#xA;&#x9;public diagramObject &#x9;&#x9;' as EA.DiagramObject&#xA;&#x9;public isParent             ' as Boolean&#xA;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#x9;isParent = False&#xA;&#x9;&#x9;set parentObject = nothing&#xA;&#x9;&#x9;set childObjectList = nothing&#xA;&#x9;&#x9;set diagram = nothing&#xA;&#x9;&#x9;set diagramObject = nothing&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#xA;&#x9;public sub loadChildObjectList&#xA;&#x9;&#xA;&#x9;&#x9;dim eaElement &#x9;&#x9;' as EA.Element&#xA;&#x9;&#x9;dim childObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim childLevel&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim childMetatypes  ' as Variant&#xA;&#x9;&#x9;dim relatedElements ' as Dict&#xA;&#x9;&#x9;dim tmpElements&#xA;&#x9;&#x9;dim relatedElement&#xA;&#x9;&#x9;dim stereotype&#xA;&#x9;&#x9;dim key&#xA;&#x9;&#x9;dim ex&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childLevel = diagram.levelList.Item(levelNumber + 1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if childLevel.elementProfiles.Count&gt;0 then&#xA;&#x9;&#x9;&#x9;call loadChildObjectListUpdated&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;call loadChildObjectListHistoric&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub loadChildObjectListUpdated&#xA;&#x9;&#x9;dim eaElement &#x9;&#x9;' as EA.Element&#xA;&#x9;&#x9;dim childObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim childLevel&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim childMetatypes  ' as Variant&#xA;&#x9;&#x9;dim relatedElement&#xA;&#x9;&#x9;dim elementProfile&#xA;&#x9;&#x9;dim elementProfileKey&#xA;&#x9;&#x9;dim relationProfileKey&#xA;&#x9;&#x9;dim relationProfile&#xA;&#x9;&#x9;dim tmpElements&#xA;&#x9;&#x9;dim stereotype&#xA;&#x9;&#x9;dim key&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childLevel = diagram.levelList.Item(levelNumber + 1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childObjectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;For Each elementProfileKey In childLevel.elementProfiles.Keys&#xA;&#x9;&#x9;&#x9;set elementProfile = childLevel.elementProfiles.Item(elementProfileKey)&#xA;&#x9;&#x9;&#x9;For Each relationProfileKey In elementProfile.relationProfiles.Keys&#xA;&#x9;&#x9;&#x9;&#x9;set relationProfile = elementProfile.relationProfiles(relationProfileKey)&#xA;&#x9;&#x9;&#x9;&#x9;dim relatedElements&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElements = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;If relationProfile.nestingType = &quot;Related&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each stereotype in Split(relationProfile.relationStereotype, &quot;;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tmpElements = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set tmpElements = getRelatedElementList(element, relationProfile.relationType, stereotype, relationProfile.relatedType, relationProfile.relatedStereotype)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;For Each key In tmpElements.Keys&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElements.Add key, tmpElements.Item(key)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each relatedElement in relatedElements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject = New HierarchyObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.element = Repository.GetElementByGUID(relatedElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.parentObject = Me&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.diagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.levelNumber = levelNumber + 1&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childObjectList.Add childObject.element.ElementGUID, childObject&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(childObject.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Loading Child Element '&quot; &amp; childObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if childObject.levelNumber = diagram.levelList.Count then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.childObjectList = Nothing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.loadChildObjectList&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;ElseIf relationProfile.nestingType = &quot;Nested&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each eaElement in element.Elements&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if eaElement.MetaType = elementProfile.elementMetatype then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject = New HierarchyObject&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.element = eaElement&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.parentObject = Me&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.diagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.levelNumber = levelNumber + 1&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childObjectList.Add childObject.element.ElementGUID, childObject&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(childObject.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Loading Child Element '&quot; &amp; childObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if childObject.levelNumber = diagram.levelList.Count then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.childObjectList = Nothing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.loadChildObjectList&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Err.Raise vbObjectError + 1000, &quot;loadChildObjectListUpdated&quot;, &quot;Unsupported string value.&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;Next&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub loadChildObjectListHistoric&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;dim eaElement &#x9;&#x9;' as EA.Element&#xA;&#x9;&#x9;dim childObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim childLevel&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim childMetatype   ' as String&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childLevel = diagram.levelList.Item(levelNumber + 1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;childMetatype = childLevel.elementMetatype&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childObjectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each eaElement in element.Elements&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if eaElement.MetaType = childMetatype then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set childObject = New HierarchyObject&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.element = eaElement&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.parentObject = Me&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.diagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;childObject.levelNumber = levelNumber + 1&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;childObjectList.Add childObject.element.ElementGUID, childObject&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(childObject.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Loading Child Element '&quot; &amp; childObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;if childObject.levelNumber = diagram.levelList.Count then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.childObjectList = Nothing&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.loadChildObjectList&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub drawChildObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim childObject &#x9;' as HierarchyObject&#x9;&#x9;&#xA;&#x9;&#x9;if not childObjectList is Nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;drawObjectList diagram, childObjectList, levelNumber + 1&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each childObject in childObjectList.Items&#xA;&#x9;&#x9;&#x9;&#x9;childObject.drawChildObjects&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub resize( childObject)&#xA;&#x9;&#xA;&#x9;&#x9;dim objectCurrRight&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim objectCurrBottom&#x9;' as Integer&#xA;&#x9;&#x9;dim objectNewRight&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim objectNewBottom&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim vertSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim horizSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.vertSpace = -1 then&#xA;&#x9;&#x9;&#x9;vertSpace = diagram.vertSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;vertSpace = level.vertSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.horizSpace = -1 then&#xA;&#x9;&#x9;&#x9;horizSpace = diagram.horizSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;horizSpace = level.horizSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;objectCurrRight = diagramObject.right&#xA;&#x9;&#x9;objectCurrBottom = diagramObject.bottom&#xA;&#x9;&#xA;&#x9;&#x9;objectNewRight = childObject.diagramObject.right + horizSpace&#xA;&#x9;&#x9;objectNewBottom = childObject.diagramObject.bottom - vertSpace&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if objectCurrRight &lt;&gt; objectNewRight or objectCurrBottom &lt;&gt; objectNewBottom then&#xA;&#xA;&#x9;&#x9;&#x9;if objectNewRight &gt; objectCurrRight then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.right = objectNewRight&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectNewBottom &lt; objectCurrBottom then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = objectNewBottom&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** RESIZED object '&quot; &amp; element.name &amp; &quot;' to (&quot; &amp; diagramObject.left &amp; &quot;,&quot; &amp; diagramObject.top &amp; &quot;) x ( &quot; &amp; diagramObject.right &amp; &quot;,&quot; &amp; diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;moveNeighborObjects&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if Not parentObject is nothing then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub moveNeighborObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim rightObject&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim rightObjectWidth&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectCurrLeft&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectNewLeft&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectMoved&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim bottomObjectHeight&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectCurrTop&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectNewTop&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectMoved&#x9;' as Integer&#xA;&#x9;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim vertSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim horizSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.vertSpace = -1 then&#xA;&#x9;&#x9;&#x9;vertSpace = diagram.vertSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;vertSpace = level.vertSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.horizSpace = -1 then&#xA;&#x9;&#x9;&#x9;horizSpace = diagram.horizSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;horizSpace = level.horizSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set rightObject = getRightObject&#xA;&#x9;&#x9;set bottomObject = getBottomObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;rightObjectMoved = false&#xA;&#x9;&#x9;bottomObjectMoved = false&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if rightObject is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectWidth = rightObject.width&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectCurrLeft = rightObject.diagramObject.left &#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectNewLeft = diagramObject.right + horizSpace&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if rightObjectNewLeft &lt;&gt; rightObjectCurrLeft then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.left = rightObjectNewLeft&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.right = rightObjectNewLeft + rightObjectWidth&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** Moved RIGHT object '&quot; &amp; rightObject.element.name &amp; &quot;' to (&quot; &amp; rightObject.diagramObject.left &amp; &quot;,&quot; &amp; rightObject.diagramObject.top &amp; &quot;) x ( &quot; &amp; rightObject.diagramObject.right &amp; &quot;,&quot; &amp; rightObject.diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;rightObjectMoved = true&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if bottomObject is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectHeight = bottomObject.Height&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectCurrTop = bottomObject.diagramObject.top&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectNewTop = diagramObject.bottom - vertSpace&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if bottomObjectNewTop &lt;&gt; bottomObjectCurrTop then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.top = bottomObjectNewTop&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.bottom = bottomObjectNewTop - bottomObjectHeight &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** Moved BOTTOM object '&quot; &amp; bottomObject.element.name &amp; &quot;' to (&quot; &amp; bottomObject.diagramObject.left &amp; &quot;,&quot; &amp; bottomObject.diagramObject.top &amp; &quot;) x ( &quot; &amp; bottomObject.diagramObject.right &amp; &quot;,&quot; &amp; bottomObject.diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObjectMoved = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;if rightObjectMoved then&#xA;&#x9;&#x9;&#x9;rightObject.moveNeighborObjects&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;if bottomObjectMoved then&#xA;&#x9;&#x9;&#x9;bottomObject.moveNeighborObjects&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public property get height&#xA;&#x9;&#x9;height = diagramObject.top - diagramObject.bottom&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property get width&#xA;&#x9;&#x9;width = diagramObject.right - diagramObject.left&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public function getRightObject&#xA;&#x9;&#x9;set getRightObject = getGridObject(column + 1, row)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getBottomObject&#xA;&#x9;&#x9;set getBottomObject = getGridObject(column, row + 1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getGridObject( getColumn, getRow)&#xA;&#x9;&#xA;&#x9;&#x9;dim peerObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim foundObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set foundObject = nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each peerObject in parentObject.childObjectList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if peerObject.column = getColumn and peerObject.row = getRow then&#xA;&#x9;&#x9;&#x9;&#x9;set foundObject = peerObject&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set getGridObject = foundObject&#xA;&#x9;&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public property let fillColor( value)&#xA;&#x9;&#x9;if value &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;BCol=&quot; &amp; value&#xA;&#x9;&#x9;end if&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let lineWidth( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;LWth=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let lineColor( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;LCol=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontName( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;font=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontSize( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;fontsz=&quot; &amp; value * 10&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontColor( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;BFol=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontBold( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;bold=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontItalic( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;italic=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontUnderline( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;ul=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;End Class&#xA;&#xA;public sub drawObjectList( diagram, objectList, levelNumber)&#xA;&#xA;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim objectIndex&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim coord1&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim coord2&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim object&#x9;&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;dim parentObjectLeft&#x9;' as Integer&#xA;&#x9;dim parentObjectTop&#x9;&#x9;' as Integer&#xA;&#x9;dim objectWidth&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim objectHeight&#x9;&#x9;' as Integer&#xA;&#x9;dim vertOffset&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim vertSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim horizOffset&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim horizSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#xA;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;if level.objectWidth = -1 then&#xA;&#x9;&#x9;objectWidth = diagram.objectWidth&#xA;&#x9;else&#xA;&#x9;&#x9;objectWidth = level.objectWidth&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.objectHeight = -1 then&#xA;&#x9;&#x9;objectHeight = diagram.objectHeight&#xA;&#x9;else&#xA;&#x9;&#x9;objectHeight = level.objectHeight&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.vertOffset = -1 then&#xA;&#x9;&#x9;vertOffset = diagram.vertOffset&#xA;&#x9;else&#xA;&#x9;&#x9;vertOffset = level.vertOffset&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.vertSpace = -1 then&#xA;&#x9;&#x9;vertSpace = diagram.vertSpace&#xA;&#x9;else&#xA;&#x9;&#x9;vertSpace = level.vertSpace&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.horizOffset = -1 then&#xA;&#x9;&#x9;horizOffset = diagram.horizOffset&#xA;&#x9;else&#xA;&#x9;&#x9;horizOffset = level.horizOffset&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.horizSpace = -1 then&#xA;&#x9;&#x9;horizSpace = diagram.horizSpace&#xA;&#x9;else&#xA;&#x9;&#x9;horizSpace = level.horizSpace&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;objectIndex = 1&#xA;&#x9;&#xA;&#x9;for each object in objectList.Items&#xA;&#xA;&#x9;&#x9;diagram.addObject object&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;coord1 = Int( ( objectIndex - 1 ) / level.numObjects ) + 1&#xA;&#x9;&#x9;coord2 = objectIndex - ( coord1 - 1 ) * level.numObjects&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.flowDirection = LEFT_RIGHT_FLOW_DIRECTION then&#xA;&#x9;&#x9;&#x9;object.row = coord1&#xA;&#x9;&#x9;&#x9;object.column = coord2&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;object.row = coord2&#xA;&#x9;&#x9;&#x9;object.column = coord1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(object.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Adding diagram object for Element '&quot; &amp; object.element.Name &amp; &quot;' #&quot; &amp; objectIndex &amp; &quot; ( &quot; &amp; object.column &amp; &quot;, &quot; &amp; object.row &amp; &quot; )&quot;, 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if object.parentObject is nothing then&#xA;&#x9;&#x9;&#x9;parentObjectLeft = 0&#xA;&#x9;&#x9;&#x9;parentObjectTop = 0&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(object.ParentObject) = &quot;HierarchyObject&quot; and object.isParent=False then&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectLeft = object.parentObject.diagramObject.left&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectTop = object.parentObject.diagramObject.top&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectLeft = 0&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectTop = 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.diagramObject.left = parentObjectLeft + ( object.column - 1 ) * ( objectWidth + horizSpace ) + horizOffset&#xA;&#x9;&#x9;object.diagramObject.top = parentObjectTop - ( ( object.row  - 1 ) * ( objectHeight + vertSpace ) + vertOffset )&#xA;&#x9;&#x9;object.diagramObject.right = object.diagramObject.left + objectWidth&#xA;&#x9;&#x9;object.diagramObject.bottom = object.diagramObject.top - objectHeight&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.fillColor &#x9;&#x9;= level.objectStyle.fillColor&#xA;&#x9;&#x9;object.lineWidth &#x9;&#x9;= level.objectStyle.lineWidth&#xA;&#x9;&#x9;object.lineColor &#x9;&#x9;= level.objectStyle.lineColor&#xA;&#x9;&#x9;object.fontName &#x9;&#x9;= level.objectStyle.fontName&#xA;&#x9;&#x9;object.fontSize &#x9;&#x9;= level.objectStyle.fontSize&#xA;&#x9;&#x9;object.fontColor &#x9;&#x9;= level.objectStyle.fontColor&#xA;&#x9;&#x9;object.fontBold &#x9;&#x9;= level.objectStyle.fontBold&#xA;&#x9;&#x9;object.fontItalic &#x9;&#x9;= level.objectStyle.fontItalic&#xA;&#x9;&#x9;object.fontUnderline &#x9;= level.objectStyle.fontUnderline&#xA;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(object.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; LeftTop: ( &quot; &amp; object.diagramObject.left &amp; &quot;, &quot; &amp; object.diagramObject.top &amp; &quot; ) RightBottom: ( &quot; &amp; object.diagramObject.right &amp; &quot;, &quot; &amp; object.diagramObject.bottom &amp; &quot; )&quot;, 0&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.diagramObject.Update&#xA;&#xA;&#x9;&#x9;Repository.ReloadDiagram(object.diagram.diagram.DiagramID)&#xA;&#x9;&#xA;&#x9;&#x9;if Not object.parentObject is Nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(object.parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;object.parentObject.resize object&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;objectIndex = objectIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub createNestedHierarchyDiagram( parentItem, levelList, diagramType, openDiagram)&#xA;&#xA;&#x9;dim diagram &#x9;&#x9;' as HierarchyDiagram&#xA;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Creating nested hierarchy diagram for Element '&quot; &amp; parentItem.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;set diagram = New HierarchyDiagram&#xA;&#x9;&#xA;&#x9;'diagram.elementMetaType = elementMetatype&#xA;&#x9;diagram.horizOffset = 10&#xA;&#x9;diagram.horizSpace = 10&#xA;&#x9;diagram.vertOffset = 50&#xA;&#x9;diagram.vertSpace = 10&#xA;&#x9;diagram.objectHeight = 50&#xA;&#x9;diagram.objectWidth = 150&#xA;&#x9;set diagram.parentItem = parentItem&#xA;&#x9;dim val&#xA;&#x9;set val = levelList(1)&#xA;&#x9;if val.isParent then&#xA;&#x9;&#x9;diagram.includeParent = true&#xA;&#x9;end if&#xA;&#x9;diagram.createDiagram diagramType&#xA;&#xA;&#x9;if openDiagram then&#xA;&#x9;&#x9;Repository.OpenDiagram(diagram.diagram.DiagramID)&#xA;&#x9;end if&#xA;&#xA;&#x9;set diagram.levelList = levelList&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;diagram.levelList.Count = &quot; &amp; diagram.levelList.count, 0&#xA;&#x9;&#xA;&#x9;diagram.loadRootObjectList&#xA;&#x9;&#xA;&#x9;diagram.drawRootObjects&#xA;&#x9;&#xA;&#x9;diagram.hideConnectors&#xA;&#x9;&#x9;&#xA;&#x9;Repository.SaveDiagram(diagram.diagram.diagramID)&#xA;&#xA;&#x9;if openDiagram then&#xA;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function createParentHierarchyObjectList( diagram, parentItem, elementMetatype)&#xA;&#xA;&#x9;dim objectList&#xA;&#x9;dim eaElement as EA.Element&#xA;&#x9;dim object&#xA;&#x9;dim elementMetatypes  ' as Variant&#xA;&#x9;dim inArr  ' as Bool&#xA;&#x9;&#xA;&#x9;elementMetatypes = Split(elementMetatype, &quot;;&quot;)&#xA;&#x9;set objectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each eaElement in parentItem.Elements&#xA;&#x9;&#x9;inArr = isInArray(eaElement.MetaType, elementMetatypes)&#xA;&#x9;&#x9;if inArr then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set object = New HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set object.Element = eaElement&#xA;&#x9;&#x9;&#x9;set object.ParentObject = diagram&#xA;&#x9;&#x9;&#x9;object.levelNumber = 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectList.Add object.element.ElementGUID, object&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set createParentHierarchyObjectList = objectList&#xA;&#xA;end function&#xA;&#xA;function createParentHierarchyObjectListUpdated( diagram, parentItem, rootList)&#xA;&#xA;&#x9;dim objectList&#xA;&#x9;dim eaElement as EA.Element&#xA;&#x9;dim topLevelHierObj&#xA;&#x9;dim elementMetatypes  ' as Variant&#xA;&#x9;dim inArr  ' as Bool&#xA;&#x9;&#xA;&#x9;set objectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;set topLevelHierObj = New HierarchyObject&#xA;&#x9;set topLevelHierObj.Element = parentItem&#xA;&#x9;set topLevelHierObj.ParentObject = diagram&#xA;&#x9;topLevelHierObj.levelNumber = 1&#xA;&#x9;topLevelHierObj.isParent = True&#xA;&#x9;objectList.Add topLevelHierObj.element.ElementGUID, topLevelHierObj&#xA;&#x9;&#xA;&#x9;set createParentHierarchyObjectListUpdated = objectList&#xA;&#xA;end function&#xA;&#xA;sub Test( packageGUID)&#xA;&#xA;&#x9;dim packageID&#x9;' as String&#xA;&#x9;dim parentItem  ' as EA.Package/Element&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarcyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level1.objectHeight&#x9;= 90&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorPaleGreen&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorRed&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#x9;&#xA;&#x9;level2.numobjects = 9&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level2.objectHeight&#x9;= 50&#xA;&#x9;level2.objectWidth = 100&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;'level2.objectstyle.linewidth = 3&#xA;&#x9;'level2.objectstyle.linecolor = colormediumorchid&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;'level2.objectstyle.fontcolor = colorred&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;'&#x9;set level3 = New HierarchyLevel&#xA;'&#x9;&#xA;'&#x9;level3.numObjects = 3&#xA;'&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;'&#x9;&#xA;'&#x9;levelList.Add 3, level3&#xA;&#xA;&#x9;'set parentItem = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;set parentItem = Repository.GetElementByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;createNestedHierarchyDiagram parentItem, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#xA;end sub&#xA;&#xA;'Test &quot;{5AEBAAC2-16D2-4e7f-8201-F110C4B7C6BD}&quot;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="259"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{61E8CA6B-AB59-4a0c-801C-3660F1AED70B}"/>
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Color Constants&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="&#xA;' contains colors that can be used in various other scripts&#xA;' If needed, get more color constants from http://cloford.com/resources/colours/500col.htm&#xA;&#xA;const colorBlack &#x9;&#x9;&#x9;= 0&#xA;const colorRed &#x9;&#x9;&#x9;&#x9;= 255&#xA;const colorGreen &#x9;&#x9;&#x9;= 32768&#xA;const colorDarkOrange&#x9;&#x9;= 36095&#xA;const colorGold&#x9;&#x9;&#x9;&#x9;= 55295&#xA;const colorLightCoral &#x9;&#x9;= 8421616&#xA;const colorPaleGreen&#x9;&#x9;= 10025880&#xA;const colorMediumOrchid&#x9;&#x9;= 13850042&#xA;const colorLightSkyBlue&#x9;&#x9;= 16436871&#xA;const colorBlue &#x9;&#x9;&#x9;= 16711680&#xA;const colorDeepSkyBlue&#x9;&#x9;= 16760576&#xA;const colorWhite &#x9;&#x9;&#x9;= 16777215&#xA;const colorOrchid&#x9;&#x9;&#x9;= 8996747&#xA;const colorLightSteelBlue1&#x9;= 16769482&#xA;const colorAzure2&#x9;&#x9;&#x9;= 15658720&#xA;const cololorKhakh1&#x9;&#x9;&#x9;= 9434879&#xA;const colorSilver&#x9;&#x9;&#x9;=12632256&#xA;const colorGray40&#x9;&#x9;&#x9;=6710886"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="260"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F3615FF8-CABB-416a-BEA2-EF443CB88847}"/>
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Diagram Styles&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value=" ' Scripts to update styles diagram objects.&#xA; '&#xA;&#xA; &#xA;const STYLE_DELIMITER = &quot;;&quot;&#xA;const STYLE_ASSIGNMENT = &quot;=&quot;&#xA;&#xA;sub SetCurrentDiagramObjectsStyle(elementMetaType, updateStyleList)&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramObjectsStyle theDiagram, elementMetaType, updateStyleList&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectsStyle( theDiagram, elementMetaType, updateStyleList)&#xA;&#x9;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim diagramElement as EA.Element&#xA;&#x9;dim elementID&#xA;&#x9;dim updateStyleArray&#xA;&#x9;dim updateStyle&#xA;&#x9;&#xA;&#x9;updateStyleArray = Split(updateStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;for each diagramObject in theDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramElement = Repository.GetElementByID(elementID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if diagramElement.metaType = elementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each updateStyle in updateStyleArray&#xA;&#x9;&#x9;&#x9;&#x9;SetDiagramObjectStyle diagramObject, updateStyle&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectStyle( diagramObject, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#x9;lineStyleList = diagramObject.Style&#xA;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagramObject.Style = lineStyleList&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub SetDiagramStyle( diagram, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagram.ExtendedStyle&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagram.ExtendedStyle = lineStyleList&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="261"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{51C77E78-1250-4b27-B676-A02092B647B2}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Biz - Create Capability Map (4x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script Name: Biz - Create Capability Map (4x4)&#xA; ' Author: Giu Platania&#xA; ' Purpose: create a diagram with TMF_capabilities up-to 4 levels&#xA; ' Date: 2023 12&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage, &quot;Capability&quot;, levelList&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Capability&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;'level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level1.objectStyle.fontSize = 14&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 2&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level3.objectStyle.fontSize = 10&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 2&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;'level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 10&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="262"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A791CFF4-2B11-4b64-8A42-4CDFED266B6C}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Utility Scripts&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="function getElementTaggedValueValue( element, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;set taggedValue = element.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;getElementTaggedValueValue = taggedValue.Value&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setElementTaggedValueValue( element, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;set taggedValue = element.TaggedValues.GetByName( taggedValueName)&#xA;&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = element.TaggedValues.AddNew( taggedValueName, vbNullString)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;&#xA;end sub&#xA;&#xA;function getConnectorTaggedValueValue( connector, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#x9;&#xA;&#x9;getConnectorTaggedValueValue = taggedValue.Value&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setConnectorTaggedValueValue( connector, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = connector.TaggedValues.AddNew( taggedValueName, vbNullString)&#xA;&#x9;end if&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;&#xA;end sub&#xA;&#xA;function lookupElementName(lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#x9;dim lookupElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;sqlString = &quot;SELECT ea_guid FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_object.Name = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#xA;&#x9;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;&#xA;&#x9;set lookupElementName = lookupElement&#xA;&#x9;&#xA;end function&#xA;&#xA;function lookupElementTaggedValue(taggedValueName, lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#x9;dim lookupElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;sqlString = &quot;SELECT t_object.ea_guid&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_objectproperties ON t_object.Object_ID = t_objectproperties.Object_ID&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_objectproperties.Property = '&quot; &amp; taggedValueName &amp; &quot;'&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_objectproperties.Value = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;&#x9;set lookupElementTaggedValue =  lookupElement&#xA;end function&#xA;&#xA;function getConnectorGUIDListTaggedValue(taggedValueName, lookupValue, lookupStereotype, lookupConnectorType)&#xA;&#xA;&#x9;dim connGUIDList()&#x9;&#x9;' As String&#xA;&#x9;dim sqlString &#x9;&#x9;&#x9;' As String&#xA;&#x9;dim connList_XML &#x9;&#x9;' As String&#xA;&#x9;dim connList_XMLDoc &#x9;' As Xml.XmlDocument&#xA;&#x9;dim conn_XMLNodeList&#x9;' As Xml.XmlNodeList&#xA;&#x9;dim conn_XMLNode &#x9;&#x9;' As Xml.XmlNode&#xA;&#x9;dim connIndex&#x9;&#x9;&#x9;' As Integer&#xA;&#x9;dim connGUID &#x9;&#x9;&#x9;' As String&#xA;&#xA;&#x9;sqlString = &quot;SELECT t_connector.ea_guid&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; FROM t_connector&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_connectortag ON t_connector.Connector_ID = t_connectortag.ElementID&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_connectortag.Property = '&quot; &amp; taggedValueName &amp; &quot;'&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_connectortag.Value = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype &lt;&gt; vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_connector.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#x9;if lookupConnectorType &lt;&gt; vbNullString then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_connector.Connector_Type = '&quot; &amp; lookupConnectorType &amp; &quot;'&quot;&#xA;&#x9;end if&#xA;&#x9;connList_XML = Repository.SQLQuery(sqlString)&#x9;&#xA;&#x9;set connList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#x9;&#xA;&#x9;connList_XMLDoc.LoadXml(connList_XML)&#x9;&#xA;&#x9;set conn_XMLNodeList = connList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;connIndex = 0&#x9;&#xA;&#x9;for each conn_XMLNode in conn_XMLNodeList&#x9;&#xA;&#x9;&#x9;connGUID = conn_XMLNode.FirstChild.Text&#x9;&#x9;&#xA;&#x9;&#x9;redim preserve connGUIDList( connIndex + 1)&#x9;&#x9;&#xA;&#x9;&#x9;connGUIDList( connIndex) = connGUID&#x9;&#x9;&#xA;&#x9;&#x9;connIndex = connIndex + 1&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getConnectorGUIDListTaggedValue = connGUIDList&#xA;end function&#xA;&#xA;sub setElementPDATA(element, pdataIndex, pdataValue)&#xA;'PDATA1 &#xA;' For Package elements: primary key of the package&#xA;' For Elements: Same as the Status column&#xA;' For Parts/Instances: GUID of the classifier&#xA;' For UseCase: #EXP#=&lt;ep&gt;; semi-colon separated list of Extension Points &lt;ep&gt;&#xA;' For Notes: linked element feature name&#xA;' For Text displaying as hyperlink: t_diagram.Diagram_ID&#xA;' For Requirements: Status property&#xA;' For UMLDiagram: Diagram_ID of the underlying diagram;&#xA;' If Object_Type is one of Activity, Artifact, Class, Interaction, Requirement, State,&#xA;'StateMachine, UseCase (and probably some more) and NType is 8 and PDATA1 has a number&#xA;'greater then zero then PDATA1 corresponds to t_diagram.Diagram_ID of the composite&#xA;'diagram.&#xA;'if   NType is 82 diagram hyperlink; PDATA1 == t_diagram.Diagram_ID&#xA;'&#xA;' PDATA2 &#xA;' For Elements: Same as the Priority column&#xA;' For Notes: Object_ID of the linked feature element&#xA;' For Requirements: Priority property&#xA;&#xA;' PDATA3 &#xA;' For Elements: Same as the Difficulty column&#xA;' For Notes: Reference name into the linked feature element&#xA;' For Ports in classified Parts: the GUID of the corresponding Port in the Classifier.&#xA;' For State: t_diagram.Diagram_ID of the composite diagram&#xA;' For Requirements: Difficulty property&#xA;&#xA;' PDATA4 &#xA;' For Note elements: Yes if the note is linked to an element feature and idref=&lt;val&gt;; list where &lt;val&gt; is the primary key of the connector(s) to which the note is linked&#xA;' For elements: If &gt; 0 this is the primary key of the connector for which this element is defines as association class&#xA;&#xA;&#xA;' PDATA5 Keywords property&#xA;&#xA;&#x9;Dim sqlString 'As String&#xA;&#x9;Dim pdataColumnName 'As String&#xA;&#x9;pdataColumnName = &quot;PDATA&quot; &amp; pdataIndex&#xA;&#x9;sqlString = &quot;UPDATE t_object SET &quot; &amp; pdataColumnName &amp; &quot;='&quot; &amp; pdataValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;Repository.Execute( sqlString)&#xA;&#x9;element.Refresh&#xA;End Sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="263"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F2AFF9EA-9879-410e-9CCF-917DE5B2554A}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Populate Properties &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Scripts to populate connector tagged values. WIP &#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Frameworx Scripts.Utility Scripts&#xA;&#xA;const CW_DATA_TYPE_LOOKUP1 = &quot;7&quot;&#xA;const CW_DATA_TYPE_LOOKUP2 = &quot;9&quot;&#xA;&#xA;dim lookupValueList 'as Scripting.Dictionary&#xA;&#xA;populateConnectorProperties &quot;20021&quot;, &quot;Category&quot;, &quot;GO_TYPE&quot;&#xA;&#xA;sub populateConnectorProperties( objectTypeID, propName, typeTaggedValueName)&#xA;&#xA;&#x9;dim connList&#x9;   'as String()&#xA;&#x9;dim connGUID&#x9;   'as String&#xA;&#x9;dim connGUIDList   'as String&#xA;&#x9;dim connector&#x9;&#x9;as EA.Connector&#xA;&#x9;&#xA;&#x9;Session.Output vbCRLF &amp; &quot;Populating Connector tagged values from CW properties....&quot;&#xA;&#x9;&#xA;&#x9;connGUIDList = getConnectorGUIDListTaggedValue( &quot;OT_ID&quot;, objectTypeID, vbNullString, vbNullString)&#xA;&#x9;&#xA;&#x9;createLookupValueList objectTypeID, propName&#xA;&#x9;&#xA;&#x9;for each connGUID in connGUIDList&#xA;&#x9;&#xA;&#x9;&#x9;set connector = Repository.GetConnectorByGuid( connGUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Connector: &quot; &amp; connector.ConnectorGUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;updateConnector connector, propName, typeTaggedValueName&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub updateConnector( connector, propName, typeTaggedValueName)&#xA;&#xA;&#x9;' No need to have code for USERDEFINED XML property as none of the CW relationship&#xA;&#x9;' that need to be imported have non-null values.&#xA;&#x9;&#xA;&#x9;dim lookupValueID&#x9;   'as String&#xA;&#x9;dim lookupValueName    'as String&#xA;&#xA;&#x9;lookupValueID = getConnectorTaggedValueValue( connector, typeTaggedValueName)&#xA;&#x9;&#xA;&#x9;if lookupValueID &lt;&gt; vbNullString then&#xA;&#x9;&#xA;&#x9;&#x9;if lookupValueList.Exists( lookupValueID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lookupValueName = lookupValueList.Item( lookupValueID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setConnectorTaggedValueValue connector, propName, lookupValueName&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;..Set '&quot; &amp; propName &amp; &quot;' to '&quot; &amp; lookupValueName&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output &quot;***ERROR*** No lookup value found for '&quot; &amp; lookupValueID &amp; &quot;' for '&quot; &amp; propName &amp; &quot;'&quot;&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub createLookupValueList( objectTypeID, propName)&#xA;&#xA;&#x9;dim metamodelElement&#x9;as EA.Element&#xA;&#x9;dim propElement&#x9;    &#x9;as EA.Element&#xA;&#x9;dim propID&#x9;&#x9;&#x9;   'as String&#xA;&#x9;dim lookupTypeElement&#x9;as EA.Element&#xA;&#x9;dim lookupValueElement&#x9;as EA.Element&#xA;&#x9;dim lookupValue&#x9;&#x9;   'as String&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Building lookup value list for property '&quot; &amp; propName &amp; &quot;' for CW Object Type '&quot; &amp; objectTypeID &amp; &quot;'...&quot;&#xA;&#xA;&#x9;set lookupValueList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;set metamodelElement = lookupElementTaggedValue( &quot;OT_ID&quot;, objectTypeID, vbNullString, &quot;Class&quot;)&#xA;&#x9;&#xA;&#x9;for each propElement in metamodelElement.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if propElement.Name = propName then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;propID = getElementTaggedValueValue( propElement, &quot;PPT_ID&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set lookupTypeElement = lookupElementTaggedValue( &quot;PPT_ID&quot;, propID, &quot;lookupType&quot;, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each lookupValueElement in lookupTypeElement.Elements&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;lookupValue = getElementTaggedValueValue( lookupValueElement, &quot;LU_ID&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;lookupValueList.Add lookupValue, lookupValueElement.Name&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#x9;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="264"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="TM Forum Normal Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="265"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3FB467CB-44A6-4e02-93CD-6E98D0AA097D}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util -Migrate Application Stereotype&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to migrate a stereotype into another. use carefully&#xA;' currently TAM Applications initially imported as ArchiMate Capabilities and Business Fuctions&#xA;' to Application Functions.&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub startMigration&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#xA;&#x9;&#xA;&#x9;packageGUID = &quot;{73CA9578-FDF8-440c-9CD3-F97F5AFD4CC2}&quot;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;migratePackage package&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migratePackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Migrating package '&quot; &amp; package.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;migrateElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;migratePackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migrateElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim objTypeTV as EA.TaggedValue&#xA;&#x9;dim objType 'as string&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Migrating element '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#xA;&#xA;&#x9;set objTypeTV = element.TaggedValues.GetByName(&quot;OT_ID&quot;)&#xA;&#x9;&#xA;&#x9;if not objTypeTV is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;objType = objTypeTV.Value&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;select case objType&#xA;&#x9;&#x9;&#x9;case &quot;20016&quot; ' TAM Application&#xA;&#x9;&#x9;&#x9;&#x9;element.Type = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.StereotypeEx = &quot;TMF_ArchiMate3::TMF_Application&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;case &quot;20063&quot; ' TAM Function&#xA;&#x9;&#x9;&#x9;&#x9;element.Type = &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.StereotypeEx = &quot;TMF_ArchiMate3::TMF_Function&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;end select&#xA;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;migrateElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;startMigration"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="266"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Diagram Script Utilities"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="267"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2224E8B2-578A-4d13-B418-0C5441587749}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Current Diagram Connector Labels&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="' Script utilities to update label settings for all connectors on a diagram.&#xA;'&#xA; &#xA;const SECTION_DELIMITER = &quot;$&quot;&#xA;const GEOMETRY_DELIMITER = &quot;;&quot;&#xA;const LABEL_DELIMITER = &quot;:&quot;&#xA;const ASSIGNMENT = &quot;=&quot;&#xA;&#xA;sub HideCurrentDiagramConnectorLabels( labelIDList)&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#x9;&#xA;&#x9;HideDiagramConnectorLabels theDiagram, labelIDList&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;sub HideDiagramConnectorLabels( theDiagram, labelIDList)&#xA;&#x9;&#xA;&#x9;dim diagramLink &#x9;&#x9;&#x9;as EA.DiagramLink&#xA;&#x9;dim labelIDArray&#x9;&#x9;   'as String()&#xA;&#x9;dim labelID&#x9;&#x9;&#x9;&#x9;   'as String&#xA;&#x9;&#xA;&#x9;labelIDArray = Split(labelIDList, GEOMETRY_DELIMITER)&#xA;&#x9;&#xA;&#x9;for each diagramLink in theDiagram.DiagramLinks&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each labelID in labelIDArray&#xA;&#x9;&#x9;&#x9;HideDiagramLinkLabel diagramLink, labelID&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramLink.Update&#xA;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;sub HideDiagramLinkLabel( diagramLink, labelID)&#xA;&#xA;&#x9;dim geometrySectionList&#x9;   'as String&#xA;&#x9;dim geometrySectionArray   'as String()&#xA;&#x9;dim labelStyleList&#x9;&#x9;   'as String&#xA;&#x9;dim labelStyleArray&#x9;&#x9;   'as String()&#xA;&#x9;dim labelStyleIndex&#x9;&#x9;   'as Integer&#xA;&#x9;dim labelStyle&#x9;&#x9;&#x9;   'as String&#xA;&#x9;dim styleFound&#x9;&#x9;&#x9;   'as Boolean&#xA;&#x9;&#xA;&#x9;geometrySectionList = diagramLink.Geometry&#xA;&#x9;&#xA;&#x9;geometrySectionArray = Split( geometrySectionList, SECTION_DELIMITER)&#xA;&#x9;&#xA;&#x9;labelStyleList = geometrySectionArray(1)&#xA;&#x9;&#xA;&#x9;labelStyleArray = Split(labelStyleList, GEOMETRY_DELIMITER)&#xA;&#x9;&#xA;&#x9;labelStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each labelStyle in labelStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( labelStyle, labelID &amp; ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;labelStyle = labelID &amp; ASSIGNMENT &amp; &quot;HDN=1&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;labelStyleArray( labelStyleIndex) = labelStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;labelStyleIndex = labelStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;labelStyleList = Join( labelStyleArray, GEOMETRY_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;labelStyleList = labelStyleList &amp; labelID &amp; ASSIGNMENT &amp; &quot;HDN=1&quot; &amp; GEOMETRY_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;geometrySectionArray(1) = labelStyleList&#xA;&#x9;&#xA;&#x9;geometrySectionList = Join( geometrySectionArray, SECTION_DELIMITER)&#xA;&#x9;&#x9;&#xA;&#x9;diagramLink.Geometry = geometrySectionList&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub test&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram = Repository.GetDiagramByID( 129)&#xA;&#x9;&#xA;&#x9;HideDiagramConnectorLabels theDiagram, &quot;LLT;LRT&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;'test"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="268"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7252C4F3-3879-474c-B9B9-AB5B0A63496A}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - Migrate Stereotype (Business Process )&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to migrate TAM Business Processes initially imported as ArchiMate Business Processes&#xA;' to TMF_BusinessProcess.&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub startMigration&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#xA;&#x9;&#xA;&#x9;packageGUID = &quot;{64C7CCBF-9923-49d5-9ABB-F8A50A26F398}&quot;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;migratePackage package&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migratePackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Migrating package '&quot; &amp; package.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;migrateElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;migratePackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migrateElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim objTypeTV as EA.TaggedValue&#xA;&#x9;dim objType 'as string&#xA;&#x9;&#xA;&#x9;set objTypeTV = element.TaggedValues.GetByName(&quot;OT_ID&quot;)&#xA;&#x9;&#xA;&#x9;if not objTypeTV is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;objType = objTypeTV.Value&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;select case objType&#xA;&#x9;&#x9;&#x9;case &quot;20007&quot; ' eTOM Business Process&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Migrating element &lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;element.Type = &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.StereotypeEx = &quot;TMF_ArchiMate3::TMF_BusinessProcess&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Skipping element &lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end select&#xA;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;migrateElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;startMigration"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="269"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6E37AA2B-4D6F-44a4-8166-636221B6ACAC}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - create Diagram Hyperlinks&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC TM Forum Scripts.Utility Scripts&#xA;' util - create Diagram Hyperlinks&#xA;' Script to create hyperlinks to child diagrams for TMF hyperlink stereotypes (i.e. TMF_CategoryHyperlink)&#xA;' on top level diagrams (i.e. Application Framework Level 1 Overview). WIP&#xA;&#xA;&#xA;dim diagramGUID 'as string&#xA;diagramGUID = &quot;{61BAFBF9-2981-4cac-A497-58FD47F2D2E8}&quot;&#xA;setDiagramHyperlinks diagramGUID&#xA;&#xA;sub setDiagramHyperlinks( diagramGUID)&#xA;&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim elementID 'as Integer&#xA;&#x9;dim diagramElement as EA.Element&#xA;&#x9;&#xA;&#x9;set diagram = Repository.GetDiagramByGuid( diagramGUID)&#xA;&#x9;Session.Output &quot;Set diagram hyperlinks for '&quot; &amp; diagram.name &amp; &quot;'....&quot;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#x9;&#x9;&#xA;&#x9;&#x9;set diagramElement = Repository.GetElementByID( elementID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;select case diagramElement.Stereotype&#xA;&#x9;&#x9;&#x9;case &quot;TMF_CategoryHyperlink&quot;&#xA;&#x9;&#x9;&#x9;&#x9;setObjectHyperlink diagramElement, &quot;Class&quot;, &quot;Frameworx Category&quot;&#xA;&#x9;&#x9;&#x9;case &quot;TMF_DomainHyperlink&quot;&#xA;&#x9;&#x9;&#x9;&#x9;setObjectHyperlink diagramElement, &quot;Class&quot;, &quot;Frameworx Domain&quot;&#xA;&#x9;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Skipping &lt;&lt;&quot; &amp; diagramElement.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; diagramElement.Name &amp; &quot;'...&quot;&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub setObjectHyperlink( diagramElement, objType, stereotype)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim OT_ID 'as string&#xA;&#x9;dim GO_ID 'as string&#xA;&#x9;dim parentElement as EA.Element&#xA;&#x9;dim childDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Setting hyperlink for '&quot; &amp; diagramElement.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;set taggedValue = diagramElement.TaggedValues.GetByName( &quot;OT_ID&quot;)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;OT_ID = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;OT_ID = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;set taggedValue = diagramElement.TaggedValues.GetByName( &quot;GO_ID&quot;)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;GO_ID = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;GO_ID = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;if OT_ID &lt;&gt; &quot;&quot; and GO_ID &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;set parentElement = getParentElement( OT_ID, GO_ID, objType, stereotype)&#x9;&#x9;&#xA;&#x9;&#x9;if parentElement.Diagrams.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;set childDiagram = parentElement.Diagrams.GetAt(0)&#xA;&#x9;&#x9;&#x9;diagramElement.Notes = diagramElement.Name&#xA;&#x9;&#x9;&#x9;diagramElement.Name = &quot;$diagram://&quot; &amp; childDiagram.DiagramGUID&#xA;&#x9;&#x9;&#x9;diagramElement.ParentID = parentElement.ElementID&#xA;&#x9;&#x9;&#x9;diagramElement.Update&#xA;&#x9;&#x9;&#x9;setElementPDATA diagramElement, 1, childDiagram.DiagramID&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function getParentElement( OT_ID, GO_ID, objType, stereotype)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim parentElement as EA.Element&#xA;&#xA;&#x9;sqlString = &quot;SELECT t_object.ea_guid FROM (t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_objectproperties AS OT_ID_Prop ON t_object.Object_ID = OT_ID_Prop.Object_ID)&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_objectproperties AS GO_ID_Prop ON t_object.Object_ID = GO_ID_Prop.Object_ID&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE (((OT_ID_Prop.Property)='OT_ID')&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND ((OT_ID_Prop.Value)='&quot; &amp; OT_ID &amp; &quot;')&quot; &#xA;&#x9;sqlString = sqlString &amp; &quot; AND ((GO_ID_Prop.Property)='GO_ID')&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND ((GO_ID_Prop.Value)='&quot; &amp; GO_ID &amp; &quot;')&quot; &#xA;&#x9;sqlString = sqlString &amp; &quot; AND ((t_object.Stereotype)='&quot; &amp; stereotype &amp; &quot;')&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND ((t_object.Object_Type)='&quot; &amp; objType &amp; &quot;'))&quot;&#xA;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set parentElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set parentElement = Nothing&#xA;&#x9;End If&#xA;&#xA;&#x9;set getParentElement = parentElement&#xA;&#xA;end function&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="270"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D889F8BD-B213-4f13-A120-4CD752E929AB}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util - Migrate Stereotype by Tagged Value&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Util - Migrate Stereotype by Tagged Value&#xA;' change the stereotype of a hierqarchy based on a certain Tagged Value&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub startMigration&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#x9;&#xA;&#x9;packageGUID = &quot;{64C7CCBF-9923-49d5-9ABB-F8A50A26F398}&quot;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#x9;&#xA;&#x9;migratePackage package&#x9;&#xA;end sub&#xA;&#xA;sub migratePackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Migrating package '&quot; &amp; package.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;migrateElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;migratePackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migrateElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim objTypeTV as EA.TaggedValue&#xA;&#x9;dim objType 'as string&#xA;&#x9;&#xA;&#x9;' change the name of the Tag value to be evaluated&#xA;&#x9;set objTypeTV = element.TaggedValues.GetByName(&quot;OT_ID&quot;)&#xA;&#x9;&#xA;&#x9;if not objTypeTV is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;objType = objTypeTV.Value&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;select case objType&#xA;&#x9;&#x9;&#x9;case &quot;20007&quot; ' eTOM Business Process&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Migrating element &lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;element.Type = &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.StereotypeEx = &quot;TMF::TMF_Process&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Skipping element &lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end select&#xA;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;migrateElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;startMigration"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="271"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6936647E-B19C-442e-8E77-A9DBD9F8A7DF}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Biz - Migrate Business Scenarios&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to migrate eTOM Business Scenarios initially imported as ArchiMate Business Collaborations&#xA;' to ArchiMate Business Interactions.&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub startMigration&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#xA;&#x9;&#xA;&#x9;packageGUID = &quot;{B0BB6673-62D9-4ee8-8875-9A1DD7973510}&quot;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;migratePackage package&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migratePackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Migrating package '&quot; &amp; package.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;migrateElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;migratePackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migrateElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim objTypeTV as EA.TaggedValue&#xA;&#x9;dim objType 'as string&#xA;&#x9;&#xA;&#x9;set objTypeTV = element.TaggedValues.GetByName(&quot;OT_ID&quot;)&#xA;&#x9;&#xA;&#x9;if not objTypeTV is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;objType = objTypeTV.Value&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;select case objType&#xA;&#x9;&#x9;&#x9;case &quot;20073&quot; ' eTOM Business Scenario&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Migrating element &lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;element.Type = &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.StereotypeEx = &quot;ArchiMate3::ArchiMate_BusinessInteraction&quot;&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Skipping element &lt;&lt;&quot; &amp; element.Stereotype &amp; &quot;&gt;&gt; '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end select&#xA;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;migrateElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;startMigration"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="272"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Diagram TMF non-used"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="273"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{924F8CD3-A240-410d-A071-2F0E51A21C09}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SID -Create ABE Dia (4x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;'create a nested hierarchy of ABEs starting from a package.&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;'&#x9;&#x9;&#x9;for each element in thePackage.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage,  levelList, &quot;ABE&quot;, false&#x9;&#x9;'''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;ABE&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 345&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 20&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;level1.objectStyle.lineColor = colorSilver&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 18&#xA;&#x9;level1.objectStyle.fontColor = colorGray40&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 3&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level2.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 20&#xA;&#x9;level2.horizSpace = 5&#xA;&#x9;level2.vertOffset = 60&#xA;&#x9;level2.vertSpace = 5&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;level2.objectStyle.lineColor = colorSilver&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;level2.objectStyle.fontColor = colorGray40&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 20&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;level3.objectStyle.lineColor = colorSilver&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;level3.objectStyle.fontColor = colorGray40&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level4.objectHeight&#x9;= 60&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 1&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 1&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;level4.objectStyle.lineColor = colorSilver&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;level4.objectStyle.fontColor = colorGray40&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="274"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{907370B6-D308-4256-8B4B-B42765E13B83}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Set All Connectors to &amp;quot;Tree - Vertical&amp;quot; Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style of all connectors on a diagram to &quot;Tree - Vertical&quot;&#xA; '&#xA; &#xA;!INC SSNA Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;Mode=3;TREE=V&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="275"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{074FD1EC-DB09-4876-B4E1-A6CDC2254B06}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Make Compositions Unidirectional&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to make all composition relationships unidirectional on an open diagram.&#xA; '&#xA; &#xA;Dim project as EA.Project&#xA;&#xA;sub Start()&#xA;&#xA;&#x9;Session.Output( &quot;Make Compositions Unidirectional v1.0&quot; )&#xA;&#x9;Session.Output( &quot;=====================================&quot; )&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;if not theDiagram is nothing then&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;MakeCompositionsUnidirectional theDiagram&#xA;&#xA;&#x9;else&#xA;&#x9;&#xA;&#x9;&#x9;MsgBox( &quot;This script requires a diagram be opened.&quot; &amp; chr(10) &amp; _&#xA;&#x9;&#x9;&#x9;&quot;Please open a diagram from the Project Browser and try again.&quot; )&#xA;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;Session.Output( &quot;Done!&quot; )&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub MakeCompositionsUnidirectional ( theDiagram )&#xA;&#x9;&#xA;&#x9;dim aDiagramLink as EA.DiagramLink&#xA;&#x9;dim connectorID&#xA;&#x9;dim aConnector as EA.Connector&#xA;&#x9;dim newTag as EA.ConnectorTag&#xA;&#x9;&#xA;&#x9;for each aDiagramLink in theDiagram.DiagramLinks&#xA;&#x9;&#xA;&#x9;&#x9;connectorID = aDiagramLink.ConnectorID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set aConnector = Repository.GetConnectorByID( connectorID)&#xA;&#x9;&#xA;&#x9;&#x9;aConnector.ClientEnd.Navigable = &quot;Navigable&quot;&#xA;&#x9;&#x9;aConnector.ClientEnd.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;aConnector.SupplierEnd.Navigable = &quot;Unspecified&quot;&#xA;&#x9;&#x9;aConnector.SupplierEnd.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'aConnector.Update&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram( theDiagram.DiagramID )&#xA;&#x9;&#xA;end sub&#xA;&#xA;Start&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="276"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0F2B950F-8498-4a4f-AF88-9870B2488B14}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Relocate Selected Diagram &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to move the selected elements on a diagram into the same package (in the browser) as the diagram.&#xA; '&#xA;&#xA;Dim project as EA.Project&#xA;&#xA;sub Start()&#xA;&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;set diagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#x9;if not diagram is nothing then&#x9;&#xA;&#x9;&#x9;&#x9;RelocateDiagramElements diagram&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub RelocateDiagramElements( diagram)&#xA;&#x9;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim diagramPackageID&#xA;&#x9;dim elementID&#xA;&#x9;dim element as EA.Element&#xA;&#x9;&#xA;&#x9;diagramPackageID = diagram.PackageID&#xA;&#x9;&#xA;&#x9;for each diagramObject in diagram.SelectedObjects&#xA;&#x9;&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(elementID)&#xA;&#x9;&#x9;&#x9;&#x9;element.PackageID = diagramPackageID&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;Start&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="277"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7E844B28-62C8-4d7c-B1AD-826B90DF6D38}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; Set Element Status Color&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of elements on a diagram based the value of the Status property.&#xA; ' this can be done also with a legend&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Element -&gt; Change Color&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim ruleArray(2)&#xA;&#x9;dim colorArray(2)&#xA;&#xA;&#x9;ruleArray(0) = &quot;element.Status = &quot;&quot;Approved&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;element.Status = &quot;&quot;Proposed&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;element.Status = &quot;&quot;Mandatory&quot;&quot;&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightSkyBlue&#xA;&#x9;colorArray(1) = colorPaleGreen&#xA;&#x9;colorArray(2) = colorLightCoral&#xA;&#x9;&#xA;&#x9;ChangeElementColor ruleArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="278"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4E689071-022F-4451-872B-47D11B4A74FA}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Change Element Color&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     ChangeElementColorByRule&#xA;' Author:          Giu Platania&#xA;' Purpose:         Change the fill color of elements on the current diagram based on an array of rules.&#xA;' Methods:         ChangeElementColor&#xA;' Date:            2025-08-06&#xA;' Version:         1.0&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Changes element background color in the current diagram according to ruleArray and colorArray.&#xA;' Each rule should be a function that takes an EA.Element and returns True/False.&#xA;Sub ChangeElementColor(ruleArray, colorArray)&#xA;&#xA;    Dim currentDiagram As EA.Diagram&#xA;    Dim diagramObject As EA.DiagramObject&#xA;    Dim backgroundColor&#xA;    Dim elementID&#xA;    Dim element As EA.Element&#xA;    Dim index&#xA;    Dim rule&#xA;&#xA;    Set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;    If Not currentDiagram Is Nothing Then&#xA;&#xA;        Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#xA;        For Each diagramObject In currentDiagram.DiagramObjects&#xA;&#xA;            elementID = diagramObject.ElementID&#xA;            Set element = Repository.GetElementByID(elementID)&#xA;&#xA;            For index = 0 To UBound(ruleArray)&#xA;&#xA;                Set rule = ruleArray(index) ' rule is a function&#xA;&#xA;                If rule(element) Then&#xA;                    backgroundColor = colorArray(index)&#xA;                    ' Preserve other style properties&#xA;                    diagramObject.Style = &quot;BCol=&quot; &amp; backgroundColor &amp; &quot;;&quot; &amp; diagramObject.Style&#xA;                    diagramObject.Update&#xA;                End If&#xA;&#xA;            Next&#xA;&#xA;        Next&#xA;&#xA;        Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#xA;    Else&#xA;        Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;    End If&#xA;&#xA;End Sub&#xA;&#xA;' --- Example Usage ---&#xA;' To use this, define an array of functions and color codes, then call ChangeElementColor.&#xA;'&#xA;' Example (to be run in the Script window, not inside the function above):&#xA;'&#xA;' Dim rules(1)&#xA;' Dim colors(1)&#xA;' Set rules(0) = GetRuleByType(&quot;Class&quot;)&#xA;' colors(0) = 255 ' Red for &quot;Class&quot;&#xA;' Set rules(1) = GetRuleByType(&quot;Interface&quot;)&#xA;' colors(1) = 16711935 ' Magenta for &quot;Interface&quot;&#xA;' ChangeElementColor rules, colors&#xA;'&#xA;' Function GetRuleByType(wantedType)&#xA;'     Set GetRuleByType = GetRef(&quot;Function(element) GetRuleByType_Impl(element, wantedType): End Function&quot;)&#xA;' End Function&#xA;'&#xA;' Function GetRuleByType_Impl(element, wantedType)&#xA;'     GetRuleByType_Impl = (LCase(element.Type) = LCase(wantedType))&#xA;' End Function&#xA;'&#xA;&#xA;' -----------------------&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="279"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{65226BAA-DD76-488b-8A86-985D80350772}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Current Diagram Connector Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value=" ' Script to update style of all connectors on a diagram.&#xA; '&#xA; &#xA;const STYLE_DELIMITER = &quot;;&quot;&#xA;const STYLE_ASSIGNMENT = &quot;=&quot;&#xA;&#xA;sub SetCurrentDiagramConnectorLineStyle(updateStyleList)&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramConnectorLineStyle theDiagram, updateStyleList&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramConnectorLineStyle( theDiagram, updateStyleList)&#xA;&#x9;&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#x9;dim updateStyleArray&#xA;&#x9;dim updateStyle&#xA;&#x9;&#xA;&#x9;updateStyleArray = Split(updateStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;for each diagramLink in theDiagram.DiagramLinks&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each updateStyle in updateStyleArray&#xA;&#x9;&#x9;&#x9;SetDiagramLinkStyle diagramLink, updateStyle&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramLink.Update&#xA;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramLinkStyle( diagramLink, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagramLink.Style&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagramLink.Style = lineStyleList&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="280"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DEB26DC7-EA0C-42af-A5A9-5118B426E935}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt;  Set All to &amp;quot;Direct&amp;quot; Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style of all connectors on a diagram to &quot;Direct&quot;&#xA; '&#xA; &#xA;!INC SSNA Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;Mode=1&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="281"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FF932748-4423-4e81-A05E-31040E2D9A32}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Set All Connectors to &amp;quot;Orthogonal - Square&amp;quot; Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style of all connectors on the current  diagram  to &quot;Orthogonal - Square&quot;&#xA; '&#xA;&#xA; &#xA;!INC Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;Mode=3;TREE=OS&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="282"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7C6C7171-59EB-41b7-B333-EE8B2A10B42E}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Set All Connectors to &amp;quot;Lateral - Vertical&amp;quot; Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style of all connectors on a diagram to &quot;Tree - Vertical&quot;&#xA;&#xA; &#xA;!INC SSNA Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;Mode=3;TREE=LV&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="283"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9F00A138-A83A-4950-91E6-80E2275791E1}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; Clear Element Color&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to clear the fill color of elements on a diagram.&#xA; '&#xA;&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Element Color&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim ruleArray(0)&#xA;&#x9;dim colorArray(0)&#xA;&#xA;&#x9;ruleArray(0) = &quot;element.ElementID &lt;&gt; &quot;&quot;&quot;&quot;&quot;&#xA;&#x9;&#xA;&#x9;colorArray(0) = &quot;&quot;&#xA;&#x9;&#xA;&#x9;ChangeElementColor ruleArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="284"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D52F6E76-1158-49a6-8654-44954374D76E}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Color Constants&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="&#xA;&#xA;' If needed, get more color constants from http://cloford.com/resources/colours/500col.htm&#xA;&#xA;const colorBlack &#x9;&#x9;&#x9;= 0&#xA;const colorRed &#x9;&#x9;&#x9;&#x9;= 255&#xA;const colorGreen &#x9;&#x9;&#x9;= 32768&#xA;const colorLightCoral &#x9;&#x9;= 8421616&#xA;const colorPaleGreen&#x9;&#x9;= 10025880&#xA;const colorLightSkyBlue&#x9;&#x9;= 16436871&#xA;const colorBlue &#x9;&#x9;&#x9;= 16711680&#xA;const colorWhite &#x9;&#x9;&#x9;= 16777215"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="285"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{99D96B7A-0426-4afe-BBF4-86B7F6BBA460}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - Reload Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to save current diagram and reload it. Used to manually refresh diagram when it does not automatically update.&#xA; '&#xA;&#xA;&#xA;sub ReloadDiagram()&#xA;&#xA;&#x9;dim aDiagram as EA.Diagram&#x9;&#xA;&#x9;set aDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;if not aDiagram is nothing then&#x9;&#xA;&#xA;&#x9;&#x9;aDiagram.Update&#xA;&#x9;&#x9;Repository.ReloadDiagram(aDiagram.DiagramID)&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;ReloadDiagram&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="286"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9EE5E39A-4576-4153-A972-31C9C1BBCFBC}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Current Diagram Objects Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value=" ' Script to update style for all diagram objects of a specific type.&#xA; '&#xA; &#xA;const STYLE_DELIMITER = &quot;;&quot;&#xA;const STYLE_ASSIGNMENT = &quot;=&quot;&#xA;&#xA;sub SetCurrentDiagramObjectsStyle(elementMetaType, updateStyleList)&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramObjectsStyle theDiagram, elementMetaType, updateStyleList&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectsStyle( theDiagram, elementMetaType, updateStyleList)&#xA;&#x9;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim diagramElement as EA.Element&#xA;&#x9;dim elementID&#xA;&#x9;dim updateStyleArray&#xA;&#x9;dim updateStyle&#xA;&#x9;&#xA;&#x9;updateStyleArray = Split(updateStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;for each diagramObject in theDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramElement = Repository.GetElementByID(elementID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if diagramElement.metaType = elementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each updateStyle in updateStyleArray&#xA;&#x9;&#x9;&#x9;&#x9;SetDiagramObjectStyle diagramObject, updateStyle&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectStyle( diagramObject, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagramObject.Style&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagramObject.Style = lineStyleList&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="287"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{30037838-9201-4c7d-9B07-33A18793A3CB}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; Display Diagram Parts Port Type&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style for all diagram objects of a specific type.&#xA; '&#xA; &#xA;!INC Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;SetCurrentDiagramObjectsStyle &quot;Port&quot;, &quot;PType=1&quot;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="288"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3ED947EF-9A8C-416b-A069-097C7159C9E2}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Hide All Connector Labels&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to hide all labels of all connectors on a diagram&#xA; '&#xA;&#xA; &#xA;!INC Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;HideLabels=1&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="289"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8764ECE0-EA32-472d-86BF-851D189C8A15}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Set All Connectors to &amp;quot;Tree - Horizontal&amp;quot; Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style all connectors on the current  diagra to &quot;Tree - Horizontal&quot;&#xA; '&#xA; &#xA;!INC Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;Mode=3;TREE=H&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="290"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6D46E91C-7022-4e1a-8FC3-16FC62D28CB4}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Set All Connectors to &amp;quot;Orthogonal - Rounded&amp;quot; Line Style&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to update style of all connectors on the current  diagram to &quot;Orthogonal - Rounded&quot;&#xA; '&#xA; &#xA;!INC Diagram Script Utilities.Set Current Diagram Connector Line Style&#xA;&#xA;SetCurrentDiagramConnectorLineStyle( &quot;Mode=3;TREE=OR&quot;)"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="291"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0D08ABA9-883A-4f36-A537-DB18A150BF2D}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Map Diagram Elements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'&#xA;' Script to create new relationships between a single selected element on a diagram and all other elements on the same diagram.&#xA;'&#xA;'&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub onDiagramScript()&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim selectedObjectList as EA.Collection&#xA;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;dim connType ' as String&#xA;&#x9;dim connStereotype ' as String&#xA;&#x9;&#x9;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;set selectedObjectList = currentDiagram.SelectedObjects&#xA;&#xA;&#x9;&#x9;if selectedObjectList.Count = 1 then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;connType = InputBox(&quot;Enter mapped connector type:&quot;, , &quot;Dependency&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if not IsEmpty( connType) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;connStereotype = InputBox(&quot;Enter mapped connector stereotype:&quot;, , &quot;Impacts&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if not IsEmpty( connStereotype) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set selectedObject = selectedObjectList.GetAt(0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;mapDiagramElements currentDiagram, selectedObject, connType, connStereotype&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Must select at least one (and only one) element on this diagram.&quot;, promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub mapDiagramElements( diagram, selectedDiagramObject, connType, connStereotype)&#xA;&#xA;&#x9;dim selectedElementID ' as Integer&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim relatedDiagramObject as EA.DiagramObject&#xA;&#x9;dim relatedElementID ' as Integer&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;Session.Output vbCRLF &amp; &quot;Map Diagram Elements&quot;&#xA;&#x9;&#xA;&#x9;selectedElementID = selectedDiagramObject.ElementID&#xA;&#x9;&#xA;&#x9;set selectedElement = Repository.GetElementByID( selectedElementID)&#xA;&#x9;&#xA;&#x9;for each relatedDiagramObject in diagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;if relatedDiagramObject.ElementID &lt;&gt; selectedDiagramObject.ElementID then&#xA;&#xA;&#x9;&#x9;&#x9;relatedElementID = relatedDiagramObject.ElementID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;addConnector selectedElement, connType, connStereotype, relatedElement&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;&#x9;Repository.ReloadDiagram( diagram.DiagramID)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Finished!&quot; &#xA;&#xA;end sub&#xA;&#xA;function addConnector( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#xA;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#xA;&#x9;&#xA;&#x9;newConnector.Stereotype = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#xA;&#x9;&#xA;&#x9;newConnector.Update&#xA;&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#xA;&#x9;set addConnector = newConnector&#xA;&#x9;&#xA;end function&#xA;&#xA;onDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="292"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{855FAAD6-A10B-4ec3-9257-E8E6040D3AF3}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Cloning -&amp;gt; Clone Element&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'&#xA;' Diagram script to a new version of the selected elements on a diagram. This will create a copy of an element &#xA;' including its built-in properties, tagged values, relationships, child elements, and child diagrams. It will &#xA;' also create an &lt;&lt;clone&gt;&gt; generalization to the original version to represent its previous version.&#xA;' &#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC TM Forum Diagram Script Utilities.Clone Routines&#xA;&#xA;dim lockError ' as Boolean&#xA;&#xA;sub Start()&#xA;&#xA;&#x9;dim currDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set currDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;if currDiagram is nothing then&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;else&#xA;&#x9;&#x9;if currDiagram.IsLocked then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Cannot clone elements on locked diagram&quot;, promptOK&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;CopyDiagramElements currDiagram&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyDiagramElements( currDiagram)&#xA;&#x9;&#xA;&#x9;dim currDiagramObject as EA.DiagramObject&#xA;&#x9;dim diagramPackageID&#xA;&#x9;&#xA;&#x9;diagramPackageID = currDiagram.PackageID&#xA;&#x9;&#xA;&#x9;for each currDiagramObject in currDiagram.SelectedObjects&#xA;&#x9;&#x9;CreateDiagramObjectCopy currDiagram, currDiagramObject&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currDiagram.Update()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;Repository.ReloadDiagram( currDiagram.DiagramID)&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CreateDiagramObjectCopy( currDiagram, currDiagramObject)&#xA;&#xA;&#x9;dim currElementID&#xA;&#x9;dim currElement as EA.Element&#xA;&#x9;dim diagramPackageID&#xA;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;dim newElement as EA.Element&#xA;&#xA;&#x9;lockError = false&#xA;&#x9;&#xA;&#x9;currElementID = currDiagramObject.ElementID&#xA;&#x9;&#xA;&#x9;set currElement = Repository.GetElementByID( currElementID)&#xA;&#x9;&#xA;&#x9;diagramPackageID = currDiagram.PackageID&#xA;&#x9;&#xA;&#x9;set diagramPackage = Repository.GetPackageByID( diagramPackageID)&#xA;&#x9;&#xA;&#x9;set newElement = diagramPackage.Elements.AddNew( currElement.Name, currElement.Type)&#xA;&#x9;&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;&#xA;&#x9;Session.Output String( 40, &quot;-&quot;)&#xA;&#x9;Session.Output &quot;Creating clone of '&quot; &amp; currElement.Name &amp; &quot;'...&quot;&#xA;&#xA;&#x9;CloneElement currElement, newElement&#xA;&#x9;&#xA;&#x9;SwapDiagramObject currDiagram, currDiagramObject, currElement, newElement&#xA;&#x9;&#xA;&#x9;if lockError then&#xA;&#x9;&#x9;Session.Prompt &quot;One or more relationhips could not be cloned due to locking restrictions.&quot; &amp; vbCRLF &amp; vbCRLF &amp; &quot;Examine the Script tab of the System Output window for details.&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;&#x9;Session.Output &quot;Finished!&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CloneElement( currElement, newElement)&#xA;&#xA;&#x9;dim extendConn as EA.Connector&#xA;&#x9;dim clonedGUIDTag as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;'CloneElementParent currElement&#xA;&#x9;&#xA;&#x9;CopyElementProperties currElement, newElement&#xA;&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#xA;&#x9;'CopyElementAttributes&#xA;&#x9;'CopyElementConstraints&#xA;&#x9;'CopyElementCustomProperties&#xA;&#x9;'CopyElementEfforts&#xA;&#x9;'CopyElementFiles&#xA;&#x9;'CopyElementIssues&#xA;&#x9;'CopyElementMethods&#xA;&#x9;'CopyElementMetrics&#xA;&#x9;'CopyElementPartitions&#xA;&#x9;'CopyElementRequirements&#xA;&#x9;'CopyElementResources&#xA;&#x9;'CopyElementRisks&#xA;&#x9;'CopyElementScenarios&#xA;&#x9;'CopyElementStateTransitions&#xA;&#x9;'CopyElementTemplateParameters&#xA;&#x9;'CopyElementTests&#xA;&#x9;&#xA;&#x9;CopyElementTaggedValues currElement, newElement&#xA;&#x9;&#xA;&#x9;CopyElementConnectors currElement, newElement&#xA;&#x9;&#xA;&#x9;CopyElementDiagrams currElement, newElement&#xA;&#x9;&#xA;&#x9;'CloneElementEmbeddedElements currElement, newElement&#xA;&#x9;'CloneElementChildren currElement, newElement&#xA;&#x9;'CloneStateMachines currElement, newElement&#xA;&#x9;&#xA;&#x9;set extendConn = newElement.Connectors.AddNew( &quot;&quot;, CLONE_TYPE)&#xA;&#x9;&#xA;&#x9;extendConn.SupplierID = currElement.ElementID&#xA;&#x9;extendConn.Direction = &quot;Source -&gt; Destination&quot;&#xA;&#x9;extendConn.Stereotype = CLONE_STEREOTYPE&#xA;&#x9;&#xA;&#x9;extendConn.Update&#xA;&#x9;&#xA;&#x9;newElement.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;set clonedGUIDTag = newElement.TaggedValues.GetByName( CLONED_GUID)&#xA;&#x9;&#xA;&#x9;if clonedGUIDTag is nothing then&#xA;&#x9;&#x9;set clonedGUIDTag = newElement.TaggedValues.AddNew( CLONED_GUID, &quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;clonedGUIDTag.Value = currElement.ElementGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;clonedGUIDTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;newElement.TaggedValues.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CloneElementChildren( currElement, newElement)&#xA;&#xA;&#x9;dim currChildElement as EA.Element&#xA;&#x9;dim newChildElement as EA.Element&#xA;&#x9;&#xA;&#x9;if currElement.Elements.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 2, &quot;.&quot;) &amp; &quot;Child Elements&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each currChildElement in currElement.Elements&#xA;&#xA;&#x9;&#x9;&#x9;set newChildElement = newElement.Elements.AddNew( currElement.Name, currElement.Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CloneElement currChildElement, newChildElement&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub CopyElementProperties( currElement, newElement)&#xA;&#xA;&#x9;newElement.Abstract &#x9;= currElement.Abstract&#xA;&#x9;newElement.ActionFlags &#x9;= currElement.ActionFlags&#xA;&#x9;newElement.Alias    &#x9;= currElement.Alias&#xA;&#x9;newElement.ClassifierID&#x9;= currElement.ClassifierID&#xA;&#x9;newElement.Complexity &#x9;= currElement.Complexity&#xA;&#x9;newElement.Difficulty &#x9;= currElement.Difficulty&#xA;&#x9;newElement.EventFlags &#x9;= currElement.EventFlags&#xA;&#x9;newElement.ExtensionPoints = currElement.ExtensionPoints&#xA;&#x9;newElement.Genfile&#x9;&#x9;= currElement.Genfile&#xA;&#x9;newElement.Genlinks&#x9;&#x9;= currElement.Genlinks&#xA;&#x9;newElement.Gentype&#x9;&#x9;= currElement.Gentype&#xA;&#x9;newElement.Header1 &#x9;&#x9;= currElement.Header1&#xA;&#x9;newElement.Header2 &#x9;&#x9;= currElement.Header2&#xA;&#x9;newElement.IsActive &#x9;= currElement.IsActive&#xA;&#x9;newElement.IsLeaf &#x9;&#x9;= currElement.IsLeaf&#xA;&#x9;newElement.IsNew &#x9;&#x9;= currElement.IsNew&#xA;&#x9;newElement.IsRoot &#x9;&#x9;= currElement.IsRoot&#xA;&#x9;newElement.IsSpec &#x9;&#x9;= currElement.IsSpec&#xA;&#x9;newElement.Multiplicity&#x9;= currElement.Multiplicity&#xA;&#x9;newElement.Notes &#x9;&#x9;= currElement.Notes&#xA;&#x9;newElement.Persistence&#x9;= currElement.Persistence&#xA;&#x9;newElement.Phase &#x9;&#x9;= currElement.Phase&#xA;&#x9;newElement.Priority     = currElement.Priority&#xA;&#x9;newElement.PropertyType = currElement.PropertyType&#xA;&#x9;newElement.RunState &#x9;= currElement.RunState&#x9;&#xA;&#x9;newElement.Status&#x9;&#x9;= currElement.Status&#xA;&#x9;newElement.StereotypeEx = currElement.StereotypeEx&#xA;&#x9;newElement.StyleEx&#x9;&#x9;= currElement.StyleEx&#xA;&#x9;newElement.Subtype &#x9;&#x9;= currElement.Subtype&#xA;&#x9;newElement.Tablespace&#x9;= currElement.Tablespace&#xA;&#x9;newElement.Tag &#x9;&#x9;&#x9;= currElement.Tag&#xA;&#x9;newElement.Visibility&#x9;= currElement.Visibility&#xA;&#x9;&#xA;&#x9;newElement.Name &#x9;&#x9;= InputBox( &quot;Enter new element name&quot;, &quot;New Element Name&quot;, currElement.Name) &#xA;&#x9;newElement.Version &#x9;&#x9;= InputBox( &quot;Enter new element version&quot;, &quot;New Element Version&quot;, currElement.Version) &#xA;&#x9;&#xA;&#x9;newElement.Update&#xA;&#x9;&#xA;&#x9;newElement.TaggedValues.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyElementTaggedValues( currElement, newElement)&#xA;&#xA;&#x9;dim currTaggedValue as EA.TaggedValue&#xA;&#x9;dim newTaggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;if currElement.TaggedValues.Count &gt; 0 then&#xA;&#xA;&#x9;&#x9;Session.Output String( 2, &quot;.&quot;) &amp; &quot;Tagged Values&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each currTaggedValue in currElement.TaggedValues&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set newTaggedValue = newElement.TaggedValues.GetByName( currTaggedValue.Name)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if newTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;set newTaggedValue = newElement.TaggedValues.AddNew( currTaggedValue.Name,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;newTaggedValue.Value = currTaggedValue.Value&#xA;&#x9;&#x9;&#x9;newTaggedValue.Notes = currTaggedValue.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;newTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;newElement.TaggedValues.Refresh&#xA;&#xA;end sub&#xA;&#xA;sub CopyElementConnectors( currElement, newElement)&#xA;&#xA;&#x9;dim currConnector as EA.Connector&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;dim clientEndLocked ' as Boolean&#xA;&#x9;dim clientElement as EA.Element&#xA;&#x9;dim lockMsg ' as String&#xA;&#x9;&#xA;&#x9;if currElement.Connectors.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 2, &quot;.&quot;) &amp; &quot;Connectors&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each currConnector in currElement.Connectors&#xA;&#xA;&#x9;&#x9;&#x9;if not( currConnector.Type = CLONE_TYPE and currConnector.Stereotype = CLONE_STEREOTYPE) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output String( 4, &quot;.&quot;) &amp; &quot;Cloning Connector &quot; &amp; currConnector.ConnectorGUID &amp; &quot; (&quot; &amp; currConnector.ConnectorID &amp; &quot;) &quot; &amp; currConnector.Type &amp; &quot; &lt;&lt;&quot; &amp; currConnector.Stereotype &amp; &quot;&gt;&gt; &quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'set newConnector = newElement.Connectors.AddNew( currConnector.Name, currConnector.Type)&#xA;&#x9;&#x9;&#x9;&#x9;set newConnector = createNewConnector( currConnector, currElement, newElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'if currConnector.ClientID = currElement.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;newConnector.ClientID = newElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;newConnector.SupplierID = currConnector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;clientEndLocked = false&#xA;&#x9;&#x9;&#x9;&#x9;'else&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if currElement.Locked then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'&#x9;clientEndLocked = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;&#x9;newConnector.ClientID = currConnector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;&#x9;newConnector.SupplierID = newElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;&#x9;clientEndLocked = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if clientEndLocked then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set clientElement = Repository.GetElementByID( currConnector.ClientID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lockMsg = &quot;Cannot create «&quot; &amp; currConnector.Stereotype &amp; &quot;» &quot; &amp; currConnector.Type &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lockMsg = lockMsg &amp; &quot; from LOCKED client element '&quot; &amp; clientElement.Name &amp; &quot;' «&quot; &amp; clientElement.Stereotype &amp; &quot;» &quot; &amp; clientElement.Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lockMsg = lockMsg &amp; &quot; to new cloned element.&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output lockMsg&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lockError = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CopyElementConnector currConnector, newConnector&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newElement.Connectors.Refresh&#xA;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;function createNewConnector( currConnector, currElement, newElement)&#xA;&#xA;&#x9;dim newConnectorClientID      ' as Integer&#xA;&#x9;dim newConnectorSupplierID    ' as Integer&#xA;&#x9;dim sqlString&#x9;&#x9;&#x9;      ' as String&#xA;&#x9;dim typeLib&#x9;&#x9;&#x9;&#x9;      ' as Scriptlet.TypeLib&#xA;&#x9;dim newGUID&#x9;&#x9;&#x9;&#x9;   &#x9;  ' as String&#xA;&#x9;dim newConnector&#x9;&#x9;&#x9;&#x9;as EA.Connector&#xA;&#x9;dim testConnector&#x9;&#x9;   &#x9;&#x9;as EA.Connector&#xA;&#xA;&#x9;if currConnector.ClientID = currElement.ElementID then&#xA;&#x9;&#x9;newConnectorClientID = newElement.ElementID&#xA;&#x9;&#x9;newConnectorSupplierID = currConnector.SupplierID&#xA;&#x9;else&#xA;&#x9;&#x9;newConnectorClientID = currConnector.ClientID&#xA;&#x9;&#x9;newConnectorSupplierID = newElement.ElementID&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;set typeLib = CreateObject( &quot;Scriptlet.TypeLib&quot;)&#xA;&#x9;&#xA;&#x9;newGUID = typeLib.Guid&#xA;&#x9;newGUID = Left( newGUID, Len( newGUID) - 2) ' remove null termination characters at end&#xA;&#x9;&#xA;&#x9;sqlString = &quot;INSERT INTO t_connector &quot;&#xA;    sqlString = sqlString &amp; &quot;(Name, Direction, Connector_Type, Start_Object_ID, End_Object_ID, ea_guid, &quot;&#xA;&#x9;&#xA;&#x9;if currConnector.Stereotype &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;Stereotype, &quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;sqlString = sqlString &amp; &quot;PDATA1, PDATA2, PDATA3, PDATA4, PDATA5) &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;VALUES (&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.Name &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.Direction &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.Type &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; newConnectorClientID &amp; &quot;, &quot;&#xA;&#x9;sqlString = sqlString &amp; newConnectorSupplierID &amp; &quot;, &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; newGUID &amp; &quot;', &quot;&#xA;&#x9;&#xA;&#x9;if currConnector.Stereotype &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.Stereotype &amp; &quot;', &quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.MiscData(0) &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.MiscData(1) &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.MiscData(2) &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.MiscData(3) &amp; &quot;', &quot;&#xA;&#x9;sqlString = sqlString &amp; &quot;'&quot; &amp; currConnector.MiscData(4) &amp; &quot;')&quot;&#xA;&#x9;&#xA;&#x9;Repository.Execute sqlString&#xA;&#x9;&#xA;&#x9;set createNewConnector = Repository.GetConnectorByGuid( newGUID)&#xA;&#x9;&#xA;&#x9;'currElement.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;'set newConnector = nothing&#xA;&#x9;&#xA;&#x9;'for each testConnector in currElement.Connectors&#xA;&#x9;'&#x9;if testConnector.ConnectorGUID = newGUID then&#xA;&#x9;'&#x9;&#x9;set newConnector = testConnector&#xA;&#x9;'&#x9;&#x9;exit for&#xA;&#x9;'&#x9;end if&#xA;&#x9;'next&#xA;&#x9;&#xA;&#x9;'set createNewConnector = newConnector&#xA;&#x9;&#xA;end function&#xA;&#xA;sub CopyElementConnector( currConnector, newConnector)&#xA;&#xA;&#x9;dim clonedGUIDTag as EA.ConnectorTag&#xA;&#xA;&#x9;newConnector.Alias = currConnector.Alias&#xA;&#x9;newConnector.Color = currConnector.Color&#xA;&#x9;newConnector.DiagramID = currConnector.DiagramID&#xA;&#x9;newConnector.Direction = currConnector.Direction&#xA;&#x9;newConnector.EndPointX = currConnector.EndPointX&#xA;&#x9;newConnector.EndPointY = currConnector.EndPointY&#xA;&#x9;newConnector.EventFlags = currConnector.EventFlags&#xA;&#x9;newConnector.IsLeaf = currConnector.IsLeaf&#xA;&#x9;newConnector.IsRoot = currConnector.IsRoot&#xA;&#x9;newConnector.IsSpec = currConnector.IsSpec&#xA;&#x9;newConnector.Notes = currConnector.Notes&#xA;&#x9;newConnector.RouteStyle = currConnector.RouteStyle&#xA;&#x9;newConnector.SequenceNo = currConnector.SequenceNo&#xA;&#x9;newConnector.StartPointX = currConnector.StartPointX&#xA;&#x9;newConnector.StartPointY = currConnector.StartPointY&#xA;&#x9;newConnector.StateFlags = currConnector.StateFlags&#xA;&#x9;newConnector.StereotypeEx = currConnector.StereotypeEx&#xA;&#x9;newConnector.StyleEx = currConnector.StyleEx&#xA;&#x9;newConnector.Subtype = currConnector.Subtype&#xA;&#x9;newConnector.TransitionAction = currConnector.TransitionAction&#xA;&#x9;newConnector.TransitionEvent = currConnector.TransitionEvent&#xA;&#x9;newConnector.TransitionGuard = currConnector.TransitionGuard&#xA;&#x9;newConnector.VirtualInheritance = currConnector.VirtualInheritance&#xA;&#x9;newConnector.Width = currConnector.Width&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;On Error Resume Next&#xA;&#x9;&#xA;&#x9;newConnector.Update&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 then&#xA;&#x9;&#x9;Session.Output &quot;Error saving cloned connector: &quot; &amp; err.Description&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;On Error Goto 0&#xA;&#xA;&#x9;CopyConnectorEnd currConnector.ClientEnd, newConnector.ClientEnd&#xA;&#x9;CopyConnectorEnd currConnector.SupplierEnd, newConnector.SupplierEnd&#xA;&#x9;&#xA;&#x9;'CopyConnectorConstraints&#xA;&#x9;CopyConnectorConveyedItems currConnector, newConnector&#xA;&#x9;'CopyConnectorMessageArguments&#xA;&#x9;CopyConnectorTaggedValues currConnector, newConnector&#xA;&#x9;'CopyConnectorTemplateBindings&#xA;&#x9;&#xA;&#x9;set clonedGUIDTag = newConnector.TaggedValues.GetByName( CLONED_GUID)&#xA;&#x9;&#xA;&#x9;if clonedGUIDTag is nothing then&#xA;&#x9;&#x9;set clonedGUIDTag = newConnector.TaggedValues.AddNew( CLONED_GUID, &quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;clonedGUIDTag.Value = currConnector.ConnectorGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;clonedGUIDTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;newConnector.TaggedValues.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyConnectorEnd( currConnectorEnd, newConnectorEnd)&#xA;&#xA;&#x9;newConnectorEnd.Aggregation = currConnectorEnd.Aggregation&#xA;&#x9;newConnectorEnd.Alias = currConnectorEnd.Alias&#xA;&#x9;newConnectorEnd.AllowDuplicates = currConnectorEnd.AllowDuplicates&#xA;&#x9;newConnectorEnd.Cardinality = currConnectorEnd.Cardinality&#xA;&#x9;newConnectorEnd.Constraint = currConnectorEnd.Constraint&#xA;&#x9;newConnectorEnd.Containment = currConnectorEnd.Containment&#xA;&#x9;newConnectorEnd.Derived = currConnectorEnd.Derived&#xA;&#x9;newConnectorEnd.DerivedUnion = currConnectorEnd.DerivedUnion&#xA;&#x9;newConnectorEnd.IsChangeable = currConnectorEnd.IsChangeable&#xA;&#x9;newConnectorEnd.Navigable = currConnectorEnd.Navigable&#xA;&#x9;newConnectorEnd.Ordering = currConnectorEnd.Ordering&#xA;&#x9;newConnectorEnd.OwnedByClassifier = currConnectorEnd.OwnedByClassifier&#xA;&#x9;newConnectorEnd.Qualifier = currConnectorEnd.Qualifier&#xA;&#x9;newConnectorEnd.Role = currConnectorEnd.Role&#xA;&#x9;newConnectorEnd.RoleNote = currConnectorEnd.RoleNote&#xA;&#x9;newConnectorEnd.StereotypeEx = currConnectorEnd.StereotypeEx&#xA;&#x9;newConnectorEnd.Visibility = currConnectorEnd.Visibility&#xA;&#xA;&#x9;newConnectorEnd.Update&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyConnectorConveyedItems( currConnector, newConnector)&#xA;&#xA;&#x9;dim conveyedItem as EA.Element&#xA;&#x9;&#xA;&#x9;if currConnector.ConveyedItems.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 6, &quot;.&quot;) &amp; &quot;Conveyed Items&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each conveyedItem in currConnector.ConveyedItems&#xA;&#x9;&#x9;&#x9;newConnector.ConveyedItems.AddNew conveyedItem.ElementGUID, &quot;&quot;&#xA;&#x9;&#x9;next&#xA;&#x9;&#xA;&#x9;&#x9;newConnector.ConveyedItems.Refresh&#xA;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub CopyConnectorTaggedValues( currConnector, newConnector)&#xA;&#xA;&#x9;dim currTaggedValue as EA.ConnectorTag&#xA;&#x9;dim newTaggedValue as EA.ConnectorTag&#xA;&#x9;&#xA;&#x9;if currConnector.TaggedValues.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 6, &quot;.&quot;) &amp; &quot;Tagged Values&quot;&#xA;&#xA;&#x9;&#x9;for each currTaggedValue in currConnector.TaggedValues&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set newTaggedValue = newConnector.TaggedValues.GetByName( currTaggedValue.Name)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if newTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;set newTaggedValue = newConnector.TaggedValues.AddNew( currTaggedValue.Name, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;newTaggedValue.Value = currTaggedValue.Value&#xA;&#x9;&#x9;&#x9;newTaggedValue.Notes = currTaggedValue.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;newTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;newConnector.TaggedValues.Refresh&#xA;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub CopyElementDiagrams( currElement, newElement)&#xA;&#xA;&#x9;dim currDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;if currElement.Diagrams.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 2, &quot;.&quot;) &amp; &quot;Diagrams&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each currDiagram in currElement.Diagrams&#xA;&#x9;&#x9;&#x9;CopyElementDiagram currDiagram, newElement&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newElement.IsComposite &#x9;= currElement.IsComposite&#xA;&#xA;&#x9;&#x9;newElement.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newElement.Diagrams.Refresh&#xA;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyElementDiagram( currDiagram, newElement)&#xA;&#xA;&#x9;dim newDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;Session.Output String( 4, &quot;.&quot;) &amp; &quot;Diagram '&quot; &amp; currDiagram.Name&#xA;&#xA;&#x9;set newDiagram = newElement.Diagrams.AddNew( currDiagram.Name, currDiagram.Type)&#xA;&#x9;&#xA;&#x9;newDiagram.cx = currDiagram.cx&#xA;&#x9;newDiagram.cy = currDiagram.cy&#xA;&#x9;newDiagram.ExtendedStyle = currDiagram.ExtendedStyle&#xA;&#x9;newDiagram.FilterElements = currDiagram.FilterElements&#xA;&#x9;newDiagram.HighlightImports = currDiagram.HighlightImports&#xA;&#x9;newDiagram.Notes = currDiagram.Notes&#xA;&#x9;newDiagram.Orientation = currDiagram.Orientation&#xA;&#x9;newDiagram.Scale = currDiagram.Scale&#xA;&#x9;newDiagram.ShowDetails = currDiagram.ShowDetails&#xA;&#x9;newDiagram.ShowPackageContents = currDiagram.ShowPackageContents&#xA;&#x9;newDiagram.ShowPrivate = currDiagram.ShowPrivate&#xA;&#x9;newDiagram.ShowProtected = currDiagram.ShowProtected&#xA;&#x9;newDiagram.ShowPublic = currDiagram.ShowPublic&#xA;&#x9;newDiagram.Stereotype = currDiagram.Stereotype&#xA;&#x9;newDiagram.StyleEx = currDiagram.StyleEx&#xA;&#x9;newDiagram.Version = currDiagram.Version&#xA;&#x9;&#xA;&#x9;newDiagram.Update&#xA;&#x9;&#xA;&#x9;CopyDiagramObjects currDiagram, newDiagram&#xA;&#x9;&#xA;&#x9;CopyDiagramLinks currDiagram, newDiagram&#xA;&#xA;&#x9;CopyDiagramSwimlanes currDiagram, newDiagram&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyDiagramObjects( currDiagram, newDiagram)&#xA;&#xA;&#x9;dim currDiagramObject as EA.DiagramObject&#xA;&#x9;&#xA;&#x9;if currDiagram.DiagramObjects.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 6, &quot;.&quot;) &amp; &quot;Objects&quot;&#xA;&#xA;&#x9;&#x9;for each currDiagramObject in currDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;CopyDiagramObject currDiagramObject, newDiagram&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newDiagram.DiagramObjects.Refresh&#xA;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub CopyDiagramLinks( currDiagram, newDiagram)&#xA;&#xA;&#x9;dim currLink as EA.DiagramLink&#xA;&#x9;dim newLink as EA.DiagramLink&#xA;&#x9;&#xA;&#x9;if currDiagram.DiagramLinks.Count &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output String( 6, &quot;.&quot;) &amp; &quot;Links&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each currLink in currDiagram.DiagramLinks&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set newLink = CopyDiagramLink( currLink, newDiagram)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;newLink.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newDiagram.DiagramLinks.Refresh&#xA;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub CopyDiagramSwimlanes( currDiagram, newDiagram)&#xA;&#x9;&#xA;&#x9;dim currSwimlane ' as EA.Swimlane&#xA;&#x9;&#xA;&#x9;newDiagram.SwimlaneDef.Bold = currDiagram.SwimlaneDef.Bold&#xA;&#x9;newDiagram.SwimlaneDef.FontColor = currDiagram.SwimlaneDef.FontColor&#xA;&#x9;newDiagram.SwimlaneDef.HideClassifier = currDiagram.SwimlaneDef.HideClassifier&#xA;&#x9;newDiagram.SwimlaneDef.HideNames = currDiagram.SwimlaneDef.HideNames&#xA;&#x9;newDiagram.SwimlaneDef.LineColor = currDiagram.SwimlaneDef.LineColor&#xA;&#x9;newDiagram.SwimlaneDef.LineWidth = currDiagram.SwimlaneDef.LineWidth&#xA;&#x9;newDiagram.SwimlaneDef.Locked = currDiagram.SwimlaneDef.Locked&#xA;&#x9;newDiagram.SwimlaneDef.Orientation = currDiagram.SwimlaneDef.Orientation&#xA;&#x9;newDiagram.SwimlaneDef.ShowInTitleBar = currDiagram.SwimlaneDef.ShowInTitleBar&#xA;&#x9;&#xA;&#x9;if currDiagram.SwimlaneDef.Swimlanes.Count &gt; 0 then&#xA;&#xA;&#x9;&#x9;Session.Output String( 6, &quot;.&quot;) &amp; &quot;Swimlanes&quot;&#xA;&#x9;&#xA;&#x9;&#x9;for each currSwimlane in currDiagram.SwimlaneDef.Swimlanes&#xA;&#x9;&#x9;&#x9;CopyDiagramSwimlane currSwimlane, newDiagram&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newDiagram.Update&#xA;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub CopyDiagramSwimlane( currSwimlane, newDiagram)&#xA;&#xA;&#x9;dim newSwimlane ' as EA.Swimlane&#xA;&#x9;&#xA;&#x9;set newSwimlane = newDiagram.SwimlaneDef.Swimlanes.Add( currSwimlane.Title, currSwimlane.Width)&#xA;&#x9;&#xA;&#x9;newSwimlane.BackColor = currSwimlane.BackColor&#xA;&#x9;newSwimlane.ClassifierGuid = currSwimlane.ClassifierGuid&#xA;&#xA;end sub&#xA;&#xA;Start&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="293"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F6339573-A49D-4a24-8E0D-33D0D560A62D}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Cloning -&amp;gt; Replace Diagram Element&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'&#xA;' Diagram script to replace the selected element on a diagram with the currently selected element in the&#xA;' project browser.&#xA;' &#xA;&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC SSNA Diagram Script Utilities.Clone Routines&#xA;&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;dim currDiagram as EA.Diagram&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;dim selectedDiagramObject as EA.DiagramObject&#xA;&#x9;dim selectedElements as EA.Collection&#xA;&#x9;dim selectedBrowserElement as EA.Element&#xA;&#xA;&#x9;set currDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currDiagram is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;set selectedObjects = currDiagram.SelectedObjects&#xA;&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set selectedDiagramObject = selectedObjects.GetAt(0)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set selectedElements = Repository.GetTreeSelectedElements&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if selectedElements.Count = 1 then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set selectedBrowserElement = selectedElements.GetAt(0)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;ReplaceDiagramElement currDiagram, selectedDiagramObject, selectedBrowserElement&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;This script requires one (and only one) element to be selected in the Project Browser.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script requires one (and only one) element to be selected on the diagram.&quot;, promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub ReplaceDiagramElement( currDiagram, currDiagramObject, newElement)&#xA;&#xA;&#x9;dim currElement as EA.Element&#xA;&#x9;&#xA;&#x9;set currElement = Repository.GetElementByID( currDiagramObject.ElementID)&#xA;&#x9;&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;&#xA;&#x9;Session.Output String( 40, &quot;-&quot;)&#xA;&#x9;Session.Output &quot;Replacing '&quot; &amp; currElement.Name &amp; &quot;' with '&quot; &amp; newELement.Name &amp; &quot;' on '&quot; &amp; currDiagram.Name &amp; &quot;' ...&quot;&#xA;&#x9;&#xA;&#x9;SwapDiagramObject currDiagram, currDiagramObject, currElement, newElement&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Finished!&quot;&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="294"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4FAC76A1-1ECF-4b33-B403-D8891EE58643}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Clone Routines&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="&#xA;' Common routines used in cloning and diagram object replacement.&#xA;&#xA;const CLONE_TYPE = &quot;Dependency&quot; ' as String&#xA;const CLONE_STEREOTYPE = &quot;clone&quot; ' as String&#xA;const CLONED_GUID = &quot;_clonedGUID&quot; ' as String&#xA;&#xA;dim linkError ' as Boolean&#xA;&#xA;sub SwapDiagramObject( currDiagram, currDiagramObject, currElement, newElement)&#xA;&#xA;&#x9;dim newDiagramObject as EA.DiagramObject&#xA;&#x9;&#xA;&#x9;linkError = false&#xA;&#xA;&#x9;set newDiagramObject = CopyDiagramObject( currDiagramObject, currDiagram)&#xA;&#x9;&#xA;&#x9;newDiagramObject.ElementID = newElement.ElementID&#xA;&#x9;&#xA;&#x9;newDiagramObject.Update&#xA;&#x9;&#xA;&#x9;CopyClonedDiagramLinks currDiagram, currElement, newElement&#xA;&#x9;&#xA;&#x9;DeleteOriginalDiagramObject currDiagram, currDiagramObject&#xA;&#xA;&#x9;Repository.ReloadDiagram currDiagram.DiagramID&#xA;&#x9;&#xA;&#x9;if linkError then&#xA;&#x9;&#x9;Session.Prompt &quot;One or more cloned relationships could not be found.&quot; &amp; vbCRLF &amp; vbCRLF &amp; &quot;Examine the Script tab of the System Output window for details.&quot;, promptOK&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CopyClonedDiagramLinks( currDiagram, currElement, newElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;dim currConnector as EA.Connector&#xA;&#x9;dim currLink as EA.DiagramLink&#xA;&#x9;dim currConnectorID ' as Integer&#xA;&#x9;dim newLink as EA.DiagramLink&#xA;&#x9;&#xA;&#x9;Session.Output String( 2, &quot;.&quot;) &amp; &quot;Copying cloned diagram links&quot;&#xA;&#x9;&#xA;&#x9;for each newConnector in newElement.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if newConnector.Type &lt;&gt; CLONE_TYPE and newConnector.Stereotype &lt;&gt; CLONE_STEREOTYPE then&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set currConnector = FindElementConnectorByGUID( currElement, newConnector)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if not( currConnector is nothing) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for each currLink in currDiagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if currLink.ConnectorID = currConnector.ConnectorID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currLink.IsHidden = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currLink.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newLink = CopyDiagramLink( currLink, currDiagram)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newLink.ConnectorID = newConnector.ConnectorID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newLInk.IsHidden = false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newLink.Update&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currDiagram.DiagramLinks.Refresh&#xA;&#xA;end sub&#xA;&#xA;function FindElementConnectorByGUID( currElement, newConnector)&#xA;&#xA;&#x9;dim clonedConnectorGUIDTag as EA.ConnectorTag&#xA;&#x9;dim clonedConnectorGUID ' as String&#xA;&#x9;dim currConnector as EA.Connector&#xA;&#x9;dim connectorFound ' as Boolean&#xA;&#x9;&#xA;&#x9;set clonedConnectorGUIDTag = newConnector.TaggedValues.GetByName( CLONED_GUID)&#xA;&#x9;&#xA;&#x9;connectorFound = false&#xA;&#x9;&#xA;&#x9;if clonedConnectorGUIDTag is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Cloned connector GUID tagged value missing from new connector &quot; &amp; newConnector.Type &amp; &quot; &quot; &amp; newConnector.ConnectorGUID &amp; &quot;. Unable to locate original connector.&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;linkError = true&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;clonedConnectorGUID = clonedConnectorGUIDTag.Value&#xA;&#xA;&#x9;&#x9;for each currConnector in currElement.Connectors&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if currConnector.ConnectorGUID = clonedConnectorGUID then&#xA;&#x9;&#x9;&#x9;&#x9;connectorFound = true&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if connectorFound then&#xA;&#x9;&#x9;set FindElementConnectorByGUID = currConnector&#xA;&#x9;else&#xA;&#x9;&#x9;set FindElementConnectorByGUID = nothing&#xA;&#x9;end if&#xA;&#x9;&#xA;end function&#xA;&#xA;sub DeleteOriginalDiagramObject( currDiagram, origDiagramObject)&#xA;&#xA;&#x9;dim objectCount ' as Integer&#xA;&#x9;dim objectIndex ' as Integer&#xA;&#x9;dim currDiagramObject as EA.DiagramObject&#xA;&#x9;&#xA;&#x9;objectCount = currDiagram.DiagramObjects.Count&#xA;&#x9;&#xA;&#x9;for objectIndex = objectCount - 1 to 0 step -1&#xA;&#x9;&#xA;&#x9;&#x9;set currDiagramObject = currDiagram.DiagramObjects.GetAt( objectIndex)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if currDiagramObject.ElementID = origDiagramObject.ElementID then&#xA;&#xA;&#x9;&#x9;&#x9;currDiagram.DiagramObjects.DeleteAt objectIndex, false&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currDiagram.DiagramObjects.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;function CopyDiagramObject( currDiagramObject, newDiagram)&#xA;&#xA;&#x9;dim newDiagramObject as EA.DiagramObject&#xA;&#x9;&#xA;&#x9;set newDiagramObject = newDiagram.DiagramObjects.AddNew( &quot;&quot;, &quot;&quot;)&#xA;&#x9;&#xA;&#x9;newDiagramObject.BackgroundColor = currDiagramObject.BackgroundColor&#xA;&#x9;newDiagramObject.BorderColor = currDiagramObject.BorderColor&#xA;&#x9;newDiagramObject.BorderLineWidth = currDiagramObject.BorderLineWidth&#xA;&#x9;newDiagramObject.bottom = currDiagramObject.bottom&#xA;&#x9;newDiagramObject.ElementDisplayMode = currDiagramObject.ElementDisplayMode&#xA;&#x9;newDiagramObject.ElementID = currDiagramObject.ElementID&#xA;&#x9;newDiagramObject.FeatureStereotypesToHide = currDiagramObject.FeatureStereotypesToHide&#xA;&#x9;newDiagramObject.FontBold = currDiagramObject.FontBold&#xA;&#x9;newDiagramObject.FontColor = currDiagramObject.FontColor&#xA;&#x9;newDiagramObject.FontItalic = currDiagramObject.FontItalic&#xA;&#x9;newDiagramObject.fontName = currDiagramObject.fontName&#xA;&#x9;newDiagramObject.fontSize = currDiagramObject.fontSize&#xA;&#x9;newDiagramObject.FontUnderline = currDiagramObject.FontUnderline&#xA;&#x9;newDiagramObject.IsSelectable = currDiagramObject.IsSelectable&#xA;&#x9;newDiagramObject.left = currDiagramObject.left&#xA;&#x9;newDiagramObject.right = currDiagramObject.right&#xA;&#x9;newDiagramObject.Sequence = currDiagramObject.Sequence&#xA;&#x9;newDiagramObject.ShowComposedDiagram = currDiagramObject.ShowComposedDiagram&#xA;&#x9;newDiagramObject.ShowConstraints = currDiagramObject.ShowConstraints&#xA;&#x9;newDiagramObject.ShowFormattedNotes = currDiagramObject.ShowFormattedNotes&#xA;&#x9;newDiagramObject.ShowFullyQualifiedTags = currDiagramObject.ShowFullyQualifiedTags&#xA;&#x9;newDiagramObject.ShowInheritedAttributes = currDiagramObject.ShowInheritedAttributes&#xA;&#x9;newDiagramObject.ShowInheritedConstraints = currDiagramObject.ShowInheritedConstraints&#xA;&#x9;newDiagramObject.ShowInheritedOperations = currDiagramObject.ShowInheritedOperations&#xA;&#x9;newDiagramObject.ShowInheritedResponsibilities = currDiagramObject.ShowInheritedResponsibilities&#xA;&#x9;newDiagramObject.ShowInheritedTags = currDiagramObject.ShowInheritedTags&#xA;&#x9;newDiagramObject.ShowNotes = currDiagramObject.ShowNotes&#xA;&#x9;newDiagramObject.ShowPackageAttributes = currDiagramObject.ShowPackageAttributes&#xA;&#x9;newDiagramObject.ShowPackageOperations = currDiagramObject.ShowPackageOperations&#xA;&#x9;newDiagramObject.ShowPortType = currDiagramObject.ShowPortType&#xA;&#x9;newDiagramObject.ShowPrivateAttributes = currDiagramObject.ShowPrivateAttributes&#xA;&#x9;newDiagramObject.ShowPrivateOperations = currDiagramObject.ShowPrivateAttributes&#xA;&#x9;newDiagramObject.ShowProtectedAttributes = currDiagramObject.ShowProtectedAttributes&#xA;&#x9;newDiagramObject.ShowProtectedOperations = currDiagramObject.ShowProtectedOperations&#xA;&#x9;newDiagramObject.ShowPublicAttributes = currDiagramObject.ShowPublicAttributes&#xA;&#x9;newDiagramObject.ShowPublicOperations = currDiagramObject.ShowPublicOperations&#xA;&#x9;newDiagramObject.ShowResponsibilities = currDiagramObject.ShowResponsibilities&#xA;&#x9;newDiagramObject.ShowRunstates = currDiagramObject.ShowRunstates&#xA;&#x9;newDiagramObject.ShowStructuredCompartments = currDiagramObject.ShowStructuredCompartments&#xA;&#x9;newDiagramObject.ShowTags = currDiagramObject.ShowTags&#xA;&#x9;newDiagramObject.Style = currDiagramObject.Style&#xA;&#x9;newDiagramObject.TextAlign = currDiagramObject.TextAlign&#xA;&#x9;newDiagramObject.top = currDiagramObject.top&#xA;&#x9;&#xA;&#x9;newDiagramObject.Update&#xA;&#x9;&#xA;&#x9;set CopyDiagramObject = newDiagramObject&#xA;&#x9;&#xA;end function&#xA;&#xA;function CopyDiagramLink( currLink, newDiagram)&#xA;&#xA;&#x9;dim newLink as EA.DiagramLink&#xA;&#x9;&#xA;&#x9;set newLink = newDiagram.DiagramLinks.AddNew( &quot;&quot;, &quot;&quot;)&#xA;&#x9;&#xA;&#x9;newLink.ConnectorID = currLink.ConnectorID&#xA;&#x9;newLink.Geometry = currLink.Geometry&#xA;&#x9;newLink.HiddenLabels = currLink.HiddenLabels&#xA;&#x9;newLink.IsHidden = currLink.IsHidden&#xA;&#x9;newLink.LineColor = currLink.LineColor&#xA;&#x9;newLink.LineStyle = currLink.LineStyle&#xA;&#x9;newLink.LineWidth = currLink.LineWidth&#xA;&#x9;newLink.Path = currLink.Path&#xA;&#x9;newLink.SuppressSegment = currLink.SuppressSegment&#xA;&#x9;newLink.Style = currLink.Style&#xA;&#xA;&#x9;set CopyDiagramLink = newLink&#xA;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="295"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{900C8609-5EF0-4221-B30B-6BF75D673BB2}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - Reload Project&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' reload the complete model&#xA;sub reloadProject&#xA;&#xA;&#x9;dim project as EA.Project&#x9;&#xA;&#x9;set project = Repository.GetProjectInterface&#x9;&#xA;&#x9;project.ReloadProject&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub login&#xA;&#xA;&#x9;dim currentUser&#x9;&#xA;&#x9;currentUser = Repository.GetCurrentLoginUser( false)&#x9;&#xA;&#x9;Repository.ChangeLoginUser currentUser, &quot;&quot;&#xA;&#x9;reloadProject&#xA;end sub&#xA;&#xA;login"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="296"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D15DC005-76D8-4f62-8256-08D816371E6B}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SID- Create ABE Diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' creates a diagram inside each ABE located in a package&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;ABE&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Vertical&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 9&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;ABE&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="297"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D9B86690-B93B-4ae7-BC1D-3ADB6B3B9847}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DMM - Create lev 2 Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' create a diagram of DMM the first 2 levels of capabilities&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;Capability&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;Capability&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Capability&quot;&#xA;&#x9;level1.objectHeight&#x9;= 180&#xA;&#x9;level1.objectWidth = 900&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 1&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Capability&quot;&#xA;&#x9;level2.objectHeight&#x9;= 35&#xA;&#x9;level2.objectWidth = 880&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#xA;&#x9;level2.horizSpace = 0&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 0&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="298"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{97BA25F8-22A0-4ec3-9506-1EC440EC6513}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util-  Set Model Stereotypes and Tagged Values&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to populate the base an elements to a set of TMF  stereotypes (and migrate &#xA;' the Stereotype value to a certain tagged value. WIP&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC TM Forum Normal Scripts.Utility Scripts&#xA;&#xA;sub startMigration&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#xA;&#x9;&#xA;&#x9;packageGUID = &quot;{E14D56DB-76A1-4146-B131-45ACEFA4C605}&quot;&#xA;&#x9;'packageGUID = &quot;{B82523FE-2B54-4814-B8E9-A50136B760E8}&quot;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;migratePackage package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Finished!&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migratePackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Migrating package '&quot; &amp; package.Name &amp; &quot;'...&quot;&#xA;&#x9;&#xA;&#x9;if Right( package.Name, 3) = &quot;ABE&quot; then&#xA;'&#x9;&#x9;setLifecycleStatus package.Element, &quot;TMF_ArchiMate3::TMF_SID_ABE&quot;&#xA;&#x9;&#x9;mergeDuplicateTaggedValues package.Element&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;migrateElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;migratePackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub mergeDuplicateTaggedValues( element)&#xA;&#xA;&#x9;dim value 'as String&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim tvCount 'as Integer&#xA;&#x9;dim tvIndex 'as Integer&#xA;&#x9;&#x9;&#xA;&#x9;value = &quot;&quot;&#xA;&#x9;&#x9;&#xA;&#x9;tvCount = element.TaggedValues.Count&#xA;&#x9;&#xA;&#x9;for tvIndex = tvCount - 1 to 0 step -1&#xA;&#x9;&#xA;&#x9;&#x9;set taggedValue = element.TaggedValues.GetAt(tvIndex)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if taggedValue.Name = &quot;TMFStatus&quot; then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if taggedValue.Value &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;element.TaggedValues.Delete( tvIndex)&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;element.TaggedValues.Refresh&#xA;&#x9;&#xA;&#x9;'element.Update&#xA;&#x9;&#xA;&#x9;setElementTaggedValueValue element, &quot;SID Lifecycle Status&quot;, value&#xA;&#x9;&#xA;&#x9;'element.Update&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub setLifecycleStatus( element, value)&#xA;&#xA;&#x9;dim stereotype 'as String&#xA;&#xA;&#x9;stereotype = element.Stereotype&#xA;&#x9;&#xA;&#x9;element.StereotypeEx = value&#xA;&#x9;element.Update&#xA;&#x9;element.TaggedValues.Refresh&#xA;&#x9;&#xA;&#x9;setElementTaggedValueValue element, &quot;TMFStatus&quot;, stereotype&#xA;&#x9;&#xA;&#x9;element.Update&#x9;&#x9;&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub migrateElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Migrating element '&quot; &amp; element.Name &amp; &quot;' Type: &quot; &amp; element.Type &amp; &quot;...&quot;&#xA;&#x9;&#x9;&#xA;'&#x9;select case element.Type&#xA;'&#x9;&#x9;case &quot;Class&quot;&#xA;'&#x9;&#x9;&#x9;setLifecycleStatus element, &quot;TMF::TMF_BusinessEntity&quot;&#xA;'&#x9;&#x9;case &quot;DataType&quot;&#xA;'&#x9;&#x9;&#x9;setLifecycleStatus element, &quot;TMF::TMF_SID_DataType&quot;&#xA;'&#x9;&#x9;case &quot;Enumeration&quot;&#xA;'&#x9;&#x9;&#x9;setLifecycleStatus element, &quot;TMF::TMF_SID_Enumeration&quot;&#xA;'&#x9;end select&#xA;&#xA;&#x9;mergeDuplicateTaggedValues element&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;migrateElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;startMigration"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="299"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{55E68773-717A-4752-8567-7CA7E08C7BB1}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements-&amp;gt; Resize all Diagram Objects&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script to scale size and position all diagram objects (but not connectors) by a specified factor.&#xA;' &lt;1 will create smaller objects&#xA; '&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub resizeDiagramObjects( scaleFactor)&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;if not currentDiagram is nothing then&#x9;&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;diagramObject.top = diagramObject.top * scaleFactor&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = diagramObject.bottom * scaleFactor&#xA;&#x9;&#x9;&#x9;diagramObject.left = diagramObject.left * scaleFactor&#xA;&#x9;&#x9;&#x9;diagramObject.right = diagramObject.right * scaleFactor&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;dim scaleFactor 'as Double&#xA;&#xA;scaleFactor = InputBox( &quot;Enter scaling factor (as a decimal)&quot;, &quot;Resize Diagram Objects&quot;, &quot;1.5&quot;)&#xA;&#xA;if scaleFactor &lt;&gt; vbNullString then&#xA;&#x9;if IsNumeric(scaleFactor) then&#xA;&#x9;&#x9;resizeDiagramObjects scaleFactor&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Scaling factor must be a decimal number greater than zero.&quot;, promptOK&#xA;&#x9;end if&#x9;&#xA;end if&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="300"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{63102034-B522-4ef1-BC21-85CEA9423DA6}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Diagram DAF visual"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="301"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2DD644A0-7DF1-45ee-AE56-D061696618D0}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Metric - Create Metric  Dia  flat &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram, all the metrics are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;custom&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;Metric&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 4&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level2.objectHeight&#x9;= 50&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillColor = colorWhite&#xA;&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="302"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BAF59AF4-097A-4082-81B0-A53DBEA677BE}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Create Functional Block Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' create a ODA Function Block diagram insiede each of the blocks&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ODA Function Block&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;ODA Function Block&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;ODA Function Block&quot;&#xA;&#x9;level1.objectHeight&#x9;= 180&#xA;&#x9;level1.objectWidth = 900&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#x9;' *** SECOND LEVEL ***&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 1&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ODA Function Block&quot;&#xA;&#x9;level2.objectHeight&#x9;= 35&#xA;&#x9;level2.objectWidth = 880&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#xA;&#x9;level2.horizSpace = 0&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 0&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="303"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0267797F-5D80-4b2c-8A00-BED88610D158}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Biz- Create Capability Diagram (Level 1)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script Name: Biz - Create Capability Maps (Level 1)&#xA; ' Author: Giu Platania&#xA; ' Purpose: create a diagram with TMF_capabilities  in a package&#xA; ' Date: 2023 12&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage  as EA.Package&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;'for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Capability&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;'&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;'&#x9;&#x9;if subElement.MetaType = &quot;Capability&quot; then&#xA;&#x9;&#x9;'&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;'&#x9;&#x9;end if&#xA;&#x9;&#x9;'&#x9;next&#xA;&#x9;&#x9;'next&#xA;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does  support items of type package and capability.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;Capability&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Capability&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;'level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;'level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;'set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;TMF ODA Functionality&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;'&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 10&#xA;'&#xA;'&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="304"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{930ACD1A-A93C-46bb-B2E3-E9EC61AB76C2}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Biz - Create Capability Maps (Level 2)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script Name: Biz - Create Capability Maps (Level 2)&#xA; ' Author: Giu Platania&#xA; ' Purpose: create a diagram with TMF_capabilities up-to 2 levels&#xA; ' Date: 2023 12&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage  as EA.Package&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;'for each subPackage in package.Packages&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;'next&#xA;'&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;eTOM Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;'level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 4&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 50&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;'level2.objectstyle.fillColor = colorWhite&#xA;&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontSize = 10&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="305"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{96EA4CF8-3A48-444f-B2D4-EFFF8351845A}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - SQLOps&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;function foo&#xA;Dim arrayResult&#xA;Set arrayResult = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;' Add items to the ArrayList&#xA;arrayResult.Add &quot;Item 1&quot;&#xA;arrayResult.Add &quot;Item 2&quot;&#xA;arrayResult.Add &quot;Item 3&quot;&#xA;&#xA;' Access and modify items&#xA;arrayResult(1) = &quot;Modified Item 2&quot;&#xA;&#xA;' Iterate over the items&#xA;For Each item In arrayResult&#xA;    Session.Output  item&#xA;Next&#xA;end function&#xA;'&#xA;' Script Name: SQLOps&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: WARNING!!! extremely destructive Script!!! execute directly operations in the DB, USE WITH CARE!!!!&#xA;' Date: &#xA;'&#xA;&#xA;dim sql, DiagramName, DiagramType&#x9;''as string&#xA;&#xA;DiagramName = &quot;Product Catalog Management - Subscribed Events&quot;&#xA;' this set the type of a diagram, not the stereotype&#xA;DiagramType = &quot;MDGDgm=Component::Components - Events Subscribed;&quot;&#xA;''sql = &quot;DELETE FROM t_diagram  WHERE not exists (SELECT t_diagramobjects.Diagram_ID  FROM t_diagramobjects WHERE t_diagramobjects.Diagram_ID = t_diagram.Diagram_ID)&quot;&#xA;'sql = &quot;UPDATE t_diagram &quot; &amp; vbNewLine &amp; _&#xA;&#x9; '&quot;SET StyleEx = '&quot;&amp;DiagramType&amp;&quot;HideQuals=1;AdvancedFeatureProps=0;ShowOpRetType=1;SuppressBrackets=1;VisibleAttributeDetail=1;'&quot; &amp; vbNewLine &amp; _&#xA;&#x9;'&quot;WHERE Name = '&quot;&amp;DiagramName&amp;&quot;';&quot;&#xA;' sql = &quot;UPDATE IIC&quot; &amp; vbNewLine &amp; _&#xA;'&#x9;&#x9;&quot;SET IIC.Status  = ISC.Status &quot; &amp; vbNewLine &amp; _&#xA;'&#x9;&quot;FROM t_object AS IIC &quot; &amp; vbNewLine &amp; _&#xA;'&#x9;&#x9;&quot;INNER JOIN t_object AS ISC ON  ISC.name = IIC.name &quot; &amp; vbNewLine &amp; _&#xA;'&#x9;&#x9;&quot;WHERE IIC.Stereotype = 'TMF_IIC' &quot; &amp; vbNewLine &amp; _&#xA;'&#x9;&#x9;&quot;AND ISC.Stereotype = 'TMF_ISC'; &quot;&#xA;&#xA;sub main&#xA;&#x9;&#x9;repository.Execute(sql)&#xA;&#x9;&#x9;&#x9;Session.Output &quot;SQL currently is &quot; &amp; sql&#xA;end sub&#xA;&#xA;sub opengen&#xA;&#x9;'Repository.CustomCommand &quot;IDM_SHOW_DOCUMENT_GENERATOR&quot;, &quot;&quot;&#xA;&#x9;Dim docGen As EA.DocumentGenerator.&#xA;&#x9;&#xA;&#x9;Set docGen = Repository.CreateDocumentGenerator()&#xA;&#x9;' Open the Document Generator interface&#xA;&#x9;docGen.ShowWindow()&#xA;&#x9;' Release the object&#xA;Set docGen = Nothing&#xA;end sub&#xA;&#xA;' opengen&#xA;main&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;' sql = &quot;Select  t_connector set t_connector.DestIsAggregate = 3 where t_connector.Stereotype= 'TMF_ABEIsComposedByEntity'&quot;&#xA;&#x9;'&#x9;sql = &quot;delete from t_connector where t_connector.Connector_Type='Abstraction'&quot;&#xA;&#x9;'sql = &quot;UPDATE  t_connector set t_connector.DestIsAggregate = 2 where t_connector.Stereotype= 'TMF_ABEIsComposedByEntity'&quot;&#xA;&#x9; 'sql = &quot;Update  t_diagram set AttPub= true &quot;&#xA;&#x9; &#x9; ''sql = &quot;UPDATE t_diagram set Pdata ='HideRel=0;ShowTags=0;ShowReqs=0;ShowCons=0;OpParams=1;ShowSN=0;ScalePI=0;PPgs.cx=0;PPgs.cy=0;PSize=1;ShowIcons=0;SuppCN=0;HideProps=0;HideParents=0;UseAlias=0;HideAtts=0;HideOps=0;HideStereo=0;HideEStereo=1;ShowRec=1;ShowRes=0;ShowShape=1;FormName=;'&quot; &#xA;&#xA;&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="306"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{909000A2-E08F-4ad4-86D0-4FE2047D7A9C}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - SetPackageAuthor&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name:&#xA;' Author: DBC&#xA;' Purpose: ' Script to set Author property for package and its elements and diagrams.&#xA;' Date: 2022 - 04 -15&#xA;&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;'&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setpackageElementsAuthor thePackage.PackageGUID, &quot;TMF&quot;&#xA;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub setpackageElementsAuthor( packageGUID, author)&#xA;&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Updating Author property for '&quot; &amp; package.Name &amp; &quot;' package...&quot;&#xA;&#x9;&#xA;&#x9;package.Element.Author = author&#xA;&#x9;package.Element.Update&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;- Element '&quot; &amp; element.Name &amp; &quot;' &quot; &amp; element.ObjectType&#xA;&#xA;&#x9;&#x9;element.Author = author&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Element '&quot; &amp; subElement.Name &amp; &quot;' &quot; &amp; subElement.ObjectType&#xA;&#x9;&#x9;&#x9;&#x9;subElement.Author = author&#xA;&#x9;&#x9;&#x9;&#x9;subElement.Update&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each diagram in package.Diagrams&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;- Diagram '&quot; &amp; diagram.Name &amp; &quot;'&quot;&#xA;&#xA;&#x9;&#x9;diagram.Author = author&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;next&#xA;Session.Output &quot;done'&quot;&#xA;end sub&#xA;&#xA;&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="307"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4019A307-103A-4896-9C55-F33640BECF14}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Metric- Create Metrics group Diagram &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram&#xA;' Date: 20220614&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage  &#x9;&#x9;as EA.Package&#xA;&#x9;dim subElement  &#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Metric&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 5&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level1.objectHeight&#x9;= 60&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 10&#xA;&#x9;'level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;'level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;Metric&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 10&#xA;&#xA;'&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{DAB1B626-9DBE-4411-A684-DCE4B78118B5}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if element.MetaType = &quot;Metric&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#x9;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="308"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7A7669A1-D046-4bc4-A221-608AE3B0B53E}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Vertical - create Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Vertical&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Vertical&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Vertical&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 14&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 9&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Vertical&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Arial&quot;&#xA;&#x9;level2.objectstyle.fontsize = 12&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="309"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{74C82D85-15B8-4cab-B0AB-A51EB0478FA5}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Metric - Create Metric group (4x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' create a nested hierarchy of  metricgroups diagram located in a package&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;'&#x9;&#x9;&#x9;for each element in thePackage.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage,  levelList, &quot;Metric Group&quot;, false&#x9;&#x9;'''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Metric Group&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level1.elementMetatype = &quot;Metric Group&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 345&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fillColor = colorBlue&#xA;&#x9;level1.objectStyle.lineWidth = 2&#xA;&#x9;level1.objectStyle.lineColor = colorBlack&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 18&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 3&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#xA;&#x9;level2.horizSpace = 5&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 5&#xA;&#x9;&#xA;&#x9;level2.objectStyle.fillColor = colorOrchid&#xA;&#x9;level2.objectStyle.lineWidth = 1&#xA;&#x9;level2.objectStyle.lineColor = colorBlack&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 10&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 30&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorLightSteelBlue1&#xA;&#x9;level3.objectStyle.lineWidth = 1&#xA;&#x9;level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Metric Group&quot;&#xA;&#x9;level4.objectHeight&#x9;= 60&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 30&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorAzure2&#xA;&#x9;level4.objectStyle.lineWidth = 1&#xA;&#x9;level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="310"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{482CEC2A-42A8-40ca-BB52-9BBBDDF5488B}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;eTOM - create Process Diagram Lev 2-4&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' ' applied to a package, will create diagram containing elements of level 2,3 and 4 for each element of the package&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;eTOM Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;Session.Output &quot;element selected&quot;&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element &quot; + theElement.Name + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if theElement.MetaType = &quot;eTOM Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Element &quot;+ theElement.Name  + &quot; found&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram theElement, levelList, &quot;custom&quot;, false&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script support items of type package.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Process&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 4&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 80&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set level3 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level3.numobjects = 4&#xA;&#x9;level3.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level3.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level3.objectHeight&#x9;= 55&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 10&#x9;&#xA;&#x9;level3.horizSpace = 10&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level3.objectstyle.fillcolor = colorWhite&#xA;&#x9;level3.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level3.objectstyle.fontsize = 8&#xA;&#x9;levellist.add 3, level3&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="311"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8C98D1EE-0DFB-4d90-96E4-6878C05DC998}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;eTOM -create process diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat  eTOM diagram with all the direct children of a package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Process diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;eTOM&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script support items of type package.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;eTOM&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="312"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8836BD08-6166-4f38-A3A9-D32A2C2F97AF}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ExcelFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Name: ExcelFile&#xA;'Author: Geert Bellekens&#xA;'Purpose: Wrapper script class for Excel files&#xA;'Date: 2017-03-20&#xA;&#xA;!INC Utils.Include&#xA;&#xA;Class ExcelFile&#xA;&#x9;'private variables&#xA;&#x9;Private m_ExcelApp&#xA;&#x9;Private m_FileName&#xA;&#x9;Private m_WorkBook&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_FileName = &quot;&quot;&#xA;&#x9;&#x9;set m_ExcelApp = CreateObject(&quot;Excel.Application&quot;)&#xA;&#x9;&#x9;set m_WorkBook = nothing&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;public Property Get worksheets&#xA;&#x9;&#x9;set worksheets = m_WorkBook.Sheets&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;'public operations&#xA;&#x9;'create a tab with the given name. The contents should parameter should be a two dimensional array&#xA;&#x9;public Function createTab(tabName, contents,formatAsTable, tableStyle)&#xA;&#x9;&#x9;'check if the workbook has been created already&#xA;&#x9;&#x9;if m_WorkBook is nothing then&#xA;&#x9;&#x9;&#x9;set m_WorkBook = m_ExcelApp.Workbooks.Add()&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'create the tab at the end&#xA;&#x9;&#x9;Dim ws&#xA;&#x9;&#x9;Set ws = m_WorkBook.Sheets.Add()&#xA;&#x9;&#x9;ws.Name = tabName&#xA;&#x9;&#x9;'fill the contents&#xA;&#x9;&#x9;dim targetRange&#xA;&#x9;&#x9;set targetRange = ws.Range(ws.Cells(1,1), ws.Cells(Ubound(contents,1), Ubound(Contents,2)))&#xA;&#x9;&#x9;targetRange.Value2 = contents&#xA;&#x9;&#x9;'format as table if needed&#xA;&#x9;&#x9;if formatAsTable then&#xA;&#x9;&#x9;&#x9;formatSheetAsTable ws, targetRange, tableStyle&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function formatSheetAsTable(worksheet, targetRange, tableStyle)&#xA;&#x9;&#x9;dim table&#xA;&#x9;&#x9;Set table = worksheet.ListObjects.Add(1, targetRange, 1, 1)&#xA;&#x9;&#x9;table.TableStyle = tableStyle&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function getUserSelectedFileName()&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;dim project&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;me.FileName = project.GetFileNameDialog (&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 2 ,&quot;&quot;, 1) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function openUserSelectedFile()&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;dim project&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;me.FileName = project.GetFileNameDialog (&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 0 ,&quot;&quot;, 0) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;&#x9;me.Open me.FileName&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function Open(filePath)&#xA;&#x9;&#x9;me.FileName = filePath&#xA;&#x9;&#x9;set m_WorkBook = m_ExcelApp.Workbooks.Open(me.FileName)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getContents(sheet)&#xA;&#x9;&#x9;getContents = sheet.UsedRange.Value2&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function save()&#xA;&#x9;&#x9;'make sure we have a filename&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;getUserSelectedFileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'if the file name is still empty then exit&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'Delete the existing file if it exists&#xA;&#x9;&#x9;dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FileExists(me.FileName) then&#xA;&#x9;&#x9;&#x9;fso.DeleteFile me.FileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'save the workbook at the given filename&#xA;&#x9;&#x9;m_WorkBook.Saveas me.FileName&#xA;&#x9;&#x9;'make excel visible&#xA;&#x9;&#x9;'m_ExcelApp.visible = True&#xA;&#x9;&#x9;'m_ExcelApp.WindowState = -4137 'xlMaximized&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;Public Function close()&#xA;&#x9;&#x9;If Not m_WorkBook Is Nothing Then&#xA;&#x9;&#x9;&#x9;m_WorkBook.Close False ' Close workbook without saving changes&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;If Not m_ExcelApp Is Nothing Then&#xA;&#x9;&#x9;&#x9;m_ExcelApp.Quit ' Quit Excel application&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;Set m_WorkBook = Nothing&#xA;&#x9;&#x9;Set m_ExcelApp = Nothing&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#x9;public Function saveTab()&#xA;&#x9;&#x9;'make sure we have a filename&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;getUserSelectedFileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'if the file name is still empty then exit&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'save the workbook at the given filename&#xA;&#x9;&#x9;m_WorkBook.Saveas me.FileName&#xA;&#x9;&#x9;'make excel visible&#xA;&#x9;&#x9;'m_ExcelApp.visible = True&#xA;&#x9;&#x9;'m_ExcelApp.WindowState = -4137 'xlMaximized&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;end Class"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="313"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{92F19364-354A-4e9f-9594-7F3955739654}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen  Excel - eTOM&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project EC\EAC scripts]&#xA;'[group=EAC scripts]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Export Programme Tree to Excel&#xA;' Author: Giu Platania&#xA;' Purpose: Exports eTOM tree to an excel file, including the active process and a deleted process tab&#xA;' Date: 2023.04&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Export eTOM&quot;&#xA;dim excelOutput&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#xA;&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;'Repository.WriteOutput outPutName, now() &amp; &quot; Starting Export eTOM processes Tree &quot;&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;creating file&quot;, 1&#xA;&#x9;&#x9;set excelOutput = new ExcelFile&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Exporting eTOM deleted processes Tree&quot;, 1&#xA;&#x9;&#x9;exporteTOMTreeDeleted&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot;Exporting eTOM processes Tree&quot;, 1&#xA;&#x9;&#x9;exportTOMTree&#xA;&#x9;&#xA;&#x9;&#x9;excelOutput.save&#xA;&#x9;&#x9;' close file&#xA;&#x9;&#x9;excelOutput.close&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Repository.WriteOutput outPutName, &quot; Finished Export eTOM processes Tree '&quot; , 1&#xA;&#xA;&#x9;&#xA;end sub&#xA;&#xA;function exportTOMTree()&#xA;&#x9;&#xA;&#x9;dim getPogrammeTreeContents, getPogrammeTreeContents2&#xA;&#xA;getPogrammeTreeContents = &quot;SELECT sourceProcess.Name as Process , uid.value as 'UID',                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; aDomain.Name as Domain, vertical.Name as 'VerticalGroup', sourceProcess.ea_guid as CLASSGUID,                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; sourceProcess.Object_Type as CLASSTYPE, hierarchyLevel.value as Level,                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&quot;  ouid.value as 'OriginalProcessIdentifier',                                                                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&quot; pid.value as 'Processidentifier',                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&quot; ProcTargetPid.value as 'ParentProcessIdentifier',                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&quot; ParentProcess.Name as Parent,                                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; maturity.value as 'MaturityLevel',                                                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&quot; TMFStatus.value as 'FrameworkStatus', sourceProcess.Note as 'extendedDescription' ,                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; briefdescription.Notes as 'briefdescription', Issue.Notes as Issue                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&quot; FROM t_object AS sourceProcess                                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_connector as procconnector ON (sourceProcess.Object_ID = procconnector.Start_Object_ID AND procconnector.Stereotype='TMF_isComposedByProcess')                     &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN  t_object AS ParentProcess ON (procconnector.End_Object_ID = ParentProcess.Object_ID AND ParentProcess.Stereotype='TMF_Process')                                     &quot; &amp; vbNewLine &amp; _&#xA;&quot; -- domain                                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_connector as DomainConnector ON (sourceProcess.Object_ID = DomainConnector.Start_Object_ID AND DomainConnector.Stereotype='TMF_DomainAggregatesProcess')           &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_object AS aDomain ON (DomainConnector.End_Object_ID = aDomain.Object_ID   AND aDomain.Stereotype = 'TMF_Domain')                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; -- vertical                                                                                                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_connector as verticalconnector ON (sourceProcess.Object_ID = verticalconnector.Start_Object_ID AND verticalconnector.Stereotype='TMF_VerticalAggregatesProcess')   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_object AS vertical ON (verticalconnector.End_Object_ID = vertical.Object_ID and vertical.Stereotype='TMF_Vertical')                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS hierarchyLevel ON (hierarchyLevel.Object_ID = sourceProcess.Object_ID AND hierarchyLevel.property = 'HierarchyLevel')                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS uid ON (uid.Object_ID = sourceProcess.Object_ID AND uid.property='uid')                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS ouid ON (ouid.Object_ID = sourceProcess.Object_ID AND  ouid.property='Original Process identifier')                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS maturity ON (maturity.Object_ID = sourceProcess.Object_ID AND maturity.property='Maturity')                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS TMFStatus ON (TMFStatus.Object_ID = sourceProcess.Object_ID AND TMFStatus.property='TMFStatus')                                              &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS Issue ON (Issue.Object_ID = sourceProcess.Object_ID AND Issue.property='Issue')                                                              &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS briefdescription ON (briefdescription.Object_ID = sourceProcess.Object_ID AND briefdescription.property='briefdescription')                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS pid ON (pid.Object_ID = sourceProcess.Object_ID AND  pid.property = 'Process identifier')                                                    &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS isDeleted ON (isDeleted.Object_ID = sourceProcess.Object_ID and isDeleted.property = 'isDeleted')                                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN   t_objectproperties AS ProcTargetPid ON  (ProcTargetPid.Object_ID =  ParentProcess.Object_ID AND ProcTargetPid.property = 'Process identifier')                     &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; WHERE sourceProcess.Stereotype='TMF_Process'                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; and (isDeleted.value is null or isDeleted.value = 'false')                                                                                                                     &quot; &amp; vbNewLine &amp; _&#xA;&quot; and sourceProcess.status NOT LIkE '%TODO'                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; Order by Domain, pid.value, hierarchyLevel.value ASC                                                                                                                           &quot;&#xA;&#xA;&#xA;'' not in use&#xA;getPogrammeTreeContents2 =&#x9;&quot;SELECT sourceProcess.Name as Process , uid.value as 'UID',                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; aDomain.Name as Domain, vertical.Name as 'VerticalGroup', sourceProcess.ea_guid as CLASSGUID,                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; sourceProcess.Object_Type as CLASSTYPE, hierarchyLevel.value as Level, &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&quot;  ouid.value as 'OriginalProcessIdentifier',&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                               &quot; &amp; vbNewLine &amp; _&#xA;&quot; pid.value as 'Processidentifier',&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                           &quot; &amp; vbNewLine &amp; _&#xA;&quot; ProcTargetPid.value as 'ParentProcessIdentifier', &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&quot; ParentProcess.Name as Parent,  &#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&quot; maturity.value as 'MaturityLevel',                                                                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&quot; TMFStatus.value as 'FrameworkStatus', sourceProcess.Note as 'extendedDescription' ,                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; briefdescription.Notes as 'briefdescription', Issue.Notes as Issue  &#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; FROM t_object AS sourceProcess  &#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_connector as procconnector ON (sourceProcess.Object_ID = procconnector.Start_Object_ID AND procconnector.Stereotype='TMF_isComposedByProcess')                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN  t_object AS ParentProcess ON (procconnector.End_Object_ID = ParentProcess.Object_ID AND ParentProcess.Stereotype='TMF_Process')                                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; -- domain                                                                                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_connector as DomainConnector ON (sourceProcess.Object_ID = DomainConnector.Start_Object_ID AND DomainConnector.Stereotype='TMF_DomainAggregatesProcess')                              &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_object AS aDomain ON (DomainConnector.End_Object_ID = aDomain.Object_ID   AND aDomain.Stereotype = 'TMF_Domain')                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; -- vertical                                                                                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_connector as verticalconnector ON (sourceProcess.Object_ID = verticalconnector.Start_Object_ID AND verticalconnector.Stereotype='TMF_VerticalAggregatesProcess')                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_object AS vertical ON (verticalconnector.End_Object_ID = vertical.Object_ID and vertical.Stereotype='TMF_Vertical')                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS hierarchyLevel ON hierarchyLevel.Object_ID = sourceProcess.Object_ID                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS uid ON uid.Object_ID = sourceProcess.Object_ID                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS ouid ON ouid.Object_ID = sourceProcess.Object_ID                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS maturity ON maturity.Object_ID = sourceProcess.Object_ID                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS TMFStatus ON TMFStatus.Object_ID = sourceProcess.Object_ID                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS Issue ON Issue.Object_ID = sourceProcess.Object_ID                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS briefdescription ON briefdescription.Object_ID = sourceProcess.Object_ID                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS pid ON pid.Object_ID = sourceProcess.Object_ID                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN  t_objectproperties AS isDeleted ON (isDeleted.Object_ID = sourceProcess.Object_ID and isDeleted.property = 'isDeleted')                                                               &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN   t_objectproperties AS ProcTargetPid ON  (ProcTargetPid.Object_ID =  ParentProcess.Object_ID AND ProcTargetPid.property = 'Process identifier')                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; WHERE sourceProcess.Stereotype='TMF_Process'                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND hierarchyLevel.property = 'HierarchyLevel'                                                                                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND uid.property='uid'                                                                                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND  ouid.property='Original Process identifier'                                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND maturity.property='Maturity'                                                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND TMFStatus.property='TMFStatus'                                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND Issue.property='Issue'                                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND briefdescription.property='briefdescription'                                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND  pid.property = 'Process identifier'                                                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; and (isDeleted.value is null or isDeleted.value = 'false')                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&quot; and sourceProcess.status NOT LIkE '%TODO'                                                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; Order by Domain, pid.value, hierarchyLevel.value ASC                                                                                                                                                        &quot;&#xA;&#xA;&#xA;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getPogrammeTreeContents)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineHeader()&#xA;&#x9;if IsArray(arrayResult) and UBound(arrayResult) &gt; -1 then&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;eTOM&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.saveTab&#xA;&#x9;end if&#x9;&#xA;&#x9;&#xA;end function&#xA;&#xA;&#xA;function defineHeader()&#xA;    dim messageHeaders(16)&#xA;    messageHeaders(0) = &quot;Process&quot;&#xA;    messageHeaders(1) = &quot;UID&quot;&#xA;    messageHeaders(2) = &quot;Domain&quot;&#xA;    messageHeaders(3) = &quot;Vertical Group&quot;&#xA;    messageHeaders(4) = &quot;CLASSGUID&quot;&#xA;    messageHeaders(5) = &quot;CLASSTYPE&quot;&#xA;    messageHeaders(6) = &quot;Level&quot;&#xA;    messageHeaders(7) = &quot;Original Process Identifier&quot;&#xA;    messageHeaders(8) = &quot;Process identifier&quot;&#xA;    messageHeaders(9) = &quot;Parent Process Identifier&quot;&#xA;    messageHeaders(10) = &quot;Parent&quot;&#xA;    messageHeaders(11) = &quot;Maturity Level&quot;&#xA;    messageHeaders(12) = &quot;Framework Status&quot;&#xA;    messageHeaders(13) = &quot;extended Description&quot;&#xA;    messageHeaders(14) = &quot;brief description&quot;&#xA;    messageHeaders(15) = &quot;Issue&quot;&#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineHeader = messageHeaders&#xA;end function&#xA;&#xA;&#xA;&#xA;function exporteTOMTreeDeleted()&#xA;&#x9;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#xA;&#x9;getPogrammeTreeContents = &#x9;&quot;SELECT sourceProcess.Name as Process , uid.value as 'UID',  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;aDomain.Name as Domain, vertical.Name as 'VerticalGroup', sourceProcess.ea_guid as CLASSGUID, sourceProcess.Object_Type as CLASSTYPE, hierarchyLevel.value as Level, &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ouid.value as 'OriginalProcessIdentifier', &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;pid.value as 'Processidentifier', &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ProcTargetPid.value as 'ParentProcessIdentifier', &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;ParentProcess.Name as Parent,  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; maturity.value as 'MaturityLevel', TMFStatus.value as 'FrameworkStatus', sourceProcess.Note as 'extendedDescription' , briefdescription.Notes as 'briefdescription', Issue.Notes as Issue  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FROM t_object AS sourceProcess  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FULL OUTER JOIN t_connector as procconnector ON (sourceProcess.Object_ID = procconnector.Start_Object_ID AND procconnector.Stereotype='TMF_isComposedByProcess') &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FULL OUTER JOIN  t_object AS ParentProcess ON (procconnector.End_Object_ID = ParentProcess.Object_ID AND ParentProcess.Stereotype='TMF_Process') &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_connector as DomainConnector ON sourceProcess.Object_ID = DomainConnector.Start_Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_object AS aDomain ON DomainConnector.End_Object_ID = aDomain.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FULL OUTER JOIN t_connector as verticalconnector ON (sourceProcess.Object_ID = verticalconnector.Start_Object_ID AND verticalconnector.Stereotype='TMF_VerticalAggregatesProcess') &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FULL OUTER JOIN t_object AS vertical ON (verticalconnector.End_Object_ID = vertical.Object_ID and vertical.Stereotype='TMF_Vertical') &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS hierarchyLevel ON hierarchyLevel.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS uid ON uid.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS ouid ON ouid.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS maturity ON maturity.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS TMFStatus ON TMFStatus.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS Issue ON Issue.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS briefdescription ON briefdescription.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS pid ON pid.Object_ID = sourceProcess.Object_ID &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN  t_objectproperties AS isDeleted ON (isDeleted.Object_ID = sourceProcess.Object_ID and isDeleted.property = 'isDeleted')  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Full outer  join t_objectproperties AS ProcTargetPid ON  (ProcTargetPid.Object_ID =  ParentProcess.Object_ID AND ProcTargetPid.property = 'Process identifier')  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;WHERE sourceProcess.Stereotype='TMF_Process' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND aDomain.Stereotype='TMF_Domain' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND DomainConnector.Stereotype='TMF_DomainAggregatesProcess' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND hierarchyLevel.property = 'HierarchyLevel' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND uid.property='uid' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND  ouid.property='Original Process identifier' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND maturity.property='Maturity' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND TMFStatus.property='TMFStatus' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND Issue.property='Issue' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND briefdescription.property='briefdescription' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND sourceProcess.status NOT LIKE '%TODO%'                  &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND  pid.property = 'Process identifier' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;and isDeleted.value = 'true' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;Order by Domain, pid.value, hierarchyLevel.value ASC&quot;&#xA;&#xA;&#xA;&#xA;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getPogrammeTreeContents)&#xA;&#xA;dim messageHeaders&#xA;messageHeaders = defineHeader()&#xA;&#xA;&#xA;&#x9;'if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;if IsArray(arrayResult) and UBound(arrayResult) &gt; -1 then&#xA;&#x9;&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;&#x9;&#x9;excelOutput.createTab &quot;eTOM Deleted&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.saveTab&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="314"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3B13C1B4-5CF3-4954-9375-31826ACC3A2A}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-VBScript&#xA;'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'&#xA;' Script Name: Util&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts&#xA;' Date: 28/09/2015&#xA;'&#xA;' Synchronises the names of the selected objects or BPMN Activities with their classifier/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;function synchronizeElement (element)&#xA;&#x9;'first check if this is an object or an action&#xA;&#x9;if not element is Nothing then&#xA;&#x9;&#x9;if (element.Type = &quot;Object&quot; OR element.Type = &quot;Action&quot;) _&#xA;&#x9;&#x9;AND element.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;&#x9;set classifier = Repository.GetElementByID(element.ClassifierID)&#xA;&#x9;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;element.Name = classifier.Name&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = classifier.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(element.ElementID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'elements of type object should also point to the composite diagram of the classifier&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;set compositeDiagram = classifier.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; AND element.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'BPMN activities that call another BPMN activity need to get the same name and same composite diagram&#xA;&#x9;&#x9;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set calledActivityTV = element.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;&#x9;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set referenceActivityTV = element.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;&#x9;&#x9;if not calledActivityTV is nothing and not referenceActivityTV is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'only do something when the Activity is types a CalledActivity&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;calledActivityTV.Value : &quot; &amp; calledActivityTV.Value &#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;referenceActivityTV.Value :&quot; &amp; referenceActivityTV.Value&#xA;&#x9;&#x9;&#x9;&#x9;if calledActivityTV.Value = &quot;true&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim calledActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set calledActivity = Repository.GetElementByGuid(referenceActivityTV.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not calledActivity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set name to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Name = calledActivity.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Set composite diagram to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, calledActivity.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;'set the given diagram as composite diagram for this element&#xA;function setCompositeDiagram (element, diagram)&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;'Tell EA this element is composite&#xA;&#x9;&#x9;dim objectQuery&#xA;&#x9;&#x9;objectQuery = &quot;update t_object set NType = 8 where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;Repository.Execute objectQuery&#xA;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;'Tell EA which diagram is the composite diagram&#xA;&#x9;&#x9;&#x9;dim xrefQuery&#xA;&#x9;&#x9;&#x9;xrefquery = &quot;insert into t_xref (XrefID, Name, Type, Visibility, Partition, Client, Supplier) values ('&quot;&amp;CreateGuid&amp;&quot;', 'DefaultDiagram', 'element property', 'Public', '0', '&quot;&amp; element.ElementGUID &amp; &quot;', '&quot;&amp; diagram.DiagramGUID &amp;&quot;')&quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute xrefquery&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'for activities we need to update PDATA1 with the diagramID&#xA;&#x9;&#x9;&#x9;dim updatequery&#xA;&#x9;&#x9;&#x9;updatequery = &quot;update t_object set PDATA1 = &quot;&amp; diagram.DiagramID &amp; &quot; where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;Repository.Execute updatequery&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' Returns a unique Guid on every call. Removes any cruft.&#xA;Function CreateGuid()&#xA;    CreateGuid = Left(CreateObject(&quot;Scriptlet.TypeLib&quot;).Guid,38)&#xA;End Function&#xA;&#xA;&#xA;'make an action into a calling activity&#xA;function makeCallingActivity(action, activity)&#xA;&#x9;action.Type = &quot;Activity&quot;&#xA;&#x9;action.ClassfierID = 0&#xA;&#x9;action.Stereotype = &quot;Activity&quot;&#xA;&#x9;action.Update&#xA;&#x9;action.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;Activity&quot;&#xA;&#x9;action.TaggedValues.Refresh&#xA;&#x9;'first copy the tagged values values&#xA;&#x9;copyTaggedValuesValues activity, action&#xA;&#x9;'set tagged values correctly&#xA;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;set calledActivityTV = action.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;calledActivityTV.Value = &quot;true&quot;&#xA;&#x9;calledActivityTV.Update&#xA;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;set referenceActivityTV = action.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;referenceActivityTV.Value = activity.ElementGUID&#xA;&#x9;referenceActivityTV.Update&#xA;&#x9;action.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setFontOnDiagramObject(diagramObject, font, size )&#xA;&#x9;dim styleParts&#xA;&#x9;styleParts = Split (diagramObject.Style , &quot;;&quot;) &#xA;&#x9;dim i&#xA;&#x9;dim stylepart&#xA;&#x9;dim fontpart &#xA;&#x9;fontpart = &quot;font=&quot; &amp; font&#xA;&#x9;dim fontSet&#xA;&#x9;fontSet = false&#xA;&#x9;dim sizePart&#xA;&#x9;sizePart = &quot;fontsz=&quot; &amp; size * 10&#xA;&#x9;dim sizeSet&#xA;&#x9;sizeSet = false&#xA;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;font=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = fontpart&#xA;&#x9;&#x9;&#x9;fontSet = true&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;fontsz=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = sizePart&#xA;&#x9;&#x9;&#x9;sizeSet = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;diagramObject.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;if not fontSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; fontpart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;&#x9;if not sizeSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; sizePart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin to the ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if not result.Exists(element.Name) then&#xA;&#x9;&#x9;result.Add element.Name, element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;'get the package id string of the currently selected package tree&#xA;function getCurrentPackageTreeIDString()&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getCurrentPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;'get selected package&#xA;&#x9;set currentPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;if not currentPackage is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(currentPackage)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getCurrentPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'get the package id string of the given package tree&#xA;function getPackageTreeIDString(package)&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(package)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'make an id string out of the ID's of the given elements&#xA;function makeIDString(elements)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; element.ElementID&#xA;&#x9;next &#xA;&#x9;'if there are no elements then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makeIDString = idString&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;function getElementsFromDiagram(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagram = selectedElements&#xA;end function&#xA;&#xA;'returns the diagram objects in an ArrayList for elements of the given type from the given diagram&#xA;function getDiagramObjects(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add diagramObject&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getDiagramObjects = selectedElements&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;'the boundary element should be passed as a DiagramObject&#xA;function getElementsFromDiagramInBoundary(diagram, elementType,boundary)&#xA;&#x9;'dim boundary as EA.DiagramObject&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if (diagramObject.left &gt;= boundary.left and _&#xA;&#x9;&#x9;&#x9;diagramObject.left =&lt; boundary.right and _&#xA;&#x9;&#x9;&#x9;diagramObject.top =&lt; boundary.top and _&#xA;&#x9;&#x9;&#x9;diagramObject.top &gt;= boundary.bottom) then&#xA;&#x9;&#x9;&#x9;'get the element and check the type&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagramInBoundary = selectedElements&#xA;end function&#xA;&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim positionString&#xA;&#x9;'determine height and width&#xA;&#x9;dim width &#xA;&#x9;dim height&#xA;&#x9;dim elementType&#xA;&#x9;dim setVPartition &#xA;&#x9;setVPartition = false&#xA;&#x9;elementType = element.Type&#xA;&#x9;select case elementType       &#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#x9;&#x9;case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 90&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;'default width and height&#x9;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#x9;end select&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#x9;x = x - width/2&#xA;&#x9;'set the position of the diagramObject&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#x9;Session.Output &quot;positionString voor element &quot;&amp; element.Name &amp; &quot; : &quot; &amp;  positionString&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;if setVPartition then&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;end function&#xA;&#xA;'gets the content of the linked document in the given format (TXT, RTF or EA)&#xA;function getLinkedDocumentContent(element, format)&#xA;&#x9;dim linkedDocumentRTF&#xA;&#x9;dim linkedDocumentEA&#xA;&#x9;dim linkedDocumentPlainText&#xA;&#x9;linkedDocumentRTF = element.GetLinkedDocument()&#xA;&#x9;if format = &quot;RTF&quot; then&#xA;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentRTF&#xA;&#x9;else&#xA;&#x9;&#x9;linkedDocumentEA = Repository.GetFieldFromFormat(&quot;RTF&quot;,linkedDocumentRTF)&#xA;&#x9;&#x9;if format = &quot;EA&quot; then&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentEA&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;linkedDocumentPlainText = Repository.GetFormatFromField(&quot;TXT&quot;,linkedDocumentEA)&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentPlainText&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns the currently logged in user&#xA;'if security is not enabled then the logged in user is defaulted to me&#xA;function getUserLogin()&#xA;&#x9;'get the currently logged in user&#xA;&#x9;Dim userLogin&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;userLogin = Repository.GetCurrentLoginUser(false)&#xA;&#x9;else&#xA;&#x9;&#x9;userLogin = &quot;SYSTEMAT-TCC\BellekensG&quot;&#xA;&#x9;end if&#xA;&#x9;getUserLogin = userLogin&#xA;end function&#x9;&#xA;&#xA;&#xA;' This function takes an SQL query as input and returns the result as an array&#xA;function getArrayFromQuery(sqlQuery)&#xA;    dim xmlResult ' Declare a variable to store the result of the SQL query&#xA;    &#xA;    ' Execute the SQL query using the Sparx EA repository object and store the result in xmlResult&#xA;    xmlResult = Repository.SQLQuery(sqlQuery)&#xA;    Repository.WriteOutput &quot;Export eTOM&quot;, xmlResult, 1&#xA;    ' Convert the XML result to an array using the convertQueryResultToArray function&#xA;    ' The convertQueryResultToArray function is assumed to be defined elsewhere in the script&#xA;&#x9;&#xA;    ' It parses the XML result and returns an array containing the query result&#xA;    getArrayFromQuery = convertQueryResultToArray(xmlResult)&#xA;end function&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;'make sure the array has a dimension even is we don't have any results&#xA;&#x9;&#x9;if not arrayCreated then&#xA;&#x9;&#x9;&#x9;ReDim result(0, 0)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;' add item to array&#xA;Function AddItem(arr, val)&#xA;    ReDim Preserve arr(UBound(arr) + 1)&#xA;    arr(UBound(arr)) = val&#xA;    AddItem = arr&#xA;End Function&#xA;&#xA;' add a row to the begining of a bi-dim array&#xA;Function AddRowToArray(twoDimArray, appendArray)&#xA;    Dim newHeight, newWidth, i, j, result&#xA;    &#xA;    newHeight = UBound(twoDimArray, 1) + 1&#xA;    newWidth = UBound(twoDimArray, 2)&#xA;    &#xA;    ReDim result(newHeight, newWidth)&#xA;    ' temp change for testing&#xA;    For i = 1 To UBound(twoDimArray, 1)&#xA;        For j = 0 To UBound(twoDimArray, 2)&#xA;&#x9;&#x9;&#x9;' result(i, j) = twoDimArray(i, j)&#xA;            result(i, j) = twoDimArray(i-1, j)&#xA;        Next&#xA;    Next&#xA;    &#xA;    For j = 0 To UBound(appendArray)&#xA;        result(0, j) = appendArray(j)&#xA;    Next&#xA;    &#xA;    AddRowToArray = result&#xA;End Function&#xA;&#xA;'let the user select a package&#xA;function selectPackage()&#xA;&#x9;'start from the selected package in the project browser&#xA;&#x9;dim constructpickerString&#xA;&#x9;constructpickerString = &quot;IncludedTypes=Package&quot;&#xA;&#x9;dim treeselectedPackage as EA.Package&#xA;&#x9;set treeselectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;if not treeselectedPackage is nothing then&#xA;&#x9;&#x9;constructpickerString = constructpickerString &amp;&#x9;&quot;;Selection=&quot; &amp; treeselectedPackage.PackageGUID&#xA;&#x9;end if&#xA;&#x9;dim packageElementID &#x9;&#x9;&#xA;&#x9;packageElementID = Repository.InvokeConstructPicker(constructpickerString) &#xA;&#x9;if packageElementID &gt; 0 then&#xA;&#x9;&#x9;dim packageElement as EA.Element&#xA;&#x9;&#x9;set packageElement = Repository.GetElementByID(packageElementID)&#xA;&#x9;&#x9;dim package as EA.Package&#xA;&#x9;&#x9;set package = Repository.GetPackageByGuid(packageElement.ElementGUID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package = nothing&#xA;&#x9;end if &#xA;&#x9;set selectPackage = package&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;function getDiagramsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim diagramIDs&#xA;&#x9;diagramIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim diagrams &#xA;&#x9;set diagrams = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramID&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;for each diagramID in diagramIDs&#xA;&#x9;&#x9;if diagramID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set diagram = Repository.GetdiagramByID(diagramID)&#xA;&#x9;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;diagrams.Add(diagram)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getDiagramsFromQuery = diagrams&#xA;end function&#xA;&#xA;function getattributesFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim attributeIDs&#xA;&#x9;attributeIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim attributes &#xA;&#x9;set attributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim attributeID&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attributeID in attributeIDs&#xA;&#x9;&#x9;if attributeID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;attributes.Add(attribute)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getattributesFromQuery = attributes&#xA;end function&#xA;&#xA;'get the description from the given notes &#xA;'that is the text between &lt;NL&gt; and &lt;/NL&gt; or &lt;FR&gt; and &lt;/FR&gt;&#xA;function getTagContent(notes, tag)&#xA;&#x9;if tag = &quot;&quot; then&#xA;&#x9;&#x9;getTagContent = notes&#xA;&#x9;else&#xA;&#x9;&#x9;getTagContent = &quot;&quot;&#xA;&#x9;&#x9;dim startTagPosition&#xA;&#x9;&#x9;dim endTagPosition&#xA;&#x9;&#x9;startTagPosition = InStr(notes,&quot;&amp;lt;&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;endTagPosition = InStr(notes,&quot;&amp;lt;/&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;'Session.Output &quot;notes: &quot; &amp; notes &amp; &quot; startTagPosition: &quot; &amp; startTagPosition &amp; &quot; endTagPosition: &quot; &amp;endTagPosition&#xA;&#x9;&#x9;if startTagPosition &gt; 0 and endTagPosition &gt; startTagPosition then&#xA;&#x9;&#x9;&#x9;dim startContent&#xA;&#x9;&#x9;&#x9;startContent = startTagPosition + len(tag) + 8&#xA;&#x9;&#x9;&#x9;dim length &#xA;&#x9;&#x9;&#x9;length = endTagPosition - startContent&#xA;&#x9;&#x9;&#x9;getTagContent = mid(notes, startContent, length)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'Returns the value of the tagged value with the given name (case insensitive)&#xA;'If there is no tagged value with the given name, an empty string is returned&#xA;'This function can be used with anything that can have tagged values&#xA;function getTaggedValueValue(owner, taggedValueName)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;getTaggedValueValue = &quot;&quot;&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if lcase(taggedValueName) = lcase(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;getTaggedValueValue = taggedValue.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim returnTag as EA.TaggedValue&#xA;&#x9;set returnTag = nothing&#xA;&#x9;'check if a tag with that name alrady exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = tagName then&#xA;&#x9;&#x9;&#x9;set returnTag = taggedValue&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create new one if not found&#xA;&#x9;if returnTag is nothing then&#xA;&#x9;&#x9;set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function isRequireUserLockEnabled()&#xA;&#x9;dim reqUserLockToEdit&#xA;&#x9;'default is false&#xA;&#x9;reqUserLockToEdit = false&#xA;&#x9;'check if security is enabled&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;dim getReqUserLockSQL&#xA;&#x9;&#x9;getReqUserLockSQL =&#x9;&quot;select sc.Value from t_secpolicies sc &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where sc.Property = 'RequireLock' &quot;&#xA;&#x9;&#x9;dim xmlQueryResult&#xA;&#x9;&#x9;xmlQueryResult = Repository.SQLQuery(getReqUserLockSQL)&#xA;&#x9;&#x9;dim reqUserLockResults&#xA;&#x9;&#x9;reqUserLockResults = convertQueryResultToArray(xmlQueryResult)&#xA;&#x9;&#x9;if Ubound(reqUserLockResults) &gt; 0 then&#xA;&#x9;&#x9;&#x9;if reqUserLockResults(0,0) = &quot;1&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;reqUserLockToEdit = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;isRequireUserLockEnabled = reqUserLockToEdit&#xA;end function&#xA;&#xA;function copyDiagram(diagram, targetOwner)&#xA;&#x9;dim copiedDiagram as EA.Diagram&#xA;&#x9;'initialize at nothing&#xA;&#x9;set copiedDiagram = nothing&#xA;&#x9;'get the owner package&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;'check if we need to lock the package to clone it&#xA;&#x9;if isRequireUserLockEnabled() then&#xA;&#x9;&#x9;dim ownerOfOwnerPackage as EA.Package&#xA;&#x9;&#x9;if ownerPackage.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set ownerOfOwnerPackage = Repository.GetPackageByID(ownerPackage.ParentID)&#xA;&#x9;&#x9;&#x9;if not ownerOfOwnerPackage.ApplyUserLock() then&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we couldn't do it and then exit the function&#xA;&#x9;&#x9;&#x9;&#x9;msgbox &quot;Could not lock package &quot; &amp;  ownerPackage.Name &amp; &quot; in order to copy the diagram &quot; &amp; diagram.Name,vbError,&quot;Could not lock Package&quot;&#xA;&#x9;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'then actually clone the owner package&#xA;&#x9;dim clonedPackage as EA.Package&#xA;&#x9;set clonedPackage = ownerPackage.Clone()&#xA;'&#x9;if isRequireUserLockEnabled() then&#xA;'&#x9;&#x9;clonedPackage.ApplyUserLockRecursive true,true,true&#xA;'&#x9;end if&#xA;&#x9;'then get the diagram corresponding to the diagram to copy&#xA;&#x9;set copiedDiagram = getCorrespondingDiagram(clonedPackage,diagram)&#xA;&#x9;'set the owner of the copied diagram&#xA;&#x9;if targetOwner.ObjectType = otElement then&#xA;&#x9;&#x9;copiedDiagram.ParentID = targetOwner.ElementID&#xA;&#x9;else&#xA;&#x9;&#x9;copiedDiagram.PackageID = targetOwner.PackageID&#xA;&#x9;end if&#xA;&#x9;'save the update to the owner&#xA;&#x9;copiedDiagram.Update&#xA;&#x9;'delete the cloned package&#xA;&#x9;deletePackage(clonedPackage)&#xA;&#x9;'return the copied diagram&#xA;&#x9;set copyDiagram = copiedDiagram&#xA;end function&#xA;&#xA;function deletePackage(package)&#xA;&#x9;if package.ParentID &gt; 0 then&#xA;&#x9;&#x9;'get parent package&#xA;&#x9;&#x9;dim parentPackage as EA.Package&#xA;&#x9;&#x9;set parentPackage = Repository.GetPackageByID(package.ParentID )&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;'delete the pacakge&#xA;&#x9;&#x9;for i = parentPackage.Packages.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set currentPackage = parentPackage.Packages(i)&#xA;&#x9;&#x9;&#x9;if currentPackage.PackageID = package.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;parentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getCorrespondingDiagram(clonedPackage,diagram)&#xA;&#x9;dim correspondingDiagram as EA.Diagram&#xA;&#x9;dim candidateDiagrams&#xA;&#x9;dim getCandidateDiagramsSQL&#xA;&#x9;dim packageIDs&#xA;&#x9;packageIDs = getPackageTreeIDString(clonedPackage)&#xA;&#x9;getCandidateDiagramsSQL = &#x9;&quot;select d.Diagram_ID from t_diagram d &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where d.name = '&quot; &amp; diagram.Name &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and d.Package_ID in (&quot; &amp; packageIDs&amp; &quot;) &quot;&#xA;&#x9;set candidateDiagrams = getDiagramsFromQuery(getCandidateDiagramsSQL)&#xA;&#x9;'if there is only one candidate then that is the one we take&#xA;&#x9;if candidateDiagrams.Count = 1 then&#xA;&#x9;&#x9;set correspondingDiagram = candidateDiagrams(0)&#xA;&#x9;end if&#xA;&#x9;'if there are multiple candidates then we have to filter them&#xA;&#x9;'first create a dictionary with the diagrams and their owner&#xA;&#x9;dim candidateDiagramsDictionary&#xA;&#x9;set candidateDiagramsDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim currentDiagram&#xA;&#x9;for each currentDiagram in candidateDiagrams&#xA;&#x9;&#x9;'add the diagram and its owner to the dictionary&#xA;&#x9;&#x9;candidateDiagramsDictionary.Add currentDiagram, getOwner(diagram)&#xA;&#x9;next&#xA;&#x9;dim currentowner&#xA;&#x9;set currentOwner = nothing&#xA;&#x9;'filter the diagrams until we have only one diagram left&#xA;&#x9;set correspondingDiagram = filterDiagrams(candidateDiagramsDictionary,diagram, clonedPackage, currentOwner)&#xA;&#x9;'return the diagram&#xA;&#x9;set getCorrespondingDiagram = correspondingDiagram&#xA;end function&#xA;&#xA;function filterDiagrams(candidateDiagramsDictionary,diagram, clonedPackage, currentOwner)&#xA;&#x9;dim filteredDiagrams&#xA;&#x9;dim filteredDiagram as EA.Diagram&#xA;&#x9;'initialize at nothing&#xA;&#x9;set filteredDiagram = nothing&#xA;&#x9;set filteredDiagrams = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;if currentOwner is nothing then&#xA;&#x9;&#x9;set currentOwner = getOwner(diagram)&#xA;&#x9;end if&#xA;&#x9;'compare the diagrams and their owner with the current owner&#xA;&#x9;dim candidateDiagram as EA.Diagram&#xA;&#x9;dim candidateOwner&#xA;&#x9;for each candidateDiagram in candidateDiagramsDictionary.Keys&#xA;&#x9;&#x9;set candidateOwner = candidateDiagramsDictionary(candidateDiagram)&#xA;&#x9;&#x9;if candidateOwner.Name = currentOwner.Name then&#xA;&#x9;&#x9;&#x9;'add the diagram to the new list &#xA;&#x9;&#x9;&#x9;filteredDiagrams.Add candidateDiagram, getOwner(candidateOwner)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'check the number if we have reached he level of the cloned package, or if there is only one diagram left&#xA;&#x9;if filteredDiagrams.Count = 1 _&#xA;&#x9;OR currentOwner.ObjectType = otPackage AND currentOwner.ParentID = clonedPackage.PackageID then&#xA;&#x9;&#x9;'return the first one&#xA;&#x9;&#x9;set filteredDiagram = filteredDiagrams.Keys()(0)&#xA;&#x9;else&#xA;&#x9;&#x9;'go one level deeper to filter the diagrams&#xA;&#x9;&#x9;set currentOwner = getOwner(currentOwner)&#xA;&#x9;&#x9;set filteredDiagram = filterDiagrams(filteredDiagrams,diagram, clonedPackage, currentOwner)&#xA;&#x9;end if&#xA;&#x9;'return filtered diagram&#xA;&#x9;set filterDiagrams = filteredDiagram&#xA;end function&#xA;&#xA;function getOwner(item)&#xA;&#x9;dim owner&#xA;&#x9;select case item.ObjectType&#xA;&#x9;&#x9;case otElement,otDiagram,otPackage&#xA;&#x9;&#x9;&#x9;'if it has an element as owner then we return the element&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if item.ObjectType &lt;&gt; otPackage then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else we return the package (not for packages because then we have a root package that doesn't have an owner)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;'TODO: add other cases such as attributes and operations&#xA;&#x9;end select&#xA;&#x9;'return owner&#xA;&#x9;set getOwner = owner&#xA;end function&#xA;&#xA;Function lpad(strInput, length, character)&#xA;  lpad = Right(String(length, character) &amp; strInput, length)&#xA;end function&#xA;&#xA;function makeArrayFromArrayLists(arrayLists)&#xA;&#x9;dim returnArray()&#xA;&#x9;'get the dimensions&#xA;&#x9;dim x&#xA;&#x9;dim y&#xA;&#x9;x = arrayLists.Count&#xA;&#x9;y = arrayLists(0).Count&#xA;&#x9;'redim the array to the correct dimensions&#xA;&#x9;redim returnArray(x,y)&#xA;&#x9;dim i,j&#xA;&#x9;i = 0&#xA;&#x9;dim row&#xA;&#x9;dim field&#xA;&#x9;for each row in arrayLists&#xA;&#x9;&#x9;'reset j&#xA;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;for each field in row&#xA;&#x9;&#x9;&#x9;if IsObject(field) then&#xA;&#x9;&#x9;&#x9;&#x9;set returnArray(i,j) = field&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;returnArray(i,j) = field&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'return the array&#xA;&#x9;makeArrayFromArrayLists = returnArray&#xA;end function&#xA;&#xA;'EA uses a lot of key=value pairs in different types of fields (such as StyleEx etc.)&#xA;' each of them separated by a &quot;;&quot;&#xA;' this function will search for the value of the key and return the value if it is present in the given search string&#xA;function getValueForkey(searchString, key)&#xA;&#x9;dim returnValue&#xA;&#x9;returnValue = &quot;&quot;&#xA;&#x9;'first split int keyvalue pairs using &quot;;&quot;&#xA;&#x9;dim keyValuePairs&#xA;&#x9;keyValuePairs = split(searchString,&quot;;&quot;)&#xA;&#x9;'then loop the key value pairs&#xA;&#x9;dim keyValuePairString&#xA;&#x9;for each keyValuePairString in keyValuePairs&#xA;&#x9;&#x9;'and split them usign &quot;=&quot; as delimiter&#xA;&#x9;&#x9;dim keyValuePair&#xA;&#x9;&#x9;if instr(keyValuePairString,&quot;=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;keyValuePair = split(keyValuePairString,&quot;=&quot;)&#xA;&#x9;&#x9;&#x9;if UBound(keyValuePair) = 2 then&#xA;&#x9;&#x9;&#x9;&#x9;if keyValuePair(1) = key then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnValue = keyValuePair(1)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return the value&#xA;&#x9;getValueForkey = returnValue&#xA;end function&#xA;&#xA;function copyDiagram(diagram, targetOwner)&#xA;&#x9;if targetOwner.Objecttype = otPackage then&#xA;&#x9;&#x9;'create the new diagram&#xA;&#x9;&#x9;dim copiedDiagram as EA.Diagram&#xA;&#x9;&#x9;set copiedDiagram = targetOwner.Diagrams.AddNew(diagram.Name, diagram.Type)&#xA;&#x9;&#x9;copiedDiagram.Stereotype = diagram.Stereotype&#xA;&#x9;&#x9;copiedDiagram.StyleEx = diagram.StyleEx&#xA;&#x9;&#x9;copiedDiagram.Notes = diagram.Notes&#xA;&#x9;&#x9;copiedDiagram.ExtendedStyle = diagram.ExtendedStyle&#xA;&#x9;&#x9;copiedDiagram.ShowDetails = diagram.ShowDetails&#xA;&#x9;&#x9;copiedDiagram.ShowPackageContents = diagram.ShowPackageContents&#xA;&#x9;&#x9;copiedDiagram.Version = diagram.Version&#xA;&#x9;&#x9;copiedDiagram.Update 'hopefully this is enough&#xA;&#x9;&#x9;'recreate all diagramObjects&#xA;&#x9;&#x9;copyDiagramObjects copiedDiagram, diagram&#xA;&#x9;&#x9;'recreate all diagramLinks&#xA;&#x9;&#x9;copyDiagramLinks copiedDiagram, diagram&#xA;&#x9;else&#xA;&#x9;&#x9;msgbox &quot;copy diagram currently only supported for copying to packages&quot;&#xA;&#x9;end if&#xA;&#x9;'do we need to save the diagram here?&#xA;&#x9;'diagram.Update&#xA;&#x9;'return diagram&#xA;&#x9;set copyDiagram = copiedDiagram&#xA;end function &#xA;&#xA;function copyDiagramObjects(copiedDiagram, diagram)&#xA;&#x9;dim currentElement as EA.Element&#xA;&#x9;dim currentDiagramObject as EA.DiagramObject&#xA;&#x9;dim targetPackage as EA.Element&#xA;&#x9;set targetPackage = Repository.GetPackageByID(copiedDiagram.PackageID)&#xA;&#x9;for each currentDiagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentDiagramObject.ElementID)&#xA;&#x9;&#x9;'in case of diagram owned objects we need to copy them as well&#xA;&#x9;&#x9;select case currentElement.Type&#xA;&#x9;&#x9;&#x9;case &quot;Note&quot;,&quot;Boundary&quot;,&quot;Text&quot;&#xA;&#x9;&#x9;&#x9;set currentElement = copyOwnedElement(currentElement,targetPackage)&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;'copy the diagram object&#xA;&#x9;&#x9;dim newDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;set newDiagramObject = copiedDiagram.DiagramObjects.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;newDiagramObject.ElementID = currentDiagramObject.ElementID&#xA;&#x9;&#x9;newDiagramObject.top = currentDiagramObject.top&#xA;&#x9;&#x9;newDiagramObject.bottom = currentDiagramObject.bottom&#xA;&#x9;&#x9;newDiagramObject.left = currentDiagramObject.left&#xA;&#x9;&#x9;newDiagramObject.right = currentDiagramObject.right&#xA;&#x9;&#x9;newDiagramObject.fontSize = currentDiagramObject.fontSize&#xA;&#x9;&#x9;newDiagramObject.fontName = currentDiagramObject.fontName&#xA;&#x9;&#x9;newDiagramObject.FontBold = currentDiagramObject.FontBold&#xA;&#x9;&#x9;newDiagramObject.FontColor = currentDiagramObject.FontColor&#xA;&#x9;&#x9;newDiagramObject.FontItalic = currentDiagramObject.FontItalic&#xA;&#x9;&#x9;newDiagramObject.FontUnderline = currentDiagramObject.FontUnderline&#xA;&#x9;&#x9;newDiagramObject.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function copyDiagramLinks(copiedDiagram, diagram)&#xA;&#x9;dim currentDiagramLink as EA.DiagramLink&#xA;&#x9;for each currentDiagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;'copy each diagram link&#xA;&#x9;&#x9;dim newDiagramLink as EA.DiagramLink&#xA;&#x9;&#x9;set newDiagramLink = copiedDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;newDiagramLink.ConnectorID = currentDiagramLink.ConnectorID&#xA;&#x9;&#x9;newDiagramLink.Geometry = currentDiagramLink.Geometry&#xA;&#x9;&#x9;newDiagramLink.IsHidden = currentDiagramLink.IsHidden&#xA;&#x9;&#x9;newDiagramLink.LineStyle = currentDiagramLink.LineStyle&#xA;&#x9;&#x9;newDiagramLink.LineColor = currentDiagramLink.LineColor&#xA;&#x9;&#x9;newDiagramLink.LineWidth = currentDiagramLink.LineWidth&#xA;&#x9;&#x9;newDiagramLink.Path = currentDiagramLink.Path&#xA;&#x9;&#x9;newDiagramLink.HiddenLabels = currentDiagramLink.HiddenLabels&#xA;&#x9;&#x9;newDiagramLink.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function copyOwnedElement(currentElement, targetPackage)&#xA;&#x9;dim newOwnedElement as EA.Element&#xA;&#x9;set newOwnedElement = targetPackage.Elements.AddNew(currentElement.Name,currentElement.Type)&#xA;&#x9;newOwnedElement.Notes = currentElement.Notes&#xA;&#x9;newOwnedElement.Subtype = currentElement.Subtype&#xA;&#x9;newOwnedElement.StyleEx = currentElement.StyleEx&#xA;&#x9;newOwnedElement.Alias = currentElement.Alias&#xA;&#x9;newOwnedElement.Update 'hopefully this is enough&#xA;&#x9;'return the object&#xA;&#x9;set copyOwnedElement = newOwnedElement&#xA;end function&#xA;&#xA;function deletePackage(package)&#xA;&#x9;if package.ParentID &gt; 0 then&#xA;&#x9;&#x9;'get parent package&#xA;&#x9;&#x9;dim parentPackage as EA.Package&#xA;&#x9;&#x9;set parentPackage = Repository.GetPackageByID(package.ParentID )&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;'delete the pacakge&#xA;&#x9;&#x9;for i = parentPackage.Packages.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set currentPackage = parentPackage.Packages(i)&#xA;&#x9;&#x9;&#x9;if currentPackage.PackageID = package.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;parentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getOwner(item)&#xA;&#x9;dim owner&#xA;&#x9;select case item.ObjectType&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;case otElement,otDiagram&#xA;&#x9;&#x9;&#x9;'if it has an element as owner then we return the element&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if item.ObjectType &lt;&gt; otPackage then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else we return the package (not for packages because then we have a root package that doesn't have an owner)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;'TODO: add other cases such as attributes and operations&#xA;&#x9;end select&#xA;&#x9;'return owner&#xA;&#x9;set getOwner = owner&#xA;end function&#xA;&#xA;&#xA;'put the given value onto the clipboard&#xA;function putOnClipBoard(stringValue)&#xA;&#x9;dim WshShell&#xA;&#x9;Set WshShell = CreateObject(&quot;WScript.Shell&quot;)&#xA;&#x9;WshShell.Run &quot;cmd.exe /c echo &quot; &amp; stringValue &amp; &quot; | clip&quot;, 0, TRUE&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="315"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9590A1CD-A780-4581-89DE-A1F1AB1E9692}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TAM -Create App Diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Purpose: create a series of application  diagram inside each TAM elemen, all the applications  must be  in a single package&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;!INC Utils.Model Management Utilities&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Application&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Application&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Application&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 4&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Application&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Application&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;&#x9;' *** 3rd LEVEL ***&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Application&quot;&#xA;&#x9;level3.objectHeight&#x9;= 50&#xA;&#x9;level3.objectWidth = 160&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 20&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Application&quot;&#xA;&#x9;level4.objectHeight&#x9;= 40&#xA;&#x9;level4.objectWidth = 140&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function&#xA;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Application&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="316"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A7434D38-0C76-41c0-B055-4B3B96B02DAE}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TAM  - Create app diagram Flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat application  diagram, all the applications  are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Process diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;TAM&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;TAM&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Application&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="317"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{055C09A3-C086-43a9-980D-D8714C8ED629}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF -create function diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Function Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat Function diagram, all the Function are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;Function&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Function&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Function&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="318"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{92597CD5-552E-4b30-AC5C-C185A2613884}"/>
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Create Component Diagram Flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a impl. Independent Component diagram, all the components are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;ODA Components&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;ODA Components&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;impl. Independent Component&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="319"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{028C3DE2-5C8B-4607-AE9E-747FF439BC62}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Domain - Create Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' create a flat diagram for Domains&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram thePackage, levelList, &quot;Domain&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;&#x9;&#x9;&#x9;'for each element in thePackage.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if element.MetaType = &quot;Domain&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'CreateNestedHierarchyDiagram element,levelList, &quot;Domain&quot;, false&#x9;&#x9;'''params: parentItem, levelList, diagramType, openDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'end if&#xA;'&#x9;&#x9;&#x9;&#x9;'next&#xA;&#x9;&#x9;&#x9;'next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Domain&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level1.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level1.objectHeight&#x9;= 192&#xA;&#x9;level1.objectWidth = 212&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;''level1.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 16&#xA;&#x9;level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 3&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level2.objectWidth = 142&#x9;&#x9;&#xA;&#x9;level2.objectHeight = 72&#xA;&#x9;level2.horizOffset = 40&#xA;&#x9;level2.horizSpace = 5&#xA;&#x9;level2.vertOffset = 100&#xA;&#x9;level2.vertSpace = 5&#xA;&#x9;&#xA;&#x9;level2.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level3.objectHeight&#x9;= 21&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;'level3.vertOffset = 100&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level4.objectHeight&#x9;= 21&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 30&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="320"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{84A075F1-A8A3-4660-A20F-4807AB196DE6}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Create API from Component &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateComponentFunctionfromDiagram.vbs&#xA;' &#xA;ODA -Create APi from Component  &#xA;' Work In progress. This script aims to generate a new APi from a component specification. &#xA;' The component needs to be connected to TMF Functions that will be transformed into operations of the API. &#xA;' Potentially, if a function would be related to a BusienssEntity, that would result into the input/output parameter of the operation. WIP &#xA; &#xA;&#xA;&#xA;' &#xA;Dim componentElementCount, componentControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;componentElementCount = 0&#xA;componentControllerClassCreated = 0&#xA; dim CompStereo &#xA; dim APIStereo &#xA; CompStereo = &quot;ODA Component&quot;&#xA; APIStereo = &quot;TMF_API&quot;&#xA; &#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;ok, its a package&quot;)&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkComponentElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root component element&#xA;&#x9;&#x9;&#x9;dim componentElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The controller class created for the component element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set componentElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkComponentElement(componentElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if componentElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;Function created for &quot; &amp; componentControllerClassCreated &amp;  &quot; out of &quot; &amp;  componentElementCount &amp; &quot; Components.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Function can ONLY be created for elements of type&quot; &amp; CompStereo, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkComponentElement(componentElement) &#xA;&#x9;'The controller class created for the component element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be dFeature. When any other element is selected it will throw an error message to user. &#xA;&#x9;Session.Output( &quot;component stereotype is &quot; + componentElement.Stereotype)&#x9;&#xA;&#x9;&#xA;&#x9;if (componentElement.Stereotype = CompStereo)  then&#xA;&#x9;&#x9;'When the Use Case already exist for feature. Throw an error. &#xA;&#x9;&#x9;Session.Output( &quot;ok its a component&quot;)&#x9;&#xA;&#x9;&#x9;if(checkComponentControllerClass(componentElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;API  already exist for component &quot; + componentElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = componentElement.Name + &quot;_API&quot;&#xA;&#x9;&#x9;&#x9;set controllerClass = componentElement.Elements.AddNew(className, APIStereo)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = APIStereo&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = componentElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector componentElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the component as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(componentElement, controllerClass) &#xA;&#x9;&#x9;&#x9;componentControllerClassCreated = componentControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type TMF_ODAComponents (2).&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the component element if it has an controller element with name component name + Controller&#xA;Function checkcomponentControllerClass(componentElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = componentElement.Elements.Count&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = componentElement.Name + &quot;_API&quot;&#xA;&#x9;&#x9;&#x9;set controllerClassElement = componentElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = APIStereo) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkcomponentControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkcomponentControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under component to controller as methods. &#xA;Function addMethods(componentElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( componentElement, controllerClass)&#xA;' create a connector between the feature and the use case&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Dependency&quot;&#xA;&#x9;set source = Repository.GetElementByID( componentElement.ElementId)&#xA;&#x9;set target = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;TMF::TMF_DependentAPI&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="321"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AA154C5D-1BAB-4198-A849-A385D5372929}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODa -Create IIC from ISC&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateUsecaseUserStoryfromDiagram.vbs&#xA;' Version : 4.1&#xA;' Author: Giu &#xA;' Purpose: This method creates a Implementation Independent Component (IIC) from a package, and connect the new ISC with the using a Realization. &#xA;' in the project browser, right click on a package containing Use Cases, &#xA;'  select &quot;Create User Story from Use Case&quot; &#xA;'  Move the created user stories in the proper package&#xA;' Date: 15-Oct-2022&#xA;' Project Browser Script main function&#xA;'&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkUsecaseElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The ISC class created for the ISC element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;IIC created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; ISC.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;IIC can ONLY be created for elements of type ISC .&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be dFeature. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;TMF_ISC&quot;)  then&#xA;&#x9;&#x9;'When the Use Case already exist for feature. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;TMF_IIC  already exist for ISC &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;_IIC&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot; &quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;TMF_IIC&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;TMF_IIC&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the ISC element if it has an IIC element with same name already&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;_IIC&quot;&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;TMF_IIC&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( usecaseElement, controllerClass)&#xA;' create a connector between the feature and the use case&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Realization&quot;&#xA;&#x9;set  target= Repository.GetElementByID( usecaseElement.ElementId)&#xA;&#x9;set source = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;TMF::TMF_RealizesComponent&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="322"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BBD73546-A4E2-4b10-B9F3-F36683D6DD5B}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Component Logical Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Logical Application Component&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Logical Application Component&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Logical Application Component&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Logical Application Component&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Logical Application Component&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Arial&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Logical Application Component&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 10&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 30&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorLightSteelBlue1&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Logical Application Component&quot;&#xA;&#x9;level4.objectHeight&#x9;= 60&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 30&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorAzure2&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="323"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{759C84E7-5BBD-45a7-92D0-0CB1507345C7}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;createManifestForComponent&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateManifestFromComponent.vbs&#xA;' Author: Giu&#xA;' Purpose: This method creates a dSystem configuration class for each of the dAPplicationComponents. &#xA;' Date: 29-Nov-2022&#xA;'&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;&#xA;!INC M3 Local.Model Management Utilities&#xA;&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkUsecaseElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The controller class created for the usecase element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;Configuration created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; Components.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type Application COmponents.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be Business Use Case or Busness Use Case Core. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;dApplicationComponent&quot;)  then&#xA;&#x9;&#x9;'When the controller class already exist for Usecase. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Configuration already exist for dApplicationComponent &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;Manifest&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;dSystem&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;dSystem&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;retVal = addAttributes(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;' retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the usecase element if it has an controller element with name usecase name + Controller&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(usecaseElement.Name + &quot;Manifest&quot;, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;dSystemConfiguration&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#x9;dim activityElement as EA.Element&#xA;&#x9;dim elementCount, elementIndex &#xA;&#x9;dim activityName, method&#xA;&#x9;&#xA;&#x9;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;&#x9;set activityElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;if activityElement.stereotype = &quot;dActivity&quot; or (activityElement.stereotype  = &quot;&quot;)  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityName = activityElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activityName = Replace(activityName, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set method = controllerClass.Methods.AddNew(activityName, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'The notes available in activity is copied to the method notes. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method.Notes = activityElement.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addMethods = 1&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next 'elementCount&#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;addMethods = 0&#xA;&#x9;&#x9;end if&#xA;end Function&#xA;&#xA;&#xA;' function to add attributes&#xA;Function addAttributes(usecaseElement, controllerClass) &#xA;&#xA;&#xA;&#xA;&#x9;dim &#x9;UUID as EA.Attribute&#xA;&#x9;dim &#x9;aVersion as EA.Attribute&#xA;'&#x9;dim activityElement as EA.Element&#xA;&#x9;&#xA;&#xA;&#x9;setAttribute controllerClass, &quot;author_email&quot;, &quot;&quot;&#xA;&#x9;setAttribute controllerClass, &quot;author&quot;, usecaseElement.Author&#xA;&#x9;&#x9;setAttribute controllerClass, &quot;description&quot;, usecaseElement.Notes&#xA;&#x9;setAttribute controllerClass, &quot;License&quot;, &quot;insert License here&quot;&#xA;&#x9;setAttribute controllerClass, &quot;repo&quot;, &quot;http://github.com/&quot; + usecaseElement.Name&#xA;&#x9;setAttribute controllerClass,&quot;requiredAlfaVersion&quot;, &quot;1.0&quot;&#xA;&#x9;setAttribute controllerClass, &quot;URL&quot;, &quot;http://&quot;&#xA;&#x9;setAttribute controllerClass,  &quot;Version&quot;, usecaseElement.Version&#xA;&#x9;setAttribute controllerClass, &quot;UUID&quot;, CreateGUID&#xA;&#x9;setAttribute controllerClass, &quot;subscriptions&quot;, &quot;{[service1, 'topic1, topic2, topic3'],[service2, 'topic1, topic2, topic4'], [service3, 'topic1, topic4, topic3']}&quot;&#xA;&#x9;'controllerClass.Attributes.AddNew(aVersion)&#xA;&#x9;controllerClass.Attributes.Refresh&#xA;&#xA;end Function&#xA;&#xA;Function CreateGUID&#xA;  Dim TypeLib&#xA;  Set TypeLib = CreateObject(&quot;Scriptlet.TypeLib&quot;)&#xA;  CreateGUID = Mid(TypeLib.Guid, 2, 36)&#xA;End Function&#xA;&#xA;Function CreateConnector( usecaseElement, controllerClass)&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Aggregation&quot;&#xA;&#x9;set source = Repository.GetElementByID( usecaseElement.ElementId)&#xA;&#x9;set target = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;DAF::configured by&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="325"/>
			<Column name="ScriptCategory" value="{CFE0D096-FD09-4f0c-905E-DF0802648170}"/>
			<Column name="ScriptName" value="Production Line"/>
			<Column name="ScriptAuthor" value="{999E9DC9-686D-4049-8F2B-29407CF560B6}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="326"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3CEB3701-D5ED-4d6f-AD70-ADEEB317483B}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen_XML&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA;* Script Name: Example Schema Composer Script&#xA;* Author:  Sparx Systems&#xA;* Purpose: Demonstrate access to Schema Composer using automation and Javascript&#xA;* Language: Javascript&#xA;* Date:  2022&#xA;*/&#xA;&#xA;function printType( xmlType, xmlns, uri)&#xA;{&#xA;&#x9;var xmlProp as EA.SchemaProperty;&#xA;&#x9;var xmlPropEnum as EA.SchemaPropEnum;&#xA;&#x9;var xmlChoiceEnum1 as EA.SchemaTypeEnum;&#xA;&#x9;var xmlChoiceEnum2 as EA.SchemaTypeEnum;&#xA;&#x9;Session.Output(&quot;Type: &quot; + xmlType.TypeName + &quot; in namespace: &quot;  + xmlns + &quot;:&quot; + uri);&#xA;&#x9;xmlPropEnum = xmlType.Properties;&#xA;&#x9;xmlType.&#xA;&#x9;if(xmlPropEnum)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;xmlProp = xmlPropEnum.GetFirst();&#xA;&#x9;&#x9;&#x9;while(xmlProp)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if(xmlType.IsEnumeration())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;   &quot; + xmlProp.Name);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;var sPropDesc = xmlProp.Name;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc += &quot;::&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(xmlProp.IsPrimitive())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc += xmlProp.PrimitiveType;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc += xmlProp.TypeName;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(xmlProp.IsByReference())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc += &quot;(by reference)&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(xmlProp.IsInline())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc += &quot;(inline)&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;   &quot; + sPropDesc + &quot;, cardinality: &quot; + xmlProp.Cardinality);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xmlChoiceEnum1 = xmlProp.Choices;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xmlChoiceEnum2 = xmlProp.SchemaChoices;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;var count = xmlChoiceEnum1.GetCount() + xmlChoiceEnum2.GetCount();&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(count&gt;1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;   choice of: &quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum1.GetFirst();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(xmlChoice)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;     &quot; + xmlChoice.TypeName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum1.GetNext();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum2.GetFirst();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;while(xmlChoice)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;     &quot; + xmlChoice.TypeName);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;xmlChoice = xmlChoiceEnum2.GetNext();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;xmlProp = xmlPropEnum.GetNext();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;function main()&#xA;{&#xA;&#x9;var schema as EA.SchemaComposer;&#xA;&#x9;var xmlType as EA.SchemaType;&#xA;&#x9;var xmlTypeEnum as EA.SchemaTypeEnum;&#xA;&#x9;var xmlNamespaceEnum as EA.SchemaNamespaceEnum;&#xA;&#x9;var xmlNS as EA.SchemaNamespace;&#xA;&#x9;// Get SchemaComposer&#xA;&#x9;schema = Repository.SchemaComposer;&#xA;&#x9;// print the namespace references&#xA;&#x9;xmlNamespaceEnum = schema.Namespaces;&#xA;&#x9;if(xmlNamespaceEnum)&#xA;&#x9;{&#xA;&#x9;&#x9;xmlNS = xmlNamespaceEnum.GetFirst();&#xA;&#x9;&#x9;while(xmlNS)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot;xmlns:&quot; + xmlNS.Name + &quot; URI=&quot; + xmlNS.URI);&#xA;&#x9;&#x9;&#x9;&#x9;xmlNS = xmlNamespaceEnum.GetNext();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;// Get Schema Types Enumerator&#xA;&#x9;xmlTypeEnum = schema.SchemaTypes;&#xA;&#x9;xmlType = xmlTypeEnum.GetFirst();&#xA;&#x9;while(xmlType)&#xA;&#x9;{&#xA;&#x9;&#x9;var xmlns = schema.GetNamespacePrefixForType( xmlType.TypeID );&#xA;&#x9;&#x9;uri = schema.GetNamespaceForPrefix(xmlns);&#xA;&#x9;&#x9;printType(xmlType, xmlns, uri);&#xA;&#x9;&#x9;xmlType = xmlTypeEnum.GetNext();&#xA;&#x9;}&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="328"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{309B9684-8E1C-4726-85D4-3FD170284F0A}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Component-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Component Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to build a Component Diagram  &#xA;' Date: 29-Mar-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;sub CreateComponentDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Component Diagram script activated&quot;)&#xA;&#x9;&#xA;&#x9;if instr(Ucase(theSelectedElement.Notes),&quot;C4-PLANTUML&quot;) &gt; 0 then&#xA;&#x9;&#x9;CreateC4Diagram ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Create Component Diagram Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="329"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{697DDE6D-092E-48d9-95DD-5033A5D556BC}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import File Attributes from CSV&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="Option Explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Dialog&#xA;&#xA;' Script Name: ImportAttributesFromCSV&#xA;' Author: David Anderson&#xA;' Purpose: Import Attributes from a Slected CSV file into a selcted diagram object&#xA;'&#x9;&#x9;&#x9;Where the CSV file has the following 4 columns&#xA;'&#x9;&#x9;&#x9;&#x9;1.&#x9;Attribute Name&#xA;'&#x9;&#x9;&#x9;&#x9;2.&#x9;Type&#xA;'&#x9;&#x9;&#x9;&#x9;3.&#x9;Stereotype&#xA;'&#x9;&#x9;&#x9;&#x9;4.&#x9;Notes&#xA;'&#x9;&#x9;&#x9;&#xA;' Date: July-02-2017&#xA;' Change Log:&#xA;' Dec-01-2017: &#x9;Changed to select object from a diagram &#xA;'&#x9;&#x9;&#x9;&#x9;Add prompt for the delimiter&#xA;'&#x9;&#x9;&#x9;&#x9;Default delimiter set to |&#xA;&#xA;Sub ImportAttributesFromCSV()&#xA; Dim strFile&#xA; Dim strFileType&#xA; Dim fileSystemObject&#xA; dim inputFile&#xA; dim thisFile&#xA; dim strFileName&#xA; &#xA; ' Show the script output window&#xA; Repository.EnsureOutputVisible &quot;Script&quot;&#xA; &#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;Dim theDelimiter&#xA;&#x9;&#x9;&#x9;theDelimiter = DLGInputBox( &quot;Enter delimiter&quot;, &quot;Attribute Import&quot;, &quot;|&quot; )&#xA;&#xA;&#x9;&#x9;&#x9;for each selectedObject in selectedObjects&#xA;&#x9;&#x9;&#x9;&#x9;set theElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if not theElement is nothing and theElement.ObjectType = otElement then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strFile = SelectFile( )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If strFile = &quot;&quot; Then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;No file selected.&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;stop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;&quot;&quot;&quot; &amp; strFile &amp; &quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Define Global File IO Objects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.GetFile(strFile)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strFileName = fileSystemObject.getfileName(inputFile)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check file type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strFileType=Ucase(Right(strFile,3))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Select Case strFileType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Case &quot;CSV&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;CSV File Type OK&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Case else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;File Type not yet supported&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End Select&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'read first row&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim strRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.OpenTextFile(strFile)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strRow = inputFile.readline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check it is a CSV header row...&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim cols&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cols=Split(strRow, theDelimiter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if Ubound(Cols) = 3 and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(0) = &quot;Attribute Name&quot; and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(1) = &quot;Type&quot; and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(2) = &quot;Stereotype&quot; and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(3) = &quot;Notes&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;CSV File looks good&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;CSV File does not look good&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim attributes as EA.Collection&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set attributes = theElement.Attributes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim newAttribute as EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim strCols&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if attribute already exist.. delete them&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for i = 0 to attributes.Count - 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Dim currentAttribute as EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set currentAttribute = attributes.GetAt( i )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot;Deleting Attribute: &quot; &amp; currentAttribute.Name )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributes.DeleteAt i, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;do until inputFile.AtEndOfStream&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;strRow = inputFile.readline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;strCols = split(strRow, theDelimiter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add attributes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newAttribute = attributes.AddNew(strCols(0), strCols(1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newAttribute.Stereotype=strCols(2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newAttribute.Notes=strCols(3)   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newAttribute.Update()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributes.Refresh()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot;Added attribute: &quot; &amp; newAttribute.Name &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;(Type=&quot; &amp; newAttribute.Type &amp; &quot;Sterotype=&quot; &amp; newattribute.stereotype &amp; &quot;Notes=&quot; &amp; newAttribute.Notes &amp; &quot;)&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inputFile.Close&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;Done..&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;End Sub&#xA;ImportAttributesFromCSV&#xA;&#xA;Function SelectFile( )&#xA;     ' File Browser via HTA&#xA;     ' Author:   Rudi Degrande, modifications by Denis St-Pierre and Rob van der Woude&#xA;     ' Features: Works in Windows Vista and up (Should also work in XP).&#xA;     '           Fairly fast.&#xA;     '           All native code/controls (No 3rd party DLL/ XP DLL).&#xA;     ' Caveats:  Cannot define default starting folder.&#xA;     '           Uses last folder used with MSHTA.EXE stored in Binary in [HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32].&#xA;     '           Dialog title says &quot;Choose file to upload&quot;.&#xA;     ' Source:   https://social.technet.microsoft.com/Forums/scriptcenter/en-US/a3b358e8-15ae-4ba3-bca5-ec349df65ef6/windows7-vbscript-open-file-dialog-box-fakepath?forum=ITCG&#xA;     Dim objExec, strMSHTA, wshShell&#xA;     SelectFile = &quot;&quot;&#xA;     ' For use in HTAs as well as &quot;plain&quot; VBScript:&#xA;     strMSHTA = &quot;mshta.exe &quot;&quot;about:&quot; &amp; &quot;&lt;&quot; &amp; &quot;input type=file id=FILE&gt;&quot; _&#xA;              &amp; &quot;&lt;&quot; &amp; &quot;script&gt;FILE.click();new ActiveXObject('Scripting.FileSystemObject')&quot; _&#xA;              &amp; &quot;.GetStandardStream(1).WriteLine(FILE.value);close();resizeTo(0,0);&quot; &amp; &quot;&lt;&quot; &amp; &quot;/script&gt;&quot;&quot;&quot;&#xA;     ' For use in &quot;plain&quot; VBScript only:&#xA;     ' strMSHTA = &quot;mshta.exe &quot;&quot;about:&lt;input type=file id=FILE&gt;&quot; _&#xA;     '          &amp; &quot;&lt;script&gt;FILE.click();new ActiveXObject('Scripting.FileSystemObject')&quot; _&#xA;     '          &amp; &quot;.GetStandardStream(1).WriteLine(FILE.value);close();resizeTo(0,0);&lt;/script&gt;&quot;&quot;&quot;&#xA;     Set wshShell = CreateObject( &quot;WScript.Shell&quot; )&#xA;     Set objExec = wshShell.Exec( strMSHTA )&#xA;     SelectFile = objExec.StdOut.ReadLine( )&#xA;     Set objExec = Nothing&#xA;     Set wshShell = Nothing&#xA; End Function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="330"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0715F63B-F932-43f2-A0EA-EEA53FCE7F82}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Deployment-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Deployment PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a deployment PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;' Change Log:&#xA;' 18-Sept-2022:&#x9;&#x9;Add C4 Diagram support&#xA;'&#xA;sub CreateDeploymentPlantUML ()&#xA;&#xA;&#x9;call LOGInfo(&quot;Create Deployment PlantUML Script activated &quot; &amp; currentDiagram.Stereotype)&#xA;&#x9;if Left(currentDiagram.Stereotype,2) = &quot;C4&quot; then&#xA;&#x9;&#x9;CreateC4PlantUML ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;call LOGInfo ( &quot;Create Deployment PlantUML Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="331"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{11577C59-816D-4d5e-A98A-B24DC9791D16}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Class-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Class PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a class PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;' Change Log:&#xA;' 18-Sept-2022:&#x9;&#x9;Support C4 Diagram&#xA;'&#xA;&#xA;sub CreateClassPlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Class PlantUML Script activated &quot; &amp; currentDiagram.Stereotype)&#xA;&#x9;&#xA;&#x9;if Left(currentDiagram.Stereotype,2) = &quot;C4&quot; then&#xA;&#x9;&#x9;CreateC4PlantUML ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#xA;&#x9;call LOGInfo ( &quot;Create Class PlantUML Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="332"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A34FC3C1-3253-458a-B393-4A57CED7CAEC}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Export PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Logging&#xA;&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;LOGLEVEL=1&#x9;&#x9;'INFO&#xA;'LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: ExportPlantUMLscript&#xA;' Author: David Anderson&#xA;' Purpose: Create a PUML file from the Selected Note Element&#xA;' Date: 25-Mar-2019&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Export PlantUML Script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;'check a note element is selected&#xA;&#x9;&#x9;if not theSelectedElement is nothing _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;dim PlantUMLfn&#xA;&#x9;&#x9;&#x9;dim project&#xA;&#x9;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;&#x9;dim OFN_OVERWRITEPROMPT&#xA;&#x9;&#x9;&#x9;OFN_OVERWRITEPROMPT = &amp;H2&#xA;&#x9;&#x9;&#x9;PlantUMLfn = project.GetFileNameDialog (currentDiagram.Name &amp; &quot;.puml&quot;, &quot;PlantUML Files|*.pu;*.puml&quot;, 1, OFN_OVERWRITEPROMPT ,&quot;&quot;, 1) &#xA;&#x9;&#x9;&#x9;If PlantUMLfn = &quot;&quot; Then &#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo(&quot;File not selected&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;stop&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo (&quot;PlantUML Script file selected: &quot; &amp; PlantUMLfn )&#xA;&#x9;&#x9;&#x9;&#x9;Dim fileSystemObject&#xA;&#x9;&#x9;&#x9;&#x9;dim outputFile&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;&quot;&quot;&quot; &amp; PlantUMLfn &amp; &quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;' Define Global File IO Objects&#xA;&#x9;&#x9;&#x9;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;dim strRow&#xA;&#x9;&#x9;&#x9;&#x9;If fileSystemObject.FileExists(PlantUMLfn) Then&#xA;&#x9;&#x9;&#x9;&#x9;  Set outputFile = fileSystemObject.OpenTextFile(PlantUMLfn, 2, True)&#xA;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;  Set outputFile = fileSystemObject.CreateTextFile(PlantUMLfn, True)&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;strRow = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;for i = 0 to ubound(strRow)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputFile.writeline (strRow(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug(strRow(i))&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;outputFile.Close&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="333"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3CFAAC29-29D4-4d8c-839E-6C54B2BF14F4}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Run PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Common.Print-Array&#xA;!INC Common.color-picker&#xA;!INC EAScriptLib.VBScript-Logging&#xA;!INC PlantUML.Create-Activity-Diagram&#xA;!INC PlantUML.Create-Class-Diagram&#xA;!INC PlantUML.Create-Component-Diagram&#xA;!INC PlantUML.Create-Deployment-Diagram&#xA;!INC PlantUML.Create-Sequence-Diagram&#xA;!INC PlantUML.Create-UseCase-Diagram&#xA;!INC PlantUML.Create-C4-Diagram&#xA;&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;'LOGLEVEL=1&#x9;&#x9;'INFO&#xA;LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: Run PlantUML Script&#xA;' Author: David Anderson&#xA;' Purpose: Wrapper script to appear in the Diagram Scripting group  &#xA;' &#x9;&#x9;   responsible for directing to the relevant script by diagram type.  &#xA;' Date: 11-March-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;Dim currentDiagram as EA.Diagram&#xA;Dim currentPackage as EA.Package&#xA;Dim selectedObject as EA.DiagramObject&#xA;Dim theSelectedElement as EA.Element&#xA;&#xA;dim layout_array (99, 7)&#x9;&#x9;&#x9;'store cooridinates of all sequences and fragments that needs to be positioned&#xA;dim l&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'layout array index&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Run PlantUML script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;if not theSelectedElement is nothing _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;select case currentDiagram.Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Activity&quot;&#x9;&#x9;call CreateActivityDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Logical&quot;&#x9;&#x9;call CreateClassDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Component&quot;&#x9;call CreateComponentDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Deployment&quot;&#x9;call CreateDeploymentDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;call CreateSequenceDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Use Case&quot;&#x9;&#x9;call CreateUseCaseDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;call LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Done&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="334"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7E49DCA9-5DBB-4f46-8AA5-2942EEFE6BEB}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Model Management Utilities&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Original Model Management Utility&#xA;' Purpose: General manipulation of model elements&#xA;' Last Update: 2025-08-26&#xA;&#xA;'******************************************&#xA;'CONNECTORS&#xA;'******************************************&#xA;&#xA;' copy properties of one connector to another existing connector&#xA;function copyConnector(sourceConnector, targetConnector)&#xA;&#x9;targetConnector.Name = sourceConnector.Name&#xA;&#x9;targetConnector.Direction = sourceConnector.Direction&#xA;&#x9;targetConnector.Notes = sourceConnector.Notes&#xA;&#x9;targetConnector.Update&#xA;end function&#xA;&#xA;function copyConnectorEnd(sourceConEnd, targetConEnd)&#xA;&#x9;targetConEnd.Aggregation = sourceConEnd.Aggregation&#xA;&#x9;targetConEnd.Navigable = sourceConEnd.Navigable&#xA;&#x9;targetConEnd.Cardinality = sourceConEnd.Cardinality&#xA;&#x9;targetConEnd.Update&#xA;end function&#xA;&#xA;function getConnectorEndLowerBound(connectorEnd)&#xA;&#x9;dim bounds ' as string&#xA;&#x9;if connectorEnd.Cardinality &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;bounds = Split(connectorEnd.Cardinality, &quot;..&quot;)&#xA;&#x9;&#x9;getConnectorEndLowerBound = bounds(0)&#xA;&#x9;else&#xA;&#x9;&#x9;getConnectorEndLowerBound = 0&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getConnectorEndUpperBound(connectorEnd)&#xA;&#x9;dim bounds ' as string&#xA;&#x9;if connectorEnd.Cardinality &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;bounds = Split(connectorEnd.Cardinality, &quot;..&quot;)&#xA;&#x9;&#x9;if UBound(bounds) = 0 then&#xA;&#x9;&#x9;&#x9;getConnectorEndUpperBound = bounds(0)&#xA;&#x9;&#x9;elseif UBound(bounds) = 1 then&#xA;&#x9;&#x9;&#x9;getConnectorEndUpperBound = bounds(1)&#xA;&#x9;&#x9;end if&#xA;&#x9;else &#xA;&#x9;&#x9;getConnectorEndUpperBound = 1&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' returns the guid of elements which have connectors navigable from the source&#xA;function getNavigableElements(element, connectorMetaType, relatedElementType)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#x9;sourceClient = connector.ClientID = element.ElementID and connector.SupplierEnd.Navigable &lt;&gt; &quot;Non-Navigable&quot;&#xA;&#x9;&#x9;&#x9;sourceSupplier = connector.SupplierID = element.ElementID and connector.ClientEnd.Navigable &lt;&gt; &quot;Non-Navigable&quot;&#xA;&#x9;&#x9;&#x9;if sourceClient or sourceSupplier then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getNavigableElements = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;' returns the guid of connectors which have connectors navigable from the source&#xA;function getNavigableConnectors(element, connectorMetaType, relatedElementType)&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;dim navigableConnector ' as boolean&#xA;&#x9;dim sourceClient&#xA;&#x9;dim sourceSupplier&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#x9;sourceClient = connector.ClientID = element.ElementID and connector.SupplierEnd.Navigable &lt;&gt; &quot;Non-Navigable&quot;&#xA;&#x9;&#x9;&#x9;sourceSupplier = connector.SupplierID = element.ElementID and connector.ClientEnd.Navigable &lt;&gt; &quot;Non-Navigable&quot;&#xA;&#x9;&#x9;&#x9;navigableConnector = sourceClient or sourceSupplier&#xA;&#x9;&#x9;&#x9;if sourceClient then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(connector.SupplierID)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;elseif sourceSupplier then&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(connector.ClientID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if navigableConnector then&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add connector.ConnectorGUID, connector&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getNavigableConnectors = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;&#xA;' returns the first related element on a list&#xA;function getRelatedSupplierElement( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement = nothing&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' returns the first related element on a list by element, connector.MetaType, connector.Stereotype, relatedElement.MetaType, related.ElementStereotype&#xA;function getRelatedSupplierElement2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;' returns a list of related elements&#xA;function getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;' returns a list of related elements by by element, connector.MetaType, connector.Stereotype, relatedElement.MetaType, related.ElementStereotype&#xA;function getRelatedSupplierElementList2( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;if connector.Type = connectorType then&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList2 = relatedElementList&#x9;&#xA;end function&#xA;&#xA;' returns a list of related elements by the connector meta type and the generic type of the related element and the navigability&#xA;function getRelatedSupplierElementList3(element, connectorMetaType, relatedElementType, navigability)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID and connector.SupplierEnd.Navigable = navigability then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList3 = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;' returns a list of related client elements by the connector meta type and the generic type of the related element and the navigability&#xA;function getRelatedClientElementList(element, connectorMetaType, relatedElementType, navigability)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.SupplierID = element.ElementID and connector.ClientEnd.Navigable = navigability then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedClientElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;''getRelatedElement, aims to retrieve a specific related element from a given element &#xA;'' based on a certain relationship defined by connector type and stereotype, &#xA;'' and the meta-type and stereotype of the related element&#xA;function getRelatedElement( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedElementList2 ( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;&#xA;' Purpose:         Return a dictionary of related elements while safely handling duplicate keys&#xA;'                  (avoids &quot;This key is already associated with an element of this collection&quot;).&#xA;&#xA;Function getRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;    Dim connector As EA.Connector&#xA;    Dim relatedElementList&#xA;    Dim relatedElementID&#xA;    Dim relatedElement As EA.Element&#xA;    Dim key&#xA;&#xA;    Set relatedElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#xA;    For Each connector In element.Connectors&#xA;&#xA;        If connector.Type = connectorType Then&#xA;            If IsNull(connectorStereotype) Or connector.Stereotype = connectorStereotype Then&#xA;&#xA;                If connector.ClientID = element.ElementID Then&#xA;                    relatedElementID = connector.SupplierID&#xA;                Else&#xA;                    relatedElementID = connector.ClientID&#xA;                End If&#xA;&#xA;                Set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#xA;                If Not relatedElement Is Nothing Then&#xA;                    If relatedElement.Type = relatedElementType Then&#xA;                        If IsNull(relatedElementStereotype) Or relatedElement.Stereotype = relatedElementStereotype Then&#xA;&#xA;                            key = relatedElement.ElementGUID&#xA;&#xA;                            ' Safe add: skip duplicates; still guard with On Error in case of edge cases&#xA;                            If Not relatedElementList.Exists(key) Then&#xA;                                On Error Resume Next&#xA;                                relatedElementList.Add key, relatedElement&#xA;                                If Err.Number &lt;&gt; 0 Then&#xA;                                    Session.Output &quot;getRelatedElementList: duplicate or add error for GUID=&quot; &amp; key &amp; _&#xA;                                                   &quot; — continuing. Err=&quot; &amp; Err.Number &amp; &quot; &quot; &amp; Err.Description&#xA;                                    Err.Clear&#xA;                                End If&#xA;                                On Error GoTo 0&#xA;                            Else&#xA;                                ' Duplicate key detected — log and continue&#xA;                                Session.Output &quot;getRelatedElementList: duplicate GUID skipped: &quot; &amp; key&#xA;                            End If&#xA;&#xA;                        End If&#xA;                    End If&#xA;                End If&#xA;&#xA;            End If&#xA;        End If&#xA;    Next&#xA;&#xA;    Set getRelatedElementList = relatedElementList&#xA;&#xA;End Function&#xA;&#xA;&#xA;' returns a list of elements sorted by name&#xA;function getSortedRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;System.Collections.SortedList&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.Name, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSortedRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;&#xA;'add a connector of connType, connStereotype to 2 elements&#xA;' use addConnectorMDG fpr stereotyped connectors part of a MDG&#xA;function addConnector( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#x9;&#xA;&#x9;Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#x9;&#xA;&#x9;newConnector.Stereotype = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#x9;&#xA;&#x9;newConnector.Update&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#x9;set addConnector = newConnector&#x9;&#xA;end function&#xA;&#xA;'add a MDG stereotyped connector , connStereotype to 2 elements&#xA;function addConnectorMDG( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#x9;&#xA;&#x9;Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#x9;&#xA;&#x9;newConnector.StereotypeEx  = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#x9;&#xA;&#x9;newConnector.Update&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#x9;set addConnectorMDG = newConnector&#x9;&#xA;end function&#xA;&#xA;'******************************************&#xA;'Elements&#xA;'******************************************&#xA;&#xA;' Search for an object by name, stereotype and Type and returns the first in the list&#xA;function lookupElement(lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#xA;&#x9;sqlString = &quot;SELECT ea_guid FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_object.Name = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;' Delete an element&#xA;sub deleteElement( elementToDelete)&#xA;&#x9;dim packageID&#x9;  ' as Integer&#xA;&#x9;dim package &#x9;&#x9;as EA.Package&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementIndex  ' as Integer&#xA;&#xA;&#x9;packageID = elementToDelete.PackageID&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;elementIndex = 0&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.ElementID = elementToDelete.ElementID then&#xA;&#x9;&#x9;&#x9;package.Elements.Delete(elementIndex)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;elementIndex = elementIndex + 1&#xA;&#x9;next&#xA;&#x9;package.Elements.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;'******************************************&#xA;' Method&#xA;'******************************************&#xA;' Function to create HTTP types of stereotyped operations (List, Retrieve, Create, Patch, Delete) for an element&#xA;' Parameters:&#xA;' - element: The element for which operations are to be created&#xA;' - methodName: The name of the method from which to derive operation names&#xA;' - methodStereotype: The stereotype to be applied to the operations&#xA;Sub CreateStereotypedOperation(element, methodName, methodStereotype)&#xA;    Dim operationTypes(5)&#xA;    operationTypes(0) = &quot;List&quot;&#xA;    operationTypes(1) = &quot;Retrieve&quot;&#xA;    operationTypes(2) = &quot;Create&quot;&#xA;    operationTypes(3) = &quot;Patch&quot;&#xA;    operationTypes(4) = &quot;Delete&quot;&#xA;    &#xA;    Dim httpMethods(5)&#xA;    httpMethods(0) = &quot;get&quot;&#xA;    httpMethods(1) = &quot;get&quot;&#xA;    httpMethods(2) = &quot;post&quot;&#xA;    httpMethods(3) = &quot;patch&quot;&#xA;    httpMethods(4) = &quot;delete&quot;&#xA;    &#xA;    Dim i&#xA;    &#xA;    For i = 0 To UBound(operationTypes)&#xA;        Dim operationName&#xA;        operationName = operationTypes(i) &amp; methodName.Name&#xA;        &#xA;        ' Check if operation already exists&#xA;        Dim existingOperation&#xA;        Set existingOperation = FindOperation(element, operationName)&#xA;        If IsNull(existingOperation) Then&#xA;            ' Create Operation with name and stereotype&#xA;            Dim newOperation&#xA;            Set newOperation = element.Methods.AddNew(operationName, methodName.Name)&#xA;            newOperation.StereotypeEx = methodStereotype&#xA;            newOperation.Name = operationName&#xA;            newOperation.ClassifierID = methodName.ElementID&#xA;            &#xA;            ' Update method&#xA;            newOperation.Update&#xA;            &#xA;            ' Set tagged values&#xA;            SetTaggedValueValue2 newOperation, &quot;hTTPMethod&quot;, httpMethods(i)&#xA;            SetTaggedValueValue2 newOperation, &quot;tags&quot;, &quot;TODO&quot;&#xA;            SetTaggedValueValue2 newOperation, &quot;summary&quot;, &quot;TODO&quot;&#xA;            SetTaggedValueValue2 newOperation, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;            &#xA;            ' Set parameters for Create and Patch operations&#xA;            If operationTypes(i) = &quot;Create&quot; Or operationTypes(i) = &quot;Patch&quot; Then&#xA;                Dim param&#xA;                Set param = newOperation.Parameters.AddNew(methodName.Name, methodName.Name)&#xA;                param.ClassifierID = methodName.ElementID&#xA;                param.Update&#xA;                newOperation.Parameters.Refresh&#xA;            End If&#xA;        Else&#xA;            Session.Output &quot;Duplicate found (&quot; &amp; operationName &amp; &quot; Operation)&quot;&#xA;        End If&#xA;    Next&#xA;    &#xA;    ' Refresh element&#xA;    element.Methods.Refresh&#xA;    element.Update&#xA;    element.Refresh&#xA;End Sub&#xA;&#xA;' Function to find an operation in the element's methods&#xA;' Parameters:&#xA;' - element: The element in which to search for the operation&#xA;' - operationName: The name of the operation to find&#xA;' Returns:&#xA;' - EA.Method: The found operation if exists, otherwise null&#xA;Function FindOperation(element, operationName)&#xA;    Dim operation&#xA;    For Each operation In element.Methods&#xA;        If operation.Name = operationName Then&#xA;            Set FindOperation = operation&#xA;            Exit Function&#xA;        End If&#xA;    Next&#xA;    Set FindOperation = Nothing&#xA;End Function&#xA;&#xA;&#xA;&#xA;function CreateOperation (element, methodName, methodStereotype)&#xA;&#x9;dim i&#x9;&#x9;&#x9;'as string&#xA;&#xA;&#x9;dim listOp &#x9;&#x9;as EA.Method&#xA;&#x9;'dim listParam&#x9;as EA.Parameter&#xA;&#x9;dim retreiveOp&#x9;as EA.Method&#xA;&#x9;dim retreiveParam as EA.Parameter&#xA;&#x9;dim createOp&#x9;as EA.Method&#xA;&#x9;dim createParam&#x9;as EA.Parameter&#xA;&#x9;dim patchOp&#x9;&#x9;as EA.Method&#xA;&#x9;dim patchParam&#x9;as EA.Parameter&#xA;&#x9;dim deleteOp &#x9;as EA.Method&#xA;&#x9;dim deleteParam&#x9;as EA.Parameter&#xA;&#xA;&#x9;' check if operation already exists&#xA;&#x9;for each listOp in element.Methods&#xA;&#x9;if listOp.Name = &quot;List&quot; &amp; methodName.name then&#xA;&#x9;&#x9; i = 1&#xA;&#x9;&#x9;Session.Output &quot;Duplicate found (List Operation)&quot;&#xA;&#x9;end if &#xA;&#x9;next &#xA;&#x9;if i = 0 then&#xA;&#x9;' create List Operation with name, and stereotype&#xA;&#x9; set listOp = element.Methods.AddNew (&quot;List&quot; &amp; methodName.name, methodName.name)&#xA;&#x9; listOp.StereotypeEx = methodStereotype&#xA;&#x9; listOp.Name = &quot;List&quot; &amp; methodName.name&#xA;&#x9; listOp.ClassifierID = methodName.ElementID&#xA;&#x9; ' update method&#xA;&#x9; listOp.Update&#xA;&#x9; ' set Tagged Value&#xA;&#x9;setTaggedValueValue2 listOp, &quot;hTTPMethod&quot;, &quot;get&quot;&#xA;&#x9;setTaggedValueValue2 listOp, &quot;tags&quot;, methodName.name&#xA;&#x9;setTaggedValueValue2 listOp, &quot;summary&quot;, &quot;Retrieves a list of all &quot;&amp;methodName.Name&#xA;&#x9;setTaggedValueValue2 listOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;&#x9;'' set Parameters&#xA;&#x9;' set listParam = listOp.Parameters.AddNew (methodName.name, methodName.name)&#xA;&#x9;' listParam.ClassifierID = methodName.ElementID&#xA;&#x9;' listParam.Update&#xA;&#x9;' listOp.Parameters.Refresh&#xA;&#x9;end if&#xA;&#x9;i = 0&#xA;&#xA;&#x9;' check if operation already exists&#xA;&#x9;for each retreiveOp in element.Methods&#xA;&#x9;if retreiveOp.Name = &quot;Retreive&quot; &amp; methodName.name then&#xA;&#x9;&#x9; i = 1&#xA;&#x9;&#x9;Session.Output &quot;Duplicate found (Retreive Operation)&quot;&#xA;&#x9;end if &#xA;&#x9;next &#xA;&#x9;if i = 0 then&#xA;&#x9;' create Retreive Operation with name, and stereotype&#xA;&#x9;set retreiveOp = element.Methods.AddNew (&quot;Retreive&quot; &amp; methodName.name, methodName.name)&#xA;&#x9; retreiveOp.StereotypeEx = methodStereotype&#xA;&#x9; retreiveOp.Name = &quot;Retreive&quot; &amp; methodName.name&#xA;&#x9;  retreiveOp.ClassifierID = methodName.ElementID&#xA;&#x9; ' update method&#xA;&#x9; retreiveOp.Update&#xA;&#x9; ' set tagged value&#xA;&#x9; setTaggedValueValue2 retreiveOp, &quot;hTTPMethod&quot;, &quot;get&quot;&#xA;&#x9;setTaggedValueValue2 retreiveOp, &quot;tags&quot;, methodName.name&#xA;&#x9;setTaggedValueValue2 retreiveOp, &quot;summary&quot;, &quot;retrieve an existing &quot;&amp;methodName.name&amp;&quot; record based on the provided ID.&quot;&#xA;&#x9;setTaggedValueValue2 retreiveOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name &amp; &quot;/{id}&quot;&#xA;&#x9; ' set parameter&#xA;&#x9; set retreiveParam = retreiveOp.Parameters.AddNew (&quot;id&quot;, &quot;string&quot;)&#xA;&#x9; retreiveParam.Update&#xA;&#x9; retreiveOp.Parameters.Refresh&#xA;&#x9;end if&#xA;&#x9;i = 0 &#xA;&#xA;&#x9;' check if operation already exists&#xA;&#x9;for each createOp in element.Methods&#xA;&#x9;if createOp.Name = &quot;Create&quot; &amp; methodName.name then&#xA;&#x9;&#x9; i = 1&#xA;&#x9;&#x9;Session.Output &quot;Duplicate found (Create Operation)&quot;&#xA;&#x9;end if &#xA;&#x9;next &#xA;&#x9;if i = 0 then&#xA;&#x9;' create Create Operation with name, and stereotype&#xA;&#x9;&#x9;set createOp = element.Methods.AddNew (&quot;Create&quot; &amp; methodName.name, methodName.name)&#xA;&#x9; createOp.StereotypeEx = methodStereotype &#xA;&#x9; createOp.Name = &quot;Create&quot; &amp; methodName.name&#xA;&#x9; createOp.ClassifierID = methodName.ElementID&#xA;&#x9; ' update method&#xA;&#x9; createOp.Update&#xA;&#x9; ' set Tagged Value&#xA;&#x9; setTaggedValueValue2 createOp, &quot;hTTPMethod&quot;, &quot;post&quot;&#xA;&#x9;setTaggedValueValue2 createOp, &quot;tags&quot;, methodName.name&#xA;&#x9;setTaggedValueValue2 createOp, &quot;summary&quot;,  &quot;Creates a new &quot;&amp;methodName.name&amp;&quot; record.&quot;&#xA;&#x9;setTaggedValueValue2 createOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;&#x9; ' set parameter&#xA;&#x9; set createParam = createOp.Parameters.AddNew (methodName.name, methodName.name)&#xA;&#x9; createParam.ClassifierID = methodName.ElementID&#xA;&#x9; createParam.update&#xA;&#x9; createOp.Parameters.Refresh&#xA;&#xA;&#x9;end if&#xA;&#x9;i = 0&#xA;&#xA;&#x9;' check if operation already exists&#xA;&#x9;for each patchOp in element.Methods&#xA;&#x9;if patchOp.Name = &quot;Patch&quot; &amp; methodName.name then&#xA;&#x9;&#x9; i = 1&#xA;&#x9;&#x9;Session.Output &quot;Duplicate found (Patch Operation)&quot;&#xA;&#x9;end if &#xA;&#x9;next &#xA;&#x9;if i = 0 then&#xA;&#x9;' create Patch Operation with name, and stereotype&#xA;&#x9; set patchOp = element.Methods.AddNew (&quot;Patch&quot; &amp; methodName.name, methodName.name)&#xA;&#x9; patchOp.StereotypeEx = methodStereotype&#xA;&#x9; patchOp.Name = &quot;Patch&quot; &amp; methodName.name&#xA;&#x9; patchOp.ClassifierID = methodName.ElementID&#xA;&#x9; ' update method&#xA;&#x9; patchOp.Update&#xA;&#x9; ' set Tagged Value  &#xA;&#x9;setTaggedValueValue2 patchOp, &quot;hTTPMethod&quot;, &quot;patch&quot;&#xA;&#x9;setTaggedValueValue2 patchOp, &quot;tags&quot;, methodName.name&#xA;&#x9;setTaggedValueValue2 patchOp, &quot;summary&quot;, &quot;Updates an existing &quot;&amp;methodName.name&amp;&quot; record.&quot;&#xA;&#x9;setTaggedValueValue2 patchOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;&#x9; ' set parameter&#xA;&#x9; set patchParam = patchOp.Parameters.AddNew (methodName.name, methodName.name)&#xA;&#x9; patchParam.ClassifierID = methodName.ElementID&#xA;&#x9; patchParam.Update&#xA;&#x9; patchOp.Parameters.Refresh&#xA;&#x9;end if&#xA;&#x9;i = 0&#xA;&#xA;&#x9;' check if operation already exists&#xA;&#x9;for each deleteOp in element.Methods&#xA;&#x9;if deleteOp.Name = &quot;Delete&quot; &amp; methodName.name then&#xA;&#x9;&#x9; i = 1&#xA;&#x9;&#x9;Session.Output &quot;Duplicate found (Delete Operation)&quot;&#xA;&#x9;end if &#xA;&#x9;next &#xA;&#x9;if i = 0 then&#xA;&#x9;' create Delete Operation with name, and stereotype&#xA;&#x9;  set deleteOp = element.Methods.AddNew (&quot;Delete&quot; &amp; methodName.name, methodName.name)&#xA;&#x9; deleteOp.StereotypeEx = methodStereotype&#xA;&#x9; deleteOp.Name = &quot;Delete&quot; &amp; methodName.name&#xA;&#x9; deleteOp.ClassifierID = methodName.ElementID&#xA;&#x9; 'update method&#xA;&#x9; deleteOp.Update&#xA;&#x9; ' set tagged value&#xA;&#x9;setTaggedValueValue2 deleteOp, &quot;hTTPMethod&quot;, &quot;delete&quot;&#xA;&#x9;setTaggedValueValue2 deleteOp, &quot;tags&quot;, methodName.name&#xA;&#x9;setTaggedValueValue2 deleteOp, &quot;summary&quot;, &quot;Deletes an existing &quot;&amp;methodName.name&amp;&quot; record based on the provided ID.&quot;&#xA;&#x9;setTaggedValueValue2 deleteOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;&#x9;' set parameter&#xA;&#x9;set deleteParam = deleteOp.Parameters.AddNew (&quot;id&quot;, &quot;string&quot;)&#xA;&#x9; deleteParam.Update&#xA;&#x9; deleteOp.Parameters.Refresh&#xA;&#x9;end if&#xA;&#x9;i = 0&#xA;&#xA;&#x9;' refresh element&#xA;&#x9; element.Methods.Refresh&#xA;&#x9; element.Update&#xA;&#x9; element.Refresh&#xA;&#xA;end Function&#xA;&#xA;'******************************************&#xA;' Method Parameters &#xA;' &#xA;' This function GetParameterNames iterates through the parameters of the provided EA.Method aMethod, &#xA;' concatenates their names into a string variable paramNames, and separates them by commas. &#xA; ' Finally, it returns the concatenated string containing the parameter names. &#xA; ' You can use this function by passing the method object and storing the returned string variable for further processing or output.&#xA;'******************************************&#xA;Function GetParameterNames(aMethod)&#xA;    Dim parameters&#xA;    Set parameters = aMethod.Parameters&#xA;&#xA;    Dim paramNames&#xA;    paramNames = &quot;&quot;&#xA;&#xA;    Dim i&#xA;    For i = 0 To parameters.Count - 1&#xA;        Dim currentParameter&#xA;        Set currentParameter = parameters.GetAt(i)&#xA;        &#xA;        ' Append parameter name to the string variable&#xA;        paramNames = paramNames &amp; currentParameter.Type&#xA;        &#xA;        ' Add comma if it's not the last parameter&#xA;        If i &lt; parameters.Count - 1 Then&#xA;            paramNames = paramNames &amp; &quot;, &quot;&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Return the parameter names as a string&#xA;    GetParameterNames = paramNames&#xA;End Function&#xA;&#xA;&#xA;'******************************************&#xA;' Attributes&#xA;'******************************************&#xA;' Add an attribute to an element, including the initial value&#xA;function setAttribute( element, attributeName, defaultValue)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#x9;&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = attributeName then&#xA;&#x9;&#x9;&#x9;' attribute found&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( attributeName, &quot;&quot;)&#x9;&#x9;&#xA;&#x9;&#x9;element.Attributes.Refresh&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;attribute.Default = defaultValue&#xA;&#x9;attribute.Update&#xA;&#x9;set setAttribute = attribute&#xA;end function&#xA;&#xA;'' add to the Elelment element the Attribute sourceAttribute&#xA;sub copyAttribute( element, sourceAttribute)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = sourceAttribute.Name then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( sourceAttribute.Name, &quot;&quot;)&#xA;&#x9;&#x9;element.Attributes.Refresh&#xA;&#x9;end if&#x9;&#xA;&#x9;attribute.Default = sourceAttribute.Default&#xA;&#x9;attribute.Type = sourceAttribute.Type&#xA;&#x9;attribute.ClassifierID = sourceAttribute.ClassifierID&#xA;&#x9;attribute.Notes = sourceAttribute.Notes&#x9;&#xA;&#x9;attribute.Update&#xA;end sub&#xA;&#xA;sub setElementPDATA(element, pdataIndex, pdataValue)&#xA;'PDATA1 &#xA;' For Package elements: primary key of the package&#xA;' For Elements: Same as the Status column&#xA;' For Parts/Instances: GUID of the classifier&#xA;' For UseCase: #EXP#=&lt;ep&gt;; semi-colon separated list of Extension Points &lt;ep&gt;&#xA;' For Notes: linked element feature name&#xA;' For Text displaying as hyperlink: t_diagram.Diagram_ID&#xA;' For Requirements: Status property&#xA;' For UMLDiagram: Diagram_ID of the underlying diagram;&#xA;' If Object_Type is one of Activity, Artifact, Class, Interaction, Requirement, State,&#xA;'StateMachine, UseCase (and probably some more) and NType is 8 and PDATA1 has a number&#xA;'greater then zero then PDATA1 corresponds to t_diagram.Diagram_ID of the composite&#xA;'diagram.&#xA;'if   NType is 82 diagram hyperlink; PDATA1 == t_diagram.Diagram_ID&#xA;'&#xA;' PDATA2 &#xA;' For Elements: Same as the Priority column&#xA;' For Notes: Object_ID of the linked feature element&#xA;' For Requirements: Priority property&#xA;&#xA;' PDATA3 &#xA;' For Elements: Same as the Difficulty column&#xA;' For Notes: Reference name into the linked feature element&#xA;' For Ports in classified Parts: the GUID of the corresponding Port in the Classifier.&#xA;' For State: t_diagram.Diagram_ID of the composite diagram&#xA;' For Requirements: Difficulty property&#xA;&#xA;' PDATA4 &#xA;' For Note elements: Yes if the note is linked to an element feature and idref=&lt;val&gt;; list where &lt;val&gt; is the primary key of the connector(s) to which the note is linked&#xA;' For elements: If &gt; 0 this is the primary key of the connector for which this element is defines as association class&#xA;&#xA;' PDATA5 Keywords property&#xA;&#xA;&#x9;Dim sqlString 'As String&#xA;&#x9;Dim pdataColumnName 'As String&#xA;&#x9;pdataColumnName = &quot;PDATA&quot; &amp; pdataIndex&#xA;&#x9;sqlString = &quot;UPDATE t_object SET &quot; &amp; pdataColumnName &amp; &quot;='&quot; &amp; pdataValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;Repository.Execute( sqlString)&#xA;&#x9;element.Refresh&#xA;End Sub&#xA;&#xA;&#xA;&#xA;'******************************************&#xA;'  TaggedValue&#xA;'******************************************&#xA;' get the value of a tagged value, inside an element by taggedValue.Name&#xA;function getTaggedValueValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue &#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueValue   'as String&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;taggedValueValue = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;taggedValueValue = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;getTaggedValueValue = taggedValueValue&#x9;&#xA;end function&#xA;&#xA;'' set the value of a tagged value, inside an element by taggedValue.Name&#xA;function setTaggedValueValue( eaItem, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;on error resume next&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 or taggedValue is nothing then&#xA;&#x9;&#x9;session.output &quot;error on tagValue&quot;&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.AddNew( taggedValueName, &quot;&quot;)&#xA;&#x9;&#x9;err.Clear&#xA;&#x9;end if&#x9;&#xA;&#x9;on error goto 0&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;eaItem.TaggedValues.Refresh&#xA;end function&#xA;&#xA;function setTaggedValueValue2( eaItem, taggedValueName, taggedValueValue)&#xA;dim taggedValue as EA.TaggedValue&#xA;dim i &#x9;&#x9;&#x9;'as index&#xA;&#xA;for i = 0 to eaItem.TaggedValues.Count - 1&#xA;&#x9;eaItem.TaggedValues.GetAt(i)&#xA;&#x9;if eaItem.TaggedValues.GetAt(i).Name = taggedValueName then&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.GetAt(i)&#xA;&#x9;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;&#x9;taggedValue.Update&#xA;&#x9;&#x9;eaItem.TaggedValues.Refresh&#xA;&#x9;end if&#xA;next&#xA;&#xA;end function&#xA;'' set the value of a tagged value, inside an Package by taggedValue.Name&#xA;sub setTaggedValuePackageValue( eaPackage, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;on error resume next&#xA;&#x9;set taggedValue = eaPackage.element.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 or taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = eaPackage.element.TaggedValues.AddNew( taggedValueName, &quot;&quot;)&#xA;&#x9;&#x9;err.Clear&#xA;&#x9;end if&#x9;&#xA;&#x9;on error goto 0&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;eaPackage.element.TaggedValues.Refresh&#xA;end sub&#xA;&#xA;&#xA;'check if a tag with that name already exists, create new one if not found&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim returnTag as EA.TaggedValue&#xA;&#x9;set returnTag = nothing&#xA;&#x9;'check if a tag with that name alrady exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = tagName then&#xA;&#x9;&#x9;&#x9;set returnTag = taggedValue&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create new one if not found&#xA;&#x9;if returnTag is nothing then&#xA;&#x9;&#x9;set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;&#xA;'' Delete a tagged value, inside an element by taggedValue.Name&#xA;sub deleteTaggedValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue&#x9;&#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueCount   'as Integer&#xA;&#x9;dim taggedValueIndex   'as Integer&#xA;&#x9;dim deleted&#x9;&#x9;&#x9;   'as Boolean&#xA;&#x9;&#xA;&#x9;deleted = false&#x9;&#xA;&#x9;taggedValueCount = eaItem.TaggedValues.Count&#xA;&#x9;&#xA;&#x9;for taggedValueIndex = taggedValueCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.GetAt( taggedValueIndex)&#x9;&#xA;&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;&#x9;&#x9;&#x9;eaItem.TaggedValues.Delete taggedValueIndex&#xA;&#x9;&#x9;&#x9;deleted = true&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if deleted then&#xA;&#x9;&#x9;eaItem.TaggedValues.Refresh&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;'' Search an element with a certain Tagged value having a specific value&#xA;function lookupElementTaggedValue(taggedValueName, lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#x9;dim lookupElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;sqlString = &quot;SELECT t_object.ea_guid&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_objectproperties ON t_object.Object_ID = t_objectproperties.Object_ID&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_objectproperties.Property = '&quot; &amp; taggedValueName &amp; &quot;'&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_objectproperties.Value = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;&#x9;set lookupElementTaggedValue =  lookupElement&#xA;end function&#xA;&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Notes = sourceTag.Notes&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyAllTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag, only use if empty&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name _&#xA;&#x9;&#x9;&#x9; AND len(tag.Value) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Notes = sourceTag.Notes&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;'******************************************&#xA;'  ConnectorTaggedValue&#xA;'******************************************&#xA;&#xA;function getConnectorTaggedValueValue( connector, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#x9;&#xA;&#x9;getConnectorTaggedValueValue = taggedValue.Value&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setConnectorTaggedValueValue( connector, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = connector.TaggedValues.AddNew( taggedValueName, vbNullString)&#xA;&#x9;end if&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;end sub&#x9;&#xA;&#xA;'******************************************&#xA;'  Ownership&#xA;'******************************************&#xA;'  Ownedship by element and expected metatype' -----------------------------------------------------------------------------&#xA;' Function: getOwnedElementNameList&#xA;' Purpose:  This function returns a list of names of elements owned by the &#xA;'           provided 'element' that match any type within the 'ownedMetatypeList'.&#xA;'           The function also includes the 'objectState' property value of the owned elements, if it exists.&#xA;'&#xA;' Inputs:&#xA;'   - element: The EA.Element for which the owned elements' names are retrieved.&#xA;'   - ownedMetatypeList: A string containing a comma-separated list of metatypes to filter owned elements.&#xA;'&#xA;' Outputs: &#xA;'   - A string list of names of the owned elements matching the types in 'ownedMetatypeList', &#xA;'     each name is followed by the element's 'objectState' if it exists.&#xA;'     Names are separated by a newline character (vbCRLF).&#xA;' -----------------------------------------------------------------------------&#xA;function getOwnedElementNameList( element, ownedMetatypeList)&#xA;&#xA;&#x9;dim ownedElement &#x9;as EA.Element&#xA;&#x9;dim nameList&#x9;   'as String&#xA;&#x9;dim typeID&#x9;&#x9;   'as Integer&#xA;&#x9;dim typeElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementName&#x9;   'as String&#xA;&#x9;dim objectState&#x9;   'as String&#xA;&#x9;&#xA;&#x9;nameList = vbNullString&#x9;&#xA;&#x9;if ownedMetatypeList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;ownedMetatypeList = ownedMetatypeList &amp; &quot;,&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each ownedElement in element.EmbeddedElements&#x9;&#x9;&#xA;&#x9;&#x9;if InStr( ownedMetatypeList, ownedElement.MetaType &amp; &quot;,&quot;) then&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;typeID = ownedElement.PropertyType&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;typeID = ownedElement.ClassfierID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;elementName = ownedElement.Name&#xA;&#x9;&#x9;&#x9;else&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set typeElement = Repository.GetElementByID( typeID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementName = typeElement.Name&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if nameList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; vbCRLF&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;nameList = nameList &amp; elementName&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectState = getCustomPropertyValue( ownedElement, &quot;objectState&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectState &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; &quot; [&quot; &amp; objectState &amp; &quot;]&quot;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getOwnedElementNameList = nameList&#xA;end function&#xA;&#xA;&#xA;' -----------------------------------------------------------------------------&#xA;' Function: getChildElementList&#xA;' Purpose:  ' returns a list of children of a certain stereotype.This function retrieves a list of child elements of a specified parent &#xA;'           element that have a specific stereotype.&#xA;'&#xA;' Inputs:&#xA;'   - parentElement: The parent EA.Element object for which the child elements &#xA;'                    are to be retrieved.&#xA;'   - childStereotype: The stereotype of the child elements to retrieve.&#xA;'&#xA;' Outputs: &#xA;'   - A Scripting.Dictionary object where the keys are the GUIDs of the child elements and &#xA;'     the values are the EA.Element objects corresponding to the child elements with &#xA;'     the provided stereotype.&#xA;' ----------------------------------------------------------------------------- &#xA;&#xA;function getChildElementList( parentElement, childStereotype)&#xA;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;for each childElement in parentElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = childStereotype then&#xA;&#x9;&#x9;&#x9;childElementList.Add childElement.ElementGUID, childElement&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildElementList = childElementList&#x9;&#xA;end function&#xA;&#xA;function getCustomPropertyValue( ownedElement, propertyName)&#xA;&#xA;&#x9;dim customProperty as EA._CustomProperty&#xA;&#x9;dim propertyValue 'as String&#x9;&#xA;&#x9;propertyValue = vbNullString&#xA;&#x9;&#xA;&#x9;for each customProperty in ownedElement.CustomProperties&#x9;&#xA;&#x9;&#x9;if customProperty.Name = propertyName then&#xA;&#x9;&#x9;&#x9;propertyValue = customProperty.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getCustomPropertyValue = propertyValue&#xA;&#x9;&#xA;end function&#xA;&#xA;'******************************************&#xA;'  Package&#xA;'******************************************&#xA;function getAncestorPackage( element, ancestorPackageLevel)&#xA;&#xA;&#x9;dim packageLevel&#x9;   'as Integer&#xA;&#x9;dim packageID&#x9;&#x9;   'as Integer&#xA;&#x9;dim package&#x9;&#x9;&#x9;&#x9;as EA.Package&#xA;&#xA;&#x9;packageID = element.PackageID&#x9;&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#x9;&#xA;&#x9;for packageLevel = 2 to ancestorPackageLevel&#x9;&#xA;&#x9;&#x9;packageID = package.ParentID&#x9;&#x9;&#xA;&#x9;&#x9;if packageID = 0 then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;set package = Repository.GetPackageByID( packageID)&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getAncestorPackage = package&#xA;&#x9;&#xA;end function&#xA;'******************************************&#xA;'  Diagram&#xA;'******************************************&#xA;' found a diagram inside an element by name&#xA;function getChildDiagram( parentElement, childDiagramName)&#xA;&#xA;&#x9;dim childDiagram &#x9;as EA.Diagram&#xA;&#x9;dim foundDiagram&#x9;as EA.Diagram&#xA;&#x9;&#xA;&#x9;set foundDiagram = nothing&#xA;&#x9;&#xA;&#x9;for each childDiagram in parentElement.Diagrams&#x9;&#xA;&#x9;&#x9;if childDiagram.Name = childDiagramName then&#xA;&#x9;&#x9;&#x9;set foundDiagram = childDiagram&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildDiagram = foundDiagram&#xA;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="335"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DDA8586D-3E5F-43b7-B990-1B937BBE4DEA}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements &amp;gt; Create API Operations&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Wrappers.Include&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;' Script Name: Elements -&gt; create API Operations&#xA;' Author: Natha Paquette&#xA;' Purpose: create appropriate Operations for API elements based on connection to JSON Schema&#xA;' Date: 26/03/2024&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim currentDiagram &#x9;as EA.Diagram&#xA;&#x9;dim diagramObject &#x9;as EA.DiagramObject&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim jsonList&#x9;&#x9;'as List&#xA;&#x9;dim listElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim jsonElement&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;  ' fresh console&#xA;    Repository.ClearOutput &quot;Script&quot;&#xA;   &#xA;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;if currentDiagram.SelectedObjects.Count = 1 then&#xA;&#x9;&#x9;for each diagramObject in currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID (diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if element.Metatype = &quot;Open API&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;session.output &quot;API &quot;&amp; element.Name &amp; &quot; selected&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set jsonList = getRelatedElementList (element, &quot;Aggregation&quot;, &quot;TMF_APIAggregatesSchema&quot;, &quot;Class&quot;, &quot;TMF_JSON_Schema&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each listElement in jsonList&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set jsonElement = Repository.GetElementByGuid (listElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateOperation element, jsonElement, &quot;TMF_APIOperation&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Operations created for &quot; &amp; jsonElement.Name &amp; &quot;, API &quot; &amp; element.name &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;Session.Output &quot;done: all Operations created&quot; &#x9;&#x9;&#xA;&#x9; else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires an element to be selected in a diagram to function&quot;, promptOK&#xA;&#x9;End if&#xA;&#xA;end sub&#xA;&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="336"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5BBA00A6-61B2-4631-8B2A-0FA6D96D6146}"/>
			<Column name="ScriptAuthor" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Print-Array&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Sub PrintArray(vec,lo,hi)&#xA;  '==-----------------------------------------==&#xA;  '== Print out an array from the lo bound    ==&#xA;  '==  to the hi bound.  Highlight the column ==&#xA;  '==  whose number matches parm mark         ==&#xA;  '==-----------------------------------------==&#xA;&#xA;  Dim i,j,row&#xA;  call LOGTrace( &quot;PrintArray: lo(&quot; &amp;  lo &amp; &quot;),hi(&quot; &amp; hi &amp; &quot;)&quot;)&#xA;&#xA;  For i = lo to hi&#xA;&#x9;row=&quot;&quot;&#xA;&#x9;For j = 0 to Ubound(vec,2)&#xA;&#x9;&#x9;if j=0 then&#xA;&#x9;&#x9;&#x9;row = vec(i,j) &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;row = row &amp; &quot;:&quot; &amp; vec(i,j) &#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;    'call Session.Output(row)&#xA;&#x9;call LOGDebug (row)&#xA;&#xA;  Next&#xA;  call LOGDebug( &quot;end of array&quot;)&#xA;  &#xA;End Sub  'PrintArray"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="337"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E226E81C-3BEE-4904-AB52-786BBAEB1A15}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Activity-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Activity Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a activity diagram&#xA;' Date: 29-Mar-2019&#xA;'&#xA;sub CreateActivityDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Activity Diagram script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="338"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8E190D22-8563-4172-AEE2-2B03A9ED19F3}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Class-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Class Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to build a Class Diagram  &#xA;' Date: 29-Mar-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;&#xA;dim class_array (99,7)&#x9;&#x9;&#x9;'store class elements &#xA;dim idxC&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'class array index&#xA;&#xA;dim relationship_array (99,7)&#x9;'store relationships &#xA;dim idxR&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'reltionship array index&#xA;&#xA;sub CreateClassDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Class Diagram script activated&quot;)&#xA;&#xA;&#x9;if instr(Ucase(theSelectedElement.Notes),&quot;C4-PLANTUML&quot;) &gt; 0 then&#xA;&#x9;&#x9;CreateC4Diagram ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Create Class Diagram Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="339"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2B860F99-0595-4e38-9BDA-9D207A476773}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Sequence-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: GeneratePlantUMLScript&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Generate PlantUML Script to be used to build a Sequence PlantUML  &#xA;' Date: 31-Jan-2019&#xA;'&#xA;'-----------------------------------------&#xA;' Modifcation Log&#xA;' 30-Mar-2019:&#x9;add logic to support the following&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- \n for long names&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- title&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- dividers&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- notes&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- divider&#xA;' Diagram Script main function&#xA;'&#xA;dim timeline_array (99,10)&#xA;dim sequence_array (99,8)&#xA;dim t&#x9;&#x9;&#x9;&#x9;'index for timeline_array&#xA;dim s&#x9;&#x9;&#x9;&#x9;'index for sequence_array&#xA;&#xA;sub CreateSequencePlantUML()&#xA;&#x9;call LOGInfo(&quot;Create Sequence PlantUML script activated&quot;)&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;dim generated_script&#xA;&#x9;&#xA;&#x9;&#x9;' Get a reference to any selected objects&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;' One or more diagram objects are selected&#xA;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;'spin through diagram objects and declare participants&#xA;&#x9;dim line_offset&#xA;&#x9;t=0&#xA;&#x9;s=0&#xA;&#x9;dim partition as EA._Partition&#xA;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;set Element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if inStr(&quot;...Sequence,Actor,Boundary,Component...&quot;, element.type) &gt; 0 then&#xA;&#x9;&#x9;&#x9;timeline_array (t,0) = element.ElementID&#xA;&#x9;&#x9;&#x9;timeline_array (t,1) = element.Type&#xA;&#x9;&#x9;&#x9;if instr(element.Name, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,2) = element.Name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,2) = chr(34) &amp; element.Name &amp; chr(34)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'replace spaces with \n if length greater than 20 &#xA;&#x9;&#x9;&#x9;if len(timeline_array (t,2)) &gt; 20 then&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,2) = replace(timeline_array (t,2), &quot; &quot;,&quot;\n&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if instr(element.Alias, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,3) = element.Alias&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,3) = chr(34) &amp; element.Alias &amp; chr(34)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;timeline_array (t,4) = element.Stereotype&#xA;&#x9;&#x9;&#x9;timeline_array (t,5) = diagramObject.Left&#xA;&#x9;&#x9;&#x9;timeline_array (t,6) = diagramObject.right&#xA;&#x9;&#x9;&#x9;timeline_array (t,7) = &quot;N&quot;  &#x9;'activate switch&#xA;&#x9;&#x9;&#x9;timeline_array (t,8) = lcase(color(element.Type, diagramObject.BackgroundColor))&#xA;&#x9;&#x9;&#x9;timeline_array (t,9) = diagramObject.Left + (diagramObject.right - diagramObject.left)/2  'timeline centre&#xA;&#x9;&#x9;&#x9;t=t+1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;InteractionFragment&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;*Fragment (&quot; &amp; element.ElementID &amp; &quot;) name=&quot; &amp; element.Name &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; t=&quot; &amp; diagramObject.top &amp; &quot;,b=&quot; &amp; diagramObject.bottom &amp; &quot;,l=&quot; &amp; diagramObject.left &amp; &quot;,r=&quot; &amp; diagramObject.right)&#xA;&#x9;&#x9;&#x9;&#x9;'add to sequence array&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = diagramObject.top *-1&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = element.Name&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = fragment_type(element.Subtype)&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;if element.Partitions.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;line_offset = (diagramObject.top *-1)+ 20&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each partition in element.Partitions&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Partitition for &quot; &amp; element.ElementID &amp; &quot; &quot; &amp; &quot;name=&quot; &amp; partition.Name &amp; &quot; object type=&quot; &amp; partition.ObjectType &amp; &quot; operator=&quot; &amp; partition.Operator &amp; &quot; size=&quot; &amp; partition.size &amp; &quot; note=&quot; &amp; partition.Note)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = line_offset&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = partition.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = &quot;Else&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;line_offset = line_offset + partition.Size&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'suppress end for dividers&#xA;&#x9;&#x9;&#x9;&#x9;if not (sequence_array (s-1,4) = &quot;divider&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = diagramObject.bottom *-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = &quot;End&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if element.Type = &quot;Note&quot; then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not (element.Name = &quot;PlantUML&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add to sequence array&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = diagramObject.top *-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = element.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = &quot;Note&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = diagramObject.BackgroundColor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,7) = diagramObject.left &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,8) = diagramObject.right &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning( &quot;PlantUML &quot; &amp; element.type &amp; &quot; element type not added to timeline array&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call QuickSort(timeline_array,0,t-1,5)&#xA;&#x9;call LOGDebug( &quot;Sorted Timeline Array&quot; )&#xA;&#x9;call PrintArray (timeline_array,0,t-1)&#xA;'&#xA;&#x9;call LOGDebug( &quot;Sequence Array&quot; )&#xA;&#x9;call PrintArray (sequence_array,0,s-1)&#xA;&#x9;&#xA;&#x9;dim box_right&#xA;&#x9;dim strLine&#xA;&#x9;box_right=0&#xA;&#x9;generated_script=&quot;@startuml&quot; &amp; vbcrlf &amp; &quot;autoactivate on&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;title &quot; &amp; currentDiagram.Name &amp; vbcrlf&#xA;&#x9;dim i&#xA;&#x9;'Output PlantUML participants&#xA;&#x9;for i = 0 to Ubound(timeline_array)&#xA;&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if timeline_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;strLine = &quot;Box &quot; &amp; timeline_array (i,2) &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;box_right = timeline_array (i,6)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;if box_right &gt; 0 then&#x9;&#x9;&#x9;'check for inline box&#xA;&#x9;&#x9;&#x9;&#x9;if timeline_array (i,5) &gt; box_right then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; &quot;End Box&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;box_right=0&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;strLine = participant(timeline_array (i,1), timeline_array (i,4)) &amp; &quot; &quot; &amp; timeline_array (i,2) &#xA;&#x9;&#x9;&#x9;if not timeline_array (i,3) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot; as &quot; &amp; timeline_array (i,3)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;if not&#x9;timeline_array (i,8) = &quot;&quot; then&#x9;&#x9;&#x9;'append color if one exists&#xA;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot; &quot; &amp; timeline_array (i,8)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if box_right &gt; 0 then&#x9;&#x9;&#x9;&#x9;'check for trailing&#xA;&#x9;&#x9;generated_script = generated_script &amp; &quot;End Box&quot; &amp; vbcrlf&#xA;&#x9;&#x9;box_right=0&#xA;&#x9;end if&#xA;&#xA;&#x9;'spin through diagram links&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;dim connectorEnd as EA.ConnectorEnd&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;dim connectorTag as EA.ConnectorTag&#xA;&#x9;&#xA;&#x9;for each diagramLink in currentDiagram.DiagramLinks&#xA;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;'add to sequence array&#xA;'&#x9;&#x9;call LOGDebug( &quot;+Connector (&quot; &amp; connector.ConnectorID &amp; &quot;) &quot; &amp;  connector.Name &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot; #:&quot; &amp; connector.SequenceNo &amp; &quot;, sx:&quot; &amp; connector.StartPointX &amp; &quot;, sy:&quot; &amp; connector.StartPointY &amp; &quot;, ex:&quot; &amp; connector.EndPointX &amp; &quot;,ey: &quot; &amp; connector.EndPointY )&#xA;&#x9;&#x9;'Session.Output( &quot; type: &quot; &amp; connector.Type )&#xA;&#x9;&#x9;'Session.Output( &quot; subtype: &quot; &amp; connector.Subtype )&#xA;&#x9;&#x9;'Session.Output( &quot; styleEx: &quot; &amp; connector.StyleEx )&#xA;&#x9;&#x9;'Session.Output( &quot; parmam &amp; retval: &quot; &amp; connector.MiscData(1) )&#xA;&#x9;&#x9;'Session.Output( &quot; custom property count: &quot; &amp; connector.CustomProperties.Count)&#xA;&#x9;&#x9;'Session.Output( &quot; event flags: &quot; &amp; connector.EventFlags)&#xA;&#x9;&#x9;'Session.Output( &quot; tags: &quot; &amp; connector.TaggedValues.Count)&#xA;&#x9;&#x9;'Session.Output( &quot; states: &quot; &amp; connector.StateFlags)&#xA;&#x9;&#x9;'Session.Output( &quot; metatype: &quot; &amp; connector.MetaType)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,0) = connector.StartPointY *-1&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,1) = connector.ClientID&#xA;&#x9;&#x9;sequence_array (s,2) = connector.SupplierID&#xA;&#x9;&#x9;sequence_array (s,3) = connector.Name&#xA;&#x9;&#x9;sequence_array (s,4) = connector.MiscData(0)&#x9;&#x9;'synch or async&#xA;&#x9;&#x9;sequence_array (s,5) = connector.MiscData(1)&#x9;&#x9;'return value and parameters&#xA;&#x9;&#x9;sequence_array (s,6) = connector.MiscData(3)&#x9;&#x9;'isReturn&#xA;&#x9;&#x9;s=s+1&#xA;&#x9;next&#xA;&#x9;'sort links from top to bottom&#xA;&#x9;Call QuickSort(sequence_array,0,s-1,0)&#xA;&#x9;call LOGDebug( &quot;Sorted Sequence Array&quot; )&#xA;&#x9;Call PrintArray (sequence_array,0,s-1)&#xA;&#xA;&#x9;'Output PlantUML sequences&#xA;&#xA;&#x9;for i = 0 to Ubound(sequence_array)&#xA;&#x9;&#x9;if sequence_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if sequence_array (i,1) = 0 then&#x9;&#x9;'source/target identifiers are equal 0&#xA;&#x9;&#x9;&#x9;if sequence_array (i,4) = &quot;divider&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strline = &quot;== &quot; &amp; sequence_array(i,3) &amp; &quot; ==&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if sequence_array (i,4) = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'use proximity to resolve position&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strline = &quot;note &quot; &amp; resolveNoteLocation(i) &amp; &quot; &quot; &amp; color(&quot;Note&quot;, sequence_array (i,5)) &amp; vbcrlf &amp; sequence_array(i,3) &amp; vbcrlf &amp; &quot;end note&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strline = sequence_array (i,4) &amp; &quot; &quot; &amp; sequence_array(i,3)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;strline = timeline(sequence_array(i,1)) &amp; arrow(sequence_array (i,4), sequence_array (i,6)) &amp; timeline(sequence_array(i,2))  &#xA;&#x9;&#x9;&#x9;if not sequence_array(i,3) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strline = strline &amp; &quot;: &quot; &amp; sequence_array(i,3) &amp; signature(sequence_array (i,5))&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#xA;&#x9;&#x9;&#x9;'activate source if synchronous and not already active&#xA;'&#x9;&#x9;&#x9;if sequence_array (i,4) = &quot;Synchronous&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;if activate_timeline(sequence_array(i,1)) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;strline = &quot;activate &quot; &amp; timeline(sequence_array(i,1))&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;'&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;'activate target if asynchronous and not already active&#xA;'&#x9;&#x9;&#x9;if activate_timeline(sequence_array(i,2)) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;activate &quot; &amp; timeline(sequence_array(i,2))&#xA;'&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;'&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'deactivate source&#xA;'&#x9;&#x9;&#x9;if sequence_array (i,6) = 1 then&#x9;&#x9;&#x9;'isreturn&#xA;'&#x9;&#x9;&#x9;&#x9;deactivate_timeline(sequence_array(i,1))&#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;deactivate &quot; &amp; timeline(sequence_array(i,1))&#xA;'&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;'&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'deactivate any active timelines&#xA;'&#x9;For i = 0 to t-1&#xA;'&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;&#x9;if timeline_array (i,7) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;timeline_array (i,7) = &quot;N&quot;&#xA;'&#x9;&#x9;&#x9;if timeline_array(i,3) = &quot;&quot; then &#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;deactivate &quot; &amp; timeline_array(i,2)&#xA;'&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;deactivate &quot; &amp; timeline_array(i,3)&#xA;'&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;end if&#xA;'&#x9;Next&#xA;&#x9;'check for InteractionFragments&#xA;&#x9;&#xA;&#x9;generated_script=generated_script &amp; &quot;@enduml&quot;&#xA;&#x9;theSelectedElement.Notes = generated_script&#xA;&#x9;theSelectedElement.Update&#xA;&#xA;end sub&#xA;&#xA;function participant(strType, strStereotype)&#xA;&#x9;If strType = &quot;Actor&quot; then&#xA;&#x9;&#x9;participant = strType&#xA;&#x9;else&#xA;&#x9;&#x9;select case Ucase(strStereotype)&#xA;&#x9;&#x9;&#x9;case &quot;DATABASE&quot; &#x9;participant = &quot;Database&quot;&#xA;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot; &#x9;participant = &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;case &quot;CONTROL&quot; &#x9;&#x9;participant = &quot;Control&quot;&#xA;&#x9;&#x9;&#x9;case &quot;ENTITY&quot; &#x9;&#x9;participant = &quot;Entity&quot;&#xA;&#x9;&#x9;&#x9;case &quot;COLLECTIONS&quot; &#x9;participant = &quot;Collections&quot;&#xA;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;participant = &quot;Participant&quot; &#xA;&#x9;&#x9;end select&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function timeline(elementid)&#xA;Dim i&#xA;&#x9;Call LOGTrace( &quot;timeline(&quot; &amp; elementid &amp; &quot;)&quot; )&#xA;&#xA;&#x9;For i = 0 to Ubound(timeline_array)&#xA;&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if timeline_array (i,0) = elementid then&#xA;&#x9;&#x9;&#x9;if timeline_array (i,3) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;timeline = timeline_array (i,2)&#x9;&#x9;'return name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;timeline = timeline_array (i,3)&#x9;&#x9;'return alias&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'check if spaces.. if enclosed in quotes&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;Call LOGTrace( &quot;timeline=&quot; &amp; timeline )&#xA;&#xA;end function&#xA;&#xA;'function activate_timeline(elementid)&#xA;'&#x9;Dim i&#xA;'&#x9;For i = 0 to Ubound(timeline_array)&#xA;'&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;&#x9;if timeline_array (i,0) = elementid then&#xA;'&#x9;&#x9;&#x9;if timeline_array (i,7) = &quot;N&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;timeline_array (i,7) = &quot;Y&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;activate_timeline = &quot;Y&quot;&#x9;&#x9;'activate&#xA;'&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;activate_timeline = &quot;N&quot;&#x9;&#x9;'already activated&#xA;'&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;Next&#xA;'end function&#xA;&#xA;'maynot be required if autoactivate is set&#xA;'function deactivate_timeline(elementid)&#xA;'Dim i&#xA;'&#x9;For i = 0 to Ubound(timeline_array)&#xA;'&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;&#x9;if timeline_array (i,0) = elementid then&#xA;'&#x9;&#x9;&#x9;if timeline_array (i,7) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;timeline_array (i,7) = &quot;N&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;deactivate_timeline = &quot;Y&quot;&#x9;&#x9;'deactivated&#xA;'&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;deactivate_timeline = &quot;N&quot;&#x9;&#x9;'not activated&#xA;'&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;Next&#xA;'end function&#xA;&#xA;function arrow(misc0, misc3)&#xA;&#x9;Call LOGTrace( &quot;arrow(&quot; &amp; misc0 &amp; &quot;:&quot; &amp; misc3 &amp; &quot;)&quot; )&#xA;&#x9;&#xA;&#x9;if misc0 = &quot;Asynchronous&quot; then&#xA;&#x9;&#x9;arrow = &quot; -&gt;&gt; &quot;&#xA;&#x9;else&#xA;&#x9;&#x9;if isnull(misc3) then&#x9;&#xA;&#x9;&#x9;&#x9;arrow = &quot; -&gt; &quot;&#x9;&#x9;&#x9;&#x9;'synchronous&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if misc3 = 0 then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;arrow = &quot; -&gt; &quot;&#x9;&#x9;&#x9;&#x9;'synchronous&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if misc3 = 1 then&#x9;&#x9;&#x9;' is return?&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrow = &quot; --&gt; &quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;Call LOGTrace( &quot;arrow=&quot; &amp; arrow )&#xA;&#x9;&#xA;end function&#xA;&#xA;function signature(misc2)&#xA;&#x9;'parse miscdata2 for params and retrun value&#xA;&#x9;call LOGTrace( &quot;signature(&quot; &amp; misc2 &amp; &quot;)&quot;)&#xA;&#xA;&#x9;dim i &#xA;&#x9;dim j&#xA;&#x9;dim l&#xA;&#x9;dim retval&#xA;&#x9;dim param&#xA;&#x9;&#xA;&#x9;if misc2=&quot;&quot; then&#xA;&#x9;&#x9;signature = &quot; ()&quot;&#xA;&#x9;&#x9;exit function&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;i = inStr(misc2, &quot;retval=void&quot;)&#xA;&#x9;if i = 0 then&#xA;&#x9;&#x9;i = inStr(misc2, &quot;retval=&quot;)&#xA;&#x9;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;&#x9;j = inStr(i, misc2, chr(59))&#xA;&#x9;&#x9;&#x9;l=j-(i+7)&#xA;&#x9;&#x9;&#x9;if j&gt;0 then&#xA;&#x9;&#x9;&#x9;&#x9;retval=mid(misc2,i+7, l)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#xA;&#x9;i = instr(misc2,&quot;paramsDlg=&quot;) &#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;j = instr(i, misc2,chr(59))&#xA;&#x9;&#x9;l = j-(i+10)&#xA;&#x9;&#x9;param=mid(misc2,i+10,l)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if param = &quot;&quot; then&#xA;&#x9;&#x9;param=&quot;()&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;param = &quot;(&quot; &amp; param &amp; &quot;)&quot; &#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if not retval = &quot;&quot; then&#xA;&#x9;&#x9;retval=&quot;:&quot; &amp; retval&#xA;&#x9;end if&#xA;&#xA;&#x9;signature = param &amp; retval&#xA;&#x9;call LOGTrace( &quot;Signature=&quot; &amp; signature )&#xA;&#x9;&#xA;end function&#xA;&#xA;function color(elementType, BackgroundColor)&#xA;'receives decimal version of rbg&#xA;'resolve default value if value passed is -1&#xA;'resolve ColorNameByHex&#xA;&#xA;dim hexvalue&#xA;dim hexRGB&#xA;&#x9;call LOGTrace(&quot;color(&quot; &amp; elementType &amp; &quot;:&quot; &amp; BackgroundColor &amp; &quot;)&quot;)&#xA;&#x9;if BackgroundColor = -1 then&#xA;&#x9;&#x9;select case elementType&#xA;&#x9;&#x9;&#x9;case &quot;Sequence&quot; &#x9;color = &quot;#lightblue&quot;&#xA;&#x9;&#x9;&#x9;case &quot;Component&quot; &#x9;color = &quot;#lightpink&quot;&#xA;&#x9;&#x9;&#x9;case &quot;Boundary&quot; &#x9;color = &quot;#lightgrey&quot;&#xA;&#x9;&#x9;&#x9;case &quot;Note&quot; &#x9;&#x9;color = &quot;#lightyellow&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;case else &#x9;&#x9;&#x9;color=&quot;&quot;&#xA;&#x9;&#x9;&#x9;end select&#xA;&#x9;else&#xA;&#x9;&#x9;'Session.Output( &quot;background color=&quot; &amp; BackgroundColor)&#xA;&#x9;&#x9;hexvalue = hex(BackgroundColor)&#xA;&#x9;&#x9;while len(hexvalue) &lt; 6&#xA;&#x9;&#x9;&#x9;hexvalue = &quot;0&quot; &amp; hexvalue&#xA;&#x9;&#x9;wend&#x9;&#x9;&#xA;&#x9;&#x9;hexRGB = &quot;#&quot; &amp; mid(hexvalue,5,2) &amp; mid(hexvalue,3,2) &amp; mid(hexvalue,1,2)&#xA;&#x9;&#x9;color = ColorNameByHex (hexRGB)&#xA;&#x9;&#x9;if color=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;color = hexRGB&#xA;&#x9;&#x9;end if&#xA;'&#x9;&#x9;call LOGDebug( &quot;hexColor=&quot; &amp; color)&#xA;&#x9;end if &#xA;&#x9;call LOGTrace(&quot;color=&quot; &amp; color)&#xA;&#x9;&#xA;end function&#xA;&#xA;function fragment_type(ftype)&#xA;&#x9;select case ftype&#xA;&#x9;&#x9;case 0 &#x9;&#x9;fragment_type = &quot;alt&quot;&#xA;&#x9;&#x9;case 1 &#x9;&#x9;fragment_type = &quot;opt&quot;&#xA;&#x9;&#x9;case 2 &#x9;&#x9;fragment_type = &quot;break&quot;&#xA;&#x9;&#x9;case 3 &#x9;&#x9;fragment_type = &quot;par&quot;&#xA;&#x9;&#x9;case 4 &#x9;&#x9;fragment_type = &quot;loop&quot;&#xA;&#x9;&#x9;case 5 &#x9;&#x9;fragment_type = &quot;critical&quot;&#xA;&#x9;&#x9;case 9&#x9;&#x9;fragment_type = &quot;divider&quot;&#xA;&#x9;&#x9;case else &#x9;fragment_type=&quot;&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;function resolveNoteLocation(sequence_index)&#xA;'this funtion does not cater for a Note spanning 2 timelines&#xA;dim i&#x9;&#x9;'index for spinning thru time line arrary&#xA;dim j    &#x9;'index for the selected timeline entry&#xA;dim rightSide_gap&#xA;dim leftSide_gap&#xA;dim gap&#xA;dim side&#xA;rightSide_gap = 999999&#xA;leftSide_gap = 999999&#xA;&#xA;&#x9;call LOGTrace(&quot;resolveNoteLocation(&quot; &amp; sequence_index &amp; &quot;)&quot;)&#xA;'&#x9;call LOGDebug( &quot;Nbr of timelines=&quot; &amp; t)&#xA;&#x9;for i = 0 to t-1&#xA;'&#x9;&#x9;call LOGDebug( &quot;processing timeline(&quot; &amp; i &amp; &quot;)=&quot; &amp; timeline_array(i, 2) &amp; &quot;:l=&quot; &amp; timeline_array(i, 5) &amp; &quot; r=&quot; &amp; timeline_array(i, 6) &amp; &quot; c=&quot; &amp; timeline_array(i, 9))&#xA;&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not (timeline_array (i,1) = &quot;Boundary&quot;) then&#xA;'&#x9;&#x9;&#x9;call LOGDebug( &quot;Note l=&quot; &amp; sequence_array(sequence_index,7) &amp; &quot;:r=&quot; &amp; sequence_array(sequence_index,8))&#xA;&#x9;&#x9;&#x9;if sequence_array(sequence_index,7) =&gt; timeline_array(i, 9) then&#xA;&#x9;&#x9;&#x9;&#x9;'note is on the right side of current timeline&#xA;&#x9;&#x9;&#x9;&#x9;gap = sequence_array(sequence_index,7) - timeline_array(i, 9) &#x9;'calculate leftside_gap&#xA;'&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Note is on the right side of &quot; &amp; timeline_array(i, 2) &amp; &quot; with a gap of &quot; &amp; gap)&#xA;&#x9;&#x9;&#x9;&#x9;if gap &lt; leftside_gap then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;side = &quot;right&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;leftside_gap = gap&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j=i&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Setting timeline(&quot; &amp; timeline_array(i, 2) &amp; &quot;) as being the closest&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if sequence_array(sequence_index,8) &lt;= timeline_array(i, 9) then&#xA;&#x9;&#x9;&#x9;&#x9;'note is on the left side of current timeline&#xA;&#x9;&#x9;&#x9;&#x9;gap = timeline_array(i, 9) - sequence_array(sequence_index,8) &#x9;'calculate rightside_gap&#xA;'&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Note is on the left side of &quot; &amp; timeline_array(i, 2) &amp; &quot; with a gap of &quot; &amp; gap)&#xA;&#x9;&#x9;&#x9;&#x9;if gap &lt; rightside_gap then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;side = &quot;left&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rightside_gap = gap&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j=i&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Setting timeline(&quot; &amp; timeline_array(i, 2) &amp; &quot;) as being the closest&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;call LOGDebug( &quot;skipping boundary&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;resolveNoteLocation = side &amp; &quot; of &quot; &amp; timeline(timeline_array(j, 0))&#xA;&#x9;call LOGTrace(&quot;resolveNoteLocation=&quot; &amp; resolveNoteLocation)&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="340"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3B9CF089-EE5C-4cef-B203-EBA8BA00BB77}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-C4-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create C4 PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a C4 PlantUML script&#xA;' Date: 18-Sept-2022&#xA;'&#xA;dim generated_script&#xA;'dim reltag_array (99,4)&#xA;' 0=sterotype&#xA;' 1=&#xA;'dim iRT&#xA;&#xA;sub CreateC4PlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create C4 PlantUML script activated&quot;)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim elementTag as EA.TaggedValue&#xA;&#xA;&#x9;dim include_puml&#xA;&#x9;&#xA;&#x9;select case currentDiagram.Type&#xA;&#x9;&#x9;case &quot;Logical&quot;&#x9;&#x9;include_puml = &quot;C4_Context&quot;&#xA;&#x9;&#x9;case &quot;Deployment&quot;&#x9;include_puml = &quot;C4_Container&quot;&#xA;&#x9;&#x9;case &quot;Component&quot;&#x9;include_puml = &quot;C4_Component&quot;&#xA;&#x9;end select&#xA;&#xA;&#x9;generated_script=&quot;@startuml&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/&quot; &amp; include_puml &amp; &quot;.puml&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;' uncomment the following line and comment the first to use locally&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;' !include &quot; &amp; include_puml &amp; &quot;.puml&quot; &amp; vbcrlf &amp; _&#xA;&#x9;vbcrlf &amp; _&#xA;&#x9;&quot;'LAYOUT_TOP_DOWN()&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;'LAYOUT_AS_SKETCH()&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;LAYOUT_WITH_LEGEND()&quot; &amp; vbcrlf&#xA;&#xA;&#x9;generated_script = generated_script &amp; &quot;title &quot; &amp; currentDiagram.Name &amp; vbcrlf&#xA;&#xA;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;set Element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if not(theSelectedElement.ElementID = element.ElementID) then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;element_array (e,0) = element.ElementID&#xA;&#x9;&#x9;&#x9;element_array (e,1) = element.Type&#xA;&#x9;&#x9;&#x9;if instr(element.Name, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,2) = element.Name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,2) = chr(34) &amp; element.Name &amp; chr(34)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'replace spaces with \n if length greater than 20 &#xA;&#x9;&#x9;&#x9;'if len(element_array (e,2)) &gt; 20 then&#xA;&#x9;&#x9;&#x9;'&#x9;element_array (e,2) = replace(element_array (e,2), &quot; &quot;,&quot;\n&quot;)&#xA;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;if element.Alias = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,3) = replace(element.Name, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(element.Alias, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,3) = element.Alias&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,3) = chr(34) &amp; element.Alias &amp; chr(34)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'boundary objects do not have a sterotype type value&#xA;&#x9;&#x9;&#x9;if element.Stereotype = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,4) =  &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,4) = replace(element.Stereotype, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;element_array (e,5) = element.Notes&#xA;&#xA;&#x9;&#x9;&#x9;if element.TaggedValues.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set elementTag = element.TaggedValues.GetByName(&quot;Type&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if elementTag is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning(&quot;Element: &quot; &amp; element.Name &amp; &quot; missing 'Type' tagged value&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,6) = elementTag.Value&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;element_array (e,6) = lcase(color(element.Type, diagramObject.BackgroundColor))&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,6)=&quot;&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;element_array (e,7) = diagramObject.left&#x9;&#xA;&#x9;&#x9;&#x9;element_array (e,8) = diagramObject.top&#x9;&#xA;&#x9;&#x9;&#x9;element_array (e,9) = diagramObject.right&#xA;&#x9;&#x9;&#x9;element_array (e,10) = diagramObject.bottom&#xA;&#x9;&#x9;&#x9;element_array (e,11) = &quot;&quot;&#x9;&#x9;&#x9;'children - delimitered string of element ids within a boundary&#xA;&#x9;&#x9;&#x9;element_array (e,12) = &quot;&quot;&#x9;&#x9;&#x9;'parent boundary elementid&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;e=e+1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;'&#x9;resolve tags&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'resolve boundary hierarchy using coordinates&#xA;&#x9;dim i&#xA;&#x9;dim i2&#xA;&#x9;dim i2Id&#xA;&#x9;For i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'loop thru the element array and check is the element coordinates are inside the boundary&#xA;&#x9;&#x9;&#x9;'call LOGDebug(&quot;*process boundary(&quot; &amp; i &amp; &quot;):&quot; &amp; element_array(i,0))&#xA;&#x9;&#x9;&#x9;For i2 = 0 to e-1&#xA;&#x9;&#x9;&#x9;&#x9;if not(i = i2) then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i2,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if inBoundary(i2,i) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add boundary element to the list of children elements for this boundary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2Id = &quot;B&quot; &amp; i2 &amp; &quot;#&quot; &amp; element_array (i2,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = i2Id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = element_array (i,11) &amp; &quot;|&quot; &amp; i2Id &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update the element with the boundary parent.. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i2,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i2,12) = element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i2,12) = element_array (i2,12) &amp; &quot;|&quot; &amp; element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;Next &#xA;&#x9;&#x9;end if&#xA;&#x9;Next &#xA;&#xA;&#x9;'call LOGDebug(&quot;Find Children: part 1&quot;)&#xA;&#xA;'&#x9;for each boundary.. populate the elements within&#xA;&#x9;dim children&#xA;&#x9;dim i3&#x9;&#x9;'index for the boundary in the element array&#xA;&#x9;dim i4&#x9;&#x9;'index to compare &#xA;&#x9;for i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;if not element_array (i,11)=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;*children:&quot; &amp; i &amp; &quot;=&quot; &amp; element_array (i,11))&#xA;&#x9;&#x9;&#x9;&#x9;children = split( element_array (i,11),&quot;|&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;for i2 = ubound(children) to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;'start with the deepest boundary and work out..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;*processing boundary childs:&quot; &amp; i2 &amp; &quot;=&quot; &amp; children(i2))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check if this is a boundary...&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if left(children(i2),1)=&quot;B&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'get index of the boundary we are checking against..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'remove hardcoded length&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i3 = Mid(children(i2),2,1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'call LOGDebug ( &quot;index: &quot; &amp; i3)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'loop thru the elements arrary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'compare coordinate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;For i4 = 0 to e-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not (element_array (i4,1) = &quot;Boundary&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if inBoundary(i4,i3) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i3,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i3,11) = element_array (i4,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i3,11) = element_array (i3,11) &amp; &quot;|&quot; &amp; element_array (i4,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update the element with the boundary parent.. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i4,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i3,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i4,12) &amp; &quot;|&quot; &amp; element_array (i3,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;'for each top level boundary.. populate the elements within if they have not yet been allocated&#xA;&#xA;&#x9;'call LOGDebug(&quot;Find Children: part 2&quot;)&#xA;&#x9;for i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;if element_array (i,12)=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;Find Children: part 2&quot; &amp; i &amp; &quot;=&quot; &amp; element_array (i,0))&#xA;&#x9;&#x9;&#x9;&#x9;For i4 = 0 to e-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not (element_array (i4,1) = &quot;Boundary&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i4,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if inBoundary(i4,i) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = element_array (i4,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = element_array (i,11) &amp; &quot;|&quot; &amp; element_array (i4,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update the element with the boundary parent.. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i4,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i4,12) &amp; &quot;|&quot; &amp; element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;call LOGDebug( &quot;Element Array&quot; )&#xA;&#x9;call PrintArray (element_array,0,e-1)&#xA;&#xA;&#x9;'spin through diagram links&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#x9;r=0&#xA;&#x9;for each diagramLink in currentDiagram.DiagramLinks&#xA;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;relationship_array (r,0) = connector.ClientID&#xA;&#x9;&#x9;relationship_array (r,1) = connector.SupplierID&#xA;&#x9;&#x9;relationship_array (r,2) = connector.Name&#xA;&#x9;&#x9;relationship_array (r,3) = connector.Stereotype&#xA;&#x9;&#x9;'TODO: build up relTag for each sterotype and set color and  linetype&#xA;&#x9;&#x9;r=r+1&#xA;&#x9;next&#xA;&#xA;&#x9;dim strLine&#xA;&#x9;'Output PlantUML objects&#xA;&#x9;generated_script = generated_script &amp; &quot;AddElementTag('Service', $shape=EightSidedShape(), $legendText='service (eight sided)')&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;AddRelTag(Alert, $textColor='red', $lineColor='red', $lineStyle = DashedLine(), $legendText='Alert')&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;AddRelTag(Synchronous, $textColor='black', $lineColor='dimgrey',$legendText='Synchronous')&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;AddRelTag(Asynchronous,$textColor='black', $lineColor='dimgrey', $lineStyle = DashedLine(), $legendText='Asynchronous')&quot; &amp; vbcrlf&#xA;&#x9;&#xA;&#x9;'Process top level objects (without a parent)&#xA;&#x9;for i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;strLine = construct_output(i)&#xA;&#x9;&#x9;&#x9;'No Children exist&#xA;&#x9;&#x9;&#x9;if element_array (i,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; &quot;{&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;&#x9;'Process Boundary&#xA;&#x9;&#x9;&#x9;&#x9;call process_boundary (i)&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; &quot;}&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;'Output PlantUML relationships&#xA;&#x9;for i = 0 to r-1&#xA;&#x9;&#x9;strLine = &quot;Rel(&quot; &amp; system(relationship_array (i,0)) &amp; &quot;,&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;system(relationship_array (i,1)) &amp; &quot;,&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;chr(34) &amp; relationship_array (i,2) &amp; chr(34) &amp; &quot;,&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;chr(34) &amp; relationship_array (i,3) &amp; chr(34)&#xA;&#x9;&#x9;if not (relationship_array (i,3)=&quot;&quot;) then&#xA;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot;, $tags='&quot; &amp; relationship_array (i,3) &amp; &quot;'&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;strLine = strLine &amp; &quot;)&quot;&#xA;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;generated_script=generated_script &amp; &quot;SHOW_LEGEND()&quot; &amp; vbcrlf &amp; &quot;@enduml&quot; &amp; vbcrlf&#xA;&#x9;theSelectedElement.Notes = generated_script&#xA;&#x9;theSelectedElement.Update&#xA;&#xA;end sub&#xA;&#xA;sub process_boundary (i)&#xA;&#x9;call LOGDebug(&quot;Process Boundary:&quot; &amp; element_array (i,11))&#xA;&#x9;dim strLine&#xA;&#x9;dim member&#xA;&#x9;dim i2&#xA;&#x9;dim i3&#xA;&#x9;dim i4&#xA;&#x9;member = split(element_array (i,11),&quot;|&quot;)&#xA;&#x9;for i2 = 0 to ubound(member)&#xA;&#x9;&#x9;call LOGDebug(&quot;Process Member:&quot; &amp; member(i2))&#xA;&#x9;&#x9;'check if this is a boundary...&#xA;&#x9;&#x9;if left(member(i2),1)=&quot;B&quot; then&#xA;&#x9;&#x9;&#x9;'get index of the boundary &#xA;&#x9;&#x9;&#x9;i3 = Mid(member(i2),2,1)&#xA;&#x9;&#x9;&#x9;strLine = construct_output(i3)&#xA;&#x9;&#x9;&#x9;if element_array (i3,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; &quot;{&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;&#x9;'Process Boundary&#xA;&#x9;&#x9;&#x9;&#x9;call process_boundary (i3)&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; &quot;}&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'get index based using element id&#xA;&#x9;&#x9;&#x9;i4 = getIndex(CLng(member(i2)))&#xA;&#x9;&#x9;&#x9;strLine = construct_output(i4)&#xA;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;function construct_output (i)&#xA;&#x9;'call LOGDebug ( &quot;construct_output: &quot; &amp; i &amp; &quot;=&quot; &amp; element_array (i,0))&#x9;&#x9;&#xA;&#xA;&#x9;dim strLine&#xA;&#x9;dim strType&#xA;&#x9;'if boundary..&#xA;&#x9;if inStr(&quot;...Person,System...&quot;, element_array (i,4)) &gt; 0 then&#xA;&#x9;&#x9;strLine = element_array (i,4) &amp; &quot;(&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;element_array (i,3) &amp; &quot;, &quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;element_array (i,2) &#xA;&#x9;else&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;strLine = element_array (i,4) &amp; &quot;(&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,3) &amp; &quot;, &quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,2) &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if element_array (i,6) = &quot;Storage&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strType=element_array (i,4) &amp; &quot;Db&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;strType=element_array (i,4)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;strLine = strType &amp; &quot;(&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,3) &amp; &quot;, &quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,2) &amp; &quot;, &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,6)&#xA;&#x9;&#x9;&#x9;if element_array (i,6) = &quot;Service&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot;, $tags='Service'&quot;&#xA;&#x9;&#x9;&#x9;'else&#xA;&#x9;&#x9;&#x9;'&#x9;strLine = strLine &amp; &quot;,&quot;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if element_array (i,5) = &quot;&quot; then&#xA;&#x9;&#x9;strLine = strLine &amp; &quot;)&quot;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;strLine = strLine &amp; &quot;,&quot; &amp; chr(34) &amp; element_array (i,5) &amp; chr(34) &amp; &quot;)&quot;&#xA;&#x9;end if&#xA;&#x9;construct_output = strLine&#xA;end function&#xA;&#xA;function inBoundary(i1, i2) &#xA;&#x9;'call LOGDebug ( &quot;inBoundary: &quot; &amp; i1 &amp; &quot;:&quot; &amp; i2)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;if element_array (i1,7) &gt; element_array (i2,7) _&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;and element_array (i1,8) &lt; element_array (i2,8) _&#x9;&#x9;&#xA;&#x9;&#x9;and element_array (i1,9) &lt; element_array (i2,9) _&#x9;&#x9;&#xA;&#x9;&#x9;and element_array (i1,10) &gt; element_array (i2,10) then&#xA;&#x9;&#x9;inBoundary=True&#xA;&#x9;else&#xA;&#x9;&#x9;inBoundary=False&#xA;&#x9;end if&#xA;&#x9;'call LOGDebug ( &quot;inBoundary=&quot; &amp; inBoundary)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;end function&#xA;&#xA;function system(elementid)&#xA;&#x9;Dim i&#xA;&#x9;'Call LOGTrace( &quot;system(&quot; &amp; elementid &amp; &quot;)&quot; )&#xA;&#xA;&#x9;For i = 0 to Ubound(element_array)&#xA;&#x9;&#x9;if element_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element_array (i,0) = elementid then&#xA;&#x9;&#x9;&#x9;system = element_array (i,3)&#x9;&#x9;'return alias&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;'Call LOGTrace( &quot;system=&quot; &amp; system )&#xA;&#xA;end function&#xA;&#xA;function getIndex(elementid)&#xA;&#x9;Dim i&#xA;&#x9;'Call LOGTrace( &quot;getIndex(&quot; &amp; elementid &amp; &quot;of type &quot; &amp; TypeName(elementid) &amp; &quot;)&quot; )&#xA;&#xA;&#x9;For i = 0 to Ubound(element_array)&#xA;&#x9;&#x9;'Call LOGTrace( &quot;i(&quot; &amp; i &amp; &quot;)=&quot; &amp; element_array (i,0) &amp; &quot; of type=&quot; &amp; TypeName(element_array (i,0)) )&#xA;&#x9;&#x9;if element_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element_array (i,0) = elementid then&#xA;&#x9;&#x9;&#x9;getIndex = i&#x9;&#x9;'return index&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;'Call LOGTrace( &quot;getIndex=&quot; &amp; getIndex )&#xA;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="341"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{08B025D4-AA64-43d4-96F8-A7CBC2781AB9}"/>
			<Column name="ScriptAuthor" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;color-picker&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: color-picker&#xA;' Author: David Anderson&#xA;' Purpose: utilise standard html color name and the corresponding hex values&#xA;' Date: 14-Feb_2019&#xA;'&#xA;dim color_array (154,2)&#xA;'loadup color_array&#xA;color_array(0,0)=&quot;#BLACK&quot;&#xA;color_array(0,1)=&quot;#000000&quot;&#xA;color_array(1,0)=&quot;#NAVY&quot;&#xA;color_array(1,1)=&quot;#000080&quot;&#xA;color_array(2,0)=&quot;#DARKBLUE&quot;&#xA;color_array(2,1)=&quot;#00008B&quot;&#xA;color_array(3,0)=&quot;#MEDIUMBLUE&quot;&#xA;color_array(3,1)=&quot;#0000CD&quot;&#xA;color_array(4,0)=&quot;#BLUE&quot;&#xA;color_array(4,1)=&quot;#0000FF&quot;&#xA;color_array(5,0)=&quot;#DARKGREEN&quot;&#xA;color_array(5,1)=&quot;#006400&quot;&#xA;color_array(6,0)=&quot;#GREEN&quot;&#xA;color_array(6,1)=&quot;#008000&quot;&#xA;color_array(7,0)=&quot;#TEAL&quot;&#xA;color_array(7,1)=&quot;#008080&quot;&#xA;color_array(8,0)=&quot;#DARKCYAN&quot;&#xA;color_array(8,1)=&quot;#008B8B&quot;&#xA;color_array(9,0)=&quot;#DEEPSKYBLUE&quot;&#xA;color_array(9,1)=&quot;#00BFFF&quot;&#xA;color_array(10,0)=&quot;#DARKTURQUOISE&quot;&#xA;color_array(10,1)=&quot;#00CED1&quot;&#xA;color_array(11,0)=&quot;#MEDIUMSPRINGGREEN&quot;&#xA;color_array(11,1)=&quot;#00FA9A&quot;&#xA;color_array(12,0)=&quot;#LIME&quot;&#xA;color_array(12,1)=&quot;#00FF00&quot;&#xA;color_array(13,0)=&quot;#SPRINGGREEN&quot;&#xA;color_array(13,1)=&quot;#00FF7F&quot;&#xA;color_array(14,0)=&quot;#AQUA&quot;&#xA;color_array(14,1)=&quot;#00FFFF&quot;&#xA;color_array(15,0)=&quot;#CYAN&quot;&#xA;color_array(15,1)=&quot;#00FFFF&quot;&#xA;color_array(16,0)=&quot;#MIDNIGHTBLUE&quot;&#xA;color_array(16,1)=&quot;#191970&quot;&#xA;color_array(17,0)=&quot;#DODGERBLUE&quot;&#xA;color_array(17,1)=&quot;#1E90FF&quot;&#xA;color_array(18,0)=&quot;#LIGHTSEAGREEN&quot;&#xA;color_array(18,1)=&quot;#20B2AA&quot;&#xA;color_array(19,0)=&quot;#FORESTGREEN&quot;&#xA;color_array(19,1)=&quot;#228B22&quot;&#xA;color_array(20,0)=&quot;#SEAGREEN&quot;&#xA;color_array(20,1)=&quot;#2E8B57&quot;&#xA;color_array(21,0)=&quot;#DARKSLATEGREY&quot;&#xA;color_array(21,1)=&quot;#2F4F4F&quot;&#xA;color_array(22,0)=&quot;#LIMEGREEN&quot;&#xA;color_array(22,1)=&quot;#32CD32&quot;&#xA;color_array(23,0)=&quot;#MEDIUMSEAGREEN&quot;&#xA;color_array(23,1)=&quot;#3CB371&quot;&#xA;color_array(24,0)=&quot;#TURQUOISE&quot;&#xA;color_array(24,1)=&quot;#40E0D0&quot;&#xA;color_array(25,0)=&quot;#ROYALBLUE&quot;&#xA;color_array(25,1)=&quot;#4169E1&quot;&#xA;color_array(26,0)=&quot;#STEELBLUE&quot;&#xA;color_array(26,1)=&quot;#4682B4&quot;&#xA;color_array(27,0)=&quot;#DARKSLATEBLUE&quot;&#xA;color_array(27,1)=&quot;#483D8B&quot;&#xA;color_array(28,0)=&quot;#MEDIUMTURQUOISE&quot;&#xA;color_array(28,1)=&quot;#48D1CC&quot;&#xA;color_array(29,0)=&quot;#INDIGO&quot;&#xA;color_array(29,1)=&quot;#4B0082&quot;&#xA;color_array(30,0)=&quot;#DARKOLIVEGREEN&quot;&#xA;color_array(30,1)=&quot;#556B2F&quot;&#xA;color_array(31,0)=&quot;#CADETBLUE&quot;&#xA;color_array(31,1)=&quot;#5F9EA0&quot;&#xA;color_array(32,0)=&quot;#CORNFLOWERBLUE&quot;&#xA;color_array(32,1)=&quot;#6495ED&quot;&#xA;color_array(33,0)=&quot;#REBECCAPURPLE&quot;&#xA;color_array(33,1)=&quot;#663399&quot;&#xA;color_array(34,0)=&quot;#MEDIUMAQUAMARINE&quot;&#xA;color_array(34,1)=&quot;#66CDAA&quot;&#xA;color_array(35,0)=&quot;#DIMGREY&quot;&#xA;color_array(35,1)=&quot;#696969&quot;&#xA;color_array(36,0)=&quot;#SLATEBLUE&quot;&#xA;color_array(36,1)=&quot;#6A5ACD&quot;&#xA;color_array(37,0)=&quot;#OLIVEDRAB&quot;&#xA;color_array(37,1)=&quot;#6B8E23&quot;&#xA;color_array(38,0)=&quot;#SLATEGREY&quot;&#xA;color_array(38,1)=&quot;#708090&quot;&#xA;color_array(39,0)=&quot;#LIGHTSLATEGREY&quot;&#xA;color_array(39,1)=&quot;#778899&quot;&#xA;color_array(40,0)=&quot;#MEDIUMSLATEBLUE&quot;&#xA;color_array(40,1)=&quot;#7B68EE&quot;&#xA;color_array(41,0)=&quot;#LAWNGREEN&quot;&#xA;color_array(41,1)=&quot;#7CFC00&quot;&#xA;color_array(42,0)=&quot;#CHARTREUSE&quot;&#xA;color_array(42,1)=&quot;#7FFF00&quot;&#xA;color_array(43,0)=&quot;#AQUAMARINE&quot;&#xA;color_array(43,1)=&quot;#7FFFD4&quot;&#xA;color_array(44,0)=&quot;#MAROON&quot;&#xA;color_array(44,1)=&quot;#800000&quot;&#xA;color_array(45,0)=&quot;#PURPLE&quot;&#xA;color_array(45,1)=&quot;#800080&quot;&#xA;color_array(46,0)=&quot;#OLIVE&quot;&#xA;color_array(46,1)=&quot;#808000&quot;&#xA;color_array(47,0)=&quot;#GREY&quot;&#xA;color_array(47,1)=&quot;#808080&quot;&#xA;color_array(48,0)=&quot;#SKYBLUE&quot;&#xA;color_array(48,1)=&quot;#87CEEB&quot;&#xA;color_array(49,0)=&quot;#LIGHTSKYBLUE&quot;&#xA;color_array(49,1)=&quot;#87CEFA&quot;&#xA;color_array(50,0)=&quot;#BLUEVIOLET&quot;&#xA;color_array(50,1)=&quot;#8A2BE2&quot;&#xA;color_array(51,0)=&quot;#DARKRED&quot;&#xA;color_array(51,1)=&quot;#8B0000&quot;&#xA;color_array(52,0)=&quot;#DARKMAGENTA&quot;&#xA;color_array(52,1)=&quot;#8B008B&quot;&#xA;color_array(53,0)=&quot;#SADDLEBROWN&quot;&#xA;color_array(53,1)=&quot;#8B4513&quot;&#xA;color_array(54,0)=&quot;#DARKSEAGREEN&quot;&#xA;color_array(54,1)=&quot;#8FBC8F&quot;&#xA;color_array(55,0)=&quot;#LIGHTGREEN&quot;&#xA;color_array(55,1)=&quot;#90EE90&quot;&#xA;color_array(56,0)=&quot;#MEDIUMPURPLE&quot;&#xA;color_array(56,1)=&quot;#9370DB&quot;&#xA;color_array(57,0)=&quot;#DARKVIOLET&quot;&#xA;color_array(57,1)=&quot;#9400D3&quot;&#xA;color_array(58,0)=&quot;#PALEGREEN&quot;&#xA;color_array(58,1)=&quot;#98FB98&quot;&#xA;color_array(59,0)=&quot;#DARKORCHID&quot;&#xA;color_array(59,1)=&quot;#9932CC&quot;&#xA;color_array(60,0)=&quot;#YELLOWGREEN&quot;&#xA;color_array(60,1)=&quot;#9ACD32&quot;&#xA;color_array(61,0)=&quot;#SIENNA&quot;&#xA;color_array(61,1)=&quot;#A0522D&quot;&#xA;color_array(62,0)=&quot;#BROWN&quot;&#xA;color_array(62,1)=&quot;#A52A2A&quot;&#xA;color_array(63,0)=&quot;#DARKGREY&quot;&#xA;color_array(63,1)=&quot;#A9A9A9&quot;&#xA;color_array(64,0)=&quot;#LIGHTBLUE&quot;&#xA;color_array(64,1)=&quot;#ADD8E6&quot;&#xA;color_array(65,0)=&quot;#GREENYELLOW&quot;&#xA;color_array(65,1)=&quot;#ADFF2F&quot;&#xA;color_array(66,0)=&quot;#PALETURQUOISE&quot;&#xA;color_array(66,1)=&quot;#AFEEEE&quot;&#xA;color_array(67,0)=&quot;#LIGHTSTEELBLUE&quot;&#xA;color_array(67,1)=&quot;#B0C4DE&quot;&#xA;color_array(68,0)=&quot;#POWDERBLUE&quot;&#xA;color_array(68,1)=&quot;#B0E0E6&quot;&#xA;color_array(69,0)=&quot;#FIREBRICK&quot;&#xA;color_array(69,1)=&quot;#B22222&quot;&#xA;color_array(70,0)=&quot;#DARKGOLDENROD&quot;&#xA;color_array(70,1)=&quot;#B8860B&quot;&#xA;color_array(71,0)=&quot;#MEDIUMORCHID&quot;&#xA;color_array(71,1)=&quot;#BA55D3&quot;&#xA;color_array(72,0)=&quot;#ROSYBROWN&quot;&#xA;color_array(72,1)=&quot;#BC8F8F&quot;&#xA;color_array(73,0)=&quot;#DARKKHAKI&quot;&#xA;color_array(73,1)=&quot;#BDB76B&quot;&#xA;color_array(74,0)=&quot;#SILVER&quot;&#xA;color_array(74,1)=&quot;#C0C0C0&quot;&#xA;color_array(75,0)=&quot;#MEDIUMVIOLETRED&quot;&#xA;color_array(75,1)=&quot;#C71585&quot;&#xA;color_array(76,0)=&quot;#INDIANRED &quot;&#xA;color_array(76,1)=&quot;#CD5C5C&quot;&#xA;color_array(77,0)=&quot;#PERU&quot;&#xA;color_array(77,1)=&quot;#CD853F&quot;&#xA;color_array(78,0)=&quot;#CHOCOLATE&quot;&#xA;color_array(78,1)=&quot;#D2691E&quot;&#xA;color_array(79,0)=&quot;#TAN&quot;&#xA;color_array(79,1)=&quot;#D2B48C&quot;&#xA;color_array(80,0)=&quot;#LIGHTGREY&quot;&#xA;color_array(80,1)=&quot;#D3D3D3&quot;&#xA;color_array(81,0)=&quot;#THISTLE&quot;&#xA;color_array(81,1)=&quot;#D8BFD8&quot;&#xA;color_array(82,0)=&quot;#ORCHID&quot;&#xA;color_array(82,1)=&quot;#DA70D6&quot;&#xA;color_array(83,0)=&quot;#GOLDENROD&quot;&#xA;color_array(83,1)=&quot;#DAA520&quot;&#xA;color_array(84,0)=&quot;#PALEVIOLETRED&quot;&#xA;color_array(84,1)=&quot;#DB7093&quot;&#xA;color_array(85,0)=&quot;#CRIMSON&quot;&#xA;color_array(85,1)=&quot;#DC143C&quot;&#xA;color_array(86,0)=&quot;#GAINSBORO&quot;&#xA;color_array(86,1)=&quot;#DCDCDC&quot;&#xA;color_array(87,0)=&quot;#PLUM&quot;&#xA;color_array(87,1)=&quot;#DDA0DD&quot;&#xA;color_array(88,0)=&quot;#BURLYWOOD&quot;&#xA;color_array(88,1)=&quot;#DEB887&quot;&#xA;color_array(89,0)=&quot;#LIGHTCYAN&quot;&#xA;color_array(89,1)=&quot;#E0FFFF&quot;&#xA;color_array(90,0)=&quot;#LAVENDER&quot;&#xA;color_array(90,1)=&quot;#E6E6FA&quot;&#xA;color_array(91,0)=&quot;#DARKSALMON&quot;&#xA;color_array(91,1)=&quot;#E9967A&quot;&#xA;color_array(92,0)=&quot;#VIOLET&quot;&#xA;color_array(92,1)=&quot;#EE82EE&quot;&#xA;color_array(93,0)=&quot;#PALEGOLDENROD&quot;&#xA;color_array(93,1)=&quot;#EEE8AA&quot;&#xA;color_array(94,0)=&quot;#LIGHTCORAL&quot;&#xA;color_array(94,1)=&quot;#F08080&quot;&#xA;color_array(95,0)=&quot;#KHAKI&quot;&#xA;color_array(95,1)=&quot;#F0E68C&quot;&#xA;color_array(96,0)=&quot;#ALICEBLUE&quot;&#xA;color_array(96,1)=&quot;#F0F8FF&quot;&#xA;color_array(97,0)=&quot;#HONEYDEW&quot;&#xA;color_array(97,1)=&quot;#F0FFF0&quot;&#xA;color_array(98,0)=&quot;#AZURE&quot;&#xA;color_array(98,1)=&quot;#F0FFFF&quot;&#xA;color_array(99,0)=&quot;#SANDYBROWN&quot;&#xA;color_array(99,1)=&quot;#F4A460&quot;&#xA;color_array(100,0)=&quot;#WHEAT&quot;&#xA;color_array(100,1)=&quot;#F5DEB3&quot;&#xA;color_array(101,0)=&quot;#BEIGE&quot;&#xA;color_array(101,1)=&quot;#F5F5DC&quot;&#xA;color_array(102,0)=&quot;#WHITESMOKE&quot;&#xA;color_array(102,1)=&quot;#F5F5F5&quot;&#xA;color_array(103,0)=&quot;#MINTCREAM&quot;&#xA;color_array(103,1)=&quot;#F5FFFA&quot;&#xA;color_array(104,0)=&quot;#GHOSTWHITE&quot;&#xA;color_array(104,1)=&quot;#F8F8FF&quot;&#xA;color_array(105,0)=&quot;#SALMON&quot;&#xA;color_array(105,1)=&quot;#FA8072&quot;&#xA;color_array(106,0)=&quot;#ANTIQUEWHITE&quot;&#xA;color_array(106,1)=&quot;#FAEBD7&quot;&#xA;color_array(107,0)=&quot;#LINEN&quot;&#xA;color_array(107,1)=&quot;#FAF0E6&quot;&#xA;color_array(108,0)=&quot;#LIGHTGOLDENRODYELLOW&quot;&#xA;color_array(108,1)=&quot;#FAFAD2&quot;&#xA;color_array(109,0)=&quot;#OLDLACE&quot;&#xA;color_array(109,1)=&quot;#FDF5E6&quot;&#xA;color_array(110,0)=&quot;#RED&quot;&#xA;color_array(110,1)=&quot;#FF0000&quot;&#xA;color_array(111,0)=&quot;#FUCHSIA&quot;&#xA;color_array(111,1)=&quot;#FF00FF&quot;&#xA;color_array(112,0)=&quot;#MAGENTA&quot;&#xA;color_array(112,1)=&quot;#FF00FF&quot;&#xA;color_array(113,0)=&quot;#DEEPPINK&quot;&#xA;color_array(113,1)=&quot;#FF1493&quot;&#xA;color_array(114,0)=&quot;#ORANGERED&quot;&#xA;color_array(114,1)=&quot;#FF4500&quot;&#xA;color_array(115,0)=&quot;#TOMATO&quot;&#xA;color_array(115,1)=&quot;#FF6347&quot;&#xA;color_array(116,0)=&quot;#HOTPINK&quot;&#xA;color_array(116,1)=&quot;#FF69B4&quot;&#xA;color_array(117,0)=&quot;#CORAL&quot;&#xA;color_array(117,1)=&quot;#FF7F50&quot;&#xA;color_array(118,0)=&quot;#DARKORANGE&quot;&#xA;color_array(118,1)=&quot;#FF8C00&quot;&#xA;color_array(119,0)=&quot;#LIGHTSALMON&quot;&#xA;color_array(119,1)=&quot;#FFA07A&quot;&#xA;color_array(120,0)=&quot;#ORANGE&quot;&#xA;color_array(120,1)=&quot;#FFA500&quot;&#xA;color_array(121,0)=&quot;#LIGHTPINK&quot;&#xA;color_array(121,1)=&quot;#FFB6C1&quot;&#xA;color_array(122,0)=&quot;#PINK&quot;&#xA;color_array(122,1)=&quot;#FFC0CB&quot;&#xA;color_array(123,0)=&quot;#GOLD&quot;&#xA;color_array(123,1)=&quot;#FFD700&quot;&#xA;color_array(124,0)=&quot;#PEACHPUFF&quot;&#xA;color_array(124,1)=&quot;#FFDAB9&quot;&#xA;color_array(125,0)=&quot;#NAVAJOWHITE&quot;&#xA;color_array(125,1)=&quot;#FFDEAD&quot;&#xA;color_array(126,0)=&quot;#MOCCASIN&quot;&#xA;color_array(126,1)=&quot;#FFE4B5&quot;&#xA;color_array(127,0)=&quot;#BISQUE&quot;&#xA;color_array(127,1)=&quot;#FFE4C4&quot;&#xA;color_array(128,0)=&quot;#MISTYROSE&quot;&#xA;color_array(128,1)=&quot;#FFE4E1&quot;&#xA;color_array(129,0)=&quot;#BLANCHEDALMOND&quot;&#xA;color_array(129,1)=&quot;#FFEBCD&quot;&#xA;color_array(130,0)=&quot;#PAPAYAWHIP&quot;&#xA;color_array(130,1)=&quot;#FFEFD5&quot;&#xA;color_array(131,0)=&quot;#LAVENDERBLUSH&quot;&#xA;color_array(131,1)=&quot;#FFF0F5&quot;&#xA;color_array(132,0)=&quot;#SEASHELL&quot;&#xA;color_array(132,1)=&quot;#FFF5EE&quot;&#xA;color_array(133,0)=&quot;#CORNSILK&quot;&#xA;color_array(133,1)=&quot;#FFF8DC&quot;&#xA;color_array(134,0)=&quot;#LEMONCHIFFON&quot;&#xA;color_array(134,1)=&quot;#FFFACD&quot;&#xA;color_array(135,0)=&quot;#FLORALWHITE&quot;&#xA;color_array(135,1)=&quot;#FFFAF0&quot;&#xA;color_array(136,0)=&quot;#SNOW&quot;&#xA;color_array(136,1)=&quot;#FFFAFA&quot;&#xA;color_array(137,0)=&quot;#YELLOW&quot;&#xA;color_array(137,1)=&quot;#FFFF00&quot;&#xA;color_array(138,0)=&quot;#LIGHTYELLOW&quot;&#xA;color_array(138,1)=&quot;#FFFFE0&quot;&#xA;color_array(139,0)=&quot;#IVORY&quot;&#xA;color_array(139,1)=&quot;#FFFFF0&quot;&#xA;color_array(140,0)=&quot;#WHITE&quot;&#xA;color_array(140,1)=&quot;#FFFFFF&quot;&#xA;color_array(141,0)=&quot;#DARKSLATEGRAY&quot;&#xA;color_array(141,1)=&quot;#2F4F4F&quot;&#xA;color_array(142,0)=&quot;#DIMGRAY&quot;&#xA;color_array(142,1)=&quot;#696969&quot;&#xA;color_array(143,0)=&quot;#SLATEGRAY&quot;&#xA;color_array(143,1)=&quot;#708090&quot;&#xA;color_array(144,0)=&quot;#LIGHTSLATEGRAY&quot;&#xA;color_array(144,1)=&quot;#778899&quot;&#xA;color_array(145,0)=&quot;#GRAY&quot;&#xA;color_array(145,1)=&quot;#808080&quot;&#xA;color_array(146,0)=&quot;#DARKGRAY&quot;&#xA;color_array(146,1)=&quot;#A9A9A9&quot;&#xA;color_array(147,0)=&quot;#LIGHTGRAY&quot;&#xA;color_array(147,1)=&quot;#D3D3D3&quot;&#xA;color_array(148,0)=&quot;#DARKSLATEGRAY&quot;&#xA;color_array(148,1)=&quot;#2F4F4F&quot;&#xA;color_array(149,0)=&quot;#APPLICATION&quot;&#xA;color_array(149,1)=&quot;#ADD8E7&quot;&#xA;color_array(150,0)=&quot;#IMPLEMENTATION&quot;&#xA;color_array(150,1)=&quot;#FFC0CC&quot;&#xA;color_array(151,0)=&quot;#MOTIVATION&quot;&#xA;color_array(151,1)=&quot;#9370DC&quot;&#xA;color_array(152,0)=&quot;#MOTIVATION&quot;&#xA;color_array(152,1)=&quot;#9370DC&quot;&#xA;color_array(153,0)=&quot;#PYSICAL&quot;&#xA;color_array(153,1)=&quot;#98FB99&quot;&#xA;color_array(154,0)=&quot;#TECHNOLOGY&quot;&#xA;color_array(154,1)=&quot;#90EE91&quot;&#xA;&#xA;function ColorHexByName (colorName) &#xA;dim i&#xA;&#x9;'Session.Output( &quot;ColorName=&quot; &amp; colorName)&#xA;&#x9;ColorHexByName=&quot;&quot;&#xA;&#x9;for i = 0 to Ubound(color_array)&#xA;&#x9;&#x9;if color_array(i,0) = colorName then&#xA;&#x9;&#x9;&#x9;ColorHexByName = color_array(i,1)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot;ColorHex(&quot; &amp; i &amp; &quot;) =&quot; &amp; ColorHexByName)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;end function&#xA;&#xA;function ColorNameByHex (colorHex) &#xA;dim i&#xA;&#x9;ColorNameByHex=&quot;&quot;&#xA;&#x9;'Session.Output( &quot;ColorHex=&quot; &amp; colorHex)&#xA;&#x9;&#xA;&#x9;for i = 0 to Ubound(color_array)&#xA;&#x9;&#x9;if color_array(i,1) = colorHex then&#xA;&#x9;&#x9;&#x9;ColorNameByHex = color_array(i,0)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot;ColorName(&quot; &amp; i &amp; &quot;) =&quot; &amp; ColorNameByHex)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="342"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Common"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="343"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D6B08FFF-374C-40a1-84E5-6D8FCB6BE873}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-UseCase-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create UseCase PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a usecase PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;sub CreateUseCasePlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Use Case PlantUML script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="344"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{27DF1F2A-2F2B-47f0-87F9-9EE02ED11DF4}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Activity-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Activity PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a activity PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;sub CreateActivityPlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Activity PlantUML script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="345"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Diagram DAF M2M"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="346"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{57478F50-1F14-4930-8D81-41A0169B743B}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Common.Print-Array&#xA;!INC Common.Sort-Array&#xA;!INC Common.color-picker&#xA;!INC EAScriptLib.VBScript-Logging&#xA;!INC PlantUML.Create-Activity-PlantUML&#xA;!INC PlantUML.Create-Class-PlantUML&#xA;!INC PlantUML.Create-Component-PlantUML&#xA;!INC PlantUML.Create-Deployment-PlantUML&#xA;!INC PlantUML.Create-Sequence-PlantUML&#xA;!INC PlantUML.Create-UseCase-PlantUML&#xA;!INC PlantUML.Create-C4-PlantUML&#xA;&#xA;'LOGLEVEL=LOGLEVEL_ERROR&#xA;'LOGLEVEL=LOGLEVEL_INFO&#xA;'LOGLEVEL=LOGLEVEL_WARNING&#xA;'LOGLEVEL=LOGLEVEL_DEBUG&#xA;LOGLEVEL=LOGLEVEL_TRACE&#xA;&#xA;'&#xA;' Script Name: Create PlantUML Script&#xA;' Author: David Anderson&#xA;' Purpose: Wrapper script to appear in the Diagram Scripting group  &#xA;' &#x9;&#x9;   responsible for directing to the relevant script by diagram type.  &#xA;' Date: 11-March-2019&#xA;'&#xA;' Change Log:&#xA;' 18-Sept-2022:&#x9;&#x9;Add C4 Diagram support&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;Dim selectedObject as EA.DiagramObject&#xA;Dim theSelectedElement as EA.Element&#xA;&#xA;dim element_array (99,12)&#xA;dim relationship_array (99,4)&#xA;dim e&#x9;&#x9;&#x9;&#x9;'index for element_array&#xA;dim r&#x9;&#x9;&#x9;&#x9;'index for relationship_array&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Generate PlantUML script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;if not theSelectedElement is nothing _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;select case currentDiagram.Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Activity&quot;&#x9;&#x9;call CreateActivityPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Logical&quot;&#x9;&#x9;call CreateClassPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Component&quot;&#x9;call CreateComponentPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Deployment&quot;&#x9;call CreateDeploymentPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;call CreateSequencePlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Use Case&quot;&#x9;&#x9;call CreateUseCasePlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;call LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Done&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="347"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7A8B0B88-F523-41b2-BACB-8B878BA90E1E}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Logging&#xA;&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;LOGLEVEL=1&#x9;&#x9;'INFO&#xA;'LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: ImportPlantUMLScript&#xA;' Author: David Anderson&#xA;' Purpose: Populate a Note element using the contenst of a selected PlantUML file&#xA;' Date: 25-Mar-2019&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Import PlantUML script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;'check a note element is selected&#xA;&#x9;&#x9;if not theSelectedElement is nothing _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;dim OF_FILEMUSTEXIST&#xA;&#x9;&#x9;&#x9;OF_FILEMUSTEXIST = &amp;H1000&#xA;&#x9;&#x9;&#x9;dim PlantUMLfn&#xA;&#x9;&#x9;&#x9;PlantUMLfn = Repository.InvokeFileDialog(&quot;PlantUML|*.pu;*puml&quot;,1,OF_FILEMUSTEXIST)&#xA;&#x9;&#x9;&#x9;If PlantUMLfn = &quot;&quot; Then &#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo(&quot;File not selected&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;stop&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo (&quot;PlantUML Script file selected: &quot; &amp; PlantUMLfn )&#xA;&#x9;&#x9;&#x9;&#x9;Dim fileSystemObject&#xA;&#x9;&#x9;&#x9;&#x9;dim inputFile&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;&quot;&quot;&quot; &amp; PlantUMLfn &amp; &quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;' Define Global File IO Objects&#xA;&#x9;&#x9;&#x9;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.GetFile(PlantUMLfn)&#xA;&#x9;&#x9;&#x9;&#x9;dim strRow&#xA;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.OpenTextFile(PlantUMLfn)&#xA;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Notes=&quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;do until inputFile.AtEndOfStream&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strRow = inputFile.readline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug(strRow)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if theSelectedElement.Notes=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Notes = strRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Notes = theSelectedElement.Notes &amp; vbcrlf &amp; strRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;&#x9;inputFile.Close&#xA;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Update&#xA;&#x9;&#x9;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected for storing the PlantUML script&quot; , promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected for storing the PlantUML script&quot; , promptOK&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="348"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7B67F573-3824-4f02-9E58-CC5BD70E6ABE}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-UseCase-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create UseCase Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a usecase diagram&#xA;' Date: 29-Mar-2019&#xA;'&#xA;sub CreateUseCaseDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Use Case Diagram script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="349"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{15E72C24-4AE9-44c6-B7FB-9546668521F5}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Component-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Component PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a component PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;sub CreateComponentPlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Component PlantUML Script activated &quot; &amp; currentDiagram.Stereotype)&#xA;&#x9;if Left(currentDiagram.Stereotype,2) = &quot;C4&quot; then&#xA;&#x9;&#x9;CreateC4PlantUML ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;call LOGInfo ( &quot;Create Component PlantUML Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="350"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{87F8A774-2C06-4d9c-A62E-FF8BAEA62D35}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Sequence-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Sequence Diagram &#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to be used to build a Sequence Diagram  &#xA;' Date: 11-Feb-2019&#xA;'-----------------------------------------&#xA;' Modifcation Log&#xA;' 30-Mar-2019:&#x9;add logic to support the following&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- \n for long names&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- title&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- dividers (==)&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- non decalred participants&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- non space delimitered sequences &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- notes left/right and over&#xA;' 12-Sep-2022:  fix parsing logic for -&gt;&gt; and &lt;&lt;-&#xA;' 17-Sep-2022:  fix parsing logic for --&gt; and &lt;--&#xA;'&#x9;&#x9;&#x9;&#x9;trim plantuml line to fix parsing (thanks Takashi-K-TakaTech)&#xA;'&#x9;&#x9;&#x9;&#x9;fix when resolving isReturn&#xA;'&#x9;&#x9;&#x9;&#x9;handle resizing of multiple boxes&#xA;'&#x9;&#x9;&#x9;&#x9;ignore CREATE, DESTROY, ... (thanks mcagnion)&#xA;'&#x9;&#x9;&#x9;&#x9;Unnamed groups are now handled&#xA;'&#x9;&#x9;&#x9;&#x9;improve note layout processing&#xA;'&#xA;' 15-Sep-2022:&#x9;Refactor to support C4 Diargams&#xA;'&#xA;dim timeline_array (99,7)&#x9;&#x9;&#x9;'store timeline elements &#xA;dim sequence_array (99,7)&#x9;&#x9;&#x9;'store interations&#xA;dim t&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'timeline array index&#xA;dim s&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'sequence array index&#xA;dim fragment_level&#x9;&#x9;&#x9;&#x9;&#x9;'fragment level indicator&#xA;dim partition_level&#x9;&#x9;&#x9;&#x9;&#x9;'partition level within a fragment&#xA;dim left&#xA;dim multiline_note&#x9;&#x9;&#x9;&#x9;&#x9;'multi note line indicator is currently being processed and thefore will not hsv&#xA;dim note&#xA;dim noteName&#xA;dim n&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'count of note lines&#xA;dim autonumber&#xA;'dim startNumber&#xA;'dim increment&#xA;&#xA;sub CreateSequenceDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Sequence Diagram script activated&quot;)&#xA;&#xA;&#x9;dim PlantUML&#xA;&#x9;dim word&#xA;&#xA;&#x9;'check current diagram.. if nothing.. then this script has not been called properly&#xA;&#x9;&#xA;&#x9;'the following check is not really required..&#xA;&#x9;if not theSelectedElement is nothing _&#xA;&#x9;and theSelectedElement.ObjectType = otElement _&#xA;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;'split note..&#xA;&#x9;&#x9;'call LOGDebug( &quot;PlantUML&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;left=30&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set initial &#xA;&#x9;&#x9;fragment_level=0&#xA;&#x9;&#x9;PlantUML = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;&#x9;for i = 0 to Ubound(PlantUML)&#xA;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Processing #&quot; &amp; i &amp; &quot; :&quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;PlantUML(i) = Trim(PlantUML(i))&#xA;&#x9;&#x9;&#x9;if not PlantUML(i) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;if not Asc(PlantUML(i)) = 39  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if multiline_note = True then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;process_note(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'process note&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;word=split(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case ucase(word(0))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;AUTONUMBER&quot;&#x9;autonumber = True&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;TITLE&quot;&#x9;&#x9;create_title(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'timeline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;PARTICIPANT&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTROL&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ENTITY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COLLECTIONS&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DATABASE&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'fragments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;END&quot; &#x9;&#x9;&#x9;resize_diagramObject(PlantUML(i))&#x9;&#x9;&#x9;'box or a partition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ALT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;OPT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BREAK&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LOOP&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CRITICAL&quot; &#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9; &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;==&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9; &#x9;'add divider as seq fragment&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ELSE&quot; &#x9;&#x9;add_partition(PlantUML(i)) &#x9;&#x9;&#x9;&#x9;&#x9;'add partition to fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NOTE&quot;&#x9;&#x9;&#x9;process_note(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#x9;'process note&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@STARTUML&quot; &#x9;'LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;AUTOACTIVATE&quot;&#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTIVATE&quot; &#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DEACTIVATE&quot; &#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CREATE&quot; &#x9;&#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DESTROY&quot; &#x9;&#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@ENDUML&quot; &#x9;&#x9;'call LOGDebug ( &quot;skip: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'sequence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;create_sequence(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'replace with a regex expression to make sure script line is indeed a sequence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;call LOGDebug( &quot;**Timeline Array**&quot; )&#xA;&#x9;&#x9;Call PrintArray (timeline_array,0,t-1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;call layout_objects()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set relative coordinates of sequeuces &amp; fragments&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;call LOGDebug( &quot;**Layout Array**&quot; )&#xA;&#x9;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;call LOGInfo ( &quot;Create Sequence Diagram Script Complete&quot; )&#xA;&#x9;else&#xA;&#x9;&#x9;call LOGError(&quot;problem calling the sub routine&quot;)&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub create_title(PlantUML)&#xA;dim strTitle&#xA;dim diagram as EA.Diagram&#xA;&#xA;&#x9;call LOGTrace(&quot;create_title(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;'set the diagram.name using title&#xA;&#x9;&#x9;&#xA;&#x9;strTitle = right(PlantUML, len(PlantUML)-5)&#xA;&#x9;'remove quotes&#xA;&#x9;strTitle = replace(strTitle, Chr(34), &quot; &quot;)&#xA;&#xA;&#x9;'handle \n&#xA;&#x9;strTitle = trim(replace(strTitle, &quot;\n&quot;, &quot; &quot;))&#xA;&#x9;&#xA;&#x9;set diagram = currentDiagram&#xA;&#x9;diagram.name = strTitle&#xA;&#x9;diagram.update&#xA;&#xA;&#x9;call LOGInfo( &quot;Set Diagram Name to: &quot; &amp; diagram.Name )&#xA;&#xA;end sub&#xA;&#xA;sub create_timeline(PlantUML)&#xA;dim i&#xA;dim word&#xA;dim sql&#xA;dim elementName&#xA;dim elementType&#xA;dim elementStereotype&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim width&#xA;dim diagramObjectName&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;'LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=3&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;create_timeline(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;word=split(PlantUML)&#xA;&#x9;select case Ucase(word(0))&#xA;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;elementType = &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;elementType = &quot;Actor&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;DATABASE&quot; &#x9;elementType = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;database&quot;&#xA;&#x9;&#x9;case &quot;BOUNDARY&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;boundary&quot;&#xA;&#x9;&#x9;case &quot;CONTROL&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;control&quot;&#xA;&#x9;&#x9;case &quot;ENTITY&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;entity&quot;&#xA;&#x9;&#x9;case &quot;COLLECTIONS&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;collections&quot;&#xA;&#x9;&#x9;case else&#x9;&#x9;&#x9;elementType = &quot;Sequence&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = getStereotype(Plantuml)&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;'call LOGDebug( &quot;word(1): &quot; &amp; word(1) &amp; &quot; of: &quot; &amp; ubound(word) )&#xA;&#x9;if Asc(word(1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;if Asc(right(word(1), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;elementName = mid(word(1),2,len(word(1))-2)&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;elementName = mid(word(1),2)&#xA;&#x9;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;&#x9;for i = 2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;elementName = word(1)&#xA;&#x9;end if&#xA;&#x9;'replace \n with a space&#xA;&#x9;elementName = replace(elementName, &quot;\n&quot;, &quot; &quot;)&#xA;&#xA;&#x9;sql =&quot;SELECT Object_ID FROM t_object WHERE t_object.Name =&quot; &amp; chr(34) &amp; elementName &amp; chr(34) &amp; &quot; and t_object.Object_Type = &quot; &amp; chr(34) &amp; elementType &amp; chr(34)&#xA;&#x9;'call LOGDebug ( &quot;sql: &quot; &amp; sql)&#xA;&#xA;&#x9;set elements=Repository.GetElementSet(sql,2)&#xA;&#x9;'call LOGDebug (&quot;elements returned: &quot; &amp; elements.Count)&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;'add element&#xA;&#x9;&#x9;set elements = currentPackage.Elements&#xA;&#x9;&#x9;set element = elements.AddNew( elementName, elementType )&#xA;&#x9;&#x9;element.Stereotype = elementStereotype&#xA;&#x9;&#x9;if instr(Ucase(PlantUML),&quot; AS &quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;element.Alias = elementAlias(PlantUML)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;dim borderStyle&#xA;&#x9;&#x9;&#x9;set borderStyle = element.Properties(&quot;BorderStyle&quot;)&#xA;&#x9;&#x9;&#x9;borderStyle.value = &quot;Solid&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;currentPackage.elements.Refresh&#xA;&#x9;&#x9;call LOGInfo( &quot;Added Element: &quot; &amp; element.Name &amp; &quot; (ID=&quot; &amp; element.ElementID &amp; &quot;) in package &quot; &amp; currentPackage.Name )&#xA;&#x9;else&#xA;&#x9;&#x9;set element = Repository.GetElementByID(elements.GetAt(0).ElementID)&#xA;&#x9;end if&#xA;&#xA;&#x9;&#xA;&#x9;if elementType=&quot;Boundary&quot; then&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=28;b=-278&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=50;b=-250&quot;&#xA;&#x9;end if &#xA;&#x9;left=left+width+45&#xA;&#x9;set DiagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, elementType)&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;'default color&#xA;&#x9;if instr(PlantUML,&quot;#&quot;) &gt; 0 then&#xA;&#x9;&#x9;diagramObject.BackgroundColor = getColor(PlantUML)&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagramObjects.Refresh&#xA;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#xA;'add to timeline_array&#xA;&#x9;timeline_array (t,0) = element.ElementID&#xA;&#x9;timeline_array (t,1) = diagramObject.InstanceID&#xA;&#x9;timeline_array (t,2) = element.Name&#xA;&#x9;timeline_array (t,3) = element.Alias&#xA;&#x9;timeline_array (t,4) = Ucase(word(0)) 'PlantUML participant&#xA;&#x9;timeline_array (t,5) = diagramObject.left&#xA;&#x9;timeline_array (t,6) = diagramObject.right&#xA;&#x9;t=t+1&#xA;&#x9;call LOGTrace(&quot;create_timeline&quot;)&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;&#xA;'&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;&#xA;&#xA;end sub&#xA;&#xA;sub resize_diagramObject(script)&#xA;dim i&#xA;dim diagramObject as EA.DiagramObject&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#xA;&#x9;if ucase(script) = &quot;END BOX&quot; then&#xA;&#x9;&#x9;'find box in the timeline_array&#xA;&#x9;&#x9;for i = t to 0 step -1&#xA;&#x9;&#x9;&#x9;if timeline_array (i,4) = &quot;BOX&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.right = left&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left=left+15&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add fragment end to layout array&#xA;&#x9;&#x9;layout_array (l,0) = fragment_level&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;layout_array (l,1) = &quot;End&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;&#x9;'layout_array (l,2) = &quot;&quot;&#x9;&#x9;&#x9;'id of the connector&#xA;&#x9;&#x9;l=l+1&#xA;&#x9;&#x9;fragment_level = fragment_level-1&#xA;&#x9;end if&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject&quot;)&#xA;&#xA;end sub&#xA;&#xA;sub create_sequence(script)&#xA;dim parsedScript&#xA;dim word&#xA;dim i&#xA;dim j&#xA;dim r&#xA;dim color&#xA;dim script_head&#xA;dim script_tail&#xA;dim script_return&#xA;dim script_source&#xA;dim script_target&#xA;dim element as EA.Element &#xA;dim connector as EA.Connector&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=5&#x9;&#xA;&#xA;&#x9;call LOGTrace( &quot;create sequence(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;&#xA;&#x9;'parse for color&#xA;&#x9;i=instr(script,&quot;[&quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;color = getColor(script)&#xA;&#x9;&#x9;j=instr(script,&quot;]&quot;)&#xA;&#x9;&#x9;'remove [#] from script&#xA;&#x9;&#x9;'call LOGDebug(&quot;[= &quot; &amp; i &amp; &quot; ]=&quot; &amp; j)&#xA;&#x9;&#x9;script_head=Mid(script,1,i-1)&#xA;&#x9;&#x9;script_tail=Mid(script,j+1)&#x9;&#x9;&#xA;&#x9;&#x9;script = script_head &amp; script_tail&#xA;&#x9;&#x9;'call LOGDebug( &quot;remove color(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'parse to ensure sufficient delimiters to support processing&#xA;&#x9;if instr(script,&quot;--&amp;gt;&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;LOGWarning ( &quot;--&gt;&gt; is invalid.. converting to -&gt;&gt;&quot;)&#x9; &#xA;&#x9;&#x9;script = replace(script, &quot;--&amp;gt;&amp;gt;&quot;, &quot; -&amp;gt;&amp;gt; &quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(script,&quot;-&amp;gt;&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;script = replace(script, &quot;-&amp;gt;&amp;gt;&quot;, &quot; -&amp;gt;&amp;gt; &quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if instr(script,&quot;-&amp;gt; &amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;-&amp;gt; &amp;gt;&quot;, &quot; -&amp;gt;&amp;gt; &quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(script,&quot;--&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;--&amp;gt;&quot;, &quot; --&amp;gt; &quot;)&#xA;&#x9;&#x9;&#x9;&#x9;else&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if instr(script,&quot;-&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;-&amp;gt;&quot;, &quot; -&amp;gt; &quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if instr(script,&quot;&amp;lt;&amp;lt;-&quot;) &gt; 0 then&#xA;&#x9;&#x9;script = replace(script, &quot;&amp;lt;&amp;lt;-&quot;, &quot; &amp;lt;&amp;lt;- &quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(script,&quot;&amp;lt; &amp;lt;-&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;script = replace(script, &quot;&amp;lt; &amp;lt;-&quot;, &quot; &amp;lt;&amp;lt;- &quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if instr(script,&quot;&amp;lt;--&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;&amp;lt;--&quot;, &quot; &amp;lt;-- &quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(script,&quot;&amp;lt;-&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;&amp;lt;-&quot;, &quot; &amp;lt;- &quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;script = replace(script, &quot;++&quot;, &quot;&quot;)&#xA;&#x9;script = replace(script, &quot;--:&quot;, &quot;:&quot;)&#xA;&#x9;script = replace(script, &quot;--: &quot;, &quot;:&quot;)&#xA;&#x9;&#xA;&#xA;&#x9;script = replace(script, &quot;:&quot;, &quot; : &quot;)&#xA;&#x9;script = replace(script, &quot;  &quot;, &quot; &quot;)&#xA;&#x9;call LOGTrace( &quot;parsedScript: &quot; &amp; script)&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;&#xA;&#x9;if ucase(word(0)) = &quot;RETURN&quot; then&#xA;&#x9;&#x9;'resolve source and target timelines &#xA;&#x9;&#x9;if s &gt; 0 then&#xA;&#x9;&#x9;&#x9;script_source = timeline_array (timelineIndexById(sequence_array (s-1,2)),2) &#x9;'resolve source using the target element in the prior sequence&#xA;&#x9;&#x9;&#x9;script_target = resolveTarget(sequence_array (s-1,2))&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'resolve target using the target element from the prior sequence&#xA;&#x9;&#x9;&#x9;script_return = script_source &amp; &quot; --&gt; &quot; &amp; script_target &amp; &quot; : &quot;&#x9;&#x9;&#x9;&#x9;&#x9;'return in plantuml do not appear to have :&#xA;&#x9;&#x9;&#x9;script = replace(script, word(0), script_return)&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;return script updated to(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;word=split(script)&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;call LOGWarning(script &amp; &quot;:no where to return&quot;)&#xA;&#x9;&#x9;&#x9;exit sub&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'skip unresolved return&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'add to sequence array&#xA;&#x9;'call LOGDebug( &quot;word count(&quot; &amp; ubound(word)+1 &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug( &quot;word1(&quot; &amp; word(1) &amp; &quot;)&quot;)&#xA;&#x9;'check direction of the sequence&#xA;&#x9;if instr(word(1), &quot;&amp;lt;&quot;) = 0 then&#xA;&#x9;&#x9;sequence_array (s,0) = timelineElementID(word(0))&#x9;'source elementID&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,1) = word(1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'interaction type&#xA;&#x9;&#x9;sequence_array (s,2) = timelineElementID(word(2))&#x9;'target elementID&#xA;&#x9;else&#xA;&#x9;&#x9;sequence_array (s,2) = timelineElementID(word(0))&#x9;'source elementID&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,1) = word(1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'interaction type&#xA;&#x9;&#x9;sequence_array (s,0) = timelineElementID(word(2))&#x9;'target elementID&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'create connector&#xA;&#x9;set element = Repository.GetElementByID (sequence_array (s,0))&#xA;&#x9;set connector = element.Connectors.AddNew(&quot;&quot;,&quot;Sequence&quot;)&#xA;&#x9;&#xA;&#x9;connector.SupplierID = sequence_array (s,2)&#xA;&#x9;connector.SequenceNo = (s+1)*10&#xA;&#x9;if autonumber = True then&#xA;&#x9;&#x9;connector.Name = s+1 &amp; &quot;. &quot; &amp; connectorName(script)&#xA;&#x9;else&#xA;&#x9;&#x9;connector.Name = connectorName(script)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'Check lifecycle&#xA;&#x9;if instr(script, &quot;**&quot;) &gt; 0 then&#xA;&#x9;&#x9;connector.Subtype=&quot;New&quot;&#xA;&#x9;end if&#xA;&#x9;if instr(script, &quot;!!&quot;) &gt; 0 then&#xA;&#x9;&#x9;connector.Subtype=&quot;Delete&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;connector.DiagramID = currentDiagram.DiagramID&#xA;&#x9;connector.Color = color&#xA;&#xA;&#x9;sequence_array (s,3) = connector.Name&#xA;&#x9;sequence_array (s,4) = synch(word(1))&#xA;&#x9;sequence_array (s,5) = signature(script)&#xA;&#x9;sequence_array (s,6) = isReturn(word(1))&#xA;&#x9;sequence_array (s,7) = connector.ConnectorID&#xA;&#x9;&#xA;&#x9;connector.Update&#xA;&#x9;element.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;dim sql&#xA;&#x9;sql =&quot;UPDATE t_connector SET PData1 = '&quot; &amp; sequence_array (s,4) &amp; &quot;', PData2 = '&quot; &amp; sequence_array (s,5)  &amp; &quot;', PData4 = '&quot; &amp; sequence_array (s,6) &amp; &quot;' WHERE Connector_Id = &quot; &amp; connector.ConnectorID &amp; &quot;;&quot;&#xA;&#x9;'call LOGDebug ( &quot;SQL: &quot; &amp; sql)&#xA;&#x9;&#xA;&#x9;Repository.Execute(sql)&#xA;&#x9;set connector = Repository.GetConnectorByID(connector.ConnectorID)&#x9;&#xA;&#x9;element.Update&#xA;&#x9;'call LOGDebug (&quot;+created connector (&quot; &amp; connector.ConnectorID &amp; &quot;)&quot; &amp; vbcrlf &amp; _&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;vbtab &amp; vbtab &amp; vbtab &amp; &quot; synch: &quot; &amp; connector.MiscData(0) )&#xA;&#x9;&#xA;&#x9;'add sequence to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#xA;&#x9;if connector.ClientID = connector.SupplierID then&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence2Self&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;end if&#xA;&#x9;layout_array (l,2) = connector.ConnectorID&#x9;'id of the connector&#xA;&#x9;l=l+1&#xA;&#x9;s=s+1&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;sub create_fragment(script)&#xA;&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramObjectName&#xA;dim i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' position of space character&#xA;dim fragmentName&#xA;dim fragmentType&#xA;&#xA;&#x9;'create element&#xA;&#x9;i = instr(script, &quot; &quot;) 'postion to 1st char after key word&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;fragmentType = mid(script,1, i-1)&#xA;&#x9;&#x9;fragmentName = mid(script, i+1)&#xA;&#x9;else&#xA;&#x9;&#x9;fragmentType = script&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'remove trialing == of divider&#xA;&#x9;fragmentName = replace(fragmentName, &quot;==&quot;, &quot;&quot;)&#xA;&#x9;fragmentName = trim(fragmentName)&#xA;&#x9;set elements = currentPackage.Elements&#xA;&#x9;set element = elements.AddNew( fragmentName, &quot;InteractionFragment&quot; )&#xA;&#x9;'handle when name is not supplied eg loop&#xA;&#xA;&#x9;element.Subtype = fragment_type(fragmentType)&#xA;&#x9;element.Update&#xA;&#x9;elements.Refresh&#xA;&#x9;call LOGInfo( &quot;added fragment: &quot; &amp; fragmentName &amp; &quot; (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#x9;&#xA;&#x9;'Do not increment fragment level if divider (==) as it will always be top level&#xA;&#x9;if element.Subtype = 9 then&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Divider&quot;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;else&#xA;&#x9;&#x9;fragment_level=fragment_level+1&#x9;&#xA;&#x9;&#x9;layout_array (l,1) = &quot;InteractionFragment&quot;&#x9;'type of object ie seq, Fragment&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'add fragment to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub add_partition(script)&#xA;dim element as EA.Element&#xA;dim elementId&#xA;dim diagramObject as EA.DiagramObject&#xA;dim partitions as EA.Collection&#xA;dim partition as EA._Partition&#xA;dim partitionName&#xA;dim i&#xA;&#x9;i = instr(script, &quot; &quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;partitionName = mid(script, i+1)&#xA;&#x9;end if&#xA;&#xA;&#x9;'get fragment element using the id stored in the layout array&#xA;&#x9;for i = l to 0 step-1&#xA;&#x9;&#x9;if layout_array (i,1) = &quot;InteractionFragment&quot; then&#xA;&#x9;&#x9;&#x9;elementId = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'&#xA;&#x9;set element = Repository.GetElementByID(elementId)&#xA;&#x9;set partitions = element.Partitions&#xA;&#x9;set partition = partitions.AddNew(partitionName,&quot;Partition&quot;)&#xA;&#x9;partition.Size=40&#x9;&#x9;'default&#xA;&#x9;element.Update&#xA;&#x9;currentPackage.elements.Refresh&#xA;&#x9;call LOGInfo( &quot;add partition: &quot; &amp; partitionName &amp; &quot; to Fragment (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#xA;&#x9;'add partition to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;Partition&quot;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub process_note(script)&#xA;dim i&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=4&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;process_note (&quot; &amp; script &amp; &quot;)&quot;) &#xA;&#xA;&#x9;if ucase(script) = &quot;END NOTE&quot; then&#xA;&#x9;&#x9;'add note element&#xA;&#x9;&#x9;call add_note()&#xA;&#x9;&#x9;multiline_note = False&#x9;'switch off multi line note indictor&#xA;&#x9;else&#xA;&#x9;&#x9;if multiline_note = True then&#xA;&#x9;&#x9;&#x9;call contsruct_note(script)&#xA;&#x9;&#x9;else&#x9;&#xA;&#x9;&#x9;&#x9;i = inStr(script, &quot;:&quot;)&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;offset for : = &quot; &amp; i &amp; &quot; of &quot; &amp; len(script))&#xA;&#x9;&#x9;&#x9;'plantuml doesnot recognise note:.. so assume anything after note and before the colon controls layout&#xA;&#x9;&#x9;&#x9;if i &gt; 0 then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'single line note&#xA;&#x9;&#x9;&#x9;&#x9;noteName = Mid(script, 5, i-5)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;noteName : = &quot; &amp; noteName)&#xA;&#x9;&#x9;&#x9;&#x9;call contsruct_note(right(script, len(script)-i))&#xA;&#x9;&#x9;&#x9;&#x9;call add_note()&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;multiline_note = True&#xA;&#x9;&#x9;&#x9;&#x9;noteName = right(script, len(script)-5)&#xA;&#x9;&#x9;&#x9;&#x9;note=&quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'r = 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;sub contsruct_note(script)&#xA;dim notes&#xA;dim i&#xA;&#xA;&#x9;call LOGTrace(&quot;construct_note (&quot; &amp; script &amp; &quot;)&quot;) &#xA;&#xA;&#x9;notes = split(script, &quot;\n&quot;)&#xA;&#x9;&#xA;&#x9;for i = 0 to ubound(notes)&#xA;&#x9;&#x9;if note = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;note = notes(0)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;note = note &amp; vbcrlf &amp; notes(i)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;n=n+1&#xA;&#x9;next&#xA;&#x9;call LOGDebug( &quot;note* (&quot; &amp; note &amp; &quot;:&quot; &amp; n &amp; &quot;)&quot;)&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub add_note()&#xA;'relies on global variables: note, noteName and n&#xA;&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramObjectName&#xA;&#xA;&#x9;call LOGTrace(&quot;add_note (&quot; &amp; noteName &amp; &quot;)&quot;) &#xA;&#x9;'add next element&#xA;&#x9;set elements = currentPackage.Elements&#xA;&#x9;set element = elements.AddNew(trim(noteName), &quot;Note&quot; )&#xA;&#x9;element.Notes = note&#xA;&#x9;element.Update&#xA;&#x9;&#xA;&#x9;'add to layout array&#xA;&#x9;layout_array (l,0) = n&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;Note&quot;&#x9;&#x9;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;note=&quot;&quot;&#xA;&#x9;n=0&#xA;&#xA;end sub&#xA;&#xA;function timelineElementID(word)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineElementID(&quot; &amp; word &amp; &quot;)&quot;)&#xA;&#x9;if right(word,1) = &quot;:&quot; then&#xA;&#x9;&#x9;word = mid(word, 1, len(word)-1)&#x9;&#x9;&#x9;&#x9;'remove trailing :&#xA;&#x9;end if&#xA;&#x9;timelineElementID=99&#xA;&#x9;for i = 0 to ubound(timeline_array)&#xA;&#x9;&#x9;if word = timeline_array(i,3) then&#x9;&#x9;&#x9;&#x9;'check using alias&#xA;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if word = timeline_array(i,2) then&#x9;&#x9;&#x9;'check using name&#xA;&#x9;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add logic to create timeline if not found in the arrary..&#xA;&#x9;if timelineElementID = 99 then&#xA;&#x9;&#x9;'call LOGDebug( &quot;create a timeline for participant =&quot; &amp; word)&#xA;&#x9;&#x9;call create_timeline(&quot;participant &quot; &amp; word )&#xA;&#x9;&#x9;timelineElementID = timeline_array (t-1,0)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;timelineElementID=&quot; &amp; timelineElementID )&#xA;&#x9;&#xA;end function&#xA;&#xA;function getColor(script)&#xA;'color is delimited by #&#xA;'the color value can be either&#xA;'&#x9;- a Hex version of RGB &#xA;'&#x9;- or a standard color name (refer to color-picker script)&#xA;'if a color name is provided, call color-picker to return hex value of RGB&#xA;'if not.. look up get the hex vales by color name&#xA;'return a decimal value of the RGB&#xA;'&#xA;dim word&#xA;dim hexRGB&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;getColor(&quot; &amp; script &amp; &quot;)&quot; )&#xA;&#x9;&#xA;&#x9;script = replace(script, &quot;[&quot;, &quot;[ &quot;)&#x9;&#x9;'add space so as [ to split on # for a sequence&#xA;&#x9;script = replace(script, &quot;]&quot;, &quot; ]&quot;)&#x9;&#x9;'add space so as ] to split on # for a sequence&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if Asc(word(i)) = 35 then&#x9;&#x9;'check for hash&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;word=&quot; &amp; word(i))&#xA;&#x9;&#x9;&#x9;if ishex(mid(word(i),2,len(word(i))-1)) then&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(word(i),2,6)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(ColorHexByName(Ucase(word(i))),2,6)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;hexRGB=&quot; &amp; hexRGB)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not hexRGB = &quot;&quot; then&#xA;&#x9;&#x9;getColor=clng(&quot;&amp;h&quot; &amp; mid(hexRGB,5,2) &amp; mid(hexRGB,3,2) &amp; mid(hexRGB,1,2))&#xA;&#x9;&#x9;'call LOGDebug( &quot;color decimal=&quot; &amp; getColor)&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;getColor=&quot; &amp; getColor )&#xA;&#x9;&#xA;end function&#xA;&#xA;function ishex(word)&#xA;&#x9;ishex= isnumeric(&quot;&amp;h&quot; &amp; word)&#xA;end function&#xA;&#xA;function elementAlias(script)&#xA;dim i&#xA;dim word&#xA;&#x9;elementAlias=&quot;&quot;&#xA;&#x9;&#xA;&#x9;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;' find  as &#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if ucase(word(i)) = &quot;AS&quot; then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if Asc(word(i+1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;elementAlias = mid(word(i+1),2)&#xA;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;for i = i+2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;elementAlias = word(i+1)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function connectorName(script)&#x9;&#xA;'start with :&#xA;'end with (&#xA;dim x&#xA;dim y&#xA;&#xA;&#x9;x = inStr(script, &quot;:&quot;)&#xA;&#x9;y = inStr(script, &quot;(&quot;)&#xA;&#x9;if x &gt; 0 then&#xA;&#x9;&#x9;if y &gt; x then&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1, y-x-1))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1))&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function synch(arrow)&#xA;&#x9;call LOGTrace(&quot;synch(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;-&amp;gt;&amp;gt;&quot; or _&#x9;&#x9;&#xA;&#x9;&#x9;arrow = &quot;-&gt;&gt;&quot; then&#xA;&#x9;&#x9;synch = &quot;Asynchronous&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;synch = &quot;Synchronous&quot;&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;synch=&quot; &amp; synch)&#xA;end function&#xA;&#xA;function signature(script)&#xA;dim i&#xA;dim j&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#x9;signature=&quot;&quot;&#xA;&#x9;&#xA;&#x9;i = inStr(script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'find first :&#xA;&#x9;j= inStr(i+1,script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;'find second : denoting retrun value&#xA;&#x9;if j &gt; 0 then&#xA;&#x9;&#x9;signature = &quot;retval=&quot; &amp; trim(mid(script,j+1))&#xA;&#x9;else&#xA;&#x9;&#x9;signature = &quot;retval=void&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;i = inStr(script, &quot;()&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'indicates there are no params&#xA;&#x9;if i = 0 then&#xA;&#x9;&#x9;i = inStr(script, &quot;(&quot;)&#xA;&#x9;&#x9;if i &gt; 0 then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add parms&#xA;&#x9;&#x9;&#x9;j = inStr(script, &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;signature = signature &amp; &quot;;params=;paramsDlg=&quot; &amp; trim(mid(script, i+1, j-i-1)) &amp; &quot;;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; signature &amp; &quot;)&quot;)&#xA;&#x9;&#xA;end function&#xA;&#xA;function isReturn(arrow)&#xA;&#x9;call LOGTrace(&quot;isReturn(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;--&amp;gt;&quot; or _ &#xA;&#x9;&#x9;arrow = &quot;--&gt;&quot; or _&#xA;&#x9; &#x9;arrow = &quot;&amp;lt;--&quot; or _ &#xA;&#x9;&#x9;arrow = &quot;&lt;--&quot;then&#xA;&#x9;&#x9;isReturn = 1&#xA;&#x9;else&#xA;&#x9;&#x9;isReturn = 0&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;isReturn=&quot; &amp; isReturn)&#xA;&#x9;&#xA;end function&#xA;&#xA;function fragment_type(script)&#xA;&#xA;&#x9;select case script&#xA;&#x9;&#x9;case &quot;alt&quot; &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;&#x9;case &quot;opt&quot; &#x9;&#x9;&#x9;fragment_type = 1&#xA;&#x9;&#x9;case &quot;break&quot; &#x9;&#x9;fragment_type = 2&#xA;&#x9;&#x9;case &quot;par&quot; &#x9;&#x9;&#x9;fragment_type = 3&#xA;&#x9;&#x9;case &quot;loop&quot; &#x9;&#x9;fragment_type = 4&#xA;&#x9;&#x9;case &quot;critical&quot;&#x9;&#x9;fragment_type = 5&#xA;&#x9;&#x9;case &quot;==&quot;&#x9;&#x9;&#x9;fragment_type = 9&#x9;&#x9;&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;end select&#xA;end function&#xA;&#xA;sub layout_objects()&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim element as EA.Element&#xA;dim diagramObjectName&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramLink as EA.DiagramLink&#xA;&#xA;dim partition as EA._Partition&#xA;dim top&#xA;dim bottom&#xA;&#xA;dim LOGLEVEL_SAVE&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=4&#x9;&#x9;'DEBUG&#xA;&#x9;call LOGTrace(&quot;layout_Objects()&quot;)&#xA;&#xA;&#x9;LOGDebug (&quot;layout array count l-1=&quot; &amp; l-1 &amp; &quot; Ubound(layout_array)=&quot; &amp; Ubound(layout_array))&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;'call calculate heights (reursively) &#xA;&#x9;&#x9;select case layout_array(i,1)&#xA;&#x9;&#x9;&#x9;case &quot;Divider&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) =  dividerHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;case &quot;InteractionFragment&quot; &#x9;&#x9;&#x9;layout_array (i,3) =  fragmentHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;case &quot;Partition&quot; &#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) =  partitionHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;case &quot;Note&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) =  noteHeight (i) &#xA;&#x9;&#x9;end select&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'set cordinates of each object&#xA;&#x9;top = -130&#xA;&#xA;&#x9;for i = 0 to l-1&#x9;&#xA;&#x9;&#x9;'set top as an accumulation of object&#xA;&#x9;&#x9;'if layout_array(i,1) = &quot;Title&quot; then &#xA;&#x9;&#x9;'&#x9;layout_array (i,4) = 0 &#xA;&#x9;'&#x9;&#x9;layout_array (i,5) = -140 &#xA;&#x9;'&#x9;&#x9;'resize based on timeline edges&#xA;'&#x9;&#x9;&#x9;layout_array (i,6) = 30 &#xA;'&#x9;&#x9;&#x9;layout_array (i,7) = 250 &#xA;'&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;layout_array (i,4) = top &#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot;  or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Divider&quot; then &#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,4) = top + 20&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4) - layout_array (i,3)&#x9;'bottom&#xA;&#x9;&#x9;&#x9;&#x9;'set left and right coordinates based on the timelines&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;call setLeftRightCoordinates(layout_array (i,0),i)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  layout_array(i,1) = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call setNoteLayout(i)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top = top - layout_array (i,3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4) - layout_array (i,3)&#x9;'bottom&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top = top - height(layout_array (i,1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'self message height&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;set diagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then &#xA;&#x9;&#x9;&#x9;'get connector &amp; update connector Y coordinates&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'set element = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;'&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;*move sequence(&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; from &quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY &amp; &quot; to &quot; &amp; layout_array (i,4))&#xA;&#x9;&#x9;&#x9;'connector.StartPointX = 1&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.StartPointY = layout_array (i,4)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.EndPointX = 2&#xA;&#x9;&#x9;&#x9;'connector.EndPointY = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;'connector.Update&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'element.Update&#xA;&#x9;&#x9;&#x9;'currentPackage.elements.Refresh&#xA;&#x9;&#x9;&#x9;'create diagramlink&#xA;&#x9;&#x9;&#x9;'set diagramLink = currentDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;'diagramLink.ConnectorID=connector.ConnectorID&#x9;&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot; geometry: &quot; &amp; diagramLink.Geometry )&#xA;&#x9;&#x9;&#x9;'diagramLink.Update&#xA;&#x9;&#x9;&#x9;'currentDiagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#x9;'currentDiagram.Update&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'call LOGInfo( &quot;connector (&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; startX:Y=&quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY)&#xA;&#x9;&#x9;end if&#xA;'&#x9;&#x9;if layout_array(i,1) = &quot;Title&quot; then &#xA;'&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing Title &quot;  &amp; layout_array (i,2)) &#xA;'&#x9;&#x9;&#x9;'add diagramobject&#xA;'&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;'&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;'&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;'&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;'&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;'&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;'&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;'&#x9;&#x9;&#x9;'centre text, fontsize and make bold&#xA;'&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;'&#x9;&#x9;&#x9;diagramObject.Update&#xA;'&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;'&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;'&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; or _&#xA;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Divider&quot; then &#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing InteractionFragment &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;'add diagramobject&#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Partition&quot; then&#xA;&#x9;&#x9;&#x9;'update partition size&#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing partition for &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;dim pcount&#xA;&#x9;&#x9;&#x9;pcount=0&#xA;&#x9;&#x9;&#x9;for j = i-1 to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;'LOGDebug (&quot;j=&quot; &amp; j)&#xA;&#x9;&#x9;&#x9;&#x9;if layout_array (i,2) = layout_array (j,2) then 'resolve which partition by counting the partitions with the same element id..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pcount=pcount+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'LOGDebug (&quot;increment pcount to &quot; &amp; pcount)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;'for each partition in element.Partitions&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug( &quot;Partitition for &quot; &amp; element.ElementID &amp; &quot; &quot; &amp; &quot;name=&quot; &amp; partition.Name &amp; &quot; object type=&quot; &amp; partition.ObjectType &amp; &quot; size=&quot; &amp; partition.size)&#x9;&#xA;&#x9;&#x9;&#x9;'next&#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;Update partition number &quot; &amp; pcount-1 &amp; &quot; of &quot; &amp; element.Partitions.Count &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;set partition = element.Partitions.GetAt(pcount-1) &#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;partition size to be updated from &quot; &amp; partition.Size &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;partition.Size = layout_array (i,3)&#xA;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing Note &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;'add diagramobject&#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;'set based left/right of&#xA;&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;'&#x9;&#x9;&#x9;'centre text, fontsize and make bold&#xA;&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;&#x9;&#x9;&#x9;'default color&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;if instr(element.Name,&quot;#&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.BackgroundColor = getColor(element.Name)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;'resize any timeline boxes &#xA;&#x9;bottom = 0&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array (i,5) &lt; bottom then&#xA;&#x9;&#x9;&#x9;bottom = layout_array (i,5)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;call LOGDebug( &quot;*resize timeline boxes to &quot; &amp; bottom)&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;'if timeline_array (i,4) = &quot;BOX&quot; then&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;*timeline (&quot; &amp; timeline_array(i,0) &amp; &quot;) to be resized&quot;)&#xA;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = bottom - 15&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;'end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currentDiagram.Update&#xA;&#x9;Repository.SaveDiagram(currentDiagram.DiagramID)&#xA;&#x9;'Repository.ReloadPackage(currentPackage.PackageID)&#xA;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;call LOGTrace( &quot;**Layout Array - updated**&quot; )&#xA;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#xA;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#xA;end sub&#xA;&#xA;function height(thing)&#xA;&#x9;call LOGTrace(&quot;height(&quot; &amp; thing &amp; &quot;)&quot;)&#xA;&#x9;select case thing&#xA;&#x9;&#x9;case &quot;Note&quot;&#x9;&#x9;&#x9;&#x9;&#x9;height = 20 &#xA;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;&#x9;&#x9;height = 35&#xA;&#x9;&#x9;case &quot;Sequence2Self&quot;&#x9;&#x9;height = 45&#xA;&#x9;&#x9;case &quot;InteractionFragment&quot; &#x9;height = 0&#x9;&#x9;'alt, loop etc&#xA;&#x9;&#x9;case &quot;Partition&quot;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;'else&#xA;&#x9;&#x9;case &quot;End&quot;&#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;&#xA;&#x9;&#x9;case &quot;Divider&quot; &#x9;&#x9;&#x9;&#x9;height = 20&#x9;&#x9;'seq&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#xA;&#x9;end select&#xA;&#x9;call LOGTrace(&quot;height=&quot; &amp; height)&#xA;end function&#xA;&#xA;function dividerHeight(level, start)&#xA;dim i&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;dividerHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;dividerHeight=0&#xA;&#x9;for i = start+1 to l-1 &#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Divider&quot; then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;dividerHeight = dividerHeight + height(layout_array (i,1))&#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;dividerHeight=&quot; &amp; dividerHeight )&#xA;&#xA;end function&#xA;&#xA;function fragmentHeight(level, start)&#xA;dim i&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;fragmentHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;fragmentHeight=0&#xA;&#x9;for i = start to l-1 &#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;fragmentHeight = fragmentHeight + height(layout_array (i,1))&#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;fragmentHeight=&quot; &amp; fragmentHeight )&#xA;&#xA;end function&#xA;&#xA;function noteHeight(i)&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;noteHeight(&quot; &amp; i &amp; &quot;)&quot; )&#xA;&#x9;noteHeight = height(&quot;Note&quot;) * layout_array(i,0)&#xA;&#x9;call LOGTrace( &quot;noteHeight=&quot; &amp; noteHeight )&#xA;&#xA;end function&#xA;&#xA;function partitionHeight(level, start)&#xA;dim i&#xA;dim LOGLEVEL_SAVE&#xA;LOGLEVEL_SAVE = LOGLEVEL &#xA;'&#x9;LOGLEVEL=4&#x9;&#x9;&#x9;'activate debugging for the sub&#xA;&#xA;&#x9;call LOGTrace( &quot;partitionHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;partitionHeight=height(layout_array (start,1))&#xA;&#x9;for i = start+1 to Ubound(layout_array)&#xA;&#x9;&#x9;'end of partition is not specifically declared..  &#xA;&#x9;&#x9;if layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Partition&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'is dependant upon nuumber of sequences&#xA;&#x9;&#x9;partitionHeight = partitionHeight + height(layout_array (i,1))&#xA;&#x9;&#x9;'end of partition is identified when the level indicator is less than what was passed to it &#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;partitionHeight=&quot; &amp; partitionHeight )&#xA;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setLeftRightCoordinates(level,start)&#xA;'loop thru list of timelines in scope of this level and retrun the lowest value&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim tLeft&#xA;dim tRight&#xA;&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=3&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot;)&#xA;&#xA;&#x9;layout_array(start,6) = 400&#xA;&#x9;layout_array(start,7) = 0&#xA;&#xA;&#x9;for i = start to l-1&#xA;&#x9;&#x9;'need some way to identify nested fragments and whether the left and right values need adjusting&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; or _&#xA;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Sequence2Self&quot; then &#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(layout_array(i,2))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;j=timelineIndexById(connector.ClientID)&#xA;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;'call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft - 25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;'&#x9;&#x9;call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight +25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndexById(connector.SupplierID)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft -25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight + 25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if layout_array(start,6) &lt; 5 then&#x9;&#x9;&#x9;'left coordinate cannot be less than zero&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6)=5&#xA;&#x9;&#x9;&#x9;end if &#xA;&#xA;&#x9;&#x9;&#x9;'check if margins need to adjusted becuase the fragment is nested&#xA;&#x9;&#x9;&#x9;if level &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;for j = start to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(j,0) = level -1 and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(j,1) = &quot;InteractionFragment&quot; then&#x9;&#x9;'scan layout arrary to find previous level fragmant&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,4) = layout_array(j,4) then&#x9;'if top value are the same subtract 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,4) = layout_array(start,4) - 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,5) = layout_array(j,5) then&#x9;'if bottom values are the same add 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,5) = layout_array(start,5) + 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,6) = layout_array(j,6) then&#x9;'if left value are the same add 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = layout_array(start,6) + 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,7) = layout_array(j,7) then&#x9;'if right values are the same subtract 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = layout_array(start,7) - 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'call LOGDebug(&quot;Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates: Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;sub setNoteLayout(i)&#xA;dim j&#xA;dim word&#xA;dim element as EA.Element&#xA;&#xA;&#x9;call LOGTrace(&quot;setNoteLayout(&quot; &amp; i &amp; &quot;)&quot;)&#xA;&#x9;'default width =155&#xA;&#xA;&#x9;'get element&#xA;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;'split element.name&#xA;&#x9;call LOGDebug(&quot;element.name=&quot; &amp; element.name)&#xA;&#xA;&#x9;word=split(element.Name)&#xA;&#x9;&#xA;&#x9;if ucase(word(0)) = &quot;LEFT&quot; then&#xA;&#x9;&#x9;'get timeline based on name&#xA;&#x9;&#x9;if ucase(element.Name) = &quot;LEFT&quot; then&#xA;&#x9;&#x9;&#x9;j=0&#x9;&#x9;&#x9;&#x9;&#x9;'no timeline provide so default to first&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;j=timelineIndexByName(word(2))&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'calculate left&#xA;&#x9;&#x9;layout_array(i,6) = timeline_array(j,5) - 80&#xA;&#x9;&#x9;if layout_array(i,6) &lt; 0 then&#xA;&#x9;&#x9;&#x9;layout_array(i,6) =0&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set right based on timeline left&#xA;&#x9;&#x9;layout_array(i,7) = timeline_array(j,5) + 35&#xA;&#x9;else&#xA;&#x9;&#x9;if ucase(word(0)) =  &quot;RIGHT&quot; then&#xA;&#x9;&#x9;&#x9;if ucase(element.Name) = &quot;RIGHT&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;j=t-1&#x9;&#x9;&#x9;&#x9;&#x9;'no timeline provide so default to last&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'get timeline based on name&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndexByName(word(2))&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'calculate left&#xA;&#x9;&#x9;&#x9;layout_array(i,6) = timeline_array(j,6) - 35&#xA;&#x9;&#x9;&#x9;'set right based on timeline left&#xA;&#x9;&#x9;&#x9;layout_array(i,7) = timeline_array(j,6) + 80&#xA;&#x9;&#x9;else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'over one timeline&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;over(&quot; &amp; word(1) &amp; &quot; of &quot; &amp; ubound(word) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;word(1) = replace(word(1), &quot;,&quot;, &quot;&quot;)&#x9;&#x9;'remove comma&#xA;&#x9;&#x9;&#x9;j=timelineIndexByName(word(1))&#x9;&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;t1(&quot; &amp; layout_array(i,4) &amp; &quot;):b1(&quot; &amp; layout_array(i,5) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;l1(&quot; &amp; layout_array(i,6) &amp; &quot;):r1(&quot; &amp; layout_array(i,7) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;l2(&quot; &amp; timeline_array(j,5) &amp; &quot;):r2(&quot; &amp; timeline_array(j,6) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;layout_array(i,6) = timeline_array(j,5) &#xA;&#x9;&#x9;&#x9;layout_array(i,7) = timeline_array(j,6)&#xA;&#x9;&#x9;&#x9;if ubound(word) &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndexByName(word(2))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;t1(&quot; &amp; layout_array(i,4) &amp; &quot;):b1(&quot; &amp; layout_array(i,5) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;l1(&quot; &amp; layout_array(i,6) &amp; &quot;):r1(&quot; &amp; layout_array(i,7) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;l2(&quot; &amp; timeline_array(j,5) &amp; &quot;):r2(&quot; &amp; timeline_array(j,6) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if timeline_array(j,5) &lt; layout_array(i,6) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(i,6) = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;if timeline_array(j,6) &gt; layout_array(i,7) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(i,7) = timeline_array(j,6)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function timelineIndexById(timelineId )&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineIndexById(&quot; &amp; timelineId &amp; &quot;)&quot;)&#xA;&#x9;call LOGDebug(&quot;t=&quot; &amp; t)&#xA;&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timelineId = timeline_array(i,0) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;timelineIndexById = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;timelineIndexById=&quot; &amp; timelineIndexById)&#xA;&#xA;end function&#xA;&#xA;function timelineIndexByName(timelineName)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineIndexByName(&quot; &amp; timelineName &amp; &quot;)&quot;)&#xA;&#x9;call LOGDebug(&quot;t=&quot; &amp; t)&#xA;&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timelineName = timeline_array(i,2) then&#x9;&#x9;&#x9;&#x9;'check using element name&#xA;&#x9;&#x9;&#x9;timelineIndexByName = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;timelineIndexByName=&quot; &amp; timelineIndexByName)&#xA;&#xA;end function&#xA;&#xA;function sequenceIndex(sequenceId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;sequenceIndex(&quot; &amp; sequenceId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;s=&quot; &amp; s)&#xA;&#xA;&#x9;for i = 0 to s-1&#xA;&#x9;&#x9;if sequenceId = sequence_array(i,7) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;sequenceIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;sequenceIndex=&quot; &amp; sequenceIndex)&#xA;&#xA;end function&#xA;&#xA;function resolveTarget(sourceId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;resolveTarget(&quot; &amp; sourceId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;s=&quot; &amp; s)&#xA;&#x9;resolveTarget=&quot;&quot;&#xA;&#x9;for i = s to 0 step -1&#xA;&#x9;&#x9;'call LOGDebug(&quot;i=&quot; &amp; i)&#xA;&#x9;&#x9;if sourceId = sequence_array(i,2) and sequence_array(i,6) = 0 then&#x9;&#x9;'check using elementid &amp; not a return flow&#xA;&#x9;&#x9;&#x9;resolveTarget = timeline_array (timelineIndexById(sequence_array(i,0)),2) &#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if resolveTarget=&quot;&quot; then&#xA;&#x9;&#x9;call LOGWarning(sourceId &amp; &quot;:no where to return.. so will treat as a self return&quot;)&#xA;&#x9;&#x9;resolveTarget = timeline_array(timelineIndexById(sourceId ),2)&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;resolveTarget=&quot; &amp; resolveTarget)&#xA;&#xA;end function&#xA;&#xA;function getStereotype(script)&#xA;dim start&#xA;dim length&#xA;&#x9;call LOGTrace(&quot;getStereotype(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#x9;if instr(script, &quot;&amp;lt;&amp;lt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;start = instr(script, &quot;&amp;lt;&amp;lt;&quot;)+8&#xA;&#x9;&#x9;length = instr(script, &quot;&amp;gt;&amp;gt;&quot;) - start&#xA;&#x9;&#x9;getStereotype = trim(mid(script, start, length)) &#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;getStereotype=&quot; &amp; getStereotype)&#xA;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="351"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CC5FE190-2BC3-4d6b-BFBD-ED59D0F142BC}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-C4-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create C4 Diagram &#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to be used to build a C4 Diagram  &#xA;' Date: 25-Sep-2022&#xA;'-----------------------------------------'&#xA;' Modifcation Log&#xA;' 27-Nov-2022:&#x9;revamp layout, add person type&#xA;&#xA;dim stereotype_array (99,7)&#x9;&#x9;'store stereotypes &#xA;dim idxS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'stereotype array index&#xA;dim idxL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'index for layout_array &#xA;&#xA;sub CreateC4Diagram ()&#xA;&#x9;call LOGInfo(&quot;Create C4 Diagram script activated&quot;)&#xA;&#xA;&#x9;dim PlantUML&#xA;&#x9;dim word&#xA;&#x9;dim i&#xA;&#x9;&#xA;&#x9;PlantUML = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;for i = 0 to Ubound(PlantUML)&#xA;&#x9;&#x9;call LOGDebug ( &quot;Processing #&quot; &amp; i &amp; &quot; :&quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;if not PlantUML(i) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;PlantUML(i) = Trim(PlantUML(i))&#xA;&#x9;&#x9;&#x9;'C4 commands are&#xA;&#x9;&#x9;&#x9;PlantUML(i) = replace(PlantUML(i), &quot;(&quot;, &quot; (&quot;)&#xA;&#x9;&#x9;&#x9;if not Asc(PlantUML(i)) = 39  then&#xA;&#x9;&#x9;&#x9;&#x9;word=split(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;select case ucase(word(0))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;TITLE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_title(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;!INCLUDE&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@STARTUML&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@ENDUML&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LAYOUT_TOP_DOWN&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LAYOUT_AS_SKETCH&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LAYOUT_WITH_LEGEND&quot;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SHOW_LEGEND&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' not yet supported&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;RELINDEX&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;INCREMENT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SETINDEX&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LASTINDEX&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NODE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NODE_L&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NODE_R&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DEPLOYMENT_NODE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDPROPERTY&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;WITHOUTPROPERTYHEADER&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDNODETAG&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'class&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;PERSON&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEM&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEM_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMDB&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMDB_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMQUEUE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMQUEUE_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINER&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINER_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERDB&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERDB_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERQUEUE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERQUEUE_EXT&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENT_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTDB&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTDB_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTQUEUE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTQUEUE_EXT&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'boundary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEM_BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINER_BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ENTERPRISE_BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;}&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call end_of(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'sterotype&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDPERSONTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDBOUNDARYTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDELEMENTTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDCOMPONENTTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDRELTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALPERSONTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALSYSTEMTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALCONTAINERTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALCOMPONENTTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATECONTAINERBOUNDARYSTYLE&quot; &#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATESYSTEMBOUNDARYSTYLE&quot; &#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATEENTERPRISEBOUNDARYSTYLE&quot; &#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATEBOUNDARYSTYLE&quot; &#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATERELSTYLE&quot; &#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'relationship&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_relationship(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGDebug( &quot;**Class Array**&quot; )&#xA;&#x9;Call PrintArray (class_array,0,idxC-1)&#xA;&#xA;&#x9;'apply stereotype settings&#xA;&#x9;'call LOGDebug( &quot;**Stereotype Array**&quot; )&#xA;&#x9;'Call PrintArray (stereotype_array,0,idxS-1)&#xA;&#xA;&#x9;'call LOGDebug( &quot;**Relationship Array**&quot; )&#xA;&#x9;'Call PrintArray (relationship_array,0,idxR-1)&#xA;&#x9;&#xA;&#x9;'layout objects based&#xA;&#x9;call layout_objects()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set relative coordinates based nesting of ojects&#xA;&#xA;&#x9;call LOGDebug( &quot;**Layout Array**&quot; )&#xA;&#x9;Call PrintArray (layout_array,0,idxL-1)&#xA;&#x9;&#xA;&#x9;call build_diagram()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'&#xA;&#x9;&#xA;&#x9;'LayoutDiagram(currentDiagram.DiagramID)&#xA;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;call LOGInfo ( &quot;Create C4 Diagram Script Complete&quot; )&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub create_title(PlantUML)&#xA;&#x9;dim strTitle&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#xA;&#x9;call LOGTrace(&quot;create_title(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;'set the diagram.name using title&#xA;&#x9;&#x9;&#xA;&#x9;strTitle = right(PlantUML, len(PlantUML)-5)&#xA;&#x9;'remove quotes&#xA;&#x9;strTitle = replace(strTitle, Chr(34), &quot; &quot;)&#xA;&#xA;&#x9;'handle \n&#xA;&#x9;strTitle = trim(replace(strTitle, &quot;\n&quot;, &quot; &quot;))&#xA;&#x9;&#xA;&#x9;set diagram = currentDiagram&#xA;&#x9;diagram.name = strTitle&#xA;&#x9;diagram.update&#xA;&#xA;&#x9;call LOGInfo( &quot;Set Diagram Name to: &quot; &amp; diagram.Name )&#xA;&#xA;end sub&#xA;&#xA;sub create_class(script)&#xA;&#x9;dim i&#xA;&#x9;dim word&#xA;&#x9;dim sql&#xA;&#x9;dim className&#xA;&#x9;dim classAlias&#xA;&#x9;dim classObjectType&#xA;&#x9;dim classTech&#xA;&#x9;dim classStereotype&#xA;&#x9;dim classC4Type&#xA;&#x9;dim classNotes&#xA;&#x9;dim elements as EA.Collection&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim elementTag as EA.TaggedValue&#xA;&#x9;dim LOGLEVEL_SAVE&#x9;'&#xA;&#x9;'LOGLEVEL_SAVE = LOGLEVEL&#xA;&#x9;'LOGLEVEL=3&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;create_class(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;word=split(script)&#xA;&#x9;&#xA;&#x9;if instr(word(0),&quot;Boundary&quot;) &gt; 0 then&#xA;&#x9;&#x9;classObjectType = &quot;Boundary&quot;&#xA;&#x9;&#x9;classStereotype = replace(word(0),&quot;_&quot;,&quot; &quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(word(0),&quot;Person&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;classObjectType = &quot;Actor&quot;&#xA;&#x9;&#x9;&#x9;classStereotype = &quot;Person&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;classObjectType = &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;if instr(word(0),&quot;Container&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'classObjectType = &quot;Container&quot;&#xA;&#x9;&#x9;&#x9;&#x9;classStereotype = &quot;Container&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(word(0),&quot;Component&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'classObjectType = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if instr(word(0),&quot;System&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'classObjectType = &quot;System&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;classStereotype = &quot;System&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if instr(word(0),&quot;Db&quot;) &gt; 0 then&#xA;&#x9;&#x9;classC4Type=&quot;Storage&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(word(0),&quot;Queue&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;classC4Type=&quot;Queue&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if instr(word(0),&quot;System&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;classC4Type=&quot;Software&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(word(0),&quot;Container&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classC4Type=&quot;Application&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'extract macro which is delimitered by ()&#xA;&#x9;dim strMacro&#xA;&#x9;strMacro = trim(Mid(script, instr(script,&quot;(&quot;)+1, instr(script,&quot;)&quot;)-instr(script,&quot;(&quot;)-1))&#xA;&#x9;call LOGDebug( &quot;strMacro: &quot; &amp; strMacro )&#xA;&#x9;&#xA;&#x9;dim strArgs&#xA;&#x9;strArgs=split(strMacro,&quot;,&quot;)&#xA;&#x9;for i = 0 to Ubound(strArgs)&#xA;&#x9;&#x9;call LOGDebug( &quot;strArgs(&quot; &amp; i &amp; &quot; of &quot; &amp; ubound(strArgs) &amp; &quot;) : &quot; &amp; strArgs(i) )&#xA;&#x9;next&#xA;&#x9;classAlias = trim(strArgs(0))&#xA;&#x9;className = trim(strArgs(1))&#xA;&#x9;'replace \n with a space&#xA;&#x9;className = replace(className, &quot;\n&quot;, &quot; &quot;)&#xA;&#x9;className = replace(className, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#xA;&#x9;if Ubound(strArgs) &gt; 1 then&#xA;&#x9;&#x9;classTech = trim(strArgs(2))&#xA;&#x9;&#x9;classTech = replace(classTech, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;classTech = &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;'assumes last arg contains the description&#xA;&#x9;if Ubound(strArgs) &gt; 2 then&#xA;&#x9;&#x9;classNotes = trim(strArgs(Ubound(strArgs)))&#xA;&#x9;&#x9;classNotes = replace(classNotes, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;classNotes = replace(classNotes, &quot;$descr=&quot;, &quot;&quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;classNotes = &quot;&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;sql =&quot;SELECT Object_ID FROM t_object WHERE t_object.Name =&quot; &amp; chr(34) &amp; className &amp; chr(34) &amp; &quot; and t_object.Object_Type = &quot; &amp; chr(34) &amp; classObjectType &amp; chr(34)&#xA;&#x9;call LOGDebug ( &quot;sql: &quot; &amp; sql)&#xA;&#xA;&#x9;set elements=Repository.GetElementSet(sql,2)&#xA;&#x9;call LOGDebug (&quot;elements returned: &quot; &amp; elements.Count)&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;'add element&#xA;&#x9;&#x9;set elements = currentPackage.Elements&#xA;&#x9;&#x9;set element = elements.AddNew(className, classObjectType )&#xA;&#x9;&#x9;element.Alias = classAlias&#xA;&#x9;&#x9;element.Stereotype = classStereotype&#xA;&#x9;&#x9;element.Notes = classNotes&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;element.TaggedValues.Refresh&#xA;&#x9;&#x9;currentPackage.elements.Refresh&#xA;&#x9;&#x9;call LOGInfo( &quot;Added Element: &quot; &amp; element.Name &amp; &quot; (ID=&quot; &amp; element.ElementID &amp; &quot;) in package &quot; &amp; currentPackage.Name )&#xA;&#x9;&#x9;set elementTag = nothing&#xA;&#x9;&#x9;if not (classC4Type = &quot;&quot;) then&#xA;&#x9;&#x9;&#x9;set elementTag = element.TaggedValues.GetByName(&quot;Type&quot;)&#xA;&#x9;&#x9;&#x9;if elementTag is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'add new tag if not found&#xA;&#x9;&#x9;&#x9;&#x9;set elementTag = element.TaggedValues.AddNew(&quot;Type&quot;, classTech)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo( &quot;Add elementTag: &quot; &amp; elementTag.Value &amp; &quot; (ID=&quot; &amp; elementTag.PropertyID &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementTag.Value = classTech&#xA;&#x9;&#x9;&#x9;&#x9;elementTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo( &quot;Updated elementTag: &quot; &amp; elementTag.Value &amp; &quot; (ID=&quot; &amp; elementTag.PropertyID &amp; &quot;)&quot;)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;set element = Repository.GetElementByID(elements.GetAt(0).ElementID)&#xA;&#x9;end if&#xA;&#xA;&#x9;'add to class_array&#xA;&#x9;class_array (idxC,0) = element.ElementID&#xA;&#x9;class_array (idxC,1) = element.Name&#xA;&#x9;class_array (idxC,2) = element.Alias&#xA;&#x9;class_array (idxC,3) = element.Stereotype&#xA;&#x9;class_array (idxC,4) = element.Type&#xA;&#x9;class_array (idxC,5) = classTech&#xA;&#x9;if instr(script, &quot;{&quot;) &gt; 0 then&#xA;&#x9;&#x9;class_array (idxC,6) = &quot;Start&quot;&#xA;&#x9;end if &#xA;&#x9;idxC=idxC+1&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;&#xA;'&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;&#xA;&#xA;end sub&#xA;&#xA;sub create_sterotype(script)&#xA;&#xA;end sub&#xA;&#xA;sub create_boundary(script)&#xA;'&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;'&#x9;&#x9;&#x9;dim borderStyle&#xA;'&#x9;&#x9;&#x9;set borderStyle = element.Properties(&quot;BorderStyle&quot;)&#xA;'&#x9;&#x9;&#x9;borderStyle.value = &quot;Solid&quot;&#xA;'&#x9;&#x9;end if&#xA;&#x9;'add to class_array&#xA;&#x9;class_array (idxC,0) = element.ElementID&#xA;&#x9;class_array (idxC,1) = element.Name&#xA;&#x9;class_array (idxC,2) = element.Alias&#xA;&#x9;class_array (idxC,3) = element.Stereotype&#x9;&#xA;&#x9;class_array (idxC,4) = element.ObjectType&#xA;&#x9;class_array (idxC,5) = classTech&#xA;&#x9;if instr(script, &quot;{&quot;) &gt; 0 then&#xA;&#x9;&#x9;class_array (idxC,6) = &quot;Start&quot;&#xA;&#x9;end if &#xA;&#x9;idxC=idxC+1&#xA;&#xA;end sub&#xA;&#xA;sub end_of(script)&#xA;&#x9;class_array (idxC,6) = &quot;End&quot;&#xA;&#x9;idxC=idxC+1&#xA;end sub&#xA;&#xA;sub create_relationship(script)&#xA;&#x9;call LOGTrace(&quot;create_relationship(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;dim strRel&#xA;&#x9;dim strRelParms&#xA;&#x9;dim connID&#xA;&#x9;dim connSterotype&#xA;&#x9;dim i&#xA;&#x9;&#xA;&#x9;'process REL &#xA;&#x9;if instr(script,&quot;Rel&quot;) &gt; 0 then&#xA;&#x9;&#x9;'extract relationship which is delimitered by ()&#xA;&#x9;&#x9;strRel = trim(Mid(script, instr(script,&quot;(&quot;)+1, instr(script,&quot;)&quot;)-instr(script,&quot;(&quot;)-1))&#xA;&#x9;&#x9;call LOGDebug( &quot;strRel: &quot; &amp; strRel )&#xA;&#x9;&#x9;strRelParms=split(strRel,&quot;,&quot;)&#x9;&#xA;&#x9;&#x9;call LOGDebug( &quot;strRelParms: &quot; &amp; ubound(strRelParms) )&#xA;&#x9;&#x9;relationship_array (idxR,0) = getClassID(trim(strRelParms(0)))&#x9;'source elementID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;relationship_array (idxR,1) = getClassID(trim(strRelParms(1)))&#x9;'target elementID&#xA;&#x9;&#x9;if ubound(strRelParms) &gt; 1 then&#xA;&#x9;&#x9;&#x9;relationship_array (idxR,3) = strRelParms(2)&#xA;&#x9;&#x9;&#x9;relationship_array (idxR,3) = replace(relationship_array (idxR,3), &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if ubound(strRelParms) &gt; 2 then&#xA;&#x9;&#x9;&#x9;connSterotype = strRelParms(3)&#xA;&#x9;&#x9;&#x9;connSterotype = replace(connSterotype, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;connID = getConnectorID (relationship_array (idxR,0), relationship_array (idxR,1))&#xA;&#x9;&#x9;if connID=0 then&#xA;&#x9;&#x9;&#x9;connID = createConnector (relationship_array (idxR,0), relationship_array (idxR,1), relationship_array (idxR,3), connSterotype)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;relationship_array (idxR,2) = connID&#xA;&#x9;&#x9;idxR=idxR+1&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning ( &quot;not yet supported: &quot; &amp; script )&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub layout_objects()&#xA;&#xA;&#x9;call LOGTrace(&quot;layout_Objects()&quot;)&#xA;&#xA;&#x9;dim width&#xA;&#x9;dim height&#xA;&#x9;dim padding&#xA;&#x9;dim level&#xA;&#x9;dim i &#xA;&#x9;dim j&#xA;&#x9;dim left&#xA;&#x9;dim right&#xA;&#x9;dim top&#xA;&#x9;dim bottom&#xA;&#x9;&#xA;&#x9;width=150&#xA;&#x9;height=108&#xA;&#x9;padding=40&#xA;&#x9;&#xA;&#x9;'set the first row&#xA;&#x9;layout_array (0,1) = padding&#xA;&#x9;layout_array (0,3) = padding * -1&#xA;&#x9;if class_array (0,4) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;level = 1&#xA;&#x9;&#x9;layout_array (0,2) = layout_array (0,1) + width + padding&#xA;&#x9;&#x9;layout_array (0,4) = layout_array (0,3) - height - padding&#xA;&#x9;else&#xA;&#x9;&#x9;level = 0&#xA;&#x9;&#x9;layout_array (0,2) = layout_array (0,1) + width&#xA;&#x9;&#x9;layout_array (0,4) = layout_array (0,3) - height&#xA;&#x9;end if&#xA;&#x9;layout_array (0,0) = level&#x9;&#xA;&#xA;&#x9;for idxL = 1 to idxC-1&#x9;&#xA;&#x9;&#x9;if class_array (idxL,6) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;call LOGDebug ( &quot;processing end of boundary&quot; )&#xA;&#x9;&#x9;&#x9;'set the right and bottom of the parent&#xA;&#x9;&#x9;&#x9;layout_array (idxL,0) = level&#xA;&#x9;&#x9;&#x9;level = level - 1&#xA;&#x9;&#x9;&#x9;i = getParent(idxL)&#xA;&#x9;&#x9;&#x9;'loop thru to resolve right and bottom coorodinates&#xA;&#x9;&#x9;&#x9;'this needs to have a start tag&#xA;&#x9;&#x9;&#x9;if class_array (i,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;resize boundary&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;right = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;&#x9;bottom = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;&#x9;for j = iDXL to i step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Checking dimentions of (&quot; &amp;  j &amp; &quot;): &quot; &amp; class_array(j,0) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array (j,2) &gt; right then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;right = layout_array (j,2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Right Adjusted to-&gt;&quot; &amp;  right )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array (j,4) &lt; bottom then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;bottom = layout_array (j,4)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Bottom Adjusted to-&gt;&quot; &amp;  bottom )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,2) = right + padding&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,4) = bottom - padding&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;bottom = getBottom()&#xA;&#x9;&#x9;&#x9;if class_array (idxL,6) = &quot;Start&quot; then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;processing start of boundary&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;level = level + 1&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,0) = level&#xA;&#x9;&#x9;&#x9;&#x9;'go up to find relative position.&#xA;&#x9;&#x9;&#x9;&#x9;if layout_array (idxL,0) &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'i = getParent(idxL)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if class_array (idxL-1,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left = layout_array (idxL-1,1) + padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;top = layout_array (idxL-1,3) - padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left = layout_array (idxL-1,1) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;top = bottom - padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;left = layout_array (idxL-1,1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top = bottom - padding&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = left + padding&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,2) = left + width + padding&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = top &#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,4) = top - padding - height - padding&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'non-boundary object&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;processing a non-boundary object&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,0) = level&#xA;&#x9;&#x9;&#x9;&#x9;if class_array (idxL-1,6) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = layout_array (i,1) + padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'resolve bottom &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = bottom - padding&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if class_array (idxL-1,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = layout_array (idxL-1,1) + padding&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = layout_array (idxL-1,3) - padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = layout_array (idxL-1,2) + padding&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = layout_array (idxL-1,3) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,2) = layout_array (idxL,1) + width&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,4) = layout_array (idxL,3) - height&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub build_diagram()&#xA;&#x9;call LOGTrace(&quot;build_diagram()&quot;)&#xA;&#x9;dim diagramObjects as EA.Collection&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim left&#xA;&#x9;dim right&#xA;&#x9;dim top&#xA;&#x9;dim bottom&#xA;&#x9;dim diagramObjectName&#xA;&#x9;dim i&#xA;&#x9;set DiagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;' Add diagramObjects&#xA;&#x9;for i = 0 to idxL-1&#x9;&#xA;&#x9;&#x9;if not (class_array(i,6) = &quot;End&quot;) then&#xA;&#x9;&#x9;&#x9;left = layout_array (i,1)&#xA;&#x9;&#x9;&#x9;right = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;top = layout_array (i,3)&#xA;&#x9;&#x9;&#x9;bottom = layout_array (i,4) &#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; right &amp; &quot;;t=&quot; &amp; top &amp; &quot;;b=&quot; &amp; bottom&#xA;&#x9;&#x9;&#x9;call LOGDebug ( &quot;ElementId=&quot; &amp; class_array (i,0) &amp; &quot;-Left(&quot; &amp; left &amp; &quot;);Right(&quot; &amp; right &amp; &quot;);top(&quot; &amp; top &amp; &quot;);Bottom(&quot; &amp; bottom &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, class_array (i,4))&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = class_array (i,0)&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currentDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;function getParent(startFrom)&#xA;&#x9;call LOGTrace(&quot;getParent(&quot; &amp; startFrom &amp; &quot;)&quot;)&#xA;&#xA;&#x9;'return the index of the immediate parent by going back up the layout_array based on level&#xA;&#x9;Dim i&#xA;&#x9;dim level&#xA;&#x9;&#xA;&#x9;getParent=startFrom&#xA;&#x9;level = layout_array (startFrom,0)&#xA;&#x9;call LOGDebug ( &quot;Level (&quot; &amp;  startFrom &amp; &quot;): &quot; &amp; level )&#xA;&#xA;&#x9;for i = startFrom-1 to 0 step -1&#xA;&#x9;&#x9;call LOGDebug ( &quot;Checking (&quot; &amp;  i &amp; &quot;)&quot; )&#xA;&#x9;&#x9;if layout_array (i,0) = level _ &#xA;&#x9;&#x9;and class_array (i,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;getParent=i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;getParent=&quot; &amp; getParent)&#xA;&#xA;end function&#xA;&#xA;function getBottom()&#xA;&#x9;call LOGTrace(&quot;getBottom()&quot;)&#xA;&#xA;&#x9;Dim i&#xA;&#x9;&#xA;&#x9;getBottom=0&#xA;&#x9;for i = 0 to idxL &#xA;&#x9;&#x9;call LOGDebug ( &quot;Checking (&quot; &amp;  i &amp; &quot;)&quot; )&#xA;&#x9;&#x9;if layout_array (i,4) &lt; getBottom then &#xA;&#x9;&#x9;&#x9;getBottom = layout_array (i,4)&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;Bottom=&quot; &amp; getBottom)&#xA;&#xA;end function&#xA;&#xA;function getClassID(name)&#xA;&#x9;call LOGTrace(&quot;getClassID(&quot; &amp; name &amp; &quot;)&quot;)&#xA;&#x9;&#xA;&#x9;dim i&#xA;&#x9;&#xA;&#x9;getClassID=99&#xA;&#x9;for i = 0 to idxC&#xA;&#x9;&#x9;if name = class_array(i,3) then&#x9;&#x9;&#x9;&#x9;'check using alias&#xA;&#x9;&#x9;&#x9;getClassID = class_array (i,0)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if name = class_array(i,2) then&#x9;&#x9;&#x9;'check using name&#xA;&#x9;&#x9;&#x9;&#x9;getClassID = class_array (i,0)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if getClassID = 99 then&#xA;&#x9;&#x9;LOGWarning ( &quot;class not found: &quot; &amp; name )&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;getClassID=&quot; &amp; getClassID )&#xA;&#x9;&#xA;end function&#xA;&#x9;&#xA;function getConnectorID(fromElementID, toElementID)&#xA;&#x9;call LOGTrace(&quot;getConnectorID(&quot; &amp; fromElementID &amp; &quot;,&quot; &amp; toElementID &amp; &quot;)&quot;)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#xA;&#x9;getConnectorID=0&#xA;&#x9;set element = Repository.GetElementByID (fromElementID)&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;if connector.SupplierID = toElementID then&#xA;&#x9;&#x9;&#x9;getConnectorID=connector.ConnectorID&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;call LOGTrace(&quot;getConnectorID=&quot; &amp; getConnectorID )&#xA;&#xA;end function&#xA;&#xA;function createConnector(fromElementID, toElementID, connName, connSterotype)&#xA;&#x9;call LOGTrace(&quot;createConnector(&quot; &amp; fromElementID &amp; &quot;,&quot; &amp; toElementID &amp; &quot;,&quot; &amp; connName &amp; &quot;)&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#xA;&#x9;set element = Repository.GetElementByID (fromElementID)&#xA;&#x9;&#xA;&#x9;'create connector&#xA;&#x9;set connector = element.Connectors.AddNew(&quot;&quot;,&quot;Connector&quot;)&#x9;&#xA;&#x9;connector.SupplierID = toElementID&#xA;&#x9;connector.Name = connName&#xA;&#x9;connector.Direction = &quot;Source -&gt; Destination&quot;&#xA;&#x9;connector.Stereotype = connSterotype&#xA;&#x9;connector.Update&#xA;&#x9;element.Connectors.Refresh&#x9;&#x9;&#xA;&#x9;createConnector = connector.ConnectorID&#xA;&#x9;call LOGTrace(&quot;createConnector=&quot; &amp; createConnector )&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="352"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EF4646F5-9279-46aa-B46A-E857C07E146C}"/>
			<Column name="ScriptAuthor" value="{BC5B1FDD-5C4C-4ADB-80E2-3DB2BF307A0C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CreateMessageOverviewSequence&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;'option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;&#xA;'&#xA;' Script Name: CreateMessageOverviewSequence&#xA;' Author: Geert Belleken&#xA;' Purpose: Creates a sequence diagram under the selected businessprocess that shows the sequence of the messages&#xA;' from this businessprocess and it's subprocesses&#xA;' Date: 31/03/2015&#xA;'&#xA;'**********EDIT FROM HERE************&#xA;&#xA;'The distance between two lifelines&#xA;dim xIncrement&#xA;xIncrement = 200&#xA;'The width of a lifeline&#xA;dim defaultwidth&#xA;defaultwidth = 90&#xA;'the diagrams name suffix&#xA;dim namesuffix&#xA;namesuffix = &quot; Message Overview&quot;&#xA;'the horizontal space between two levels of boundaries&#xA;&#xA;dim boundaryX&#xA;boundaryX = 5&#xA;&#xA;'colors&#xA;dim colors&#xA;' paars, geel, groen,blauw&#xA;colors = Array(16758490,14745599,13434828,16776869)&#xA;'**********TO HERE************&#xA;&#xA;dim Yoffset&#xA;dim YIncrement&#xA;&#xA;YoffSet = 72&#xA;YIncrement = 35&#xA;&#xA;dim lpos&#xA;dim mpos&#xA;dim rpos&#xA;dim lmpos&#xA;dim rmpos&#xA;&#xA;lpos = 100&#xA;mpos = 400&#xA;rpos = 700&#xA;lmpos = mpos - 100&#xA;rmpos = mpos + 100&#xA;&#xA;sub main&#xA;&#xA;&#x9;' get the selected element&#xA;&#xA;&#x9;dim process as EA.Element&#xA;&#x9;set process = Repository.GetTreeSelectedObject&#xA;&#x9;if process.ObjectType = otElement then&#xA;&#x9;&#x9;if process.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;dim userinput&#xA;&#x9;&#x9;&#x9;userinput = MsgBox( &quot;With process boundaries?&quot;, vbYesNoCancel + vbQuestion, &quot;Message Overview Diagram&quot;)&#xA;&#x9;&#x9;&#x9;if userinput &lt;&gt; vbCancel then&#xA;&#x9;&#x9;&#x9;&#x9;' make a new diagram -&gt; MessageOverview&#xA;&#x9;&#x9;&#x9;&#x9;dim overviewDiagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramName&#xA;&#x9;&#x9;&#x9;&#x9;diagramName = process.name &amp; namesuffix&#xA;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramName = diagramName &amp; &quot; with proces boundaries&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;set overviewDiagram = getOwnedDiagramByName(process, diagramName)&#xA;&#x9;&#x9;&#x9;&#x9;if overviewDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set overviewDiagram = process.Diagrams.AddNew(diagramName, &quot;Sequence&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;overviewDiagram.update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange process.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;dim messageflows&#xA;&#x9;&#x9;&#x9;&#x9;set messageflows = getOwnedMessageFlows(process,0, process.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;dim messageflow as EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;dim sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;sequenceNumber = 1&#xA;&#x9;&#x9;&#x9;&#x9;dim boundaries&#xA;&#x9;&#x9;&#x9;&#x9;set boundaries = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;for each messageflow in messageflows&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Add each message flow tot he MessageOverview diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addMessageFlowToDiagram messageFlow, overviewDiagram, process, sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addBoundary messageFlow.Alias, overviewDiagram, boundaries,sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequenceNumber = sequenceNumber +1&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.OpenDiagram(overviewDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;Repository.SaveDiagram(overviewDiagram.DiagramID)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'re-order the lifeLines&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim totalwidth&#xA;&#x9;&#x9;&#x9;&#x9;totalwidth = reorderLifeLines(overviewDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'resize boundaries&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resizeBoundaries boundaries, totalwidth&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'set all messages to Asynchronous&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;setMessagesAsynchronous (overviewDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'reload diagram&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(overviewDiagram.DiagramID)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we are finished&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Finished!&quot;&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;&#xA;&#xA;main&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function resizeBoundaries ( boundaries, totalwidth)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;for each diagramObject in boundaries&#xA;&#xA;&#x9;&#x9;diagramObject.right = totalwidth - diagramObject.left&#xA;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addBoundary(processIDPath, diagram, boundaries, sequenceNumber)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim processID&#xA;&#xA;&#x9;dim processIDs&#xA;&#xA;&#x9;processIDs = Split(processIDPath, &quot;.&quot;) &#xA;&#xA;&#x9;&#xA;&#xA;&#x9;dim level &#xA;&#xA;&#x9;level = Ubound(processIDs) &#xA;&#xA;&#x9;&#xA;&#xA;&#x9;if level &lt; 0 then&#xA;&#xA;&#x9;&#x9;processID = processIDPath&#xA;&#xA;&#x9;&#x9;level = 0&#xA;&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;processID = processIDs(level)&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'debug&#xA;&#xA;&#x9;'Session.Output &quot;processIDPath: &quot; &amp; processIDPath &amp; &quot; level: &quot; &amp; level &amp; &quot; processID: &quot; &amp; processID&#xA;&#xA;&#x9;'check if the last instance of the boundaries with this level is is the same process&#xA;&#xA;&#x9;set diagramObject = getLastBoundaryWithLevel(level, boundaries)&#xA;&#xA;&#x9;dim boundary as EA.Element&#xA;&#xA;&#x9;dim foundit&#xA;&#xA;&#x9;foundit = false&#xA;&#xA;&#x9;if not diagramObject is nothing then&#xA;&#xA;&#x9;&#x9;'check if the diagramObject is about the same process&#xA;&#xA;&#x9;&#x9;set boundary = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;boundary.Alias: &quot; &amp; boundary.Alias &amp; &quot; processID: &quot; &amp; processID &amp; &quot; boundary.Alias = processID &quot; &amp; (boundary.Alias = processID )&#xA;&#xA;&#x9;&#x9;if boundary.Alias = processIDPath then&#xA;&#xA;&#x9;&#x9;&#x9;'found it. Elongate the diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = (YoffSet + (YIncrement * (sequenceNumber + 1))) * -1&#xA;&#xA;&#x9;&#x9;&#x9;'save the diagram object&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;&#x9;foundit = true&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'do the &quot;parent&quot; boundaries first&#xA;&#xA;&#x9;if level &gt; 0 then&#xA;&#xA;&#x9;&#x9;'remove the last ID form the processIDPath to go one level up&#xA;&#xA;&#x9;&#x9;dim lastDelimiter&#xA;&#xA;&#x9;&#x9;lastDelimiter = InstrRev(processIDPath, &quot;.&quot;)&#xA;&#xA;&#x9;&#x9;dim newProcessIDPath &#xA;&#xA;&#x9;&#x9;newProcessIDPath = left(processIDPath, lastDelimiter -1)&#xA;&#xA;&#x9;&#x9;'make or elongate the parent&#xA;&#xA;&#x9;&#x9;addBoundary newProcessIDPath, diagram, boundaries, sequenceNumber&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;if not foundit = true then&#xA;&#xA;&#x9;&#x9;'get the diagram parent element&#xA;&#xA;&#x9;&#x9;dim diagramOwner as EA.Element&#xA;&#xA;&#x9;&#x9;set diagramOwner = Repository.GetElementByID(diagram.parentID)&#xA;&#xA;&#x9;&#x9;'get the owning process for the message flow&#xA;&#xA;&#x9;&#x9;dim process as EA.Element&#xA;&#xA;&#x9;&#x9;set process = Repository.GetElementByID(processID)&#xA;&#xA;&#x9;&#x9;'create a new boundary&#xA;&#xA;&#x9;&#x9;set boundary = diagramOwner.Elements.AddNew(&quot;&quot;, &quot;Boundary&quot;)&#xA;&#xA;&#x9;&#x9;'set the TreePos so we remember which process is used&#xA;&#xA;&#x9;&#x9;boundary.TreePos = processID&#xA;&#xA;&#x9;&#x9;'set the Alias to the alias of the messageFlow&#xA;&#xA;&#x9;&#x9;boundary.Alias = processIDPath&#xA;&#xA;&#x9;&#x9;'borderstyle&#xA;&#xA;&#x9;&#x9;dim borderstyle&#xA;&#xA;&#x9;&#x9;set borderstyle = boundary.Properties(&quot;BorderStyle&quot;)&#xA;&#xA;&#x9;&#x9;borderstyle.Value = &quot;Dotted&quot;&#xA;&#xA;&#x9;&#x9;if level &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;dim colorIndex&#xA;&#xA;&#x9;&#x9;&#x9;colorIndex = level  MOD (UBound(colors) +1)&#xA;&#xA;&#x9;&#x9;&#x9;'color&#xA;&#xA;&#x9;&#x9;&#x9;boundary.SetAppearance 1,0,colors(colorIndex) 'groen&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;'save the boundary&#xA;&#xA;&#x9;&#x9;boundary.Update&#xA;&#xA;&#x9;&#x9;'create a new diagramObject for the boundary&#xA;&#xA;&#x9;&#x9;dim positionString&#xA;&#xA;&#x9;&#x9;positionString =  &quot;l=&quot; &amp; boundaryX * (level +1) &amp; &quot;;r=&quot; &amp; 1000 &amp; &quot;;t=&quot; &amp; YoffSet + (YIncrement * sequenceNumber) &amp; &quot;;b=&quot; &amp; YoffSet + (YIncrement * (sequenceNumber + 1)) &amp; &quot;;&quot;&#xA;&#xA;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;positionString for boundary &quot; &amp; process.Name &amp; &quot;: &quot; &amp; positionString&#xA;&#xA;&#x9;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#xA;&#x9;&#x9;diagramObject.ElementID = boundary.ElementID&#xA;&#xA;&#x9;&#x9;diagramObject.Sequence = 10 - level&#xA;&#xA;&#x9;&#x9;'save the diagram object&#xA;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;'add the diagramObject tot the list of boundaries&#xA;&#xA;&#x9;&#x9;boundaries.Add diagramObject &#xA;&#xA;&#x9;&#x9;'add the text element&#xA;&#xA;&#x9;&#x9;dim hyperlink as EA.Element&#xA;&#xA;&#x9;&#x9;dim hyperlinkName&#xA;&#xA;&#x9;&#x9;dim compositeDiagramID&#xA;&#xA;&#x9;&#x9;hyperlinkName = &quot;$diagram://&quot;&#xA;&#xA;&#x9;&#x9;if not process.CompositeDiagram is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;hyperlinkName = hyperlinkName &amp; process.CompositeDiagram.DiagramGUID&#xA;&#xA;&#x9;&#x9;&#x9;compositeDiagramID = process.CompositeDiagram.DiagramID&#xA;&#xA;&#x9;&#x9;else&#xA;&#xA;&#x9;&#x9;&#x9;hyperlinkName = hyperlinkName &amp; diagram.DiagramGUID&#xA;&#xA;&#x9;&#x9;&#x9;compositeDiagramID = diagram.DiagramID&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;set hyperlink = diagramOwner.Elements.AddNew(hyperlinkName, &quot;Text&quot;)&#xA;&#xA;&#x9;&#x9;hyperlink.Notes = process.Name&#xA;&#xA;&#x9;&#x9;hyperlink.Update&#xA;&#xA;&#x9;&#x9;'set the link to the composite diagram&#xA;&#xA;&#x9;&#x9;dim hyperlinkSQL&#xA;&#xA;&#x9;&#x9;hyperlinkSQL = &quot;update t_object set PDATA1 = &quot; &amp; compositeDiagramID &amp; &quot; where Object_ID = &quot; &amp; hyperlink.ElementID&#xA;&#xA;&#x9;&#x9;Repository.Execute hyperlinkSQL&#xA;&#xA;&#x9;&#x9;'add the hyperlink to the diagram&#xA;&#xA;&#x9;&#x9;positionstring = &quot;l=&quot; &amp; boundaryX * (level +1) &amp; &quot;;r=&quot; &amp; 500 &amp; &quot;;t=&quot; &amp; YoffSet + (YIncrement * sequenceNumber) &amp; &quot;;b=&quot; &amp;  YoffSet + (YIncrement * sequenceNumber) + 10 &amp; &quot;;&quot;&#xA;&#xA;&#x9;&#x9;dim hyperlinkDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;&#x9;set hyperlinkDiagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#xA;&#x9;&#x9;hyperlinkDiagramObject.SetStyleEx &quot;HideIcon&quot;,&quot;1&quot;&#xA;&#xA;&#x9;&#x9;hyperlinkDiagramObject.ElementID = hyperlink.ElementID&#xA;&#xA;&#x9;&#x9;hyperlinkDiagramObject.Update&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getLastBoundaryWithLevel(level, boundaries)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;set diagramObject = nothing&#xA;&#xA;&#x9;set getLastBoundaryWithLevel = nothing&#xA;&#xA;&#x9;dim i&#xA;&#xA;&#x9;for i = boundaries.Count -1  to O step -1&#xA;&#xA;&#x9;&#x9;set diagramObject = boundaries(i)&#xA;&#xA;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;level: &quot; &amp; level &amp; &quot; diagramObject.left: &quot; &amp; diagramObject.left &amp; &quot; diagramObject.left / boundaryX: &quot; &amp; diagramObject.left / boundaryX&#xA;&#xA;&#x9;&#x9;if (diagramObject.left / boundaryX) = (level + 1) then&#xA;&#xA;&#x9;&#x9;&#x9;'debug &#xA;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;found one!&quot;&#xA;&#xA;&#x9;&#x9;&#x9;'found one with the same level&#xA;&#xA;&#x9;&#x9;&#x9;set getLastBoundaryWithLevel = diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function setMessagesAsynchronous (diagram)&#xA;&#xA;'There no clean way to do it we we do it with a dirty SQL update&#xA;&#xA;&#x9;if (diagram.DiagramID &gt; 0) then&#xA;&#xA;&#x9;&#x9;dim sqlupdate &#xA;&#xA;&#x9;&#x9;sqlupdate = &quot;update t_connector set PDATA1 = 'Asynchronous' where DiagramID =&quot; &amp; diagram.DiagramID&#xA;&#xA;&#x9;&#x9;Repository.Execute sqlupdate&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function reorderLifeLines(diagram)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#xA;&#xA;&#x9;dim xpos&#xA;&#xA;&#x9;xpos = 50&#xA;&#xA;&#x9;dim cmsName&#xA;&#xA;&#x9;cmsName = &quot;Central Market System&quot;&#xA;&#xA;&#x9;dim backendName&#xA;&#xA;&#x9;backendName = &quot;DGO-BE System&quot;&#xA;&#xA;&#x9;dim backendAdded&#xA;&#xA;&#x9;backendAdded = false&#xA;&#xA;&#x9;dim orderedDiagramObjects&#xA;&#xA;&#x9;Set orderedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;dim classifier as EA.Element&#xA;&#xA;&#x9;'reorder them in a new arraylist&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;set classifier = getDiagramObjectClassifier(diagramObject)&#xA;&#xA;&#x9;&#x9;if not classifier is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;if classifier.Name = backendName then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;backendAdded = true&#xA;&#xA;&#x9;&#x9;&#x9;elseif classifier.Name = cmsName then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if not backendAdded then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert orderedDiagramObjects.Count -1, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert 0, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;'reset their positions&#xA;&#xA;&#x9;for each diagramObject in orderedDiagramObjects&#xA;&#xA;&#x9;&#x9;diagramObject.left = xpos&#xA;&#xA;&#x9;&#x9;diagramObject.right = xpos + defaultwidth&#xA;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;xpos = xpos + xIncrement&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;reorderLifeLines = xpos&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getDiagramObjectClassifier(diagramObject)&#xA;&#xA;&#x9;set getDiagramObjectClassifier = nothing&#xA;&#xA;&#x9;dim instance as EA.Element&#xA;&#xA;&#x9;set instance = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;if not instance is nothing and instance.ClassifierID &gt; O then&#xA;&#xA;&#x9;&#x9;set getDiagramObjectClassifier = Repository.GetElementByID(instance.ClassifierID)&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addMessageFlowToDiagram(messageFlow, diagram, process, sequenceNumber)&#xA;&#xA;&#x9;'get the start and end element&#xA;&#xA;&#x9;dim startElement as EA.Element&#xA;&#xA;&#x9;dim startDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim endElement as EA.Element&#xA;&#xA;&#x9;dim endDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim startClassifier as EA.Element&#xA;&#xA;&#x9;dim endClassifier as EA.Element&#xA;&#xA;&#x9;dim startLifeLine as EA.Element&#xA;&#xA;&#x9;dim endLifeLine as EA.Element&#xA;&#xA;&#x9;dim sequenceMessage as EA.Connector&#xA;&#xA;&#x9;set startElement = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#xA;&#x9;set endElement = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#xA;&#x9;if not startElement is nothing AND not endElement is nothing then&#xA;&#xA;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;start and endElement found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#xA;&#x9;&#x9;set startClassifier = getElementClassifier(startElement)&#xA;&#xA;&#x9;&#x9;set endClassifier = getElementClassifier(endElement)&#xA;&#xA;&#x9;&#x9;if not startClassifier is nothing AND not endClassifier is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;'add message between start and end&#xA;&#xA;&#x9;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;start and endClassifier found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#xA;&#x9;&#x9;&#x9;set startLifeLine = getInstanceForClassifier(startClassifier, diagram, process)&#xA;&#xA;&#x9;&#x9;&#x9;set endLifeLine = getInstanceForClassifier(endClassifier, diagram, process)&#xA;&#xA;&#x9;&#x9;&#x9;if not startLifeLine is nothing and not endLifeLine is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;start and endLifeLine found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set sequenceMessage = addSequenceMessage(messageFlow, startLifeLine,endLifeLine,sequenceNumber)&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function getInstanceForClassifier(classifier, diagram, process)&#xA;&#xA;&#x9;set getInstanceForClassifier = nothing&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;'get the element&#xA;&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;&#x9;if (not element is nothing) and element.ClassifierID = classifier.ElementID then&#xA;&#xA;&#x9;&#x9;&#x9;set getInstanceForClassifier = element&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;'if not already existing then add new one&#xA;&#xA;&#x9;if getInstanceForClassifier is nothing then&#xA;&#xA;&#x9;&#x9;set getInstanceForClassifier = addNewLifeline(classifier,process)&#xA;&#xA;&#x9;&#x9;'add it to the diagram&#xA;&#xA;&#x9;&#x9;addElementToDiagram getInstanceForClassifier, diagram, 50, 50 &#xA;&#xA;&#x9;&#x9;'Make sure the diagram knows that there is a new diagramObject&#xA;&#xA;&#x9;&#x9;diagram.DiagramObjects.Refresh&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addNewLifeline(classifier,process)&#xA;&#xA;&#x9;dim lifeLine as EA.Element&#xA;&#xA;&#x9;set lifeLine = nothing&#xA;&#xA;&#x9;set lifeLine = process.Elements.AddNew(&quot;&quot;,&quot;Object&quot;)&#xA;&#xA;&#x9;if not lifeLine is nothing then&#xA;&#xA;&#x9;&#x9;lifeLine.ClassifierID = classifier.ElementID&#xA;&#xA;&#x9;&#x9;lifeLine.Update&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;set addNewLifeline = lifeline&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addSequenceMessage(messageFlow, startLifeLine,endLifeLine,sequenceNumber)&#xA;&#xA;&#x9;set addSequenceMessage = nothing&#xA;&#xA;&#x9;dim sequenceConnector as EA.Connector&#xA;&#xA;&#x9;dim messageName&#xA;&#xA;&#x9;messageName = &quot;&quot;&#xA;&#xA;&#x9;'get the name of the sequence message&#xA;&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#xA;&#x9;dim messageElement as EA.Element&#xA;&#xA;&#x9;'Get the messageRef tagged value&#xA;&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; O then&#xA;&#xA;&#x9;&#x9;&#x9; set messageElement = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#xA;&#x9;&#x9;&#x9; if not messageElement is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;messageName = messageElement.Name&#xA;&#xA;&#x9;&#x9;&#x9; end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;if len(messageName) = 0 then&#xA;&#xA;&#x9;&#x9;dim intermediateEvent as EA.Element&#xA;&#xA;&#x9;&#x9;set intermediateEvent = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#xA;&#x9;&#x9;if intermediateEvent.Stereotype &lt;&gt; &quot;IntermediateEvent&quot; then&#xA;&#xA;&#x9;&#x9;set intermediateEvent = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;messageName = intermediateEvent.Name &amp; &quot;[MessagRef tag missing!]&quot;&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'debug&#xA;&#xA;&#x9;'messageName = messageFlow.Alias &amp; &quot;.&quot; &amp; messageName &#xA;&#xA;&#x9;'add the connector&#xA;&#xA;&#x9;set sequenceConnector = startLifeLine.Connectors.AddNew(messageName,&quot;Sequence&quot;)&#xA;&#xA;&#x9;sequenceConnector.SupplierID = endLifeLine.ElementID&#xA;&#xA;&#x9;sequenceConnector.SequenceNo = sequenceNumber&#xA;&#xA;&#x9;sequenceConnector.ClientEnd.Constraint = messageFlow.Name&#xA;&#xA;&#x9;sequenceConnector.Update&#xA;&#xA;&#x9;set addSequenceMessage = sequenceConnector&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function getElementClassifier(element)&#xA;&#xA;&#x9;'Initialise&#xA;&#xA;&#x9;set getElementClassifier = nothing&#xA;&#xA;&#x9;dim currentElement as EA.Element&#xA;&#xA;&#x9;set currentElement = element&#xA;&#xA;&#x9;dim pool as EA.Element&#xA;&#xA;&#x9;'intermediate event&#xA;&#xA;&#x9;if currentElement.Type = &quot;Event&quot; and currentElement.ParentID &gt; 0 then&#xA;&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentElement.ParentID)&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'lane&#xA;&#xA;&#x9;if currentElement.Type = &quot;ActivityPartition&quot; and currentElement.Stereotype = &quot;Lane&quot; AND currentElement.ParentID &gt; 0 then&#xA;&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentElement.ParentID)&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'Pool&#xA;&#xA;&#x9;if currentElement.Type = &quot;ActivityPartition&quot; and currentElement.Stereotype = &quot;Pool&quot; AND currentElement.ClassfierID &gt; 0 then&#xA;&#xA;&#x9;&#x9;set getElementClassifier = Repository.GetElementByID(currentElement.ClassfierID)&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getXpos(element)&#xA;&#xA;&#x9;getXpos = lpos&#xA;&#xA;&#x9;if element.Type = &quot;Event&quot; then&#xA;&#xA;&#x9;&#x9;getXpos = mpos&#xA;&#xA;&#x9;elseif element.Type = &quot;ActivityPartition&quot; then&#xA;&#xA;&#x9;&#x9;getXpos = lpos&#xA;&#xA;&#x9;&#x9;'DGO-BE- System is the only one that should be on the right side.&#xA;&#xA;&#x9;&#x9;if element.ClassfierID &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;dim actor&#xA;&#xA;&#x9;&#x9;&#x9;set actor = Repository.GetElementByID(element.ClassfierID)&#xA;&#xA;&#x9;&#x9;&#x9;if not actor is nothing AND actor.name = &quot;DGO-BE System&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;getXpos = rpos&#xA;&#xA;&#x9;&#x9;&#x9;end if &#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addMessageRefToDiagram(messageFlow, diagram, y, x,process)&#xA;&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#xA;&#x9;dim messageElement as EA.Element&#xA;&#xA;&#x9;'Get the messageRef tagged value&#xA;&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; O then&#xA;&#xA;&#x9;&#x9;&#x9; set messageElement = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#xA;&#x9;&#x9;&#x9; if not messageElement is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'add a local object for the message&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim messageObject as EA.Element&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set messageObject = process.Elements.AddNew(&quot;&quot;, &quot;Object&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;messageObject.ClassfierID = messageElement.ElementID&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;synchronizeElement messageObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'add a diagramObject for the local object&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set diagramObject = addElementToDiagram(messageObject, diagram, y , x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;setFontOnDiagramObject diagramObject, &quot;Arial Narrow&quot;, 12&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;&#x9; end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getConnectorTag(messageFlow, tagName)&#xA;&#xA;&#x9;dim connectorTag as EA.ConnectorTag&#xA;&#xA;&#x9;set getConnectorTag = nothing&#xA;&#xA;&#x9;for each connectorTag in messageFlow.TaggedValues&#xA;&#xA;&#x9;&#x9;if connectorTag.Name = tagName then&#xA;&#xA;&#x9;&#x9;&#x9;set getConnectorTag = connectorTag&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim positionString&#xA;&#xA;&#x9;'determine height and width&#xA;&#xA;&#x9;dim width &#xA;&#xA;&#x9;dim height&#xA;&#xA;&#x9;dim elementType&#xA;&#xA;&#x9;dim setVPartition &#xA;&#xA;&#x9;setVPartition = false&#xA;&#xA;&#x9;elementType = element.Type&#xA;&#xA;&#x9;select case elementType       &#xA;&#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;'default width and height&#xA;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#xA;&#x9;end select&#xA;&#xA;&#x9;if diagram.Type = &quot;Sequence&quot; then&#xA;&#xA;&#x9;&#x9;width = 90&#xA;&#xA;&#x9;&#x9;height = 150&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#xA;&#x9;x = x - width/2&#xA;&#xA;&#x9;'set the position of the diagramObject&#xA;&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#xA;&#x9;if setVPartition then&#xA;&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;diagramObject.Update&#xA;&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function messageFlowIsOnDiagram(messageFlow, diagram)&#xA;&#xA;&#x9;dim beginElement as EA.DiagramObject&#xA;&#xA;&#x9;dim endElement as EA.DiagramObject&#xA;&#xA;&#x9;set beginElement = getDiagramObjectForElementID(messageFlow.ClientID, diagram)&#xA;&#xA;&#x9;set endElement = getDiagramObjectForElementID(messageFlow.SupplierID, diagram)&#xA;&#xA;&#x9;if not beginElement is nothing and not endElement is nothing then&#xA;&#xA;&#x9;&#x9;messageFlowIsOnDiagram = true&#xA;&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;messageFlowIsOnDiagram = false&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;'returns all owned messages of this process and of its subprocesses.&#xA;&#xA;function getOwnedMessageFlows(process, level, processIDPath)&#xA;&#xA;&#x9;dim messageflows&#xA;&#xA;&#x9;dim messageFlowLinks&#xA;&#xA;&#x9;dim messageHeights&#xA;&#xA;&#x9;Set messageflows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;Set messageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;' find the composite diagam for the selected element&#xA;&#xA;&#x9;dim compositeDiagram as EA.Diagram&#xA;&#xA;&#x9;set compositeDiagram = process.CompositeDiagram &#xA;&#xA;&#x9;' Make a list of all MessageFlows, ordered by their vertical starting position&#xA;&#xA;&#x9;if not compositeDiagram is nothing then&#xA;&#xA;&#x9;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#xA;&#x9;&#x9;dim messageFlow as EA.Connector&#xA;&#xA;&#x9;&#x9;for each messageFlowLink in compositeDiagram.DiagramLinks&#xA;&#xA;&#x9;&#x9;&#x9;if messageFlowLink.IsHidden = false then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set messageFlow = Repository.GetConnectorByID(messageFlowLink.ConnectorID)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim isOnDiagram&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;isOnDiagram = messageFlowIsOnDiagram(messageFlow, compositeDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if isOnDiagram and messageFlow.Stereotype = &quot;MessageFlow&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'ok, found a messageflow, add messageFlow and messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the RouteStyle to store the process id&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.RouteStyle = process.ElementID&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the SequenceNo to store the level&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.SequenceNo = level&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the alias field to store the processIDPath&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.Alias = processIDPath&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlows.Add messageFlow&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlowLinks.Add messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;'sort the messageflows by their location in the diagram&#xA;&#xA;&#x9;&#x9;set messageHeights = sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram )&#xA;&#xA;&#x9;&#x9;' Make a list of all Activities on the diagram ordered by their vertical position. (if equal from left to right)&#xA;&#xA;&#x9;&#x9;dim sortedActivities&#xA;&#xA;&#x9;&#x9;set sortedActivities = getOrderedActivities(compositeDiagram)&#xA;&#xA;&#x9;&#x9;'Do the same thing for each Activity and add those messageflows to the list&#xA;&#xA;&#x9;&#x9;dim sortedActivity as EA.Element&#xA;&#xA;&#x9;&#x9;dim indexShift&#xA;&#xA;&#x9;&#x9;indexShift = 0&#xA;&#xA;&#x9;&#x9;for each sortedActivity in sortedActivities&#xA;&#xA;&#x9;&#x9;&#x9;dim ownedMessageFlows&#xA;&#xA;&#x9;&#x9;&#x9;set ownedMessageFlows = getOwnedMessageFlows(sortedActivity, level +1, processIDPath &amp; &quot;.&quot; &amp; sortedActivity.ElementID)&#xA;&#xA;&#x9;&#x9;&#x9;if ownedMessageFlows.Count &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'Check the height of the sorted activity against the sorted messageHeights&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim activityDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set activityDiagramObject = getDiagramObjectForElementID(sortedActivity.ElementID, compositeDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim heightindex&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;heightindex = getHeightIndex(messageHeights,activityDiagramObject.top)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;heightindex for &quot; &amp; sortedActivity.Name &amp; &quot;with activityDiagramObject.top: &quot; &amp; activityDiagramObject.top &amp;  &quot; heightindex : &quot; &amp; heightindex&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'insert the messageflows at the heightindex + indexShift&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim insertIndex&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;insertIndex = heightindex + indexShift&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim j&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for j = ownedMessageFlows.Count -1 to 0 step -1&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;inserting: &quot; &amp; ownedMessageFlows(j).Name &amp; &quot; before: &quot; &amp; messageflows(insertIndex).Name&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageflows.Insert insertIndex, ownedMessageFlows(j)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'calculate new index shift&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;indexShift = IndexShift + ownedMessageFlows.Count&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;set getOwnedMessageFlows = messageFlows&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getHeightIndex(messageHeights, height)&#xA;&#xA;&#x9;dim i &#xA;&#xA;&#x9;getHeightIndex = messageHeights.Count&#xA;&#xA;&#x9;for i = 0 to messageHeights.Count -1&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;height: &quot; &amp; height &amp; &quot;messageHeights(i): &quot; &amp; messageHeights(i) &#xA;&#xA;&#x9;&#x9;if height &gt; messageHeights(i) then&#xA;&#xA;&#x9;&#x9;&#x9;getHeightIndex = i&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getOrderedActivities(diagram)&#xA;&#xA;&#x9;'loop all diagram object&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim orderedActivities&#xA;&#xA;&#x9;dim orderedDiagramObjects&#xA;&#xA;&#x9;set orderedActivities = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;set orderedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;dim element as EA.Element&#xA;&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;&#x9;if not element is nothing and element.Type = &quot;Activity&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;dim added &#xA;&#xA;&#x9;&#x9;&#x9;added = false&#xA;&#xA;&#x9;&#x9;&#x9;dim i&#xA;&#xA;&#x9;&#x9;&#x9;for i = 0 to orderedDiagramObjects.Count - 1&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.top = orderedDiagramObjects(i).top then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'height is equal, check x position&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.left &lt;= orderedDiagramObjects(i).left then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert i, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;orderedActivities.Insert i, element&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;elseif diagramObject.top &gt; orderedDiagramObjects(i).top then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add before&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert i, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedActivities.Insert i, element&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;'if not added yet then add it to the back of the list&#xA;&#xA;&#x9;&#x9;&#x9;if not added then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedActivities.Add element&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;set getOrderedActivities = orderedActivities&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram)&#xA;&#xA;&#x9;dim messageFlow as EA.Connector&#xA;&#xA;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#xA;&#x9;dim sortedMessageFlows&#xA;&#xA;&#x9;dim sortedMessageFlowLinks&#xA;&#xA;&#x9;dim sortedHeights&#xA;&#xA;&#x9;Set sortedMessageFlows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;Set sortedMessageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;Set sortedHeights = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;dim i&#xA;&#xA;&#x9;for i = 0 to messageFlows.Count -1&#xA;&#xA;&#x9;&#x9;set messageFlow = messageFlows(i)&#xA;&#xA;&#x9;&#x9;set messageFlowLink = messageFlowLinks(i)&#xA;&#xA;&#x9;&#x9;dim height&#xA;&#xA;&#x9;&#x9;height = getStartingHeight(messageFlow, messageFlowLink,compositeDiagram)&#xA;&#xA;&#x9;&#x9;dim added&#xA;&#xA;&#x9;&#x9;added = false&#xA;&#xA;&#x9;&#x9;'loop the already sorted elements&#xA;&#xA;&#x9;&#x9;dim j&#xA;&#xA;&#x9;&#x9;for j = 0 to sortedMessageFlows.Count -1&#xA;&#xA;&#x9;&#x9;&#x9;dim sortedHeight&#xA;&#xA;&#x9;&#x9;&#x9;sortedHeight = sortedHeights(j)&#xA;&#xA;&#x9;&#x9;&#x9;if sortedHeight &lt;= height then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlows.Insert j, messageFlow &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Insert j, messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sortedHeights.Insert j, height&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;'if it is the first element then just add it&#xA;&#xA;&#x9;&#x9;if not added then&#xA;&#xA;&#x9;&#x9;&#x9;sortedMessageFlows.Add messageFlow&#xA;&#xA;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Add messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;sortedHeights.Add height&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;set messageFlows = sortedMessageFlows&#xA;&#xA;&#x9;set messageFlowLinks = sortedMessageFlowLinks&#xA;&#xA;&#x9;set sortMessageFlows = sortedHeights&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function getStartingHeight(connector, diagramLink, diagram)&#xA;&#xA;&#x9;'check start element&#xA;&#xA;&#x9;dim startElement as EA.Element&#xA;&#xA;&#x9;dim elementID&#xA;&#xA;&#x9;set startElement = Repository.GetElementByID(connector.ClientID)&#xA;&#xA;&#x9;elementID = startElement.ElementID&#xA;&#xA;&#x9;if startElement.Type = &quot;ActivityPartition&quot; then&#xA;&#xA;&#x9;&#x9;'check end element&#xA;&#xA;&#x9;&#x9;dim endElement as EA.Element&#xA;&#xA;&#x9;&#x9;set endElement = Repository.GetElementByID(connector.SupplierID)&#xA;&#xA;&#x9;&#x9;if endElement.Type &lt;&gt; &quot;ActivityPartition&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;elementID = endElement.ElementID&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;set diagramObject = getDiagramObjectForElementID(ElementID, diagram)&#xA;&#xA;&#x9;if not diagramObject is nothing then&#xA;&#xA;&#x9;&#x9;getStartingHeight = diagramObject.top&#xA;&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;getStartingHeight = 0&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getDiagramObjectForElementID(elementID, diagram)&#xA;&#xA;&#x9;set getDiagramObjectForElementID = nothing&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;if diagramObject.ElementID = elementID then&#xA;&#xA;&#x9;&#x9;&#x9;set getDiagramObjectForElementID = diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function setLinkStyles(overviewDiagram)&#xA;&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#xA;&#x9;for each diagramLink in overviewDiagram.DiagramLinks&#xA;&#xA;&#x9;&#x9;dim styleParts&#xA;&#xA;&#x9;&#x9;styleParts = Split (diagramLink.Style, &quot;;&quot;) &#xA;&#xA;&#x9;&#x9;dim i&#xA;&#xA;&#x9;&#x9;dim stylepart&#xA;&#xA;&#x9;&#x9;dim modepart &#xA;&#xA;&#x9;&#x9;modepart = &quot;Mode=2&quot;&#xA;&#xA;&#x9;&#x9;dim modeSet&#xA;&#xA;&#x9;&#x9;modeSet = false&#xA;&#xA;&#x9;&#x9;dim treepart&#xA;&#xA;&#x9;&#x9;treepart = &quot;TREE=OR&quot;&#xA;&#xA;&#x9;&#x9;dim treeSet&#xA;&#xA;&#x9;&#x9;treeSet = false&#xA;&#xA;&#x9;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#xA;&#x9;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;stylepart: &quot; &amp; stylepart &amp; &quot;, i: &quot; &amp; i &amp; &quot;, Instr(stylepart,Mode=): &quot; &amp; Instr(stylepart,&quot;Mode=&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt;= 0 then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;styleParts(i) = modepart&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;modeSet = true&#xA;&#xA;'&#x9;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt;= 0 then&#xA;&#xA;'&#x9;&#x9;&#x9;&#x9;styleParts(i) = treepart&#xA;&#xA;'&#x9;&#x9;&#x9;&#x9;treeSet = true&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;diagramLink.Style = join(styleParts,&quot;;&quot;)&#xA;&#xA;&#x9;&#x9;if not modeSet then&#xA;&#xA;&#x9;&#x9;&#x9;if len(diagramLink.Style) &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Style = modepart &amp; &quot;;&quot;&amp; diagramLink.Style&#xA;&#xA;&#x9;&#x9;&#x9;else &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Style = modepart &amp; &quot;;&quot;&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;'&#x9;&#x9;if not treeSet then&#xA;&#xA;'&#x9;&#x9;&#x9;diagramLink.Style = diagramLink.Style &amp; &quot;;&quot; &amp; treepart&#xA;&#xA;'&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;diagramLink.Update&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getOwnedDiagramByName(element, diagramName)&#xA;&#xA;&#x9;set getOwnedDiagramByName = nothing&#xA;&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#xA;&#x9;for each diagram in element.Diagrams&#xA;&#xA;&#x9;&#x9;if diagram.Name = diagramName then&#xA;&#xA;&#x9;&#x9;&#x9;set getOwnedDiagramByName = diagram&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="353"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FDBEC1DF-3BBF-425c-9A15-1BFBB0F7A372}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Deployment-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Deployment Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to build a Deployment Diagram  &#xA;' Date: 29-Mar-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;sub CreateDeploymentDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Deployment Diagram script is activated&quot;)&#xA;&#x9;&#xA;&#x9;if instr(Ucase(theSelectedElement.Notes),&quot;C4-PLANTUML&quot;) &gt; 0 then&#xA;&#x9;&#x9;CreateC4Diagram ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Create Deployment Diagram Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="354"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{897C0B38-2C75-4b72-A88C-E14611BCE05C}"/>
			<Column name="ScriptAuthor" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Sort-Array&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Sort_Array&#xA;' Author: David Anderson&#xA;' Purpose: Sort a multi dimensional array&#xA;' Date: 3-Feb-2019&#xA;'&#xA;'==-----------------------------------------------------------==&#xA;'== This entire piece of code was shamelessly stolen from     ==&#xA;'==  the 4 Guys From Rolla WebWeekly newsletter, translated   ==&#xA;'==  to VBScript and changed into server-side ASP code.       ==&#xA;'== Every effort has been made to keep comments intact.       ==&#xA;'==                                                           ==&#xA;'== This version sorts 2-dimensional arrays on a single field ==&#xA;'==-----------------------------------------------------------==&#xA;&#xA;&#xA;Sub SwapRows(ary,row1,row2)&#xA;  '== This proc swaps two rows of an array &#xA;  Dim x,tempvar&#xA;  For x = 0 to Ubound(ary,2)&#xA;    tempvar = ary(row1,x)    &#xA;    ary(row1,x) = ary(row2,x)&#xA;    ary(row2,x) = tempvar&#xA;  Next&#xA;End Sub  'SwapRows&#xA;&#xA;Sub QuickSort(vec,loBound,hiBound,SortField)&#xA;&#xA;  '==--------------------------------------------------------==&#xA;  '== Sort a 2 dimensional array on SortField                ==&#xA;  '==                                                        ==&#xA;  '== This procedure is adapted from the algorithm given in: ==&#xA;  '==    ~ Data Abstractions &amp; Structures using C++ by ~     ==&#xA;  '==    ~ Mark Headington and David Riley, pg. 586    ~     ==&#xA;  '== Quicksort is the fastest array sorting routine for     ==&#xA;  '== unordered arrays.  Its big O is  n log n               ==&#xA;  '==                                                        ==&#xA;  '== Parameters:                                            ==&#xA;  '== vec       - array to be sorted                         ==&#xA;  '== SortField - The field to sort on (2nd dimension value) ==&#xA;  '== loBound and hiBound are simply the upper and lower     ==&#xA;  '==   bounds of the array's 1st dimension.  It's probably  ==&#xA;  '==   easiest to use the LBound and UBound functions to    ==&#xA;  '==   set these.                                           ==&#xA;  '==--------------------------------------------------------==&#xA;&#xA;  Dim pivot(),loSwap,hiSwap,temp,counter&#xA;  Redim pivot (Ubound(vec,2))&#xA;&#xA;  '== Two items to sort&#xA;  if hiBound - loBound = 1 then&#xA;    if vec(loBound,SortField) &gt; vec(hiBound,SortField) then Call SwapRows(vec,hiBound,loBound)&#xA;  End If&#xA;&#xA;  '== Three or more items to sort&#xA;  &#xA;  For counter = 0 to Ubound(vec,2)&#xA;    pivot(counter) = vec(int((loBound + hiBound) / 2),counter)&#xA;    vec(int((loBound + hiBound) / 2),counter) = vec(loBound,counter)&#xA;    vec(loBound,counter) = pivot(counter)&#xA;  Next&#xA;&#xA;  loSwap = loBound + 1&#xA;  hiSwap = hiBound&#xA;  &#xA;  do&#xA;    '== Find the right loSwap&#xA;    while loSwap &lt; hiSwap and vec(loSwap,SortField) &lt;= pivot(SortField)&#xA;      loSwap = loSwap + 1&#xA;    wend&#xA;    '== Find the right hiSwap&#xA;    while vec(hiSwap,SortField) &gt; pivot(SortField)&#xA;      hiSwap = hiSwap - 1&#xA;    wend&#xA;    '== Swap values if loSwap is less then hiSwap&#xA;    if loSwap &lt; hiSwap then Call SwapRows(vec,loSwap,hiSwap)&#xA;&#xA;&#xA;  loop while loSwap &lt; hiSwap&#xA;  &#xA;  For counter = 0 to Ubound(vec,2)&#xA;    vec(loBound,counter) = vec(hiSwap,counter)&#xA;    vec(hiSwap,counter) = pivot(counter)&#xA;  Next&#xA;    &#xA;  '== Recursively call function .. the beauty of Quicksort&#xA;    '== 2 or more items in first section&#xA;    if loBound &lt; (hiSwap - 1) then Call QuickSort(vec,loBound,hiSwap-1,SortField)&#xA;    '== 2 or more items in second section&#xA;    if hiSwap + 1 &lt; hibound then Call QuickSort(vec,hiSwap+1,hiBound,SortField)&#xA;&#xA;End Sub  'QuickSort"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="355"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="PlantUML"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="356"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{86EC8BF3-09C0-451b-844D-9C971D8A07D7}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Transform Class Into Schema&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Model Management Utilities&#xA;&#xA;'&#xA;' Script Name: Transform Class Into Schema&#xA;' Author:&#xA;' Purpose: Transforms a selected class in a diagram into a JSON schema, including all connectors and properties.&#xA;' Date: 10/04/2024&#xA;&#xA;&#x9;&#xA;sub OnDiagramScript()&#xA;&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim control&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim controlName&#x9;&#x9;'as string&#xA;&#x9;dim package&#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim flag &#x9;&#x9;&#x9;' as boolean&#xA;&#x9;dim jsonElement     as EA.Element&#xA;&#x9;' flag identifies whether schema has been generated already&#xA;&#x9;flag = false&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;if currentDiagram.SelectedObjects.Count = 1 then&#xA;&#x9;&#x9;for each selectedObject in currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedObject.ElementID) &#xA;&#x9;&#x9;&#x9;if selectedElement.Type = &quot;Class&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Class found, starting conversion.....&quot;&#xA;&#x9;&#x9;&#x9;&#x9;set package = Repository.GetPackageByID(selectedElement.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;' iterate the elements in the package of the selected element&#xA;&#x9;&#x9;&#x9;&#x9;for each control in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;controlName = selectedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;controlName = Replace (controlName, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' if the selected element has already been generated, ignore it and continue&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if control.Stereotype = &quot;TMF_JSON_Schema&quot; and control.Name = controlName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;This class already has a JSON element&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set jsonElement = control&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;flag = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;' if the JSON Schema has not yet been generated, generate it&#xA;&#x9;&#x9;&#x9;&#x9;if flag = false then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set jsonElement = TransferClass(selectedElement, currentDiagram)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;' add any aggregations&#xA;&#x9;&#x9;&#x9;&#x9;SearchForAggregation selectedElement, currentDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;' add any associations&#xA;&#x9;&#x9;&#x9;&#x9;CreateAssociation selectedElement, jsonElement&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(currentDiagram.diagramID)&#xA;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;The diagram object must be a class&quot;, promptOK&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;flag = false&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires an object to be selected in a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;' creates a json element &#xA;function TransferClass (element, diagram)&#xA;&#x9;dim jsonElement as EA.Element&#xA;&#x9;dim package as EA.Package&#xA;&#xA;&#x9;set package = Repository.GetPackageByID (element.PackageID)&#xA;&#x9;set jsonElement = Package.Elements.AddNew (Element.Name, &quot;TMF_JSON_Schema&quot;)&#xA;&#x9;' jsonElement.Stereotype = &quot;TMF_JSON_Schema&quot;&#xA;&#x9;jsonElement.StereotypeEx = &quot;TMF_JSON_Schema,dModelClass&quot;&#xA;&#x9;jsonElement.Name = Element.Name&#xA;&#x9;jsonElement.Name = replace(jsonElement.Name, &quot; &quot;, &quot;&quot;)&#xA;&#x9;jsonElement.Notes = Element.Notes&#xA;&#x9;jsonElement.Gentype = &quot;UML2&quot;&#xA;&#x9;jsonElement.Update&#xA;&#x9;Session.Output &quot;JSONSchema Created&quot;&#xA;&#x9;CopyAttributes element, jsonElement&#xA;&#x9;Session.Output &quot;Attributes copied&quot;&#xA;&#x9;CreateRealizationConn element, jsonElement&#xA;&#x9;Session.Output &quot;Realisation connector created&quot;&#xA;&#x9;CreateDiagramObject jsonElement&#xA;&#x9;Session.Output &quot;Diagram object created&quot;&#xA;&#x9;set TransferClass = jsonElement&#xA;end function&#xA;&#xA;sub CopyAttributes (element, jsonElement)&#xA;&#x9;dim i  ' as index&#xA;&#x9;dim newAttr as EA.Attribute&#xA;&#x9;dim attrVal as EA.Attribute&#xA;&#xA;&#x9;for i = 0 to element.Attributes.Count - 1&#xA;&#x9;&#x9;set attrVal = element.Attributes.GetAt(i)&#xA;&#x9;&#x9;set newAttr = jsonElement.Attributes.AddNew (attrVal.Name, attrVal.Type)&#xA;&#x9;&#x9;newAttr.Name = replace (newAttr.Name, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;newAttr.Stereotype = attrVal.Stereotype&#xA;&#x9;&#x9;newAttr.Notes = attrVal.Notes&#xA;&#x9;&#x9;newAttr.Update&#xA;&#x9;&#x9;jsonElement.Attributes.Refresh&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub CreateRealizationConn (source, target)&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;&#xA;&#x9;set newConnector = source.Connectors.AddNew (&quot;Realization&quot;, &quot;Realization&quot;)&#xA;&#x9;newConnector.ClientID = target.ElementID&#xA;&#x9;newConnector.SupplierID = source.ElementID&#xA;&#x9;newConnector.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;end sub&#xA;&#xA;sub CreateDiagramObject (jsonElement)&#xA;&#x9;dim dObject as EA.DiagramObject&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#xA;&#x9;set diagram = Repository.GetCurrentDiagram&#xA;&#x9;set dObject = diagram.DiagramObjects.AddNew (&quot;&quot;, &quot;&quot;)&#xA;&#x9;dObject.ElementID = jsonElement.ElementID&#xA;&#xA;&#x9;dObject.Update()&#xA;&#x9;diagram.Update()&#xA;&#x9;diagram.DiagramObjects.Refresh()&#xA;end sub&#xA;&#xA;&#xA;sub SearchForAggregation (element, diagram)&#xA;&#x9;dim i ' as index&#xA;&#x9;dim generalization as EA.Connector&#xA;&#x9;dim aggregator&#x9;as EA.Element&#xA;&#x9;dim package &#x9;as EA.Package&#xA;&#x9;dim control&#x9;&#x9;as EA.Element&#xA;&#x9;dim jsonControl as EA.Element&#xA;&#x9;dim controlName 'as string&#xA;&#x9;dim flag &#x9;&#x9;'as boolean&#xA;&#xA;&#x9;for each generalization in element.Connectors&#xA;&#x9;&#x9;if generalization.MetaType = &quot;Generalization&quot; then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Generalization found, transferring aggregator element.....&quot;&#xA;&#x9;&#x9;&#x9;set aggregator = Repository.GetElementByID(generalization.SupplierID)&#xA;&#x9;&#x9;&#x9;set package = Repository.GetPackageByID(element.PackageID)&#xA;'&#x9;&#x9;&#x9;for each control in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;controlName = aggregator.Name&#xA;'&#x9;&#x9;&#x9;&#x9;controlName = Replace (controlName, &quot; &quot;, &quot;&quot;)&#xA;'&#x9;&#x9;&#x9;&#x9;if control.Stereotype = &quot;TMF_JSON_Schema&quot; and control.Name = controlName then&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;This class already has a JSON element&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;flag = true&#xA;'&#x9;&#x9;&#x9;&#x9;exit for&#xA;'&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;set jsonControl = findJsonElement(aggregator)&#xA;&#x9;&#x9;&#x9;if jsonControl is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;TransferClass aggregator, diagram&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;CreateGeneralizationConn aggregator, element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;sub CreateGeneralizationConn (sourceClass, clientClass)&#xA;&#x9;Session.Output &quot;Creating Generalization connector&quot;&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;dim source&#x9;&#x9; as EA.Element&#xA;&#x9;dim client&#x9;&#x9; as EA.Element&#xA;&#x9;dim flag &#x9;&#x9; 'as boolean&#xA;&#x9;dim control&#x9;&#x9; as EA.Element&#xA;&#x9;dim connector&#x9; as EA.Connector&#xA;&#x9;dim package &#x9; as EA.Package&#xA;&#x9;dim controlName&#x9; 'as string&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByID(clientClass.PackageID)&#xA;&#x9;&#xA;&#x9;set source = findJsonElement(sourceClass)&#xA;&#xA;&#x9;set client = findJsonElement(clientClass)&#xA;&#xA;&#x9;for each connector in source.Connectors&#xA;&#x9;&#x9;if connector.MetaType = &quot;Schema Generalization&quot; and connector.ClientID = Client.ElementID then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Generalization relationship already exists&quot;&#xA;&#x9;&#x9;&#x9;Flag = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;if flag = false then&#xA;&#x9;&#x9;set newConnector = sourceClass.Connectors.AddNew (&quot;&quot;, &quot;Generalization&quot; )&#xA;&#x9;&#x9;newConnector.ClientID = Client.ElementID&#xA;&#x9;&#x9;newConnector.SupplierID = Source.ElementID &#xA;&#x9;&#x9;newConnector.Stereotype = &quot;TMF_SchemaGeneralizesSchema&quot;&#xA;&#x9;&#x9;newConnector.Update&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;' This method creates the schemas associated with the first level of relationships &#xA;' assuming source json element already exists.&#xA;sub CreateAssociation (sourceClass, sourceJsonElem)&#xA;    ' define variables&#xA;    dim navigableConnectorsList&#xA;&#x9;dim clientElementList&#xA;&#x9;dim targetElem as EA.Element&#xA;&#x9;dim targetJsonElem as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;' get all supplier associations from sourceClass and transfer them to json schema associations&#xA;&#x9;set navigableConnectorsList = getNavigableConnectors(sourceClass, &quot;Association&quot;, &quot;Class&quot;)&#xA;&#x9;TransferRelations navigableConnectorsList, sourceClass, sourceJsonElem, &quot;Association&quot;, &quot;TMF_Schema_Associates_Schema&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub TransferRelations (ConnectorGuidList, sourceElement, SourceJsonElem, relType, relStereotype)&#xA;&#x9;dim targetElem as EA.Element&#xA;&#x9;dim targetJsonElem as EA.Element&#xA;&#x9;dim targetName ' as string&#xA;&#x9;dim connectorGuid ' as string&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim sourceConnector as EA.Connector&#xA;&#x9;dim connectorAttribute as EA.Attribute&#xA;&#x9;dim targetConnectorAttribute as EA.Attribute&#xA;&#x9;dim isSupplier&#xA;&#x9;dim searchConnector as EA.Connector&#xA;&#x9;dim bounds&#xA;&#x9;dim upperBound ' as string&#xA;&#x9;dim lowerBound ' as string&#xA;&#x9;dim searchName ' as string&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;now transfer relationships&quot;&#xA;&#x9;' iterate associations and create &#xA;&#x9;for each connectorGuid in ConnectorGuidList&#xA;&#x9;&#x9;set connector = nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' search for element w/ target name and stereotype&#xA;&#x9;&#x9;set sourceConnector = Repository.GetConnectorByGuid(connectorGuid)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' check if the sourceElement is the client or supplier&#xA;&#x9;&#x9;if sourceConnector.ClientID = sourceElement.ElementID then&#xA;&#x9;&#x9;&#x9;isSupplier = false&#xA;&#x9;&#x9;&#x9;set targetElem = Repository.GetElementByID(sourceConnector.SupplierID)&#xA;&#x9;&#x9;elseif sourceConnector.SupplierID = sourceElement.ElementID then&#xA;&#x9;&#x9;&#x9;isSupplier = true&#xA;&#x9;&#x9;&#x9;set targetElem = Repository.GetElementByID(sourceConnector.ClientID)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' try to find existing json element&#xA;&#x9;&#x9;set targetJsonElem = findJsonElement(targetElem)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' if not found, create element and association&#xA;&#x9;&#x9;if targetJsonElem is nothing then&#xA;&#x9;&#x9;&#x9;' create element&#xA;&#x9;&#x9;&#x9;set targetJsonElem = TransferClass(targetElem, Repository.GetCurrentDiagram())&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' create default name if none exists&#xA;&#x9;&#x9;if sourceConnector.Name = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;searchName = SourceJsonElem.Name+&quot;_Associates_&quot;+targetJsonElem.Name&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;searchName = sourceConnector.Name&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' check if the connector already exists&#xA;&#x9;&#x9;for each searchConnector in targetJsonElem.Connectors&#xA;&#x9;&#x9;&#x9;' if the connector is found leave connector set to this target&#xA;&#x9;&#x9;&#x9;if searchConnector.Name = searchName then&#xA;&#x9;&#x9;&#x9;&#x9;' if relationship is found to have already been created, exit&#xA;&#x9;&#x9;&#x9;&#x9;set connector = searchConnector&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' if the connector is not found create it&#xA;&#x9;&#x9;if connector is nothing then&#xA;&#x9;&#x9;&#x9;if isSupplier = false then&#xA;&#x9;&#x9;&#x9;&#x9;set connector = addConnector(sourceJsonElem, relType, relStereotype, targetJsonElem)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;set connector = addConnector(targetJsonElem, relType, relStereotype, sourceJsonElem) &#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' copy all connector properties from the source to the target if a new connector has been created&#xA;&#x9;&#x9;copyConnector sourceConnector,connector&#xA;&#x9;&#x9;copyConnectorEnd sourceConnector.ClientEnd, connector.ClientEnd&#xA;&#x9;&#x9;copyConnectorEnd sourceConnector.SupplierEnd, connector.SupplierEnd&#xA;&#x9;&#x9;connector.Name = searchName&#xA;&#x9;&#x9;connector.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' add attribute to schema&#xA;&#x9;&#x9;set connectorAttribute = setAttribute(SourceJsonElem, connector.Name, &quot;&quot;)&#xA;&#x9;&#x9;connectorAttribute.Type =  targetJsonElem.Name&#xA;&#x9;&#x9;connectorAttribute.ClassifierID = targetJsonElem.ElementID&#xA;&#x9;&#x9;if isSupplier = false then &#xA;&#x9;&#x9;&#x9;connectorAttribute.UpperBound = getConnectorEndUpperBound(connector.SupplierEnd)&#xA;&#x9;&#x9;&#x9;connectorAttribute.LowerBound = getConnectorEndLowerBound(connector.SupplierEnd)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;connectorAttribute.UpperBound = getConnectorEndUpperBound(connector.ClientEnd)&#xA;&#x9;&#x9;&#x9;connectorAttribute.LowerBound = getConnectorEndLowerBound(connector.ClientEnd)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;connectorAttribute.Update&#xA;&#x9;&#x9;SourceJsonElem.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' add attribute to target schema if reverse is navigable&#xA;&#x9;&#x9;if isSupplier=true then&#xA;&#x9;&#x9;&#x9;if sourceConnector.SupplierEnd.Navigable&lt;&gt;&quot;Non-Navigable&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set targetConnectorAttribute = setAttribute(targetJsonElem, connector.Name, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.Type = SourceJsonElem.Name&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.ClassifierID = SourceJsonElem.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.UpperBound = getConnectorEndUpperBound(connector.SupplierEnd)&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.LowerBound = getConnectorEndLowerBound(connector.SupplierEnd)&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.Update&#xA;&#x9;&#x9;&#x9;&#x9;targetJsonElem.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if sourceConnector.ClientEnd.Navigable&lt;&gt;&quot;Non-Navigable&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;set targetConnectorAttribute = setAttribute(targetJsonElem, connector.Name, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.Type = SourceJsonElem.Name&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.ClassifierID = SourceJsonElem.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.UpperBound = getConnectorEndUpperBound(connector.ClientEnd)&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.LowerBound = getConnectorEndLowerBound(connector.ClientEnd)&#xA;&#x9;&#x9;&#x9;&#x9;targetConnectorAttribute.Update&#xA;&#x9;&#x9;&#x9;&#x9;targetJsonElem.Update&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;connector.Update&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function findJsonElement(element)&#xA;&#x9;dim name&#xA;&#x9;dim jsonElem&#xA;&#x9;' dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim candidateElem as EA.Element&#xA;&#x9;dim condition&#xA;&#x9;dim condition2&#xA;&#x9;set candidateElem = nothing&#xA;&#x9;name = Replace(element.Name, &quot; &quot;, &quot;&quot;)&#xA;&#x9;set jsonElem = lookupElement(name, &quot;TMF_JSON_Schema&quot;, &quot;Class&quot;)&#xA;&#x9;set findJsonElement = jsonElem&#xA;&#x9;' iterate connectors&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;' find connector which is realization with this element as the supplier&#xA;&#x9;&#x9;condition = connector.SupplierID = element.ElementID and connector.MetaType = &quot;Realisation&quot;&#xA;&#x9;&#x9;if condition then&#xA;&#x9;&#x9;&#x9;' check the name and the stereotype of the element on the client end of the relationships&#xA;&#x9;&#x9;&#x9;set candidateElem = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;condition2 = candidateElem.Stereotype = &quot;TMF_JSON_Schema&quot; and candidateElem.Name = name&#xA;&#x9;&#x9;&#x9;if condition2 then&#xA;&#x9;&#x9;&#x9;&#x9;set findJsonElement = candidateElem&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if candidateElem is nothing then&#xA;&#x9;&#x9;set findJsonElement = nothing&#xA;&#x9;end if&#xA;end function&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="357"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{02C2D9C8-9352-4e62-9600-AA52858DB3F5}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Sequence Diagram via PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Common.Print-Array&#xA;!INC Common.color-picker&#xA;!INC EAScriptLib.VBScript-Logging&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;LOGLEVEL=1&#x9;&#x9;'INFO&#xA;'LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: GenerateSequenceDiagramViaPlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Import PlantUML Script into an EA diagram  &#xA;' Date: 11-Feb-2019&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;dim timeline_array (99,7)&#x9;&#x9;&#x9;'store timeline elements &#xA;dim sequence_array (99,7)&#x9;&#x9;&#x9;'store interations&#xA;dim layout_array (99, 7)&#x9;&#x9;&#x9;'store coridinates of all sequences and fragments that needs to be positioned&#xA;&#xA;dim left&#xA;dim t&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'timeline array index&#xA;dim s&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'sequence array index&#xA;dim f&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'fragment array index&#xA;dim l&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'layout array index&#xA;&#xA;dim fragment_level&#x9;&#x9;&#x9;&#x9;&#x9;'fragment level indicator&#xA;dim partition_level&#x9;&#x9;&#x9;&#x9;&#x9;'partition level within a fragment&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Create Sequence Diagram via PlantUML------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim PlantUML&#xA;&#x9;dim word&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;'check..'&#xA;&#x9;&#x9;if currentDiagram.Type = &quot;Sequence&quot; then&#xA;&#x9;&#x9;&#x9;' Get a reference to any selected objects&#xA;&#x9;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#x9;'dim diagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;'dim element as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if not theSelectedElement is nothing and theSelectedElement.ObjectType = otElement and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'split note..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;PlantUML&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;left=30&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set initial &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fragment_level=0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PlantUML = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for i = 0 to Ubound(PlantUML)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Processing: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not PlantUML(i) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not Asc(PlantUML(i)) = 39  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;word=split(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case ucase(word(0))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;PARTICIPANT&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTROL&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ENTITY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COLLECTIONS&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DATABASE&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;END&quot; &#x9;&#x9;&#x9;resize_diagramObject(PlantUML(i))&#x9;&#x9;&#x9;'box or a partition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTIVATE&quot; &#x9;'Session.Output( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DEACTIVATE&quot; &#x9;'Session.Output( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ALT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;OPT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BREAK&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LOOP&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CRITICAL&quot; &#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9; &#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ELSE&quot; &#x9;&#x9;add_partition(PlantUML(i) ) &#x9;&#x9;&#x9;&#x9;'add partition to fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;create_sequence(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'replace with a regex expression to make sure sctipt line si indeed a sequence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGTrace( &quot;**Timeline Array**&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Call PrintArray (timeline_array,0,t-1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call layout_objects&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set relative coordinates of seqeunces &amp; fragments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGTrace( &quot;**Layout Array**&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Done&quot; , promptOK&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot; , promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;sub create_timeline(PlantUML)&#xA;dim i&#xA;dim word&#xA;dim sql&#xA;dim elementName&#xA;dim elementType&#xA;dim elementStereotype&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim width&#xA;dim diagramObjectName&#xA;&#x9;call LOGTrace(&quot;create_timeline(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;word=split(PlantUML)&#xA;&#x9;select case Ucase(word(0))&#xA;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;elementType = &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;elementType = &quot;Actor&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;DATABASE&quot; &#x9;elementType = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;database&quot;&#xA;&#x9;&#x9;case &quot;BOUNDARY&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;boundary&quot;&#xA;&#x9;&#x9;case &quot;CONTROL&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;control&quot;&#xA;&#x9;&#x9;case &quot;ENTITY&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;entity&quot;&#xA;&#x9;&#x9;case &quot;COLLECTIONS&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;collections&quot;&#xA;&#x9;&#x9;case else&#x9;&#x9;&#x9;elementType = &quot;Sequence&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;if Asc(word(1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;elementName = mid(word(1),2)&#xA;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;for i = 2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;elementName = word(1)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;sql =&quot;SELECT Object_ID FROM t_object WHERE t_object.Name =&quot; &amp; chr(34) &amp; elementName &amp; chr(34) &amp; &quot; and t_object.Object_Type = &quot; &amp; chr(34) &amp; elementType &amp; chr(34)&#xA;&#x9;call LOGDebug ( &quot;sql: &quot; &amp; sql)&#xA;&#xA;&#x9;set elements=Repository.GetElementSet(sql,2)&#xA;&#x9;call LOGDebug (&quot;elements returned: &quot; &amp; elements.Count)&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;'add element&#xA;&#x9;&#x9;set elements = currentPackage.Elements&#xA;&#x9;&#x9;set element = elements.AddNew( elementName, elementType )&#xA;&#x9;&#x9;element.Stereotype = elementStereotype&#xA;&#x9;&#x9;if instr(Ucase(PlantUML),&quot; AS &quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;element.Alias = elementAlias(PlantUML)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;dim borderStyle&#xA;&#x9;&#x9;&#x9;set borderStyle = element.Properties(&quot;BorderStyle&quot;)&#xA;&#x9;&#x9;&#x9;borderStyle.value = &quot;Solid&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;currentPackage.elements.Refresh&#xA;&#x9;&#x9;call LOGInfo( &quot;Added Element: &quot; &amp; element.Name &amp; &quot; (ID=&quot; &amp; element.ElementID &amp; &quot;) in package &quot; &amp; currentPackage.Name )&#xA;&#x9;else&#xA;&#x9;&#x9;set element = Repository.GetElementByID(elements.GetAt(0).ElementID)&#xA;&#x9;end if&#xA;&#xA;&#x9;&#xA;&#x9;if elementType=&quot;Boundary&quot; then&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=28;b=-278&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=50;b=-250&quot;&#xA;&#x9;end if &#xA;&#x9;left=left+width+45&#xA;&#x9;set DiagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, elementType)&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;'default color&#xA;&#x9;if instr(PlantUML,&quot;#&quot;) &gt; 0 then&#xA;&#x9;&#x9;diagramObject.BackgroundColor = color(PlantUML)&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagramObjects.Refresh&#xA;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#xA;'add to tineline_array&#xA;&#x9;timeline_array (t,0) = element.ElementID&#xA;&#x9;timeline_array (t,1) = diagramObject.InstanceID&#xA;&#x9;timeline_array (t,2) = element.Name&#xA;&#x9;timeline_array (t,3) = element.Alias&#xA;&#x9;timeline_array (t,4) = Ucase(word(0)) 'PlantUML participant&#xA;&#x9;timeline_array (t,5) = diagramObject.left&#xA;&#x9;timeline_array (t,6) = diagramObject.right&#xA;&#x9;t=t+1&#xA;&#x9;call LOGTrace(&quot;create_timeline&quot;)&#xA;end sub&#xA;&#xA;sub resize_diagramObject(script)&#xA;dim i&#xA;dim diagramObject as EA.DiagramObject&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;if ucase(script) = &quot;END BOX&quot; then&#xA;&#x9;&#x9;'find box in the timeline_array&#xA;&#x9;&#x9;for i = t to 0 step -1&#xA;&#x9;&#x9;&#x9;if timeline_array (i,4) = &quot;BOX&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.right = left&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left=left+15&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add fragment end to layout array&#xA;&#x9;&#x9;layout_array (l,0) = fragment_level&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;layout_array (l,1) = &quot;End&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;&#x9;'layout_array (l,2) = &quot;&quot;&#x9;&#x9;&#x9;'id of the connector&#xA;&#x9;&#x9;l=l+1&#xA;&#x9;&#x9;fragment_level = fragment_level-1&#xA;&#x9;end if&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject&quot;)&#xA;&#xA;end sub&#xA;&#xA;sub create_sequence(script)&#xA;dim word&#xA;dim i&#xA;dim element as EA.Element &#xA;dim connector as EA.Connector&#xA;&#xA;&#x9;call LOGTrace( &quot;create sequence(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;word=split(script)&#xA;&#x9;&#xA;&#x9;'add to sequence array&#xA;&#x9;'Session.Output( &quot;word count(&quot; &amp; ubound(word)+1 &amp; &quot;)&quot;)&#xA;&#x9;sequence_array (s,0) = timelineElementID(word(0))&#x9;'source elementID&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;sequence_array (s,1) = word(1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'interaction type&#xA;&#x9;sequence_array (s,2) = timelineElementID(word(2))&#x9;'target elementID&#xA;&#xA;&#x9;'create connector&#xA;&#x9;set element = Repository.GetElementByID (sequence_array (s,0))&#xA;&#x9;set connector = element.Connectors.AddNew(&quot;&quot;,&quot;Sequence&quot;)&#xA;&#x9;connector.SupplierID = sequence_array (s,2)&#xA;&#x9;connector.SequenceNo = (s+1)*10&#xA;&#x9;connector.Name = connectorName(script)&#xA;&#x9;connector.DiagramID = currentDiagram.DiagramID&#xA;&#xA;&#x9;sequence_array (s,3) = connector.Name&#xA;&#x9;sequence_array (s,4) = synch(word(1))&#xA;&#x9;sequence_array (s,5) = signature(script)&#xA;&#x9;sequence_array (s,6) = isReturn(word(1))&#xA;&#x9;sequence_array (s,7) = connector.ConnectorID&#xA;&#x9;&#xA;&#x9;connector.Update&#xA;&#x9;element.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;dim sql&#xA;&#x9;sql =&quot;UPDATE t_connector SET PData1 = '&quot; &amp; sequence_array (s,4) &amp; &quot;', PData2 = '&quot; &amp; sequence_array (s,5)  &amp; &quot;', PData4 = '&quot; &amp; sequence_array (s,6) &amp; &quot;' WHERE Connector_Id = &quot; &amp; connector.ConnectorID &amp; &quot;;&quot;&#xA;&#x9;call LOGDebug ( &quot;SQL: &quot; &amp; sql)&#xA;&#x9;&#xA;&#x9;Repository.Execute(sql)&#xA;&#x9;set connector = Repository.GetConnectorByID(connector.ConnectorID)&#x9;&#xA;&#x9;element.Update&#xA;&#x9;call LOGDebug (&quot;+created connector (&quot; &amp; connector.ConnectorID &amp; &quot;)&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;vbtab &amp; vbtab &amp; vbtab &amp; &quot; synch: &quot; &amp; connector.MiscData(0) )&#xA;&#x9;'Session.Output( &quot; signature: &quot; &amp; connector.MiscData(1))&#xA;&#x9;'Session.Output( &quot; isReturn: &quot; &amp; connector.MiscData(3))&#xA;&#x9;'Session.Output( &quot; startpoint x: &quot; &amp; connector.StartPointX )&#xA;&#x9;'Session.Output( &quot; startpoint y: &quot; &amp; connector.StartPointY )&#xA;&#x9;'Session.Output( &quot; endpoint x: &quot; &amp; connector.EndPointX )&#xA;&#x9;'Session.Output( &quot; endpoint y: &quot; &amp; connector.EndPointY )&#xA;&#x9;'Session.Output( &quot; name: &quot; &amp; connector.Name )&#xA;&#x9;'Session.Output( &quot; type: &quot; &amp; connector.Type )&#xA;&#x9;'Session.Output( &quot; objecttype: &quot; &amp; connector.ObjectType)&#xA;&#x9;'Session.Output( &quot; styleEx: &quot; &amp; connector.StyleEx )&#xA;&#x9;&#xA;&#x9;'add sequence to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#xA;&#x9;if connector.ClientID = connector.SupplierID then&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence2Self&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;end if&#xA;&#x9;layout_array (l,2) = connector.ConnectorID&#x9;'id of the connector&#xA;&#x9;l=l+1&#xA;&#x9;s=s+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub create_fragment(script)&#xA;&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramObjectName&#xA;dim i&#xA;dim fragmentName&#xA;&#xA;&#x9;'create element&#xA;&#x9;i = instr(script, &quot; &quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;fragmentName = mid(script, i+1)&#xA;&#x9;end if&#xA;&#x9;set elements = currentPackage.Elements&#xA;&#x9;set element = elements.AddNew( fragmentName, &quot;InteractionFragment&quot; )&#xA;&#x9;element.Subtype = fragment_type(mid(script,1, i-1))&#xA;&#x9;element.Update&#xA;&#x9;elements.Refresh&#xA;&#x9;call LOGInfo( &quot;added fragment: &quot; &amp; fragmentName &amp; &quot; (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#xA;&#x9;fragment_level=fragment_level+1&#x9;&#xA;&#xA;&#x9;'add fragment to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;InteractionFragment&quot;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub add_partition(script)&#xA;dim element as EA.Element&#xA;dim elementId&#xA;dim diagramObject as EA.DiagramObject&#xA;dim partitions as EA.Collection&#xA;dim partition as EA._Partition&#xA;dim partitionName&#xA;dim i&#xA;&#x9;i = instr(script, &quot; &quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;partitionName = mid(script, i+1)&#xA;&#x9;end if&#xA;&#xA;&#x9;'get fragment element using the id stored in the layout array&#xA;&#x9;for i = l to 0 step-1&#xA;&#x9;&#x9;if layout_array (i,1) = &quot;InteractionFragment&quot; then&#xA;&#x9;&#x9;&#x9;elementId = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'&#xA;&#x9;set element = Repository.GetElementByID(elementId)&#xA;&#x9;set partitions = element.Partitions&#xA;&#x9;set partition = partitions.AddNew(partitionName,&quot;Partition&quot;)&#xA;&#x9;partition.Size=40&#x9;&#x9;'default&#xA;&#x9;element.Update&#xA;&#x9;currentPackage.elements.Refresh&#xA;&#x9;call LOGInfo( &quot;add partition: &quot; &amp; partitionName &amp; &quot; to Fragment (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#xA;&#x9;'add partition to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;Partition&quot;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;function timelineElementID(word)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineElementID(&quot; &amp; word &amp; &quot;)&quot;)&#xA;&#x9;if right(word,1) = &quot;:&quot; then&#xA;&#x9;&#x9;word = mid(word, 1, len(word)-1)&#x9;&#x9;&#x9;&#x9;'remove trailing :&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for i = 0 to ubound(timeline_array)&#xA;&#x9;&#x9;if word = timeline_array(i,3) then&#x9;&#x9;&#x9;&#x9;'check using alias&#xA;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if word = timeline_array(i,2) then&#x9;&#x9;&#x9;'check using name&#xA;&#x9;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;call LOGTrace(&quot;timelineElementID=&quot; &amp; timelineElementID )&#xA;&#x9;&#xA;end function&#xA;&#xA;function color(script)&#xA;'color is delimited by #&#xA;'the color value can be either&#xA;'&#x9;- a Hex version of RGB &#xA;'&#x9;- or a standard color name (refer to color-picker script)&#xA;'if a color name is provided, call color-picker to return hex value of RGB&#xA;'if not.. look up get the hex vales by color name&#xA;'return a decimal value of the RGB&#xA;'&#xA;dim word&#xA;dim hexRGB&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;color(&quot; &amp; script &amp; &quot;)&quot; )&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if Asc(word(i)) = 35 then&#x9;&#x9;'check for hash&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;word=&quot; &amp; word(i))&#xA;&#x9;&#x9;&#x9;if ishex(mid(word(i),2,len(word(i))-1)) then&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(word(i),2,6)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(ColorHexByName(Ucase(word(i))),2,6)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;hexRGB=&quot; &amp; hexRGB)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not hexRGB = &quot;&quot; then&#xA;&#x9;&#x9;color=clng(&quot;&amp;h&quot; &amp; mid(hexRGB,5,2) &amp; mid(hexRGB,3,2) &amp; mid(hexRGB,1,2))&#xA;&#x9;&#x9;call LOGDebug( &quot;color decimal=&quot; &amp; color)&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;color=&quot; &amp; color )&#xA;&#x9;&#xA;end function&#xA;&#xA;function ishex(word)&#xA;&#x9;ishex= isnumeric(&quot;&amp;h&quot; &amp; word)&#xA;end function&#xA;&#xA;function elementAlias(script)&#xA;dim i&#xA;dim word&#xA;&#x9;elementAlias=&quot;&quot;&#xA;&#x9;&#xA;&#x9;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;' find  as &#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if ucase(word(i)) = &quot;AS&quot; then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if Asc(word(i+1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;elementAlias = mid(word(i+1),2)&#xA;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;for i = i+2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;elementAlias = word(i+1)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function connectorName(script)&#x9;&#xA;'start with :&#xA;'end with (&#xA;dim x&#xA;dim y&#xA;&#xA;&#x9;x = inStr(script, &quot;:&quot;)&#xA;&#x9;y = inStr(script, &quot;(&quot;)&#xA;&#x9;if x &gt; 0 then&#xA;&#x9;&#x9;if y &gt; x then&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1, y-x-1))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1))&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function synch(arrow)&#xA;&#x9;call LOGTrace(&quot;synch(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;-&amp;gt;&amp;gt;&quot; or _&#x9;&#x9;&#xA;&#x9;&#x9;arrow = &quot;-&gt;&gt;&quot; then&#xA;&#x9;&#x9;synch = &quot;Asynchronous&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;synch = &quot;Synchronous&quot;&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;synch=&quot; &amp; synch)&#xA;end function&#xA;&#xA;function signature(script)&#xA;dim i&#xA;dim j&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#x9;signature=&quot;&quot;&#xA;&#x9;&#xA;&#x9;i = inStr(script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'find first :&#xA;&#x9;j= inStr(i+1,script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;'find second : denoting retrun value&#xA;&#x9;if j &gt; 0 then&#xA;&#x9;&#x9;signature = &quot;retval=&quot; &amp; trim(mid(script,j+1))&#xA;&#x9;else&#xA;&#x9;&#x9;signature = &quot;retval=void&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;i = inStr(script, &quot;()&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'indicates there are no params&#xA;&#x9;if i = 0 then&#xA;&#x9;&#x9;i = inStr(script, &quot;(&quot;)&#xA;&#x9;&#x9;if i &gt; 0 then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add parms&#xA;&#x9;&#x9;&#x9;j = inStr(script, &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;signature = signature &amp; &quot;;params=;paramsDlg=&quot; &amp; trim(mid(script, i+1, j-i-1)) &amp; &quot;;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; signature &amp; &quot;)&quot;)&#xA;&#x9;&#xA;end function&#xA;&#xA;function isReturn(arrow)&#xA;&#x9;call LOGTrace(&quot;isReturn(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;--&amp;gt;&amp;gt;&quot; or _ &#xA;&#x9;&#x9;arrow = &quot;--&gt;&gt;&quot;then&#xA;&#x9;&#x9;isReturn = 1&#xA;&#x9;else&#xA;&#x9;&#x9;isReturn = 0&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;isReturn=&quot; &amp; isReturn)&#xA;&#x9;&#xA;end function&#xA;&#xA;function fragment_type(script)&#xA;&#xA;&#x9;select case script&#xA;&#x9;&#x9;case &quot;alt&quot; &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;&#x9;case &quot;opt&quot; &#x9;&#x9;&#x9;fragment_type = 1&#xA;&#x9;&#x9;case &quot;break&quot; &#x9;&#x9;fragment_type = 2&#xA;&#x9;&#x9;case &quot;par&quot; &#x9;&#x9;&#x9;fragment_type = 3&#xA;&#x9;&#x9;case &quot;loop&quot; &#x9;&#x9;fragment_type = 4&#xA;&#x9;&#x9;case &quot;critical&quot;&#x9;&#x9;fragment_type = 5&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;end select&#xA;end function&#xA;&#xA;sub layout_objects()&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim element as EA.Element&#xA;dim diagramObjectName&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramLink as EA.DiagramLink&#xA;&#xA;dim partition as EA._Partition&#xA;dim top&#xA;dim bottom&#xA;dim LOGLEVEL_SAVE&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;&#xA;&#x9;'LOGDebug (&quot;layout array count l-1=&quot; &amp; l-1 &amp; &quot; Ubound(layout_array)=&quot; &amp; Ubound(layout_array))&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;'call calculate fragment heights (reursively) &#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; then &#xA;&#x9;&#x9;&#x9;layout_array (i,3) =  fragmentHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;Partition&quot; then &#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) = partitionHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'layout_array (i,3) = layout_array (i,3) + height(layout_array (i,1))&#xA;&#x9;&#x9;&#x9;&#x9;'j = sequenceIndex(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;&#x9;'if sequence_array(j,0) = sequence_array(j,2) then&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;layout_array (i,3) = layout_array (i,3) + 10&#x9;&#x9;'adjust hieght&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'set cordinates of each object&#xA;&#x9;top = -130&#xA;&#xA;&#x9;for i = 0 to l-1&#x9;&#xA;&#x9;&#x9;'set top as an accumulation of object&#xA;&#x9;&#x9;layout_array (i,4) = top &#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; then &#xA;&#x9;&#x9;&#x9;layout_array (i,4) = top + 20&#xA;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4) - layout_array (i,3)&#x9;'bottom&#xA;&#x9;&#x9;&#x9;'set left and right coordinates based on the timelines&#x9;&#xA;&#x9;&#x9;&#x9;call setLeftRightCoordinates(layout_array (i,0),i)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;layout_array (i,4) = top &#xA;&#x9;&#x9;&#x9;top = top - height(layout_array (i,1))&#xA;&#x9;&#x9;&#x9;'self message height&#xA;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;set diagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then &#xA;&#x9;&#x9;&#x9;'get connector &amp; update connector Y coordinates&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'set element = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;'&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;*move sequence(&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; from &quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY &amp; &quot; to &quot; &amp; layout_array (i,4))&#xA;&#x9;&#x9;&#x9;'connector.StartPointX = 1&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.StartPointY = layout_array (i,4)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.EndPointX = 2&#xA;&#x9;&#x9;&#x9;'connector.EndPointY = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;'connector.Update&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'element.Update&#xA;&#x9;&#x9;&#x9;'currentPackage.elements.Refresh&#xA;&#x9;&#x9;&#x9;'create diagramlink&#xA;&#x9;&#x9;&#x9;'set diagramLink = currentDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;'diagramLink.ConnectorID=connector.ConnectorID&#x9;&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot; geometry: &quot; &amp; diagramLink.Geometry )&#xA;&#x9;&#x9;&#x9;'diagramLink.Update&#xA;&#x9;&#x9;&#x9;'currentDiagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#x9;'currentDiagram.Update&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'call LOGInfo( &quot;connector (&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; startX:Y=&quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; then &#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing InteractionFragment &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;'add diagramobject&#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Partition&quot; then&#xA;&#x9;&#x9;&#x9;'update partition size&#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing partition for &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;dim pcount&#xA;&#x9;&#x9;&#x9;pcount=0&#xA;&#x9;&#x9;&#x9;for j = i-1 to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;LOGDebug (&quot;j=&quot; &amp; j)&#xA;&#x9;&#x9;&#x9;&#x9;if layout_array (i,2) = layout_array (j,2) then 'resolve which partition by counting the partitions with the same element id..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pcount=pcount+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGDebug (&quot;increment pcount to &quot; &amp; pcount)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;for each partition in element.Partitions&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Partitition for &quot; &amp; element.ElementID &amp; &quot; &quot; &amp; &quot;name=&quot; &amp; partition.Name &amp; &quot; object type=&quot; &amp; partition.ObjectType &amp; &quot; size=&quot; &amp; partition.size)&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;Update partition number &quot; &amp; pcount-1 &amp; &quot; of &quot; &amp; element.Partitions.Count &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;set partition = element.Partitions.GetAt(pcount-1) &#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;partition size to be updated from &quot; &amp; partition.Size &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;partition.Size = layout_array (i,3)&#xA;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;'resize any timline boxes &#xA;&#x9;bottom = 0&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array (i,5) &lt; bottom then&#xA;&#x9;&#x9;&#x9;bottom = layout_array (i,5)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;'&#x9;call LOGDebug( &quot;*resize timeline boxes to &quot; &amp; bottom)&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timeline_array (i,4) = &quot;BOX&quot; then&#xA;'&#x9;&#x9;&#x9;call LOGDebug( &quot;*Box (&quot; &amp; timeline_array(i,0) &amp; &quot;) to be resized&quot;)&#xA;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = bottom - 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currentDiagram.Update&#xA;&#x9;Repository.SaveDiagram(currentDiagram.DiagramID)&#xA;&#x9;'Repository.ReloadPackage(currentPackage.PackageID)&#xA;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;'LOGLEVEL=3&#xA;&#x9;call LOGTrace( &quot;**Layout Array - updated**&quot; )&#xA;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#xA;'LOGLEVEL=2&#xA;&#xA;end sub&#xA;&#xA;function height(thing)&#xA;&#x9;call LOGTrace(&quot;height(&quot; &amp; thing &amp; &quot;)&quot;)&#xA;&#x9;select case thing&#xA;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;&#x9;&#x9;height = 35&#xA;&#x9;&#x9;case &quot;Sequence2Self&quot;&#x9;&#x9;height = 45&#xA;&#x9;&#x9;case &quot;InteractionFragment&quot; &#x9;height = 0&#x9;&#x9;'alt, loop etc&#xA;&#x9;&#x9;case &quot;Partition&quot;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;'else&#xA;&#x9;&#x9;case &quot;End&quot;&#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#xA;&#x9;end select&#xA;&#x9;call LOGTrace(&quot;height=&quot; &amp; height)&#xA;end function&#xA;&#xA;function fragmentHeight(level, start)&#xA;dim i&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;fragmentHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;fragmentHeight=0&#xA;'&#x9;for i = start to Ubound(layout_array) &#xA;&#x9;for i = start to l-1 &#xA;'&#x9;&#x9;if layout_array(i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;exit for&#xA;'&#x9;&#x9;end if&#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;fragmentHeight = fragmentHeight + height(layout_array (i,1))&#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;fragmentHeight=&quot; &amp; fragmentHeight )&#xA;&#xA;end function&#xA;&#xA;function partitionHeight(level, start)&#xA;dim i&#xA;dim LOGLEVEL_SAVE&#xA;&#x9;&#xA;&#x9;LOGLEVEL_SAVE = LOGLEVEL &#xA;'&#x9;LOGLEVEL=4&#x9;&#x9;&#x9;'activate debugging for the sub&#xA;&#xA;&#x9;call LOGTrace( &quot;partitionHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;partitionHeight=height(layout_array (start,1))&#xA;&#x9;for i = start+1 to Ubound(layout_array)&#xA;&#x9;&#x9;'end of partition is not specifically declared..  &#xA;&#x9;&#x9;if layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Partition&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'is dependant upon nuumber of sequences&#xA;&#x9;&#x9;partitionHeight = partitionHeight + height(layout_array (i,1))&#xA;&#x9;&#x9;'end of partition is identified when the level indicator is less than what was passed to it &#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;partitionHeight=&quot; &amp; partitionHeight )&#xA;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setLeftRightCoordinates(level,start)&#xA;'loop thru list of timelines in scope of this level and retrun the lowest value&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim tLeft&#xA;dim tRight&#xA;'LOGLEVEL=3&#x9;&#x9;&#x9;'&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot;)&#xA;&#xA;&#x9;layout_array(start,6) = 400&#xA;&#x9;layout_array(start,7) = 0&#xA;&#xA;&#x9;for i = start to l-1&#xA;&#x9;&#x9;'need some way to identify nested fragments and whether the left and right values need adjusting&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; or _&#xA;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Sequence2Self&quot; then &#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(layout_array(i,2))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;j=timelineIndex(connector.ClientID)&#xA;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft - 25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;'&#x9;&#x9;call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight +25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndex(connector.SupplierID)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft -25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;&#x9;'&#x9;&#x9;call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight + 25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if layout_array(start,6) &lt; 5 then&#x9;&#x9;&#x9;'left coordinate cannot be less than zero&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6)=5&#xA;&#x9;&#x9;&#x9;end if &#xA;&#xA;&#x9;&#x9;&#x9;'check if margins need to adjusted becuase the fragment is nested&#xA;&#x9;&#x9;&#x9;if level &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;for j = start to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(j,0) = level -1 and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(j,1) = &quot;InteractionFragment&quot; then&#x9;&#x9;'scan layout arrary to find previous level fragmant&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,4) = layout_array(j,4) then&#x9;'if top value are the same subtract 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,4) = layout_array(start,4) - 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,5) = layout_array(j,5) then&#x9;'if bottom values are the same add 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,5) = layout_array(start,5) + 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,6) = layout_array(j,6) then&#x9;'if left value are the same add 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = layout_array(start,6) + 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,7) = layout_array(j,7) then&#x9;'if right values are the same subtract 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = layout_array(start,7) - 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates: Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;'LOGLEVEL=2&#x9;&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;function timelineIndex(timelineId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineIndex(&quot; &amp; timelineId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;t=&quot; &amp; t)&#xA;&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timelineId = timeline_array(i,0) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;timelineIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;timelineIndex=&quot; &amp; timelineIndex)&#xA;&#xA;end function&#xA;&#xA;function sequenceIndex(sequenceId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;sequenceIndex(&quot; &amp; sequenceId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;s=&quot; &amp; s)&#xA;&#xA;&#x9;for i = 0 to s-1&#xA;&#x9;&#x9;if sequenceId = sequence_array(i,7) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;sequenceIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;sequenceIndex=&quot; &amp; sequenceIndex)&#xA;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="359"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C1B273F6-9A6B-4ea4-8CFB-8716A7B33962}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Create Action Flows&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' This code has been included from the default Diagram Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.&#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;&#xA;' query to get all of the diagramlinks associated with a given connector&#xA;query_diagramlinks = &quot;SELECT t_diagramlinks.DiagramID as ElementID FROM ASOT.t_diagramlinks WHERE ConnectorID = &quot;&#xA;&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;&#x9;dim api_operation as EA.Method&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedConnector = currentDiagram.SelectedConnector&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#xA;&#x9;&#x9;if not selectedConnector is nothing then&#xA;&#x9;&#x9;&#x9;' A connector is selected&#xA;&#x9;&#x9;elseif selectedObjects.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;dim tmf_api as EA.Element&#xA;&#x9;&#x9;&#x9;for each tmf_api in selectedObjects&#xA;&#x9;&#x9;&#x9;&#x9;' ensure the object is a TMF_API&#xA;&#x9;&#x9;&#x9;&#x9;if tmf_api.Stereotype &lt;&gt; &quot;TMF_API&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;session.output tmf_api.Name &amp; &quot; is not an api&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;' Create a flow for each operation&#xA;&#x9;&#x9;&#x9;&#x9;for each api_operation in tmf_api.Methods&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createFlows tmf_api, api_operation&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;set tmf_api = Repository.GetElementByGuid(&quot;{2C7D4878-E607-4c01-B847-560DAD4D00C9}&quot;)&#xA;&#x9;&#x9;for each api_operation in tmf_api.Methods&#xA;&#x9;&#x9;&#x9;CreateFlows tmf_api, api_operation&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;function CreateFlows(api, api_operation)&#xA;&#x9;' dim api_operation as EA.Method&#xA;&#x9;' dim api as EA.Element&#xA;&#x9;&#xA;&#x9;dim subject as EA.Element&#xA;&#x9;dim IntegrationManager as EA.Element&#xA;&#x9;dim Serializer as EA.Element&#xA;&#x9;dim d_action as EA.TaggedValue&#xA;&#x9;dim d_referenced_behavior as EA.TaggedValue&#xA;&#x9;dim config&#xA;&#x9;dim action&#xA;&#x9;&#xA;&#x9;set subject = Repository.GetElementByGuid(&quot;{4C7F9898-2BD3-4dce-84F3-2E3D3C790E86}&quot;)&#xA;&#x9;set Serializer = Repository.GetElementByGuid(&quot;{27CD692B-C8AA-4de7-A394-7A2FFF12E029}&quot;)&#xA;&#x9;set IntegrationManager = Repository.GetElementByGuid(&quot;{6D345774-0613-42d7-975C-45AD4D252B39}&quot;)&#xA;&#x9;&#xA;&#x9;config = api.Name&amp;&quot;__&quot;&amp;api_operation.Name&#xA;&#x9;&#xA;&#x9;' create x-&gt;subject&#xA;&#x9;' dim push_connector as EA.Connector&#xA;&#x9;' set push_connector = subject.Connectors.AddNew(&quot;&quot;, &quot;Dependency&quot;)&#xA;&#x9;' push_connector.SupplierID = api.ElementID&#xA;&#x9;' action = buildActionName(api, api_operation)&#xA;&#x9;' createActionKey push_connector, &quot;Push&quot;, &quot;push&quot;, buildContext(api, api_operation), &quot;&quot;&#xA;&#x9;&#xA;&#x9;' create subject-&gt;component&#xA;&#x9;dim component_connector as EA.Connector&#xA;&#x9;set component_connector = subject.Connectors.AddNew(&quot;&quot;, &quot;Dependency&quot;)&#xA;&#x9;api.Connectors.Refresh()&#xA;&#x9;component_connector.SupplierID = api.ElementID&#xA;&#x9;action = buildActionName(api, api_operation)&#xA;&#x9;createActionKey component_connector, buildActionName(api, api_operation), buildActionName(api, api_operation), buildContext(api, api_operation), &quot;Subject&quot;, buildConf(api, api_operation)&#xA;&#xA;&#x9;' create component-&gt;serialization flow&#xA;&#x9;dim serialization_connector as EA.Connector&#xA;&#x9;set serialization_connector = api.Connectors.AddNew(&quot;&quot;, &quot;Dependency&quot;)&#xA;&#x9;api.Connectors.Refresh()&#xA;&#x9;serialization_connector.SupplierID = Serializer.ElementID&#xA;&#x9;action = buildActionName(api, api_operation)&#xA;&#x9;createActionKey serialization_connector, &quot;serializeToJson&quot;, &quot;SerializeToJson&quot;, buildContext(api, api_operation), api.Name, buildConf(api, api_operation)&#xA;&#xA;&#x9;' create serialization-&gt;integration manager flow&#xA;&#x9;dim integration_manager_connector as EA.Connector&#xA;&#x9;set integration_manager_connector = Serializer.Connectors.AddNew(&quot;&quot;, &quot;Dependency&quot;)&#xA;&#x9;api.Connectors.Refresh()&#xA;&#x9;integration_manager_connector.SupplierID = IntegrationManager.ElementID&#xA;&#x9;action = buildActionName(api, api_operation)&#xA;&#x9;createActionKey integration_manager_connector, &quot;Publish&quot;, &quot;publish&quot;, buildContext(api, api_operation), api.Name, buildConf(api, api_operation)&#xA;&#xA;end function&#xA;&#xA;function buildActionName(api, api_operation)&#xA;&#x9;' Find the position of the last forward slash&#xA;&#x9;dim path_tv as EA.TaggedValue&#xA;&#x9;dim method_tv as EA.TaggedValue&#xA;&#x9;dim path_val&#xA;&#x9;dim path&#xA;&#x9;dim method&#xA;&#x9;&#xA;&#x9;set path_tv = api_operation.TaggedValues.GetByName(&quot;relativePath&quot;)&#xA;&#x9;path_val = path_tv.Value&#xA;&#x9;path = Mid(path_val, 2)&#xA;&#x9;&#xA;&#x9;set method_tv = api_operation.TaggedValues.GetByName(&quot;hTTPMethod&quot;)&#xA;&#x9;method = method_tv.Value&#xA;&#x9;&#xA;&#x9;buildActionName = UCase(method) &amp; Replace(path, &quot;/&quot;, &quot;&quot;)&#xA;&#x9;&#xA;end function&#xA;&#xA;function buildContext(api, api_operation)&#xA;&#x9;dim path_tv as EA.TaggedValue&#xA;&#x9;dim path_val&#xA;&#x9;dim context&#xA;&#x9;set path_tv = api_operation.TaggedValues.GetByName(&quot;relativePath&quot;)&#xA;&#x9;path_val = path_tv.Value&#xA;&#x9;&#xA;&#x9;context = Replace(path_val, &quot;/&quot;, &quot;^&quot;)&#xA;&#x9;buildContext = api.Name&amp;&quot;_&quot;&amp;context&amp;&quot;_&quot;&amp;buildActionName(api, api_operation)&#xA;end function&#xA;&#xA;function buildConf(api, api_operation)&#xA;&#x9;dim actionName&#xA;&#x9;actionName = buildActionName(api, api_operation)&#xA;&#x9;buildConf = api.Name&amp;&quot;__&quot;&amp;actionName&#xA;end function&#xA;&#xA;function createActionKey(connector, action, ref_behaviour, context, decorator, conf)&#xA;    ' dim connector as EA.Connector&#xA;    dim action_tv as EA.TaggedValue&#xA;    dim ref_behaviour_tv as EA.TaggedValue&#xA;    dim context_tv as EA.TaggedValue&#xA;    dim conf_tv as EA.TaggedValue&#xA;    dim decorator_tv as EA.TaggedValue&#xA;&#x9;dim curr_diagram as EA.Diagram&#xA;    &#xA;    connector.Stereotype = &quot;dActionKey&quot;&#xA;    connector.Update()&#xA;&#xA;    ' Set the action tagged value&#xA;    set action_tv = connector.TaggedValues.GetByName(&quot;action&quot;)&#xA;    action_tv.Value = action&#xA;    action_tv.Update()&#xA;&#xA;    ' Set the ref_behaviour tagged value&#xA;    set ref_behaviour_tv = connector.TaggedValues.GetAt(4)&#xA;    ref_behaviour_tv.Value = ref_behaviour&#xA;    ref_behaviour_tv.Update()&#xA;&#xA;    ' Set the context tagged value&#xA;    set context_tv = connector.TaggedValues.GetByName(&quot;context&quot;)&#xA;    context_tv.Value = context&#xA;    context_tv.Update()&#xA;&#xA;    ' Set the conf tagged value&#xA;    set conf_tv = connector.TaggedValues.GetByName(&quot;config&quot;)&#xA;    conf_tv.Value = conf&#xA;    conf_tv.Update()&#xA;&#xA;    ' Set the decorator tagged value&#xA;    set decorator_tv = connector.TaggedValues.GetByName(&quot;decorator&quot;)&#xA;    decorator_tv.Value = decorator&#xA;    decorator_tv.Update()&#xA;&#x9;&#xA;&#x9;connector.Update()&#xA;&#x9;&#xA;&#x9;Repository.SaveAllDiagrams()&#xA;&#x9;Repository.RefreshModelView 0&#xA;&#x9;&#xA;&#x9;HideConnectorInAllOtherDiagrams(connector)&#xA;&#xA;end function&#xA;&#xA;function HideConnectorInAllOtherDiagrams(connector)&#xA;&#x9;dim query: query = query_diagramlinks&amp; connector.ConnectorID &amp;&quot;;&quot;&#xA;    dim resultXML: resultXML = Repository.SQLQuery(query)&#xA;&#xA;    ' Create an XMLDOM object to parse the result&#xA;    dim xmlDoc&#xA;    set xmlDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;    xmlDoc.LoadXML(resultXML)&#xA;&#xA;    ' Get the list of diagram nodes&#xA;    dim diagramNodes&#xA;    set diagramNodes = xmlDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row/ElementID&quot;)&#xA;&#xA;    ' Loop through each diagram and hide the connector&#xA;    dim diagramNode&#xA;    dim diagramID&#xA;    dim diagram&#xA;&#x9;dim cur_diagram&#xA;&#x9;set cur_diagram = Repository.GetCurrentDiagram()&#xA;    for each diagramNode in diagramNodes&#xA;        diagramID = diagramNode.text&#xA;        set diagram = Repository.GetDiagramByID(diagramID)&#xA;        if not diagram is nothing and diagram.DiagramID &lt;&gt; cur_diagram.DiagramID then&#xA;            ' Hide the connector in the diagram&#xA;            dim diagramLink&#xA;            for each diagramLink in diagram.DiagramLinks&#xA;                if diagramLink.ConnectorID = connectorID then&#xA;                    diagramLink.IsHidden = True&#xA;                    diagramLink.Update&#xA;                end if&#xA;            next&#xA;            ' Update the diagram&#xA;            diagram.Update&#xA;        end if&#xA;    next&#xA;&#xA;&#xA;End function&#xA;&#xA;' Function to extract the end of the URL&#xA;Function GetURLEnd(url) b &#xA;    ' Find the position of the last forward slash&#xA;    Dim lastSlashPos&#xA;    lastSlashPos = InStrRev(url, &quot;/&quot;)&#xA;&#xA;    ' Extract the substring after the last slash&#xA;    If lastSlashPos &gt; 0 Then&#xA;        GetURLEnd = Mid(url, lastSlashPos + 1)&#xA;    Else&#xA;        GetURLEnd = url ' If no slash is found, return the entire URL&#xA;    End If&#xA;End Function&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="360"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="361"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="362"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="363"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="364"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="365"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="366"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="367"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="368"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="369"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="370"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="371"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="372"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="373"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="374"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="375"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="376"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="377"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="378"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="379"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="380"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="381"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="382"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="383"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="384"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="385"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="386"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="387"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="388"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="389"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="390"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="391"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="392"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="393"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="394"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="395"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="396"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="397"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="398"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="399"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="400"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="401"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="402"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="403"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="404"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="405"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="406"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="407"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="408"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="409"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="410"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="411"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="412"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="413"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="414"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="415"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="416"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="417"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="418"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="419"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="420"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="421"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="422"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="423"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="424"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="425"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="426"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="427"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="428"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="429"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="430"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="431"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="432"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="433"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="434"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="435"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="436"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="437"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="438"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="439"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="440"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="441"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="442"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="443"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B922E68D-688B-4cf5-8486-9BEB0BEDF02B}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - migrate stereotype&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;&#xA;// change all the stereitypes of a certain elements to a new one. Destructive script, use carefully.&#xA;// Replace the conversion  below with another element list to reuse this script.&#xA;//!INC Conversion Scripts.ConversionTable&#xA;&#xA;function TypeConversion(sourceObject,sourceStereotype,targetObject, targetStereotype)&#xA;{&#xA;    this.sourceObject = sourceObject;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetObject = targetObject;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var Conversions = new Array();&#xA;&#xA;//Convert standards to MDG standard&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;TMF_API&quot;, &quot;Interface&quot;, &quot;TMF_API&quot;);&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;TMF_BusinessEntity&quot;);//&#xA;Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;ChiNode&quot;, &quot;Class&quot;, &quot;dModelClass&quot;);&#xA;//Conversions[0] = new TypeConversion(&quot;Interface&quot;, &quot;TMF_API&quot;, &quot;Interface&quot;, &quot;dAPI&quot;);&#xA;// =================================================================================&#xA;// Name: Element Conversion&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// The table is included as a file so it may be changed for other mappings&#xA;// Navigates from selected package and recursively modifies each element&#xA;// NOTE: Requires a package to be selected in the Project Browser&#xA;//&#xA;// Related APIs&#xA;// =================================================================================&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/element2.html&#xA;// Repository API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/repository3.html&#xA;// Tagged Value API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/taggedvalue.html&#xA;&#xA;function StartWithSelectedPackage()&#xA;{&#xA;    // Show the script output window&#xA;    Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;    Session.Output( &quot;JScript Type Convertion&quot; );&#xA;    Session.Output( &quot;===========================&quot; );&#xA;&#xA;    var thePackage as EA.Package;&#xA;    thePackage = Repository.GetTreeSelectedPackage();&#xA;   &#xA;    if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;    {&#xA;        NavigatePackage( &quot;&quot;, thePackage );&#xA;    }&#xA;    else&#xA;    {&#xA;        Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;            &quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;    }&#xA;   &#xA;    Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child&#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function NavigatePackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Add the current package's name to the list&#xA;    Session.Output( indent + currentPackage.Name + &quot; (PackageID=&quot; +&#xA;        currentPackage.PackageID + &quot;)&quot; );&#xA;   &#xA;    // Convert the elements this package contains&#xA;    ConvertElementsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;   &#xA;    // Recursively process any child packages&#xA;    var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;    while ( !childPackageEnumerator.atEnd() )&#xA;    {&#xA;        var childPackage as EA.Package;&#xA;        childPackage = childPackageEnumerator.item();&#xA;        NavigatePackage( indent + &quot;    &quot;, childPackage );&#xA;       &#xA;        childPackageEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertElementsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Iterate through all elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertElements( indent, theElement )&#xA;{&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    currentElement.ObjectType&#xA;    ConvertElement(indent+&quot;    &quot;,currentElement );&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentElement.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the element from BSIF to&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertElement( indent, theElement )&#xA;{&#xA;// Debug Comment out when run for real&#xA;    //Session.Output( indent + &quot;CALLED: ConvertElement with &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; Conversions.length ; i++ )&#xA;    {&#xA;        // If want to limit to stereotype that matches source list then convert&#xA;//        if ( (theElement.Stereotype == Conversions[i].sourceStereotype) &amp;&amp; (theElement.Type == Conversions[i].sourceObject ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED: &quot; + theElement.Name + &quot; (&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+Conversions[i].targetObject+&quot;,&quot;+Conversions[i].targetStereotype+&quot;)&quot; );&#xA;             theElement.Type = Conversions[i].targetObject;&#xA;            //Overright the stereotype list to have only one stereotype&#xA;            theElement.StereotypeEx = Conversions[i].targetStereotype;&#xA;            theElement.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;StartWithSelectedPackage();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="444"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2062F84F-6CF2-4fac-ACA5-44A24CC828D8}"/>
			<Column name="ScriptAuthor" value="{8566E7AD-A30E-4dde-B9E5-82EF33C3B001}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; create API properties&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="Option Explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'==========================================================================&#xA;' Script Name:    NormalizeMySQLAttributeTypes.vbs&#xA;' Author:         Giu&#xA;' Purpose:        Recursively scan all classes in a package (from the&#xA;'                 Project Browser) and convert MySQL attribute types to UML2.&#xA;' Date:           2025/04/22&#xA;'==========================================================================&#xA;&#xA;Sub OnProjectBrowserScript()&#xA;    Dim treeSelectedType&#xA;    treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#xA;    Select Case treeSelectedType&#xA;        Case otPackage&#xA;            Dim thePackage&#xA;            Set thePackage = Repository.GetTreeSelectedObject()&#xA;            tramsformPackage thePackage&#xA;&#xA;        Case Else&#xA;            Session.Prompt &quot;This script only supports Packages.&quot;, promptOK&#xA;    End Select&#xA;End Sub&#xA;&#xA;' entry point&#xA;OnProjectBrowserScript&#xA;&#xA;Sub tramsformPackage(thePackage)&#xA;    If thePackage Is Nothing Then&#xA;        Session.Output &quot;ERROR: No package selected.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    ' Build our type‑mapping dictionary&#xA;    Dim mapTypes&#xA;    Set mapTypes = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;    mapTypes.CompareMode = vbTextCompare&#xA;    With mapTypes&#xA;        .Add &quot;VARCHAR&quot;,    &quot;String&quot;&#xA;        .Add &quot;CHAR&quot;,       &quot;String&quot;&#xA;        .Add &quot;TEXT&quot;,       &quot;String&quot;&#xA;        .Add &quot;INT&quot;,        &quot;Int32&quot;&#xA;        .Add &quot;INTEGER&quot;,    &quot;Int32&quot;&#xA;        .Add &quot;SMALLINT&quot;,   &quot;Int32&quot;&#xA;        .Add &quot;BIGINT&quot;,     &quot;Int64&quot;&#xA;        .Add &quot;FLOAT&quot;,      &quot;Float&quot;&#xA;        .Add &quot;DOUBLE&quot;,     &quot;Double&quot;&#xA;        .Add &quot;DECIMAL&quot;,    &quot;Int32&quot;&#xA;        .Add &quot;NUMERIC&quot;,    &quot;Int32&quot;&#xA;        .Add &quot;DATE&quot;,       &quot;DateTime&quot;&#xA;        .Add &quot;DATETIME&quot;,   &quot;DateTime&quot;&#xA;        .Add &quot;TIMESTAMP&quot;,  &quot;DateTime&quot;&#xA;        .Add &quot;TIME&quot;,       &quot;DateTime&quot;&#xA;        .Add &quot;BOOLEAN&quot;,    &quot;Boolean&quot;&#xA;        .Add &quot;BIT&quot;,        &quot;Boolean&quot;&#xA;&#x9;&#x9;.Add &quot;TINYINT&quot;,     &quot;Int32&quot;&#xA;        ' …add more as needed…&#xA;    End With&#xA;&#xA;    Session.Output &quot;Normalizing attribute types under Package: &quot; &amp; thePackage.Name&#xA;    ProcessPackage thePackage, mapTypes&#xA;    Session.Output &quot;Done.&quot;&#xA;End Sub&#xA;&#xA;Sub ProcessPackage(pkg, mapTypes)&#xA;    Dim elm&#xA;    For Each elm In pkg.Elements&#xA;        If elm.Type = &quot;Class&quot; Then&#xA;            NormalizeAttributes elm, mapTypes&#xA;        End If&#xA;    Next&#xA;&#xA;    Dim subPkg&#xA;    For Each subPkg In pkg.Packages&#xA;        ProcessPackage subPkg, mapTypes&#xA;    Next&#xA;End Sub&#xA;&#xA;Sub NormalizeAttributes(cls, mapTypes)&#xA;    Dim attr, origType, baseType, newType&#xA;    For Each attr In cls.Attributes&#xA;        origType = Trim(attr.Type)&#xA;        If origType &lt;&gt; &quot;&quot; Then&#xA;            baseType = UCase(Split(origType, &quot;(&quot;)(0))&#xA;            If mapTypes.Exists(baseType) Then&#xA;                newType = mapTypes(baseType)&#xA;                If attr.Type &lt;&gt; newType Then&#xA;                    Session.Output &quot;  [&quot; &amp; cls.Name &amp; &quot;] &quot; &amp; attr.Name &amp; &quot;: &quot; &amp; origType &amp; &quot; → &quot; &amp; newType&#xA;                    attr.Type = newType&#xA;                    attr.Update&#xA;                End If&#xA;            End If&#xA;        End If&#xA;&#x9;&#x9;NormalizeAttributeStereotype attr, cls&#xA;    Next&#xA;    cls.Attributes.Refresh&#xA;End Sub&#xA;&#xA;&#xA;Sub NormalizeAttributeStereotype(attr, cls)&#xA;    ' a simple lookup: any of these “source” stereotypes become “dValue”&#xA;    Dim stereotypeMap&#xA;&#xA;    Set stereotypeMap = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;    stereotypeMap.CompareMode = vbTextCompare&#xA;    With stereotypeMap&#xA;        .Add &quot;column&quot;,      &quot;dValue&quot;&#xA;        .Add &quot;XSDelement&quot;,  &quot;dValue&quot;&#xA;        ' …add more source→target mappings if needed…&#xA;    End With&#xA;&#xA;    Dim currentStereo&#xA;    currentStereo = Trim(attr.Stereotype)&#xA;    If currentStereo &lt;&gt; &quot;&quot; Then&#xA;        If stereotypeMap.Exists(currentStereo) Then&#xA;            attr.Stereotype = stereotypeMap(currentStereo)&#xA;            attr.Update&#xA;            Session.Output &quot;    [&quot; &amp; cls.Name &amp; &quot;.&quot; &amp; attr.Name &amp; &quot;] stereotype → &quot; _&#xA;                           &amp; attr.Stereotype&#xA;        End If&#xA;    End If&#xA;End Sub&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="445"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{11C3CF7A-2CA8-45bb-941D-A5C9D32AF8C6}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen_JSON Schema&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA; * Script Name: GenerateOpenAPIJson.js&#xA; * Author: Giu Platania&#xA; * Purpose: Generate a complete OpenAPI JSON file using EA.SchemaComposer&#xA; * Date: 11/05/2020&#xA; * Version: 1.1&#xA; */&#xA;&#xA;!INC Local Scripts.EAConstants-JScript&#xA;&#xA;/**&#xA; * Helper: write text to disk via EA Project API&#xA; */&#xA;function writeViaEA(path, text) {&#xA;    var proj = Repository.GetProjectInterface();&#xA;    proj.Write2File(path, text);&#xA;    Session.Output(&quot;Wrote &quot; + text.length + &quot; chars to &quot; + path);&#xA;}&#xA;&#xA;// JSON2 polyfill (Douglas Crockford) remains unchanged&#xA;if (!this.JSON) { JSON = {}; }&#xA;(function () {&#xA;    function f(n) { return n &lt; 10 ? '0' + n : n; }&#xA;    if (typeof Date.prototype.toJSON !== 'function') {&#xA;        Date.prototype.toJSON = function () {&#xA;            return isFinite(this.valueOf()) ?&#xA;                this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' +&#xA;                f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' +&#xA;                f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;&#xA;        };&#xA;        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {&#xA;            return this.valueOf();&#xA;        };&#xA;    }&#xA;    var escapable = /[\\&quot;\u0000-\u001f]/g,&#xA;        meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '&quot;': '\\&quot;', '\\': '\\\\' };&#xA;    function quote(string) {&#xA;        escapable.lastIndex = 0;&#xA;        return escapable.test(string) ? '&quot;' + string.replace(escapable, function (a) {&#xA;            var c = meta[a];&#xA;            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);&#xA;        }) + '&quot;' : '&quot;' + string + '&quot;';&#xA;    }&#xA;    function str(key, holder) {&#xA;        var i, v, value = holder[key];&#xA;        if (value &amp;&amp; typeof value === 'object' &amp;&amp; typeof value.toJSON === 'function') {&#xA;            value = value.toJSON(key);&#xA;        }&#xA;        switch (typeof value) {&#xA;            case 'string': return quote(value);&#xA;            case 'number': return isFinite(value) ? String(value) : 'null';&#xA;            case 'boolean':&#xA;            case 'null': return String(value);&#xA;            case 'object':&#xA;                if (!value) return 'null';&#xA;                var partial = [];&#xA;                if (Object.prototype.toString.apply(value) === '[object Array]') {&#xA;                    for (i = 0; i &lt; value.length; i++) {&#xA;                        partial[i] = str(i, value) || 'null';&#xA;                    }&#xA;                    return '[' + partial.join(',') + ']';&#xA;                }&#xA;                for (var k in value) {&#xA;                    if (Object.prototype.hasOwnProperty.call(value, k)) {&#xA;                        v = str(k, value);&#xA;                        if (v) partial.push(quote(k) + ':' + v);&#xA;                    }&#xA;                }&#xA;                return '{' + partial.join(',') + '}';&#xA;        }&#xA;    }&#xA;    JSON.stringify = function (value, replacer, space) {&#xA;        return str('', {'': value});&#xA;    };&#xA;}());&#xA;&#xA;function main() {&#xA;    var proj = Repository.GetProjectInterface();&#xA;    // Prompt user for output file location&#xA;    var dlgTitle = &quot;Select OpenAPI JSON output file&quot;;&#xA;    var filter   = &quot;JSON Files (*.json)|*.json|All Files (*.*)|*.*&quot;;&#xA;    // 0 = open, 1 = save&#xA;    var path = proj.GetFileNameDialog(&quot;OpenAPI.json&quot;, filter, 1, 0, &quot;&quot;);&#xA;    if (!path) {&#xA;        Session.Output(&quot;No file selected, aborting.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // Build OpenAPI object&#xA;    var schema = Repository.SchemaComposer;&#xA;    var title = schema.SchemaName;&#xA;    var version = &quot;3.0.1&quot;;&#xA;    var UMLProtoDict = { 'boolean':'boolean','int':'integer','str':'string','float':'number','long':'integer','byte':'string','double':'number' };&#xA;    var openAPI = { openapi:version, info:{title:title,version:version}, paths:{}, components:{schemas:{}} };&#xA;&#xA;    var xmlType = schema.SchemaTypes.GetFirst();&#xA;    while (xmlType) {&#xA;        var name = xmlType.TypeName.charAt(0).toUpperCase() + xmlType.TypeName.slice(1);&#xA;        var def = { type:&quot;object&quot;, properties:{} };&#xA;        var props = xmlType.Properties.GetFirst? xmlType.Properties : null;&#xA;        if (props) {&#xA;            var p = props.GetFirst();&#xA;            while (p) {&#xA;                var pd = {};&#xA;                if (p.IsPrimitive()) pd.type = UMLProtoDict[p.PrimitiveType] || 'string';&#xA;                else pd.$ref = &quot;#/components/schemas/&quot; + p.TypeName.charAt(0).toUpperCase() + p.TypeName.slice(1);&#xA;                if (p.Cardinality==='0..1') pd.nullable = true;&#xA;                if (p.InitialValue) pd.default = p.InitialValue;&#xA;                var choices = p.Choices;&#xA;                if (choices &amp;&amp; choices.GetCount()&gt;0) {&#xA;                    var ev = [], c = choices.GetFirst();&#xA;                    while(c){ev.push(c.TypeName); c=choices.GetNext();}&#xA;                    pd.enum = ev;&#xA;                }&#xA;                def.properties[p.Name] = pd;&#xA;                p = props.GetNext();&#xA;            }&#xA;        }&#xA;        openAPI.components.schemas[name] = def;&#xA;        xmlType = schema.SchemaTypes.GetNext();&#xA;    }&#xA;&#xA;    // Serialize and write&#xA;    var jsonText = JSON.stringify(openAPI, null, 2);&#xA;    writeViaEA(path, jsonText);&#xA;}&#xA;&#xA;main();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="446"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AE39AD06-062E-4498-94FD-7F77FB568AF0}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen__stub_API_Json_Schema&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA; * Script Name: GenerateOpenAPIJson.js&#xA; * Author: Giu Platania&#xA; * Purpose: Generate a complete OpenAPI JSON file using EA.SchemaComposer&#xA; * Date: 11/05/2020&#xA; * Version: 1.4 (JScript)&#xA; */&#xA;&#xA;!INC Local Scripts.EAConstants-JScript&#xA;&#xA;/**&#xA; * Helper: write text to disk via Windows FileSystemObject&#xA; */&#xA;function writeViaActiveX(path, text) {&#xA;    var fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);&#xA;    var a = fso.CreateTextFile(path, true);&#xA;    a.WriteLine(text);&#xA;    a.Close();&#xA;    Session.Output(&quot;Wrote &quot; + text.length + &quot; chars to &quot; + path);&#xA;}&#xA;&#xA;// JSON2 polyfill (Douglas Crockford)&#xA;if (!this.JSON) { JSON = {}; }&#xA;(function () {&#xA;    function f(n) { return n &lt; 10 ? '0' + n : n; }&#xA;    if (typeof Date.prototype.toJSON !== 'function') {&#xA;        Date.prototype.toJSON = function () {&#xA;            return isFinite(this.valueOf()) ?&#xA;                this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' +&#xA;                f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' +&#xA;                f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;&#xA;        };&#xA;        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () { return this.valueOf(); };&#xA;    }&#xA;    var escapable = /[\\&quot;\u0000-\u001f]/g,&#xA;        meta = { '\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','&quot;':'\\&quot;','\\':'\\\\' };&#xA;    function quote(string) {&#xA;        escapable.lastIndex = 0;&#xA;        return escapable.test(string)&#xA;            ? '&quot;' + string.replace(escapable, function(a) {&#xA;                  var c = meta[a];&#xA;                  return typeof c == 'string' ? c :&#xA;                      '\\u' + ('0000' + a.charCodeAt(0).toString(16)).substring(a.charCodeAt(0).toString(16).length - 4);&#xA;              }) + '&quot;'&#xA;            : '&quot;' + string + '&quot;';&#xA;    }&#xA;    function str(key, holder) {&#xA;        var i, v, value = holder[key];&#xA;        if (value &amp;&amp; typeof value === 'object' &amp;&amp; typeof value.toJSON === 'function') {&#xA;            value = value.toJSON(key);&#xA;        }&#xA;        switch (typeof value) {&#xA;            case 'string': return quote(value);&#xA;            case 'number': return isFinite(value) ? String(value) : 'null';&#xA;            case 'boolean':&#xA;            case 'null': return String(value);&#xA;            case 'object':&#xA;                if (!value) return 'null';&#xA;                var partial = [];&#xA;                if (Object.prototype.toString.apply(value) === '[object Array]') {&#xA;                    for (i = 0; i &lt; value.length; i++) {&#xA;                        partial[i] = str(i, value) || 'null';&#xA;                    }&#xA;                    return '[' + partial.join(',') + ']';&#xA;                }&#xA;                for (var k in value) {&#xA;                    if (Object.prototype.hasOwnProperty.call(value, k)) {&#xA;                        v = str(k, value);&#xA;                        if (v) partial.push(quote(k) + ':' + v);&#xA;                    }&#xA;                }&#xA;                return '{' + partial.join(',') + '}';&#xA;        }&#xA;    }&#xA;    JSON.stringify = function (value, replacer, space) {&#xA;        return str('', {'': value});&#xA;    };&#xA;}());&#xA;&#xA;function main() {&#xA;    var proj = Repository.GetProjectInterface();&#xA;    // Prompt user for output file&#xA;    var path = proj.GetFileNameDialog(&#xA;        &quot;OpenAPI.json&quot;,&#xA;        &quot;JSON Files (*.json)|*.json|All Files (*.*)|*.*&quot;,&#xA;        1, // Index of the default filter (Save dialog mode if SaveOrOpen=2)&#xA;        0, // Flags&#xA;        &quot;&quot;, // Initial directory&#xA;        2  // OpenOrSave: 1=Open, 2=Save&#xA;    );&#xA;    if (!path) {&#xA;        Session.Output(&quot;No file selected, aborting.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // Build OpenAPI object&#xA;    var schema = Repository.SchemaComposer;&#xA;    var title = schema.SchemaName;&#xA;    var version = &quot;3.0.1&quot;;&#xA;    var UMLProtoDict = { 'boolean':'boolean','int':'integer','str':'string','float':'number','long':'integer','byte':'string','double':'number' };&#xA;    var openAPI = { openapi:version, info:{title:title,version:version}, paths:{}, components:{schemas:{}} };&#xA;&#xA;    var xmlType = schema.SchemaTypes.GetFirst();&#xA;    while (xmlType) {&#xA;        var name = xmlType.TypeName.charAt(0).toUpperCase() + xmlType.TypeName.substring(1);&#xA;        var def = { type:&quot;object&quot;, properties:{} };&#xA;        var props = xmlType.Properties;&#xA;        if (props) {&#xA;            var p = props.GetFirst();&#xA;            while (p) {&#xA;                var pd = {};&#xA;                if (p.IsPrimitive()) pd.type = UMLProtoDict[p.PrimitiveType] || 'string';&#xA;                else pd.$ref = &quot;#/components/schemas/&quot; + p.TypeName.charAt(0).toUpperCase() + p.TypeName.substring(1);&#xA;                if (p.Cardinality == '0..1') pd.nullable = true;&#xA;                if (p.InitialValue) pd[&quot;default&quot;] = p.InitialValue;&#xA;                var choices = p.Choices;&#xA;                if (choices &amp;&amp; choices.GetCount() &gt; 0) {&#xA;                    var ev = [], c = choices.GetFirst(); while(c) { ev.push(c.TypeName); c = choices.GetNext(); }&#xA;                    pd[&quot;enum&quot;] = ev;&#xA;                }&#xA;                def.properties[p.Name] = pd;&#xA;                p = props.GetNext();&#xA;            }&#xA;        }&#xA;        openAPI.components.schemas[name] = def;&#xA;        xmlType = schema.SchemaTypes.GetNext();&#xA;    }&#xA;&#xA;    // Serialize and write via ActiveX&#xA;    var jsonText = JSON.stringify(openAPI, null, 2);&#xA;    writeViaActiveX(path, jsonText);&#xA;}&#xA;&#xA;main();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="447"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{29BCDF08-E360-4ab8-BA70-505D67F913C0}"/>
			<Column name="ScriptAuthor" value="{827658BF-4F9A-403d-8849-A59A1B231856}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;SchemaComp_Gen_pureJsonSchema&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA; * Script Name: GenerateJsonSchema.js&#xA; * Author: Giu Platania&#xA; * Purpose: Generate a complete JSON Schema using EA.SchemaComposer&#xA; * Date: 11/05/2020&#xA; * Version: 2.0 (JScript)&#xA; */&#xA;&#xA;!INC Local Scripts.EAConstants-JScript&#xA;&#xA;/**&#xA; * Helper: write text to disk via Windows FileSystemObject&#xA; */&#xA;function writeViaActiveX(path, text) {&#xA;    var fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);&#xA;    var a = fso.CreateTextFile(path, true);&#xA;    a.WriteLine(text);&#xA;    a.Close();&#xA;    Session.Output(&quot;Wrote &quot; + text.length + &quot; chars to &quot; + path);&#xA;}&#xA;&#xA;// JSON2 polyfill (Douglas Crockford)&#xA;if (!this.JSON) { JSON = {}; }&#xA;(function () {&#xA;    function f(n) { return n &lt; 10 ? '0' + n : n; }&#xA;    if (typeof Date.prototype.toJSON !== 'function') {&#xA;        Date.prototype.toJSON = function () {&#xA;            return isFinite(this.valueOf()) ?&#xA;                this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' +&#xA;                f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' +&#xA;                f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;&#xA;        };&#xA;        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () { return this.valueOf(); };&#xA;    }&#xA;    var escapable = /[\\&quot;\u0000-\u001f]/g,&#xA;        meta = { '\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','&quot;':'\\&quot;','\\':'\\\\' };&#xA;    function quote(string) {&#xA;        escapable.lastIndex = 0;&#xA;        return escapable.test(string)&#xA;            ? '&quot;' + string.replace(escapable, function(a) {&#xA;                  var c = meta[a];&#xA;                  return typeof c == 'string' ? c :&#xA;                      '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);&#xA;              }) + '&quot;'&#xA;            : '&quot;' + string + '&quot;';&#xA;    }&#xA;    function str(key, holder) {&#xA;        var i, v, value = holder[key];&#xA;        if (value &amp;&amp; typeof value === 'object' &amp;&amp; typeof value.toJSON === 'function') {&#xA;            value = value.toJSON(key);&#xA;        }&#xA;        switch (typeof value) {&#xA;            case 'string': return quote(value);&#xA;            case 'number': return isFinite(value) ? String(value) : 'null';&#xA;            case 'boolean':&#xA;            case 'null': return String(value);&#xA;            case 'object':&#xA;                if (!value) return 'null';&#xA;                var partial = [];&#xA;                if (Object.prototype.toString.apply(value) === '[object Array]') {&#xA;                    for (i = 0; i &lt; value.length; i++) {&#xA;                        partial[i] = str(i, value) || 'null';&#xA;                    }&#xA;                    return '[' + partial.join(',') + ']';&#xA;                }&#xA;                for (var k in value) {&#xA;                    if (Object.prototype.hasOwnProperty.call(value, k)) {&#xA;                        v = str(k, value);&#xA;                        if (v) partial.push(quote(k) + ':' + v);&#xA;                    }&#xA;                }&#xA;                return '{' + partial.join(',') + '}';&#xA;        }&#xA;    }&#xA;    JSON.stringify = function (value, replacer, space) {&#xA;        return str('', {'': value});&#xA;    };&#xA;}());&#xA;&#xA;function main() {&#xA;    var proj = Repository.GetProjectInterface();&#xA;    // Prompt user for output file&#xA;    var path = proj.GetFileNameDialog(&#xA;        &quot;JsonSchema.json&quot;,&#xA;        &quot;JSON Schema Files (*.json)|*.json|All Files (*.*)|*.*&quot;,&#xA;        1, // Filter index&#xA;        0, // Flags&#xA;        &quot;&quot;, // Initial directory&#xA;        2  // OpenOrSave: 1=Open, 2=Save&#xA;    );&#xA;    if (!path) {&#xA;        Session.Output(&quot;No file selected, aborting.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // Build JSON Schema object&#xA;    var schema = Repository.SchemaComposer;&#xA;    var title = schema.SchemaName;&#xA;    var rootSchema = {&#xA;        &quot;$schema&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,&#xA;        &quot;$id&quot;: &quot;http://example.com/&quot; + title + &quot;.schema.json&quot;,&#xA;        &quot;title&quot;: title,&#xA;        &quot;type&quot;: &quot;object&quot;,&#xA;        &quot;properties&quot;: {},&#xA;        &quot;$defs&quot;: {}&#xA;    };&#xA;&#xA;    var UMLProtoDict = {&#xA;        'boolean':'boolean','int':'integer','str':'string','float':'number',&#xA;        'long':'integer','byte':'string','double':'number'&#xA;    };&#xA;&#xA;    // Iterate over types to populate $defs and properties&#xA;    var xmlType = schema.SchemaTypes.GetFirst();&#xA;    while (xmlType) {&#xA;        var name = xmlType.TypeName.charAt(0).toUpperCase() + xmlType.TypeName.substring(1);&#xA;        var def = { type: &quot;object&quot;, properties: {} };&#xA;        var props = xmlType.Properties;&#xA;        if (props) {&#xA;            var p = props.GetFirst();&#xA;            while (p) {&#xA;                var pd = {};&#xA;                if (p.IsPrimitive()) pd.type = UMLProtoDict[p.PrimitiveType] || 'string';&#xA;                else pd.$ref = &quot;#/$defs/&quot; + p.TypeName.charAt(0).toUpperCase() + p.TypeName.substring(1);&#xA;                if (p.Cardinality == '0..1') pd.nullable = true;&#xA;                if (p.InitialValue) pd[&quot;default&quot;] = p.InitialValue;&#xA;                var choices = p.Choices;&#xA;                if (choices &amp;&amp; choices.GetCount() &gt; 0) {&#xA;                    var ev = [], c = choices.GetFirst(); while(c) { ev.push(c.TypeName); c = choices.GetNext(); }&#xA;                    pd[&quot;enum&quot;] = ev;&#xA;                }&#xA;                def.properties[p.Name] = pd;&#xA;                p = props.GetNext();&#xA;            }&#xA;        }&#xA;        rootSchema.$defs[name] = def;&#xA;        // expose each type as a property referencing its definition&#xA;        rootSchema.properties[name] = { &quot;$ref&quot;: &quot;#/$defs/&quot; + name };&#xA;        xmlType = schema.SchemaTypes.GetNext();&#xA;    }&#xA;&#xA;    // Serialize and write via ActiveX&#xA;    var jsonText = JSON.stringify(rootSchema, null, 2);&#xA;    writeViaActiveX(path, jsonText);&#xA;}&#xA;&#xA;main();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="449"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{9DCD3AF7-1F19-470d-A665-C7270CAC79B4}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Browser DAF"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="450"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{ACC89FB3-E91C-4ed7-968E-E14D1CCA23C8}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Change Diagram Element Color&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value=" ' Script to change fill color of elements on a diagram based on an array of rules (conditions) &#xA; '&#xA; ' Copyright (c) 2011-2015 Armstrong Process Group, Inc. All rights reserved. www.aprocessgroup.com&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;sub ChangeDiagramElementColor(ruleArray, colorArray)&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim backgroundColor&#xA;&#x9;dim elementID&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim index&#xA;&#x9;dim rule&#xA;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID( elementID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for index = 0 to UBound(ruleArray)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;rule = ruleArray(index)&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Prompt &quot;inside array &quot;  &amp; element.Name, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Prompt &quot;inside array &quot;  &amp; rule, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;'if eval( rule) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;inside array &quot;  &amp; element.Name, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;backgroundColor = colorArray(index)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element.SetAppearance 1, 0, backgroundColor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element.SetAppearance 255,0,backgroundColor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="451"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9C68A186-D108-4a39-BFDD-C3A5A4B3579C}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; Set Diagram Element Status Color&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of elements on a diagram based the value of the Status property.&#xA; '&#xA; ' 2011-2015: Armstrong Process Group, Inc. info@aprocessgroup.com&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram Element Color&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim ruleArray(2)&#xA;&#x9;dim colorArray(2)&#xA;&#xA;&#x9;ruleArray(0) = &quot;element.Status = &quot;&quot;Approved&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;element.Status = &quot;&quot;Proposed&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;element.Status = &quot;&quot;Mandatory&quot;&quot;&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightSkyBlue&#xA;&#x9;colorArray(1) = colorPaleGreen&#xA;&#x9;colorArray(2) = colorLightCoral&#xA;&#x9;&#xA;&#x9;ChangeDiagramElementColor ruleArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="452"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6063F786-6695-4310-90D6-70BDA7909E6F}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; Set Diagram Object Tagged Value Color&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of objects on a diagram based the value of a tagged value.&#xA; '&#xA; ' 2011-2015: Armstrong Process Group, Inc. info@aprocessgroup.com&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram Element Color&#xA;!INC Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim taggedValueName &#xA;&#x9;dim ruleArray(5)&#xA;&#x9;dim labelArray(5)&#xA;&#x9;dim colorArray(5)&#xA;&#x9;&#xA;&#x9;taggedValueName = &quot;application_disposition&quot;&#xA;&#x9;&#xA;&#x9;ruleArray(0) = &quot;taggedValue.Value = &quot;&quot;Retain&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;taggedValue.Value = &quot;&quot;Replace&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;taggedValue.Value = &quot;&quot;Re-engineer&quot;&quot;&quot;&#xA;&#x9;ruleArray(3) = &quot;taggedValue.Value = &quot;&quot;Retire&quot;&quot;&quot;&#xA;&#x9;ruleArray(4) = &quot;taggedValue.Value = &quot;&quot;Unknown&quot;&quot;&quot;&#xA;&#x9;ruleArray(5) = &quot;taggedValue.Value = &quot;&quot;&quot;&quot;&quot;&#xA;&#x9;&#xA;&#x9;labelArray(0) = &quot;Retain&quot;&#xA;&#x9;labelArray(1) = &quot;Replace&quot;&#xA;&#x9;labelArray(2) = &quot;Re-engineer&quot;&#xA;&#x9;labelArray(3) = &quot;Retire&quot;&#xA;&#x9;labelArray(4) = &quot;Unknown&quot;&#xA;&#x9;labelArray(5) = &quot;No value&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightSkyBlue&#xA;&#x9;colorArray(1) = colorPaleGreen&#xA;&#x9;colorArray(2) = colorLightCoral&#xA;&#x9;colorArray(3) = colorRed&#xA;&#x9;colorArray(4) = colorGreen&#xA;&#x9;colorArray(5) = colorWhite&#xA;&#x9;&#xA;&#x9;ChangeDiagramObjectColor ruleArray, colorArray, taggedValueName&#xA;&#x9;&#xA;&#x9;CreateDiagramLegend &quot;Disposition&quot;, labelArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="453"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C660956A-95B7-42cd-A557-13B95F22CBFF}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Diagram Legend&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script to create a legend based on an array of rules (conditions)&#xA;&#xA;' Copyright (c) 2011-2015 Armstrong Process Group, Inc. All rights reserved. www.aprocessgroup.com&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;const LEGEND_SUBTYPE = 76&#xA;const LEGEND_ELEMENT_NAME = &quot;Capability Legend&quot;&#xA;&#xA;sub CreateDiagramLegend(legendName, valueArray, colorArray)&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim diagramPackageID&#xA;&#x9;dim diagramPackage as EA.Package&#xA;&#x9;dim legendElement as EA.Element&#xA;&#x9;dim legendGUID&#xA;&#x9;dim legendObject as EA.DiagramObject&#xA;&#x9;dim backgroundColor&#xA;&#x9;dim elementID&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim index&#xA;&#x9;dim value&#xA;&#x9;dim color&#xA;&#x9;dim legendXrefProperties&#xA;&#x9;dim sqlString&#xA;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;diagramPackageID = currentDiagram.PackageID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramPackage = Repository.GetPackageByID(diagramPackageID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set legendElement = diagramPackage.Elements.AddNew(LEGEND_ELEMENT_NAME, &quot;Text&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendElement.Subtype = LEGEND_SUBTYPE&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendElement.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendGUID = legendElement.ElementGUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set legendObject = currentDiagram.DiagramObjects.AddNew(LEGEND_ELEMENT_NAME, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendObject.DiagramID = currentDiagram.DiagramID&#xA;&#x9;&#x9;legendObject.ElementID = legendElement.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendObject.left = 10&#xA;&#x9;&#x9;legendObject.top = -350&#xA;&#x9;&#x9;legendObject.right = legendObject.left + 100&#xA;&#x9;&#x9;legendObject.bottom = legendObject.top - 150&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendObject.Update&#xA;&#xA;&#x9;&#x9;currentDiagram.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendXrefProperties = &quot;&quot;&#xA;&#xA;&#x9;&#x9;for index = 0 to UBound(valueArray)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;value = valueArray(index)&#xA;&#x9;&#x9;&#x9;color = colorArray(index)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;legendXrefProperties = legendXrefProperties &amp; &quot;@PROP=@NAME=&quot; &amp; value &amp; &quot;@ENDNAME;@TYPE=LEGEND_OBJECTSTYLE@ENDTYPE;&quot;&#xA;&#x9;&#x9;&#x9;legendXrefProperties = legendXrefProperties &amp; &quot;@VALU=#Back_Ground_Color#=&quot; &amp; color &amp; &quot;;#Pen_Color#=0;#Pen_Size#=1;#Legend_Type#=LEGEND_OBJECTSTYLE;@ENDVALU;&quot;&#xA;&#x9;&#x9;&#x9;legendXrefProperties = legendXrefProperties &amp; &quot;@PRMT=&quot; &amp; index &amp; &quot;@ENDPRMT;@ENDPROP;&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;legendXrefProperties = legendXrefProperties &amp; &quot;@PROP=@NAME=&quot; &amp; legendName &amp; &quot;@ENDNAME;@TYPE=LEGEND_STYLE_SETTINGS@ENDTYPE;@VALU=#TITLE#=&quot; &amp; legendName &amp; &quot;;@ENDVALU;@PRMT=@ENDPRMT;@ENDPROP;&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;sqlString = &quot;INSERT INTO t_xref (`XrefID`, `Name`, `Type`, `Visibility`, `Partition`, `Description`, `Client`, `Supplier`) VALUES (&quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;&quot; &amp; GetNewGUID &amp; &quot;&quot;&quot;, &quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;CustomProperties&quot;&quot;, &quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;element property&quot;&quot;, &quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;Public&quot;&quot;, &quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;0, &quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;&quot; &amp; legendXrefProperties &amp; &quot;&quot;&quot;, &quot;&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;&quot; &amp; legendGUID &amp; &quot;&quot;&quot;, &quot; &#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot;&quot;&quot;&lt;none&gt;&quot;&quot;)&quot;&#xA;&#xA;&#x9;&#x9;Repository.CreateOutputTab &quot;test&quot; &#xA;&#x9;&#x9;Repository.WriteOutput &quot;test&quot;, sqlString, 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.Execute sqlString&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;function GetNewGUID()&#xA;    GetNewGUID = Left(CreateObject(&quot;Scriptlet.TypeLib&quot;).Guid,38)&#xA;end function&#x9;&#xA;&#x9;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="455"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F9F04CE4-1216-49cd-A8B1-F80D66724D4A}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Show Package Connectors&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     ShowPackageConnectors&#xA;' Author:          Giu Platania&#xA;' Purpose:         Display the number of connectors in the currently selected package in the EA Project Browser.&#xA;' Date:            2025-08-06&#xA;' Version:         1.0&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;Sub ShowPackageConnectors()&#xA;&#xA;    ' Show the script output window&#xA;    Session.Output(&quot;Show Window&quot;)&#xA;    Session.Output(&quot;=======================================&quot;)&#xA;    Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#xA;    Dim package As EA.Package&#xA;    Dim connectors As EA.Collection&#xA;&#xA;    Session.Output(&quot;Show Package Connectors&quot;)&#xA;    Session.Output(&quot;=======================================&quot;)&#xA;&#xA;    ' Get the currently selected package in the Project Browser&#xA;    Set package = Repository.GetTreeSelectedPackage()&#xA;&#xA;    If package Is Nothing Then&#xA;        MsgBox &quot;Please select a package in the Project Browser and try again.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    Set connectors = package.Connectors&#xA;&#xA;    Session.Output(&quot;# of connectors: &quot; &amp; connectors.Count)&#xA;    Session.Output(&quot;Done!&quot;)&#xA;&#xA;End Sub&#xA;&#xA;ShowPackageConnectors&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="456"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AB9539F2-580E-49ad-BEDF-47D9C0925573}"/>
			<Column name="ScriptAuthor" value="{9DCD3AF7-1F19-470d-A665-C7270CAC79B4}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Dump Diagrams To File&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     DumpDiagramsToFileSystem&#xA;' Author:          Giu Platania&#xA;' Purpose:         Recursively create images of all diagrams in a selected package (and its sub-packages/elements) and save them to the filesystem.&#xA;' Date:            2025-08-06&#xA;' Version:         1.0&#xA;&#xA;Option Explicit&#xA;&#xA;'--- Script to create images of all diagrams in a package and write them to the filing system. ---&#xA;&#xA;Dim project As EA.Project&#xA;Dim folderName&#xA;Dim PACKAGE_OBJECT_TYPE&#xA;Dim topLevelPackage As EA.Package&#xA;Dim imageFileExt&#xA;Dim packageLevel&#xA;Dim filterDiagramType&#xA;&#xA;PACKAGE_OBJECT_TYPE = 5&#xA;imageFileExt = &quot;jpg&quot;&#xA;packageLevel = 0&#xA;&#xA;' User modifiable variables.&#xA;folderName = &quot;C:\tmp\DiagramImages&quot;&#xA;&#xA;' Diagram type filter: set to &quot;&quot; for all types, or restrict by type (&quot;Activity&quot;, &quot;Component&quot;, etc.)&#xA;filterDiagramType = &quot;&quot;&#xA;'filterDiagramType = &quot;Activity&quot;&#xA;'filterDiagramType = &quot;Analysis&quot; &#xA;'filterDiagramType = &quot;Component&quot; &#xA;'filterDiagramType = &quot;Custom&quot;&#xA;'filterDiagramType = &quot;Deployment&quot;&#xA;'filterDiagramType = &quot;Logical&quot;&#xA;'filterDiagramType = &quot;Sequence&quot; &#xA;'filterDiagramType = &quot;Statechart&quot;&#xA;'filterDiagramType = &quot;Use Case&quot;&#xA;&#xA;' Entry point: expects a package to be selected in the Project Browser.&#xA;Sub UpdatePackageClasses()&#xA;    Session.Output( &quot;Dump Diagrams to Filing System v1.0&quot; )&#xA;    Session.Output( &quot;===================================&quot; )&#xA;&#xA;    Dim theElement As EA.Element&#xA;&#xA;    Set project = Repository.GetProjectInterface()&#xA;    Set theElement = Repository.GetTreeSelectedObject()&#xA;&#xA;    If Not theElement Is Nothing And theElement.ObjectType = PACKAGE_OBJECT_TYPE Then&#xA;        Set topLevelPackage = theElement&#xA;        DumpPackage packageLevel, topLevelPackage&#xA;    Else&#xA;        MsgBox( &quot;This script requires a package be selected in the Project Browser.&quot; &amp; Chr(10) &amp; _&#xA;            &quot;Please select a package in the Project Browser and try again.&quot; )&#xA;    End If&#xA;&#xA;    Session.Output( &quot;Done!&quot; )&#xA;End Sub&#xA;&#xA;' Recursively processes a package, its diagrams, and its children.&#xA;Sub DumpPackage(packageLevel, thePackage)&#xA;    Dim currentPackage As EA.Package&#xA;    Dim childPackage As EA.Package&#xA;&#xA;    Set currentPackage = thePackage&#xA;    packageLevel = packageLevel + 1&#xA;&#xA;    ' Dump diagrams in this package&#xA;    DumpDiagrams packageLevel, currentPackage, &quot;&quot;&#xA;&#xA;    ' Dump elements (recursively handles elements that may also contain diagrams/elements)&#xA;    DumpElements packageLevel, currentPackage, &quot;&quot;&#xA;&#xA;    ' Recurse into child packages&#xA;    For Each childPackage In currentPackage.Packages&#xA;        DumpPackage packageLevel, childPackage&#xA;    Next&#xA;End Sub&#xA;&#xA;' Exports all diagrams of a given object (package or element) to file.&#xA;Sub DumpDiagrams(packageLevel, theObject, elementNameQualifier)&#xA;    Dim currentDiagram As EA.Diagram&#xA;    Dim diagramType&#xA;    Dim diagramDate&#xA;    Dim fileName&#xA;&#xA;    For Each currentDiagram In theObject.Diagrams&#xA;        diagramType = currentDiagram.Type&#xA;&#xA;        If filterDiagramType = &quot;&quot; Or (filterDiagramType &lt;&gt; &quot;&quot; And filterDiagramType = diagramType) Then&#xA;            diagramDate = GetDateLabel(currentDiagram.ModifiedDate)&#xA;&#xA;            fileName = topLevelPackage.Name&#xA;            If elementNameQualifier &lt;&gt; &quot;&quot; Then&#xA;                fileName = fileName &amp; elementNameQualifier&#xA;            End If&#xA;&#xA;            fileName = fileName &amp; &quot;.&quot; &amp; theObject.Name &#xA;            fileName = fileName &amp; &quot;.&quot; &amp; currentDiagram.Name &#xA;            fileName = fileName &amp; &quot;.&quot; &amp; diagramType &#xA;            fileName = fileName &amp; &quot;.&quot; &amp; diagramDate&#xA;            fileName = fileName &amp; &quot;.&quot; &amp; imageFileExt&#xA;&#xA;            fileName = ConvertIllegalChars(fileName)&#xA;            fileName = folderName &amp; &quot;\&quot; &amp; fileName&#xA;&#xA;            project.PutDiagramImageToFile currentDiagram.DiagramGUID, fileName, 1&#xA;            Repository.CloseDiagram currentDiagram.DiagramID&#xA;        End If&#xA;&#xA;        Session.Output(fileName)&#xA;    Next&#xA;End Sub&#xA;&#xA;' Recursively processes elements, dumping their diagrams and any child elements.&#xA;Sub DumpElements(packageLevel, theObject, elementNameQualifier)&#xA;    Dim currentElement As EA.Element&#xA;    Dim prevQualifier&#xA;&#xA;    prevQualifier = elementNameQualifier&#xA;    elementNameQualifier = elementNameQualifier &amp; &quot;.&quot; &amp; theObject.Name&#xA;&#xA;    For Each currentElement In theObject.Elements&#xA;        DumpDiagrams packageLevel, currentElement, elementNameQualifier&#xA;        DumpElements packageLevel, currentElement, elementNameQualifier&#xA;    Next&#xA;&#xA;    elementNameQualifier = prevQualifier&#xA;End Sub&#xA;&#xA;' Formats a date as YYYYMMDD for use in filenames.&#xA;Function GetDateLabel(aDate)&#xA;    Dim yearPart&#xA;    Dim monthPart&#xA;    Dim dayPart&#xA;&#xA;    yearPart = DatePart(&quot;yyyy&quot;, aDate) &#xA;&#xA;    monthPart = DatePart(&quot;m&quot;, aDate)&#xA;    monthPart = String(2 - Len(monthPart), &quot;0&quot;) &amp; monthPart&#xA;&#xA;    dayPart = DatePart(&quot;d&quot;, aDate)&#xA;    dayPart = String(2 - Len(dayPart), &quot;0&quot;) &amp; dayPart&#xA;&#xA;    GetDateLabel = yearPart &amp; monthPart &amp; dayPart&#xA;End Function&#xA;&#xA;' Converts illegal filename characters to underscores.&#xA;Function ConvertIllegalChars(fileName)&#xA;    fileName = Replace(fileName, &quot; &quot;, &quot;_&quot;)&#xA;    fileName = Replace(fileName, &quot;\&quot;, &quot;_&quot;)&#xA;    fileName = Replace(fileName, &quot;/&quot;, &quot;_&quot;)&#xA;    fileName = Replace(fileName, &quot;:&quot;, &quot;_&quot;)&#xA;    fileName = Replace(fileName, &quot;*&quot;, &quot;_&quot;)&#xA;    ConvertIllegalChars = fileName&#xA;End Function&#xA;&#xA;' --- Script Execution ---&#xA;UpdatePackageClasses&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="457"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0BEC8D3D-184F-4427-8DB6-DDD078B32F7D}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Show Class Metatype&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;dim ELEMENT_OBJECT_TYPE&#xA;ELEMENT_OBJECT_TYPE = 4&#xA;&#xA;'&#xA;' An example of working with attributes.&#xA;' &#xA;' NOTE: Requires an element to be selected in the Project Browser&#xA;' &#xA;sub AttributeLifeCycleExample()&#xA;&#x9;&#xA;&#x9;' Get the currently selected element in the tree to work on&#xA;&#x9;dim theElement as EA.Element&#xA;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#xA;&#x9;if not theElement is nothing and theElement.ObjectType = ELEMENT_OBJECT_TYPE then&#xA;&#xA;&#x9;&#x9;Session.Output( &quot;Update MetaType from Stereotype Utility v1.0&quot; )&#xA;&#x9;&#x9;Session.Output( &quot;============================================&quot; )&#xA;&#x9;&#x9;Session.Output( &quot;Working on element '&quot; &amp; theElement.Name &amp; &quot;' (Type=&quot; &amp; theElement.Type &amp; _&#xA;&#x9;&#x9;&#x9;&quot;, ID=&quot; &amp; theElement.ElementID &amp; &quot;)&quot; )&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output( &quot;MetaType = &quot; &amp; theElement.Metatype )&#xA;&#x9;&#x9;Session.Output( &quot;Stereotype = &quot; &amp; theElement.Stereotype )&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output( &quot;Done!&quot; )&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;' No item selected in the tree, or the item selected was not an element&#xA;&#x9;&#x9;MsgBox( &quot;This script requires an element be selected in the Project Browser.&quot; &amp; chr(10) &amp; _&#xA;&#x9;&#x9;&#x9;&quot;Please select an element in the Project Browser and try again.&quot; )&#xA;&#x9;end if&#xA;&#xA;&#xA;end sub&#xA;&#xA;AttributeLifeCycleExample"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="458"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C6B63804-BDF5-4989-9BC2-ADBC923F0927}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Info- Show element details&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name: RecursiveModelDumpExample&#xA;' Author: Giu Platania&#xA;' Purpose: Recursively outputs the names and IDs of all packages and elements in the current EA repository model.&#xA;' Date: 2025-08-06&#xA;' Version: 1.0&#xA;&#xA;Option Explicit&#xA;&#xA;' Entry point: starts the recursive dump of the model structure.&#xA;Sub RecursiveModelDumpExample()&#xA;    Session.Output( &quot;Show Package Info&quot; )&#xA;    Session.Output( &quot;=======================================&quot; )&#xA;    &#xA;    ' Iterate through all root models (top-level packages) in the project&#xA;    Dim currentModel As EA.Package&#xA;    For Each currentModel In Repository.Models&#xA;        ' Recursively process this package and its children&#xA;        DumpPackage &quot;&quot;, currentModel&#xA;    Next&#xA;&#xA;    Session.Output( &quot;Done!&quot; )&#xA;End Sub&#xA;&#xA;' Recursively dump a package and its children&#xA;' indent       - String used for indentation for visual hierarchy&#xA;' thePackage   - The EA.Package object to process&#xA;Sub DumpPackage ( indent, thePackage )&#xA;    Dim currentPackage As EA.Package&#xA;    Set currentPackage = thePackage&#xA;&#xA;    ' Output package name and ID&#xA;    Session.Output( indent &amp; currentPackage.Name &amp; &quot; (PackageID=&quot; &amp; currentPackage.PackageID &amp; &quot;)&quot; )&#xA;&#xA;    ' Output all elements within this package&#xA;    DumpElements indent &amp; &quot;    &quot;, currentPackage&#xA;&#xA;    ' Recursively process child packages&#xA;    Dim childPackage As EA.Package&#xA;    For Each childPackage In currentPackage.Packages&#xA;        DumpPackage indent &amp; &quot;    &quot;, childPackage&#xA;    Next&#xA;End Sub&#xA;&#xA;' Output all elements of a package&#xA;' indent       - String used for indentation for visual hierarchy&#xA;' thePackage   - The EA.Package object whose elements are output&#xA;Sub DumpElements ( indent, thePackage )&#xA;    Dim currentPackage As EA.Package&#xA;    Set currentPackage = thePackage&#xA;&#xA;    Dim currentElement As EA.Element&#xA;    For Each currentElement In currentPackage.Elements&#xA;        Session.Output( indent &amp; &quot;::&quot; &amp; currentElement.Name &amp; _&#xA;            &quot; (&quot; &amp; currentElement.Type &amp; _&#xA;            &quot;, ID=&quot; &amp; currentElement.ElementID &amp; &quot;)&quot; )&#xA;    Next&#xA;End Sub&#xA;&#xA;' --- Script Execution ---&#xA;RecursiveModelDumpExample&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="459"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Diagram DAF visual Non-used"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="460"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{14748EE5-970C-4999-9177-A4A4B94A99B9}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Capability Hierarchy Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;const HIERARCHY_TAB = &quot;Capability Hierarchy Diagram&quot;&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;'case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram theElement, &quot;ValueStream&quot;&#xA;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;'&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage, &quot;Class&quot;&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CreateNestedHierarchyDiagram( topElement, subElementMetaType)&#xA;&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim packageObject as EA.DiagramObject&#xA;&#x9;dim packageBoundary as EA.Element&#xA;&#x9;dim heatMapDiagram as EA.Diagram&#xA;&#x9;dim packageIndex&#xA;&#x9;dim packageTop&#xA;&#x9;dim packageVertOffset&#xA;&#x9;dim packageHorizOffset&#xA;&#x9;dim packageVertSpace&#xA;&#x9;dim packageHorizSpace&#xA;&#x9;dim packageWidth&#xA;&#x9;dim packageHeight&#xA;&#x9;dim packageElementColumnCount&#xA;&#x9;dim packageColumnIndex&#xA;&#x9;dim maxDiagramHeight&#xA;&#x9;dim relatedElementList&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;dim elementBoundary as EA.Element&#xA;&#x9;dim elementObject as EA.DiagramObject&#xA;&#x9;dim elementIndex&#xA;&#x9;dim elementVertOffset&#xA;&#x9;dim elementHorizOffset&#xA;&#x9;dim elementVertSpace&#xA;&#x9;dim elementWidth&#xA;&#x9;dim elementHeight&#xA;&#x9;dim elementColumnIndex&#xA;&#x9;dim elementHorizSpace&#xA;&#x9;dim elementsPerColumn&#xA;&#x9;dim elementTaggedValue as EA.TaggedValue&#xA;&#x9;dim boundaryTaggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Creating heat map diagram for Element '&quot; &amp; topElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#xA;&#x9;set heatMapDiagram = topElement.Diagrams.AddNew( &quot;Heat Map&quot;, &quot;Package&quot;)&#xA;&#x9;&#xA;&#x9;heatMapDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramStyle heatMapDiagram, &quot;HideEStereo=1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;Repository.OpenDiagram(heatMapDiagram.DiagramID)&#xA;&#x9;&#xA;&#x9;elementVertOffset = 20&#xA;&#x9;elementHorizOffset = 10&#xA;&#x9;elementVertSpace = 10&#xA;&#x9;elementWidth = 75&#xA;&#x9;elementHeight = 45&#xA;&#x9;elementHorizSpace = 10&#xA;&#x9;&#x9;&#xA;&#x9;packageIndex = 0&#xA;&#x9;packageColumnIndex = 0&#xA;&#x9;packageHorizOffset = 10&#xA;&#x9;packageHorizSpace = 10&#xA;&#x9;packageVertOffset = 10&#xA;&#x9;packageVertSpace = 10&#xA;&#x9;packageElementColumnCount = 3&#xA;&#x9;packageTop = -packageVertOffset&#xA;&#x9;maxDiagramHeight = 400&#xA;&#x9;&#xA;&#x9;packageWidth = packageElementColumnCount * ( elementWidth + elementHorizSpace ) + elementHorizOffset&#xA;&#x9;&#xA;&#x9;for each subElement in topElement.Elements&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Meta type is '&quot; &amp; subElement.MetaType, 0&#xA;&#x9;&#x9;if subElement.MetaType = subElementMetaType then&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Adding diagram object for Element '&quot; &amp; subElement.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;set packageBoundary = topElement.Elements.AddNew(subElement.Name, &quot;Boundary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageBoundary.Update&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set packageObject = heatMapDiagram.DiagramObjects.AddNew(subElement.Name,&quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElementList = GetElementRelatedElements(subElement, &quot;Aggregation&quot;, &quot;Class&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;packageHeight = ( Int( ( relatedElementList.Count - 1 ) / packageElementColumnCount ) + 1 ) * ( elementHeight + elementVertSpace ) + elementVertOffset&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageObject.DiagramID = heatMapDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;packageObject.ElementID = packageBoundary.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageObject.left = packageHorizOffset + packageColumnIndex * ( packageWidth + packageHorizSpace)&#xA;&#x9;&#x9;&#x9;packageObject.top = packageTop&#xA;&#x9;&#x9;&#x9;packageObject.right = packageObject.left + packageWidth&#xA;&#x9;&#x9;&#x9;packageObject.bottom = packageObject.top - packageHeight&#xA;&#xA;&#x9;&#x9;&#x9;if packageObject.bottom &lt; -maxDiagramHeight then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;packageColumnIndex = packageColumnIndex + 1&#xA;&#x9;&#x9;&#x9;&#x9;packageTop = -packageVertOffset&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.left = packageHorizOffset + packageColumnIndex * ( packageWidth + packageHorizSpace)&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.top = packageTop&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.right = packageObject.left + packageWidth&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.bottom = packageObject.top - packageHeight&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageObject.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageTop = packageTop - (packageHeight + packageVertSpace)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageIndex = packageIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;elementIndex = 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each anElement in relatedElementList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;- Adding diagram object for Element '&quot; &amp; anElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementsPerColumn = Int(( packageHeight - elementVertOffset ) / ( elementHeight + elementVertSpace))&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementBoundary = subElement.Elements.AddNew(anElement.name,&quot;Boundary&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementBoundary.Status = anElement.Status&#xA;&#x9;&#x9;&#x9;&#x9;'elementBoundary.Stereotype = anElement.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;elementBoundary.Properties.Item(&quot;BorderStyle&quot;).Value = &quot;Solid&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for each elementTaggedValue in anElement.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set boundaryTaggedValue = elementBoundary.TaggedValues.AddNew(elementTaggedValue.Name,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;boundaryTaggedValue.Value = elementTaggedValue.Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;boundaryTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementBoundary.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementObject  = heatMapDiagram.DiagramObjects.AddNew(anElement.Alias,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementColumnIndex = Int(elementIndex / elementsPerColumn)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.DiagramID = heatMapDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.ElementID = elementBoundary.ElementID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.left = packageObject.left + elementHorizOffset + elementColumnIndex * (elementWidth + elementHorizSpace)&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.top = packageObject.top - ((elementIndex - Int( elementIndex / elementsPerColumn ) * elementsPerColumn) * (elementHeight + elementVertSpace)) - elementVertOffset&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.right = elementObject.left + elementWidth&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.bottom = elementObject.top - elementHeight&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementIndex = elementIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;heatMapDiagram.Update&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(heatMapDiagram.DiagramID)&#xA;&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function GetElementRelatedElements( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, element.Name &amp; &quot; element.Connectors Count is &quot; &amp; element.Connectors.Count, 0&#xA;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;connector Type = &quot; &amp; connector.MetaType &amp; &quot; Metatype &quot; &amp; connectorMetaType, 0&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.MetaType = &quot; &amp; connector.MetaType, 0&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, element.Name &amp; &quot; has Connectors of type &quot; &amp; connector.MetaType, 0&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElementID        = &quot; &amp; relatedElementID, 0&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;set GetElementRelatedElements = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(elementGUID)&#xA;&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;set anElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram anElement&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="461"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{146B9E8A-ABCC-41df-92D9-51B51D9F2B59}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Apply Capability Type Heatmap&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of elements on a diagram based the value of the increments tagged value .&#xA; '&#xA; ' 2011-2015: Armstrong Process Group, Inc. info@aprocessgroup.com&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC APG Diagram Script Utilities.Color Constants&#xA;!INC APG Diagram Script Utilities.Change Diagram Object Color&#xA;!INC APG Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim taggedValueName&#xA;&#x9;dim valueArray(6)&#xA;&#x9;dim ruleArray(6)&#xA;&#x9;dim colorArray(6)&#xA;&#x9;&#xA;&#x9;taggedValueName = &quot;Category&quot;&#xA;&#xA;&#x9;valueArray(0) = &quot;Market/Sales&quot;&#xA;&#x9;valueArray(1) = &quot;Engaged Party&quot;&#xA;&#x9;valueArray(2) = &quot;Service&quot;&#xA;&#x9;valueArray(3) = &quot;Product&quot;&#xA;&#x9;valueArray(4) = &quot;Customer&quot;&#xA;&#x9;valueArray(5) = &quot;Resource&quot;&#xA;&#x9;valueArray(6) = &quot;Enterprise&quot;&#xA;&#xA;&#x9;ruleArray(0) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(0) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(1) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(2) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(3) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(3) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(4) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(4) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(5) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(5) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(6) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(6) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightCoral&#xA;&#x9;colorArray(1) = colorBlue&#xA;&#x9;colorArray(2) = colorPaleGreen&#xA;&#x9;colorArray(3) = colorOrange&#xA;&#x9;colorArray(4) = colorGold&#xA;&#x9;colorArray(5) = colorLightSkyBlue&#xA;&#x9;colorArray(6) =colorLightGrey&#xA;&#x9;&#xA;&#x9;ChangeDiagramObjectColor ruleArray, colorArray, colorWhite, taggedValueName&#xA;&#x9;&#xA;&#x9;CreateDiagramLegend &quot;Capability Type&quot;, valueArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="462"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CFF81B6F-E5EF-41b2-930A-D0B39D1696DF}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Apply Capability Maturity Heatmap&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA; ' Script Name: Apply Capability Maturity heatMap&#xA;' Author: SNNA&#xA;' Purpose: &#xA; ' Script to change fill color of elements on a diagram based the taggedValueName  Increments that defines values between 0 and 5. &#x9;&#xA;&#x9;'(0) = &quot;None&quot;&#xA;&#x9;'(1) = &quot;Initial&quot;&#xA;&#x9;'(2) = &quot;UnderDevelopment&quot;&#xA;&#x9;'(3) = &quot;Defined&quot;&#xA;&#x9;'(4) = &quot;Managed&quot;&#xA;&#x9;'(5) = &quot;Measured&quot;&#xA; '&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram Object Color&#xA;!INC Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim taggedValueName&#xA;&#x9;dim valueArray(5)&#xA;&#x9;dim ruleArray(5)&#xA;&#x9;dim colorArray(5)&#xA;&#x9;&#xA;&#x9;taggedValueName = &quot;Increments&quot;&#xA;&#xA;&#x9;valueArray(0) = &quot;None&quot;&#xA;&#x9;valueArray(1) = &quot;Initial&quot;&#xA;&#x9;valueArray(2) = &quot;UnderDevelopment&quot;&#xA;&#x9;valueArray(3) = &quot;Defined&quot;&#xA;&#x9;valueArray(4) = &quot;Managed&quot;&#xA;&#x9;valueArray(5) = &quot;Measured&quot;&#xA;&#xA;&#x9;ruleArray(0) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(0) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(1) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(2) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(3) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(3) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(4) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(4) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(5) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(5) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightGrey&#xA;&#x9;colorArray(1) = colorRed&#xA;&#x9;colorArray(2) = colorOrange&#xA;&#x9;colorArray(3) = colorGold&#xA;&#x9;colorArray(4) = colorPaleGreen&#xA;&#x9;colorArray(5) = colorGreen&#xA;&#x9;&#xA;&#x9;ChangeDiagramObjectColor ruleArray, colorArray, colorWhite, taggedValueName&#xA;&#x9;&#xA;&#x9;CreateDiagramLegend &quot;Maturity Level&quot;, valueArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="463"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{240AC290-F395-4dc3-9DE0-A4E70344FCDF}"/>
			<Column name="ScriptAuthor" value="{9DCD3AF7-1F19-470d-A665-C7270CAC79B4}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Application Hierarchy Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC APG Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;const HIERARCHY_TAB = &quot;SNNA Application Hierarchy Diagram&quot;&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram theElement, &quot;Aggregation&quot;, &quot;Capability&quot;&#xA;&#xA;&#x9;&#x9;'case otPackage&#xA;&#x9;&#x9;'&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;'&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;'&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;'&#x9;&#xA;&#x9;&#x9;'&#x9;CreateNestedHierarchyDiagram thePackage&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CreateNestedHierarchyDiagram( topElement, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim packageObject as EA.DiagramObject&#xA;&#x9;dim packageBoundary as EA.Element&#xA;&#x9;dim heatMapDiagram as EA.Diagram&#xA;&#x9;dim packageIndex&#xA;&#x9;dim packageTop&#xA;&#x9;dim packageVertOffset&#xA;&#x9;dim packageHorizOffset&#xA;&#x9;dim packageVertSpace&#xA;&#x9;dim packageHorizSpace&#xA;&#x9;dim packageWidth&#xA;&#x9;dim packageHeight&#xA;&#x9;dim packageElementColumnCount&#xA;&#x9;dim packageColumnIndex&#xA;&#x9;dim maxDiagramHeight&#xA;&#x9;dim relatedElementList1&#xA;&#x9;dim relatedElementList2&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;dim elementBoundary as EA.Element&#xA;&#x9;dim elementObject as EA.DiagramObject&#xA;&#x9;dim elementIndex&#xA;&#x9;dim elementVertOffset&#xA;&#x9;dim elementHorizOffset&#xA;&#x9;dim elementVertSpace&#xA;&#x9;dim elementWidth&#xA;&#x9;dim elementHeight&#xA;&#x9;dim elementColumnIndex&#xA;&#x9;dim elementHorizSpace&#xA;&#x9;dim elementsPerColumn&#xA;&#x9;dim elementTaggedValue as EA.TaggedValue&#xA;&#x9;dim boundaryTaggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Creating heat map diagram for Element '&quot; &amp; topElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#xA;&#x9;set heatMapDiagram = topElement.Diagrams.AddNew( &quot;Heat Map&quot;, &quot;Package&quot;)&#xA;&#x9;&#xA;&#x9;heatMapDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramStyle heatMapDiagram, &quot;HideEStereo=1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;Repository.OpenDiagram(heatMapDiagram.DiagramID)&#xA;&#x9;&#xA;&#x9;elementVertOffset = 20&#xA;&#x9;elementHorizOffset = 10&#xA;&#x9;elementVertSpace = 10&#xA;&#x9;elementWidth = 100&#xA;&#x9;elementHeight = 45&#xA;&#x9;elementHorizSpace = 10&#xA;&#x9;&#x9;&#xA;&#x9;packageIndex = 0&#xA;&#x9;packageColumnIndex = 0&#xA;&#x9;packageHorizOffset = 10&#xA;&#x9;packageHorizSpace = 10&#xA;&#x9;packageVertOffset = 10&#xA;&#x9;packageVertSpace = 10&#xA;&#x9;packageElementColumnCount = 2&#xA;&#x9;packageTop = -packageVertOffset&#xA;&#x9;maxDiagramHeight = 400&#xA;&#x9;&#xA;&#x9;packageWidth = packageElementColumnCount * ( elementWidth + elementHorizSpace ) + elementHorizOffset&#xA;&#x9;&#xA;&#x9;set relatedElementList1 = GetElementRelatedElements(topElement, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;for each subElement in relatedElementList1.Items&#xA;&#x9;&#xA;&#x9;&#x9;if subElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Adding diagram object for Element '&quot; &amp; subElement.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;set packageBoundary = topElement.Elements.AddNew(subElement.Name, &quot;Boundary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageBoundary.Update&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set packageObject = heatMapDiagram.DiagramObjects.AddNew(subElement.Name,&quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElementList2 = GetElementRelatedElements(subElement, &quot;UsedBy&quot;, &quot;ApplicationComponent&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;packageHeight = ( Int( ( relatedElementList2.Count - 1 ) / packageElementColumnCount ) + 1 ) * ( elementHeight + elementVertSpace ) + elementVertOffset&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageObject.DiagramID = heatMapDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;packageObject.ElementID = packageBoundary.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageObject.left = packageHorizOffset + packageColumnIndex * ( packageWidth + packageHorizSpace)&#xA;&#x9;&#x9;&#x9;packageObject.top = packageTop&#xA;&#x9;&#x9;&#x9;packageObject.right = packageObject.left + packageWidth&#xA;&#x9;&#x9;&#x9;packageObject.bottom = packageObject.top - packageHeight&#xA;&#xA;&#x9;&#x9;&#x9;if packageObject.bottom &lt; -maxDiagramHeight then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;packageColumnIndex = packageColumnIndex + 1&#xA;&#x9;&#x9;&#x9;&#x9;packageTop = -packageVertOffset&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.left = packageHorizOffset + packageColumnIndex * ( packageWidth + packageHorizSpace)&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.top = packageTop&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.right = packageObject.left + packageWidth&#xA;&#x9;&#x9;&#x9;&#x9;packageObject.bottom = packageObject.top - packageHeight&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageObject.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageTop = packageTop - (packageHeight + packageVertSpace)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageIndex = packageIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;elementIndex = 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each anElement in relatedElementList2.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;- Adding diagram object for Element '&quot; &amp; anElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementsPerColumn = Int(( packageHeight - elementVertOffset ) / ( elementHeight + elementVertSpace))&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementBoundary = subElement.Elements.AddNew(anElement.name,&quot;Boundary&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementBoundary.Status = anElement.Status&#xA;&#x9;&#x9;&#x9;&#x9;'elementBoundary.Stereotype = anElement.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;elementBoundary.Properties.Item(&quot;BorderStyle&quot;).Value = &quot;Solid&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for each elementTaggedValue in anElement.TaggedValues&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set boundaryTaggedValue = elementBoundary.TaggedValues.AddNew(elementTaggedValue.Name,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;boundaryTaggedValue.Value = elementTaggedValue.Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;boundaryTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementBoundary.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementObject  = heatMapDiagram.DiagramObjects.AddNew(anElement.Alias,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementColumnIndex = Int(elementIndex / elementsPerColumn)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.DiagramID = heatMapDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.ElementID = elementBoundary.ElementID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.left = packageObject.left + elementHorizOffset + elementColumnIndex * (elementWidth + elementHorizSpace)&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.top = packageObject.top - ((elementIndex - Int( elementIndex / elementsPerColumn ) * elementsPerColumn) * (elementHeight + elementVertSpace)) - elementVertOffset&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.right = elementObject.left + elementWidth&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.bottom = elementObject.top - elementHeight&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementIndex = elementIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;heatMapDiagram.Update&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(heatMapDiagram.DiagramID)&#xA;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function GetElementRelatedElements( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;'Repository.WriteOutput HIERARCHY_TAB, element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count, 0&#xA;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.Type = &quot; &amp; connector.Type, 0&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.MetaType = &quot; &amp; connector.MetaType, 0&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElementID        = &quot; &amp; relatedElementID, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;set GetElementRelatedElements = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;'Test &quot;{BABC61E9-9E7A-4c7c-90C5-46D6614A3E1C}&quot;&#xA;&#xA;sub Test(elementGUID)&#xA;&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;&#xA;&#x9;set anElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram anElement&#xA;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="464"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A6F989C1-EBB8-4623-85F1-D511CD75860A}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Apply Capability Health Score Heatmap&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of elements on a diagram based the value of the Status property.&#xA; '&#xA; ' 2011-2015: Armstrong Process Group, Inc. info@aprocessgroup.com&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram Object Color&#xA;!INC Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim taggedValueName&#xA;&#x9;dim valueArray(2)&#xA;&#x9;dim ruleArray(2)&#xA;&#x9;dim colorArray(2)&#xA;&#x9;&#xA;&#x9;taggedValueName = &quot;Increments&quot;&#xA;&#xA;&#x9;valueArray(0) = &quot;High (7-10)&quot;&#xA;&#x9;valueArray(1) = &quot;Medium (4-6)&quot;&#xA;&#x9;valueArray(2) = &quot;Low (1-3)&quot;&#xA;&#xA;&#x9;ruleArray(0) = &quot;CDbl(taggedValue.Value) &gt;= 7.0&quot;&#xA;&#x9;ruleArray(1) = &quot;CDbl(taggedValue.Value) &lt; 7.0 And CDbl(taggedValue.Value) &gt;= 4.0&quot;&#xA;&#x9;ruleArray(2) = &quot;CDbl(taggedValue.Value) &lt; 4.0&quot;&#xA;&#xA;&#x9;colorArray(0) = colorGreen&#xA;&#x9;colorArray(1) = colorGold&#xA;&#x9;colorArray(2) = colorRed&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;ChangeDiagramObjectColor ruleArray, colorArray, colorWhite, taggedValueName&#xA;&#x9;&#xA;&#x9;CreateDiagramLegend &quot;Ave Health Score&quot;, valueArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="465"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Browser- non-used Capability"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="466"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9D73B003-5C4E-47dd-B2B2-6F2BDA6F456A}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Aggregate Capability Application Data&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC APG Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;const HIERARCHY_TAB = &quot;APG Aggregate Capability Data&quot;&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram theElement, &quot;ValueStream&quot;&#xA;&#xA;&#x9;&#x9;'case otPackage&#xA;&#x9;&#x9;'&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;'&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;'&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;'&#x9;&#xA;&#x9;&#x9;'&#x9;CreateNestedHierarchyDiagram thePackage&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CreateNestedHierarchyDiagram( topElement, subElementMetaType)&#xA;&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim capAveHealthScore&#xA;&#x9;dim capAveRiskScore&#xA;&#x9;dim&#x9;capTotalAnnualCost &#xA;&#x9;dim appHealthScore&#xA;&#x9;dim appRiskScore&#xA;&#x9;dim appTotalAnnualCost&#xA;&#x9;dim appCount&#xA;&#x9;dim relatedElementList1&#xA;&#x9;dim relatedElementList2&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;dim anApplComp as EA.Element&#xA;&#x9;dim elementTaggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Aggregating capability application data for Element '&quot; &amp; topElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#xA;&#x9;for each subElement in topElement.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if subElement.MetaType = subElementMetaType then&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;- ValueStream '&quot; &amp; subElement.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;set relatedElementList1 = GetElementRelatedElements(subElement, &quot;Aggregation&quot;, &quot;Capability&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;for each anElement in relatedElementList1.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;  - Capability '&quot; &amp; anElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;capAveHealthScore = 0&#xA;&#x9;&#x9;&#x9;&#x9;capAveRiskScore = 0&#xA;&#x9;&#x9;&#x9;&#x9;capTotalAnnualCost = 0&#xA;&#x9;&#x9;&#x9;&#x9;appCount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElementList2 = GetElementRelatedElements(anElement, &quot;UsedBy&quot;, &quot;ApplicationComponent&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;for each anApplComp in relatedElementList2.Items&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;    - Application '&quot; &amp; anApplComp.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appHealthScore = CDbl(anApplComp.TaggedValues.GetByName(&quot;Health Score&quot;).Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appRiskScore = CDbl(anApplComp.TaggedValues.GetByName(&quot;Risk Score&quot;).Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appTotalAnnualCost = CDbl(anApplComp.TaggedValues.GetByName(&quot;Total Annual Cost&quot;).Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;capAveHealthScore = capAveHealthScore + appHealthScore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;capAveRiskScore = capAveRiskScore + appRiskScore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;capTotalAnnualCost = capTotalAnnualCost + appTotalAnnualCost&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appCount = appCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;capAveHealthScore = capAveHealthScore / appCount&#xA;&#x9;&#x9;&#x9;&#x9;capAveRiskScore = capAveRiskScore / appCount&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Ave Health Score&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = capAveHealthScore&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Ave Risk Score&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = capAveRiskScore&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Total Annual Cost&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = capTotalAnnualCost&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function GetElementRelatedElements( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;'Repository.WriteOutput HIERARCHY_TAB, element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count, 0&#xA;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.Type = &quot; &amp; connector.Type, 0&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.MetaType = &quot; &amp; connector.MetaType, 0&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElementID        = &quot; &amp; relatedElementID, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;set GetElementRelatedElements = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;'Test &quot;{BABC61E9-9E7A-4c7c-90C5-46D6614A3E1C}&quot;&#xA;&#xA;sub Test(elementGUID)&#xA;&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;&#xA;&#x9;set anElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram anElement&#xA;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="467"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5191E489-3F34-43d1-9014-5C5259100ED3}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Reset Capability Data&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;const HIERARCHY_TAB = &quot;Aggregate Capability Data&quot;&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram theElement, &quot;ValueStream&quot;&#xA;&#xA;&#x9;&#x9;'case otPackage&#xA;&#x9;&#x9;'&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;'&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;'&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;'&#x9;&#xA;&#x9;&#x9;'&#x9;CreateNestedHierarchyDiagram thePackage&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CreateNestedHierarchyDiagram( topElement, subElementMetaType)&#xA;&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim capAveHealthScore&#xA;&#x9;dim capAveRiskScore&#xA;&#x9;dim&#x9;capTotalAnnualCost &#xA;&#x9;dim appHealthScore&#xA;&#x9;dim appRiskScore&#xA;&#x9;dim appTotalAnnualCost&#xA;&#x9;dim appCount&#xA;&#x9;dim relatedElementList1&#xA;&#x9;dim relatedElementList2&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;dim anApplComp as EA.Element&#xA;&#x9;dim elementTaggedValue as EA.TaggedValue&#xA;&#x9;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Resetting capability application data for Element '&quot; &amp; topElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#xA;&#x9;for each subElement in topElement.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if subElement.MetaType = subElementMetaType then&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;- ValueStream '&quot; &amp; subElement.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;set relatedElementList1 = GetElementRelatedElements(subElement, &quot;Aggregation&quot;, &quot;Capability&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;for each anElement in relatedElementList1.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;  - Capability '&quot; &amp; anElement.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;capAveHealthScore = 0&#xA;&#x9;&#x9;&#x9;&#x9;capAveRiskScore = 0&#xA;&#x9;&#x9;&#x9;&#x9;capTotalAnnualCost = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Ave Health Score&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = capAveHealthScore&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Ave Risk Score&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = capAveRiskScore&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Total Annual Cost&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = capTotalAnnualCost&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Category&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Type&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Investment Disposition&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Current Maturity Level&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Future Maturity Level&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Current Performance Level&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set elementTaggedValue = anElement.TaggedValues.GetByName(&quot;Future Performance Level&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Value = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;elementTaggedValue.Update&#xA;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function GetElementRelatedElements( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;'Repository.WriteOutput HIERARCHY_TAB, element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count, 0&#xA;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.Type = &quot; &amp; connector.Type, 0&#xA;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;connector.MetaType = &quot; &amp; connector.MetaType, 0&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElementID        = &quot; &amp; relatedElementID, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name, 0&#xA;&#x9;&#x9;&#x9;'Repository.WriteOutput HIERARCHY_TAB, &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;set GetElementRelatedElements = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;'Test &quot;{BABC61E9-9E7A-4c7c-90C5-46D6614A3E1C}&quot;&#xA;&#xA;sub Test(elementGUID)&#xA;&#xA;&#x9;dim anElement as EA.Element&#xA;&#x9;&#xA;&#x9;set anElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram anElement&#xA;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="468"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E68A85D8-7B0A-4cd8-A240-4C98BF9CA589}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;apply owner heat map&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' &#xA; '&#xA; ' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA; ' Script Name: Apply owner Heat Map&#xA;' Author: SNNA&#xA;' Purpose: Script to change fill color of elements on a diagram based the value of the Status property.&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram Object Color&#xA;!INC Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim taggedValueName&#xA;&#x9;dim valueArray(5)&#xA;&#x9;dim ruleArray(5)&#xA;&#x9;dim colorArray(5)&#xA;&#x9;&#xA;&#x9;taggedValueName = &quot;Owner&quot;&#xA;&#xA;&#x9;valueArray(0) = &quot;Ariel&quot;&#xA;&#x9;valueArray(1) = &quot;Alan&quot;&#xA;&#x9;valueArray(2) = &quot;Bernard&quot;&#xA;&#x9;valueArray(3) = &quot;Chuck&quot;&#xA;&#x9;valueArray(4) = &quot;Craig&quot;&#xA;&#x9;valueArray(5) = &quot;Eric&quot;&#xA;&#x9;&#xA;&#x9;ruleArray(0) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(0) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(1) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(2) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(3) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(3) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(4) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(4) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(5) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(5) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightGrey&#xA;&#x9;colorArray(1) = colorRed&#xA;&#x9;colorArray(2) = colorOrange&#xA;&#x9;colorArray(3) = colorGold&#xA;&#x9;colorArray(4) = colorPaleGreen&#xA;&#x9;colorArray(5) = colorGreen&#xA;&#x9;&#xA;&#x9;ChangeDiagramObjectColor ruleArray, colorArray, colorWhite, taggedValueName&#xA;&#x9;&#xA;&#x9;CreateDiagramLegend &quot;Owner&quot;, valueArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="469"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D7C71C52-8005-4f09-BA67-52A77182969E}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; set Diagram Object Complexity&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of elements on a diagram based the value of the Status property.&#xA; '&#xA;&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram object Color No Tagged Values&#xA;!INC Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim ruleArray(2)&#xA;&#x9;dim colorArray(2)&#xA;&#x9;dim valueArray(2)&#xA;&#x9;dim nameArray(2)&#xA;&#x9;&#xA;&#x9;nameArray(0) = &quot;Easy&quot;&#xA;&#x9;nameArray(1) = &quot;Medium&quot;&#xA;&#x9;nameArray(2) = &quot;Difficult&quot;&#xA;&#x9;&#xA;&#x9;valueArray(0) = &quot;1&quot;&#xA;&#x9;valueArray(1) = &quot;2&quot;&#xA;&#x9;valueArray(2) = &quot;3&quot;&#xA;&#x9;&#xA;&#x9;ruleArray(0) = &quot;element.Complexity = &quot;&quot;&quot; &amp; valueArray(0) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;element.Complexity = &quot;&quot;&quot; &amp; valueArray(1) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;element.Complexity = &quot;&quot;&quot; &amp; valueArray(2) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;&#xA;&#xA;&#x9;colorArray(0) = colorPaleGreen&#xA;&#x9;colorArray(1) = colorGold&#xA;&#x9;colorArray(2) = colorLightCoral&#xA;&#x9;&#xA;&#x9;ChangeDiagramobjectColorNoTaggedValues ruleArray, colorArray, colorBlack&#xA;&#x9;CreateDiagramLegend &quot;Difficulty&quot;, nameArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="470"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D730DB4D-72C5-4f3d-B8E3-384029AB44C2}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Change Diagram object Color No Tagged Values&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value=" ' Script to change fill color of objects on a diagram based on an array of rules (conditions) &#xA; '&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;sub ChangeDiagramobjectColorNoTaggedValues(ruleArray, colorArray, textColor)&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim backgroundColor&#xA;&#x9;dim elementID&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim index&#xA;&#x9;dim rule&#xA;&#x9;dim updateStyle&#xA;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;'set currentDiagram = Repository.GetDiagramByID(6)&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#xA;&#x9;&#x9;Repository.SaveDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID( elementID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for index = 0 to UBound(ruleArray)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;rule = ruleArray(index)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Prompt &quot;outside &quot;  &amp; element.Name &amp; &quot;complexity is&quot; &amp; element.Complexity &amp; &quot; value is &quot; &amp; rule, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;'if element.Complexity = value then&#xA;&#x9;&#x9;&#x9;&#x9;if eval( rule) then&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Prompt &quot;inside array &quot;  &amp; element.Name &amp; &quot;color&quot; &amp; backgroundColor, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Prompt &quot;inside array &quot;  &amp; rule, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;backgroundColor = colorArray(index)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;updateStyle = &quot;BCol=&quot; &amp; backgroundColor &amp; &quot;;BFol=&quot; &amp; textColor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SetDiagramObjectStyle diagramObject, updateStyle &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;Repository.ReloadDiagram currentDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="471"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{36E01D32-EB2F-4974-96C7-04277D00618D}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;lis connectors&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="/* &#xA; * Script Name: ListDiagramConnectors&#xA; *&#xA; * Author: Michael Fraser (Sparx Systems)&#xA; *&#xA; * Purpose: Lists relationships between objects that appear on the diagram that is&#xA; * currently selected in the project browser&#xA; *&#xA; * Date: 2009-12-17&#xA; */&#xA;&#xA;// ==========================================&#xA;//  GLOBAL DEFINITIONS&#xA;// ==========================================&#xA;var DIAGRAM_OT        = 8;&#xA;&#xA;// The columns that will appear in the Model Search window&#xA;var SEARCH_SPECIFICATION = &quot;&lt;ReportViewData&gt;&quot; +&#xA;                            &quot;&lt;Fields&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;CLASSGUID\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;CLASSTYPE\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Client\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Supplier\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Direction\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Name\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Notes\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Client Aggregation\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Client Cardinality\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Client Role\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Supplier Aggregation\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Supplier Cardinality\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;Field name=\&quot;Supplier Role\&quot; /&gt;&quot; +&#xA;                            &quot;&lt;/Fields&gt;&quot; +&#xA;                            &quot;&lt;Rows/&gt;&quot; +&#xA;                            &quot;&lt;/ReportViewData&gt;&quot;;&#xA;&#xA;/*&#xA; * Main function&#xA; */&#xA;function ListDiagramConnectors()&#xA;{&#xA;    Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;    &#xA;    Session.Output( &quot;JScript: List Diagram Relationships&quot; );&#xA;    Session.Output( &quot;=========================================&quot; );&#xA;    &#xA;    // Get the type of element selected in the Project Browser&#xA;    var treeSelectedType = Repository.GetTreeSelectedItemType();&#xA;    &#xA;    // Handling Code&#xA;    switch ( treeSelectedType )&#xA;    {&#xA;        case DIAGRAM_OT:&#xA;        {&#xA;            // Code for when a diagram is selected&#xA;            var theDiagram as EA.Diagram;&#xA;            theDiagram = Repository.GetTreeSelectedObject();&#xA;            &#xA;            // Create a DOM object to represent the search tree&#xA;            var xmlDOM = new ActiveXObject( &quot;MSXML2.DOMDocument.4.0&quot; );&#xA;            xmlDOM.validateOnParse = false;&#xA;            xmlDOM.async = false;&#xA;            &#xA;            Session.Output( &quot;Working on diagram '&quot; + theDiagram.Name + &quot;' (Type=&quot; + &#xA;            theDiagram.Type + &quot;, ID=&quot; + theDiagram.DiagramID + &quot;)&quot; );&#xA;            &#xA;            // Load the search template&#xA;            if( xmlDOM.loadXML(SEARCH_SPECIFICATION) )&#xA;            {&#xA;                // Resolve the results node in the xml template&#xA;                var node = xmlDOM.selectSingleNode( &quot;//ReportViewData//Rows&quot; );&#xA;                &#xA;                // A connector has a one to many relationship with diagram (eg one connector&#xA;                // may appear on many diagrams). The DiagramLink object represents an instance&#xA;                // of a connector on a single diagram, and contains properties such as its&#xA;                // geometry, visibility etc.&#xA;                //&#xA;                // Get all diagramLinks for this diagram&#xA;                var diagramLinks as EA.Collection;&#xA;                diagramLinks = theDiagram.DiagramLinks;&#xA;                &#xA;                for ( var i = 0 ; i &lt; diagramLinks.Count ; i++ )&#xA;                {&#xA;                    // Get the current diagram link&#xA;                    var currentLink as EA.DiagramLink;&#xA;                    currentLink = diagramLinks.GetAt( i );&#xA;                                        &#xA;                    // Load the corresponding connector object for the link&#xA;                    var correspondingConnector as EA.Connector;&#xA;                    correspondingConnector = Repository.GetConnectorByID( currentLink.ConnectorID );&#xA;                    &#xA;                    // Add the connector's details to the search data&#xA;                    AddRow( xmlDOM, node, correspondingConnector );    &#xA;                }&#xA;                &#xA;                // Fill the Model Search window with the results&#xA;                Repository.RunModelSearch( &quot;&quot;, &quot;&quot;, &quot;&quot;, xmlDOM.xml );&#xA;                &#xA;            }&#xA;            else&#xA;            {&#xA;                Session.Prompt( &quot;Failed to load search xml&quot;, 0 );&#xA;            }&#xA;            &#xA;            break;&#xA;        }&#xA;        default:&#xA;        {&#xA;            // Error message&#xA;            Session.Prompt( &quot;This script does not support items of this type.&quot;, 0 );&#xA;        }&#xA;    }&#xA;    &#xA;    Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;/*&#xA; * Adds an entry for the method object 'theRelationship' to the xml row node 'rowsNode'&#xA; */&#xA;function AddRow( xmlDOM, rowsNode, theRelationship )&#xA;{&#xA;    // Cast theMethod for intellisense&#xA;    var relationship as EA.Connector;&#xA;    relationship = theRelationship;&#xA;&#xA;    // Create a Row node&#xA;    var row = xmlDOM.createElement( &quot;Row&quot; );&#xA;    &#xA;    // Get client details for the connector&#xA;    var client as EA.Element;&#xA;    var clientEnd as EA.ConnectorEnd;&#xA;    client = Repository.GetElementByID( relationship.ClientID );&#xA;    clientEnd = relationship.ClientEnd;&#xA;    &#xA;    // Get supplier details for the connector&#xA;    var supplier as EA.Element;&#xA;    var supplierEnd as EA.ConnectorEnd;&#xA;    supplier = Repository.GetElementByID( relationship.SupplierID );&#xA;    supplierEnd = relationship.SupplierEnd;&#xA;        &#xA;    // Add the Model Search row data to our DOM&#xA;    AddField( xmlDOM, row, &quot;CLASSGUID&quot;, relationship.ConnectorGUID );&#xA;    AddField( xmlDOM, row, &quot;CLASSTYPE&quot;, &quot;connector&quot; );&#xA;    AddField( xmlDOM, row, &quot;Client&quot;, client.Name );&#xA;    AddField( xmlDOM, row, &quot;Client&quot;, supplier.Name );&#xA;    AddField( xmlDOM, row, &quot;Direction&quot;, relationship.Direction );&#xA;    AddField( xmlDOM, row, &quot;Name&quot;, relationship.Name );&#xA;    AddField( xmlDOM, row, &quot;Notes&quot;, relationship.Notes );&#xA;    AddField( xmlDOM, row, &quot;Client Aggregation&quot;, clientEnd.Aggregation );&#xA;    AddField( xmlDOM, row, &quot;Client Cardinality&quot;, clientEnd.Cardinality );&#xA;    AddField( xmlDOM, row, &quot;Client Role&quot;, clientEnd.Role );&#xA;    AddField( xmlDOM, row, &quot;Supplier Aggregation&quot;, supplierEnd.Aggregation );&#xA;    AddField( xmlDOM, row, &quot;Supplier Cardinality&quot;, supplierEnd.Cardinality );&#xA;    AddField( xmlDOM, row, &quot;Supplier Role&quot;, supplierEnd.Role );&#xA;    &#xA;    &#xA;    // Append the newly created row node to the rows node&#xA;    rowsNode.appendChild( row );&#xA;}&#xA;&#xA;/*&#xA; * Adds an Element to our DOM called Field which makes up the Row data for the Model Search window.&#xA; * &lt;Field name &quot;&quot; value &quot;&quot;/&gt;&#xA; */&#xA;function AddField( xmlDOM, row, name, value )&#xA;{&#xA;    var fieldNode = xmlDOM.createElement( &quot;Field&quot; );&#xA;    &#xA;    // Create first attribute for the name&#xA;    var nameAttribute = xmlDOM.createAttribute( &quot;name&quot; );&#xA;    nameAttribute.value = name;&#xA;    fieldNode.attributes.setNamedItem( nameAttribute );&#xA;    &#xA;    // Create second attribute for the value&#xA;    var valueAttribute = xmlDOM.createAttribute( &quot;value&quot; );&#xA;    valueAttribute.value = value;&#xA;    fieldNode.attributes.setNamedItem( valueAttribute );&#xA;    &#xA;    // Append the fieldNode&#xA;    row.appendChild( fieldNode );&#xA;}&#xA;&#xA;ListDiagramConnectors();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="472"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F1BC726A-59A9-418a-8D25-D60CE8A94B55}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Apply Capability-tobe Heatmap&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA; ' Script to change fill color of elements on a diagram based the value of the Status property.&#xA; '&#xA; ' 2011-2015: Armstrong Process Group, Inc. info@aprocessgroup.com&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Color Constants&#xA;!INC Diagram Script Utilities.Change Diagram Object Color&#xA;!INC Diagram Script Utilities.Create Diagram Legend&#xA;&#xA;sub OnDiagramScript&#xA;&#xA;&#x9;dim taggedValueName&#xA;&#x9;dim valueArray(5)&#xA;&#x9;dim ruleArray(5)&#xA;&#x9;dim colorArray(5)&#xA;&#x9;&#xA;&#x9;taggedValueName = &quot;IncrementsToBe&quot;&#xA;&#xA;&#x9;valueArray(0) = &quot;None&quot;&#xA;&#x9;valueArray(1) = &quot;Does not Meet&quot;&#xA;&#x9;valueArray(2) = &quot;Partially Meets&quot;&#xA;&#x9;valueArray(3) = &quot;Meets Needs&quot;&#xA;&#x9;valueArray(4) = &quot;Above Needs&quot;&#xA;&#x9;valueArray(5) = &quot;Exceeds Needs&quot;&#xA;&#xA;&#x9;ruleArray(0) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(0) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(1) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(1) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(2) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(2) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(3) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(3) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(4) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(4) &amp; &quot;&quot;&quot;&quot;&#xA;&#x9;ruleArray(5) = &quot;taggedValue.Value = &quot;&quot;&quot; &amp; valueArray(5) &amp; &quot;&quot;&quot;&quot;&#xA;&#xA;&#x9;colorArray(0) = colorLightGrey&#xA;&#x9;colorArray(1) = colorRed&#xA;&#x9;colorArray(2) = colorOrange&#xA;&#x9;colorArray(3) = colorGold&#xA;&#x9;colorArray(4) = colorPaleGreen&#xA;&#x9;colorArray(5) = colorGreen&#xA;&#x9;&#xA;&#x9;ChangeDiagramObjectColor ruleArray, colorArray, colorLightGrey, taggedValueName&#xA;&#x9;&#xA;&#x9;CreateDiagramLegend &quot;Maturity Level&quot;, valueArray, colorArray&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="473"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8B59D451-ADAF-4799-8313-6DD2A57A3602}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Nested Hierarchy Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Set Diagram Styles&#xA;!INC Diagram Script Utilities.Color Constants&#xA;&#xA;const HIERARCHY_TAB = &quot;SSNA Nested Hierarchy Diagram&quot;&#xA;&#xA;Const TOP_DOWN_FLOW_DIRECTION = 1 &#x9;' as Integer&#xA;Const LEFT_RIGHT_FLOW_DIRECTION = 2&#x9;' as Integer&#xA;&#xA;class HierarchyDiagram&#xA;&#xA;&#x9;public elementMetaType&#x9;' as String&#xA;&#x9;public objectHeight&#x9;&#x9;' as Integer&#xA;&#x9;public objectWidth&#x9;&#x9;' as Integer&#xA;&#x9;public horizOffset&#x9;&#x9;' as Integer&#xA;&#x9;public horizSpace&#x9;&#x9;' as Integer&#xA;&#x9;public vertOffset&#x9;&#x9;' as Integer&#xA;&#x9;public vertSpace&#x9;&#x9;' as Integer&#xA;&#x9;public seqIndex&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public levelList&#x9;&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;public childObjectList&#x9;' as Scripting.Dictionary(Of HierarchyObject)&#xA;&#x9;public package&#x9;&#x9;&#x9;' as EA.Package&#xA;&#x9;public diagram &#x9;&#x9;&#x9;' as EA.Diagram&#xA;&#x9;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;seqIndex = 9999&#xA;&#x9;&#x9;set levelList = nothing&#xA;&#x9;&#x9;set childObjectList = nothing&#xA;&#x9;&#x9;set package = nothing&#xA;&#x9;&#x9;set diagram = nothing&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub createDiagram( diagramName, diagramType)&#xA;&#x9;&#xA;&#x9;&#x9;set diagram = package.Diagrams.AddNew( diagramName, diagramType)&#xA;&#x9;&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;&#x9;setDiagramStyle diagram, &quot;HideEStereo=1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub loadRootObjectList&#xA;&#x9;&#xA;&#x9;&#x9;dim rootObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childObjectList = createPackageHierarchyObjectList( Me, package, elementMetatype)&#xA;&#xA;&#x9;&#x9;for each rootObject in childObjectList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set rootObject.diagram = Me&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;--&gt; Loading Root Element '&quot; &amp; rootObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if levelList.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;rootObject.LoadChildObjectList&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub drawRootObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim rootObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;drawObjectList Me, childObjectList, 1&#xA;&#xA;&#x9;&#x9;for each rootObject in childObjectList.Items&#xA;&#x9;&#x9;&#x9;rootObject.drawChildObjects&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub hideConnectors&#xA;&#x9;&#xA;&#x9;&#x9;dim link&#x9; &#x9;' as EA.DiagramLink&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each link in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;link.IsHidden = true&#xA;&#x9;&#x9;&#x9;link.Update&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub addObject( anObject)&#xA;&#x9;&#xA;&#x9;&#x9;dim nextSeqIndex&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set anObject.diagram = Me&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set anObject.diagramObject = Me.diagram.DiagramObjects.AddNew(&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;anObject.diagramObject.ElementID = anObject.element.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;nextSeqIndex = Me.SeqIndex - 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;anObject.diagramObject.sequence = nextSeqIndex&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Me.seqIndex = nextSeqIndex&#xA;&#xA;&#x9;end sub&#xA;&#x9;&#xA;end Class&#xA;&#xA;class HierarchyLevel&#xA;&#xA;&#x9;public levelNumber&#x9;&#x9;' as Integer&#xA;&#x9;public numObjects&#x9;&#x9;' as Integer = numRows when flowDirection = TOP_DOWN; = numColumns when flowDirection = LEFT_RIGHT&#xA;&#x9;public flowDirection&#x9;' as Integer&#xA;&#x9;public objectStyle&#x9;&#x9;' as ObjectStyle&#xA;&#x9;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;set objectStyle = new HierarchyObjectStyle&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#xA;End Class&#xA;&#xA;class HierarchyObjectStyle&#xA;&#xA;&#x9;public fillColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public lineWidth&#x9;&#x9;' as Integer&#xA;&#x9;public lineColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public fontName&#x9;&#x9;&#x9;' as String&#xA;&#x9;public fontSize&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public fontColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public fontBold&#x9;&#x9;&#x9;' as Boolean&#xA;&#x9;public fontItalic&#x9;&#x9;' as Boolean&#xA;&#x9;public fontUnderline&#x9;' as Boolean&#xA;&#x9;&#xA;End Class&#xA;&#xA;class HierarchyObject&#xA;&#xA;&#x9;public levelNumber&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public row&#x9;&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public column&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public parentObject&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;public childObjectList&#x9;&#x9;' as Scripting.Dictionary(Of HierarchyObject)&#xA;&#x9;public diagram&#x9;&#x9;&#x9;&#x9;' as HierarchyDiagram&#xA;&#x9;public element&#x9;&#x9;&#x9;&#x9;' as EA.Element&#xA;&#x9;public diagramObject &#x9;&#x9;' as EA.DiagramObject&#xA;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;set parentObject = nothing&#xA;&#x9;&#x9;set childObjectList = nothing&#xA;&#x9;&#x9;set diagram = nothing&#xA;&#x9;&#x9;set diagramObject = nothing&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#xA;&#x9;public sub loadChildObjectList&#xA;&#x9;&#xA;&#x9;&#x9;dim eaElement &#x9;&#x9;' as EA.Element&#xA;&#x9;&#x9;dim childObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childObjectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each eaElement in element.Elements&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if eaElement.MetaType = diagram.elementMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set childObject = New HierarchyObject&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.element = eaElement&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.parentObject = Me&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.diagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;childObject.levelNumber = levelNumber + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;childObjectList.Add childObject.element.ElementGUID, childObject&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(childObject.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Loading Child Element '&quot; &amp; childObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if childObject.levelNumber = diagram.levelList.Count then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.childObjectList = Nothing&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.loadChildObjectList&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub drawChildObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim childObject &#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if not childObjectList is Nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;drawObjectList diagram, childObjectList, levelNumber + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each childObject in childObjectList.Items&#xA;&#x9;&#x9;&#x9;&#x9;childObject.drawChildObjects&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub resize( childObject)&#xA;&#x9;&#xA;&#x9;&#x9;dim objectCurrRight&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim objectCurrBottom&#x9;' as Integer&#xA;&#x9;&#x9;dim objectNewRight&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim objectNewBottom&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;objectCurrRight = diagramObject.right&#xA;&#x9;&#x9;objectCurrBottom = diagramObject.bottom&#xA;&#x9;&#xA;&#x9;&#x9;objectNewRight = childObject.diagramObject.right + diagram.horizSpace&#xA;&#x9;&#x9;objectNewBottom = childObject.diagramObject.bottom - diagram.vertSpace&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if objectCurrRight &lt;&gt; objectNewRight or objectCurrBottom &lt;&gt; objectNewBottom then&#xA;&#xA;&#x9;&#x9;&#x9;if objectNewRight &gt; objectCurrRight then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.right = objectNewRight&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectNewBottom &lt; objectCurrBottom then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = objectNewBottom&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** RESIZED object '&quot; &amp; element.name &amp; &quot;' to (&quot; &amp; diagramObject.left &amp; &quot;,&quot; &amp; diagramObject.top &amp; &quot;) x ( &quot; &amp; diagramObject.right &amp; &quot;,&quot; &amp; diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;moveNeighborObjects&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if Not parentObject is nothing then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub moveNeighborObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim rightObject&#x9;&#x9;&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim rightObjectWidth&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectCurrLeft&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectNewLeft&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectMoved&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObject&#x9;&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim bottomObjectHeight&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectCurrTop&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectNewTop&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectMoved&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#xA;&#x9;&#x9;set rightObject = getRightObject&#xA;&#x9;&#x9;set bottomObject = getBottomObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;rightObjectMoved = false&#xA;&#x9;&#x9;bottomObjectMoved = false&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if rightObject is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectWidth = rightObject.width&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectCurrLeft = rightObject.diagramObject.left &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectNewLeft = diagramObject.right + diagram.horizSpace&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if rightObjectNewLeft &lt;&gt; rightObjectCurrLeft then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.left = rightObjectNewLeft&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.right = rightObjectNewLeft + rightObjectWidth&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** Moved RIGHT object '&quot; &amp; rightObject.element.name &amp; &quot;' to (&quot; &amp; rightObject.diagramObject.left &amp; &quot;,&quot; &amp; rightObject.diagramObject.top &amp; &quot;) x ( &quot; &amp; rightObject.diagramObject.right &amp; &quot;,&quot; &amp; rightObject.diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;rightObjectMoved = true&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if bottomObject is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectHeight = bottomObject.Height&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectCurrTop = bottomObject.diagramObject.top&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectNewTop = diagramObject.bottom - diagram.vertSpace&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if bottomObjectNewTop &lt;&gt; bottomObjectCurrTop then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.top = bottomObjectNewTop&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.bottom = bottomObjectNewTop - bottomObjectHeight &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** Moved BOTTOM object '&quot; &amp; bottomObject.element.name &amp; &quot;' to (&quot; &amp; bottomObject.diagramObject.left &amp; &quot;,&quot; &amp; bottomObject.diagramObject.top &amp; &quot;) x ( &quot; &amp; bottomObject.diagramObject.right &amp; &quot;,&quot; &amp; bottomObject.diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObjectMoved = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;if rightObjectMoved then&#xA;&#x9;&#x9;&#x9;rightObject.moveNeighborObjects&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;if bottomObjectMoved then&#xA;&#x9;&#x9;&#x9;bottomObject.moveNeighborObjects&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public property get height&#xA;&#x9;&#x9;height = diagramObject.top - diagramObject.bottom&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property get width&#xA;&#x9;&#x9;width = diagramObject.right - diagramObject.left&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public function getRightObject&#xA;&#x9;&#x9;set getRightObject = getGridObject(column + 1, row)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getBottomObject&#xA;&#x9;&#x9;set getBottomObject = getGridObject(column, row + 1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getGridObject( getColumn, getRow)&#xA;&#x9;&#xA;&#x9;&#x9;dim peerObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim foundObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set foundObject = nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each peerObject in parentObject.childObjectList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if peerObject.column = getColumn and peerObject.row = getRow then&#xA;&#x9;&#x9;&#x9;&#x9;set foundObject = peerObject&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set getGridObject = foundObject&#xA;&#x9;&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public property let fillColor( value)&#xA;&#x9;&#x9;if value &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;BCol=&quot; &amp; value&#xA;&#x9;&#x9;end if&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let lineWidth( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;LWth=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let lineColor( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;LCol=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontName( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;font=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontSize( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;fontsz=&quot; &amp; value * 10&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontColor( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;BFol=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontBold( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;bold=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontItalic( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;italic=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontUnderline( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;ul=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;End Class&#xA;&#xA;public sub drawObjectList( diagram, objectList, levelNumber)&#xA;&#xA;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim objectIndex&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim coord1&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim coord2&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim object&#x9;&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;dim parentObjectLeft&#x9;' as Integer&#xA;&#x9;dim parentObjectTop&#x9;&#x9;' as Integer&#xA;&#x9;&#xA;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;&#xA;&#x9;objectIndex = 1&#xA;&#x9;&#xA;&#x9;for each object in objectList.Items&#xA;&#xA;&#x9;&#x9;diagram.addObject object&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;coord1 = Int( ( objectIndex - 1 ) / level.numObjects ) + 1&#xA;&#x9;&#x9;coord2 = objectIndex - ( coord1 - 1 ) * level.numObjects&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.flowDirection = LEFT_RIGHT_FLOW_DIRECTION then&#xA;&#x9;&#x9;&#x9;object.row = coord1&#xA;&#x9;&#x9;&#x9;object.column = coord2&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;object.row = coord2&#xA;&#x9;&#x9;&#x9;object.column = coord1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(object.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Adding diagram object for Element '&quot; &amp; object.element.Name &amp; &quot;' #&quot; &amp; objectIndex &amp; &quot; ( &quot; &amp; object.column &amp; &quot;, &quot; &amp; object.row &amp; &quot; )&quot;, 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if object.parentObject is nothing then&#xA;&#x9;&#x9;&#x9;parentObjectLeft = 0&#xA;&#x9;&#x9;&#x9;parentObjectTop = 0&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(object.ParentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectLeft = object.parentObject.diagramObject.left&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectTop = object.parentObject.diagramObject.top&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectLeft = 0&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectTop = 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.diagramObject.left = parentObjectLeft + ( object.column - 1 ) * ( diagram.objectWidth + diagram.horizSpace ) + diagram.horizOffset&#xA;&#x9;&#x9;object.diagramObject.top = parentObjectTop - ( ( object.row  - 1 ) * ( diagram.objectHeight + diagram.vertSpace ) + diagram.vertOffset )&#xA;&#x9;&#x9;object.diagramObject.right = object.diagramObject.left + diagram.objectWidth&#xA;&#x9;&#x9;object.diagramObject.bottom = object.diagramObject.top - diagram.objectHeight&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.fillColor &#x9;&#x9;= level.objectStyle.fillColor&#xA;&#x9;&#x9;object.lineWidth &#x9;&#x9;= level.objectStyle.lineWidth&#xA;&#x9;&#x9;object.lineColor &#x9;&#x9;= level.objectStyle.lineColor&#xA;&#x9;&#x9;object.fontName &#x9;&#x9;= level.objectStyle.fontName&#xA;&#x9;&#x9;object.fontSize &#x9;&#x9;= level.objectStyle.fontSize&#xA;&#x9;&#x9;object.fontColor &#x9;&#x9;= level.objectStyle.fontColor&#xA;&#x9;&#x9;object.fontBold &#x9;&#x9;= level.objectStyle.fontBold&#xA;&#x9;&#x9;object.fontItalic &#x9;&#x9;= level.objectStyle.fontItalic&#xA;&#x9;&#x9;object.fontUnderline &#x9;= level.objectStyle.fontUnderline&#xA;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(object.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; LeftTop: ( &quot; &amp; object.diagramObject.left &amp; &quot;, &quot; &amp; object.diagramObject.top &amp; &quot; ) RightBottom: ( &quot; &amp; object.diagramObject.right &amp; &quot;, &quot; &amp; object.diagramObject.bottom &amp; &quot; )&quot;, 0&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.diagramObject.Update&#xA;&#xA;&#x9;&#x9;Repository.ReloadDiagram(object.diagram.diagram.DiagramID)&#xA;&#x9;&#xA;&#x9;&#x9;if Not object.parentObject is Nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(object.parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;object.parentObject.resize object&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;objectIndex = objectIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub createNestedHierarchyDiagram( package, elementMetaType, levelList)&#xA;&#xA;&#x9;dim diagram &#x9;&#x9;' as HierarchyDiagram&#xA;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Creating nested hierarchy diagram for Element '&quot; &amp; package.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;set diagram = New HierarchyDiagram&#xA;&#x9;&#xA;&#x9;diagram.elementMetaType = elementMetatype&#xA;&#x9;diagram.horizOffset = 10&#xA;&#x9;diagram.horizSpace = 10&#xA;&#x9;diagram.vertOffset = 50&#xA;&#x9;diagram.vertSpace = 10&#xA;&#x9;diagram.objectHeight = 50&#xA;&#x9;diagram.objectWidth = 150&#xA;&#x9;set diagram.package = package&#xA;&#xA;&#x9;diagram.createDiagram elementMetaType &amp; &quot; Nested Hierarchy&quot;, &quot;Package&quot;&#xA;&#x9;&#xA;&#x9;Repository.OpenDiagram(diagram.diagram.DiagramID)&#xA;&#xA;&#x9;set diagram.levelList = levelList&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;diagram.levelList.Count = &quot; &amp; diagram.levelList.count, 0&#xA;&#x9;&#xA;&#x9;diagram.loadRootObjectList&#xA;&#x9;&#xA;&#x9;diagram.drawRootObjects&#xA;&#x9;&#xA;&#x9;diagram.hideConnectors&#xA;&#x9;&#x9;&#xA;&#x9;Repository.SaveDiagram(diagram.diagram.diagramID)&#xA;&#xA;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function createPackageHierarchyObjectList( diagram, package, elementMetaType)&#xA;&#xA;&#x9;dim objectList&#xA;&#x9;dim eaElement as EA.Element&#xA;&#x9;dim object&#xA;&#x9;&#xA;&#x9;set objectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;for each eaElement in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if eaElement.MetaType = elementMetaType then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set object = New HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set object.Element = eaElement&#xA;&#x9;&#x9;&#x9;set object.ParentObject = diagram&#xA;&#x9;&#x9;&#x9;object.levelNumber = 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectList.Add object.element.ElementGUID, object&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set createPackageHierarchyObjectList = objectList&#xA;&#xA;end function&#xA;&#xA;sub Test( packageGUID)&#xA;&#xA;&#x9;dim packageID&#x9;' as String&#xA;&#x9;dim package&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarcyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorPaleGreen&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorRed&#xA;&#x9;'level1.objectStyle.fontName = &quot;Century&quot;&#xA;&#x9;'level1.objectStyle.fontSize = 14&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;'set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;'level2.numObjects = 3&#xA;&#x9;'level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDarkOrange&#xA;&#x9;'level2.objectStyle.lineWidth = 3&#xA;&#x9;'level2.objectStyle.lineColor = colorMediumOrchid&#xA;&#x9;'level2.objectStyle.fontName = &quot;Jokerman&quot;&#xA;&#x9;'level2.objectStyle.fontSize = 12&#xA;&#x9;'level2.objectStyle.fontColor = colorRed&#xA;&#xA;&#x9;'levelList.Add 2, level2&#xA;&#x9;&#xA;'&#x9;set level3 = New HierarchyLevel&#xA;'&#x9;&#xA;'&#x9;level3.numObjects = 3&#xA;'&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;'&#x9;&#xA;'&#x9;levelList.Add 3, level3&#xA;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;createNestedHierarchyDiagram package, &quot;Capability&quot;, levelList&#xA;&#x9;&#xA;end sub&#xA;&#xA;'Test &quot;{E28EC284-99D6-477f-B0CC-A9B1EF2E9F42}&quot;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="474"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7E8166EC-B35D-4526-BD54-83AB6B719889}"/>
			<Column name="ScriptAuthor" value="{B444212D-8C17-4ad0-977C-950D490F0130}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Set Diagram Styles&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value=" ' Scripts to update styles diagram objects.&#xA; '&#xA; ' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA; &#xA;const STYLE_DELIMITER = &quot;;&quot;&#xA;const STYLE_ASSIGNMENT = &quot;=&quot;&#xA;&#xA;sub SetCurrentDiagramObjectsStyle(elementMetaType, updateStyleList)&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramObjectsStyle theDiagram, elementMetaType, updateStyleList&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectsStyle( theDiagram, elementMetaType, updateStyleList)&#xA;&#x9;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim diagramElement as EA.Element&#xA;&#x9;dim elementID&#xA;&#x9;dim updateStyleArray&#xA;&#x9;dim updateStyle&#xA;&#x9;&#xA;&#x9;updateStyleArray = Split(updateStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;for each diagramObject in theDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramElement = Repository.GetElementByID(elementID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if diagramElement.metaType = elementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each updateStyle in updateStyleArray&#xA;&#x9;&#x9;&#x9;&#x9;SetDiagramObjectStyle diagramObject, updateStyle&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectStyle( diagramObject, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagramObject.Style&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagramObject.Style = lineStyleList&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub SetDiagramStyle( diagram, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagram.ExtendedStyle&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagram.ExtendedStyle = lineStyleList&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="475"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{79FA1833-DB1F-41eb-835D-A5B29ED8F573}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create capability Map 4x4&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Create Nested Hierarchy Diagram&#xA;!INC Diagram Script Utilities.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage, &quot;Capability&quot;, levelList&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Capability&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;'level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level1.objectStyle.fontSize = 14&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 2&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;'level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;'level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level3.objectStyle.fontSize = 10&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 2&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;'level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level4.objectStyle.fontSize = 10&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="476"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8CD718E6-84E5-49c8-B5E2-3374E937C21C}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Capability Map (3x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage, &quot;Capability&quot;, levelList&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Capability&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;'level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level1.objectStyle.fontSize = 14&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 2&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;'level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;'level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level3.objectStyle.fontSize = 10&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 2&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;'level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level4.objectStyle.fontSize = 10&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="477"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{38FD6CE0-AEC9-4504-ACD4-E6E74529FAF7}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Capability Map (2x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage, &quot;Capability&quot;, levelList&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Capability&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;'level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level1.objectStyle.fontSize = 14&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 2&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;'level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;'level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level3.objectStyle.fontSize = 10&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 2&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;'level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level4.objectStyle.fontSize = 10&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="478"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{368B7696-8E7A-44e0-9740-E7262A84914D}"/>
			<Column name="ScriptAuthor" value="{B5118B0C-FA47-4f68-A58F-98605A6395A0}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Capability Map (4x1)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Copyright (c) 2011-2018 Sparx Services North America. All rights reserved. www.sparxsystems.us&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage, &quot;Capability&quot;, levelList&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Capability&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;'level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level1.objectStyle.fontSize = 14&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;'set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;'level2.numObjects = 2&#xA;&#x9;'level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;'level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;'set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;'level3.numObjects = 3&#xA;&#x9;'level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;'level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level3.objectStyle.fontSize = 10&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;'set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;'level4.numObjects = 2&#xA;&#x9;'level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;'level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;'level4.objectStyle.fontSize = 10&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="480"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C486BBD2-C2F2-4a4d-B926-A67A277982B8}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Report External Package Dependencies (Details)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;dim m_packageHierarchyList 'as Scripting.Dictionary&#xA;dim m_extPackageConnList 'as Scripting.Dictionary&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package as EA.Package&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;startReportExternalPackageDependencies package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub startReportExternalPackageDependencies( package)&#xA;&#xA;&#x9;dim packageHierarchyList ' as Scripting.Dictionary&#xA;&#x9;&#xA;&#x9;set m_packageHierarchyList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;set m_extPackageConnList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Report External Package Dependencies (Details)&quot;&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Building package hierarchy list...&quot;&#xA;&#x9;buildPackageHierarchyList package&#xA;&#x9;&#xA;&#x9;checkPackage package&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkPackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Checking package &quot; &amp; package.Name&#xA;&#x9;&#xA;&#x9;checkElement package.Element&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;checkElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;checkPackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;reportConnectors package&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub reportConnectors( package)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim sourceElement as EA.Element&#xA;&#x9;dim targetElement as EA.Element&#xA;&#x9;dim sourcePackageID 'as Integer&#xA;&#x9;dim targetPackageID 'as Integer&#xA;&#x9;dim connDirection 'as String&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;dim connElementList 'as EA.Connector()&#xA;&#x9;dim sourcePackage as EA.Package&#xA;&#x9;dim targetPackage as EA.Package&#xA;&#xA;&#x9;Session.output vbCRLF &#xA;&#x9;&#xA;&#x9;if m_extPackageConnList.Count = 0 then&#xA;&#x9;&#x9;Session.Output &quot;'&quot; &amp; package.Name &amp; &quot;': There are no external package dependencies for any elements.&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;'&quot; &amp; package.Name &amp; &quot;' External Package Dependencies&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;connElementList = m_extPackageConnList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each connector in connElementList&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set sourceElement = Repository.GetElementByID( connector.ClientID)&#x9;&#xA;&#x9;&#x9;&#x9;set targetElement = Repository.GetElementByID( connector.SupplierID)&#xA;&#xA;&#x9;&#x9;&#x9;sourcePackageID = sourceElement.PackageID&#xA;&#x9;&#x9;&#x9;targetPackageID = targetElement.PackageID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if m_packageHierarchyList.Exists( sourcePackageID) = false then&#xA;&#x9;&#x9;&#x9;&#x9;connDirection = &quot;&lt;- FROM&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;connDirection = &quot;TO -&gt;&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set sourcePackage = Repository.GetPackageByID( sourcePackageID)&#xA;&#x9;&#x9;&#x9;set targetPackage = Repository.GetPackageByID( targetPackageID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;- &quot; &amp; sourcePackage.Element.FQName &amp; &quot;:&quot; &amp; sourceElement.Name &amp; &quot; &quot; &amp; connDirection &amp; &quot; &quot; &amp; targetPackage.Name &amp; &quot;:&quot; &amp; targetElement.Name&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;checkConnector element, connector&#xA;&#x9;next&#x9;&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;checkElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkConnector( element, connector)&#xA;&#xA;&#x9;dim relatedElementID 'as Integer&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;dim relatedPackageID 'as Integer&#xA;&#x9;&#xA;&#x9;if element.ElementID = connector.ClientID then&#xA;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;else&#xA;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;set relatedElement = Repository.GetElementByID( relatedElementID)&#xA;&#x9;&#xA;&#x9;relatedPackageID = relatedElement.PackageID&#xA;&#x9;&#xA;&#x9;if m_packageHierarchyList.Exists( relatedPackageID) = false then&#xA;&#x9;&#x9;m_extPackageConnList.Add connector.ConnectorID, connector&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub buildPackageHierarchyList( package)&#xA;&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;m_packageHierarchyList.Add package.PackageID, package&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;buildPackageHierarchyList childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;'test&#xA;&#xA;sub test&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#xA;&#x9;&#xA;&#x9;packageGUID = &quot;{43574089-F19F-43cd-AA71-9DC435BFCB6B}&quot;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;startReportExternalPackageDependencies package&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="482"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F44E6396-5F31-411e-A986-69BF39CDF86B}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Diagram -&amp;gt; Create Roadmap Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Roadmap Diagram Generator&#xA;option explicit&#xA;&#xA;' Include EA constants and utilities&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;' Entry point: invoked on selected package&#xA;Sub OnProjectBrowserScript()&#xA;    Dim itemType&#xA;    Dim rootPkg  As EA.Package&#xA;    Dim levelList ' Dictionary of HierarchyLevel&#xA;    Dim childPkg As EA.Package&#xA;    Dim elm      As EA.Element&#xA;&#xA;    itemType = Repository.GetTreeSelectedItemType()&#xA;    If itemType &lt;&gt; otPackage Then&#xA;        Session.Prompt &quot;Please select a package to generate the roadmap.&quot;, promptOK&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    ' Get the selected package&#xA;    Set rootPkg = Repository.GetTreeSelectedObject()&#xA;    Session.Output &quot;Generating roadmap for package: &quot; &amp; rootPkg.Name&#xA;&#xA;    ' Prepare the hierarchy levels&#xA;    Set levelList = getDiagramLevelList()&#xA;&#xA;    ' Create one diagram under the root package&#xA;    createNestedHierarchyDiagram rootPkg, levelList, &quot;RoadmapDiagram&quot;, False&#xA;&#xA;    Session.Output &quot;Roadmap diagram created.&quot;&#xA;End Sub&#xA;&#xA;' Define the hierarchy levels: Roadmap → Phase → Milestone&#xA;Function getDiagramLevelList()&#xA;    Dim levels&#xA;    Dim lvl1, lvl2, lvl3 &#xA;&#xA;    Set levels = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#xA;    ' Level 1: Roadmap container&#xA;    Set lvl1 = New HierarchyLevel&#xA;    lvl1.numObjects      = 1&#xA;    lvl1.flowDirection   = LEFT_RIGHT_FLOW_DIRECTION&#xA;    lvl1.elementMetatype = &quot;Program&quot;     ' expects sub-package with stereotype 'Roadmap'&#xA;    lvl1.horizOffset     = 20&#xA;    lvl1.horizSpace      = 20&#xA;    lvl1.vertOffset      = 20&#xA;    lvl1.vertSpace       = 20&#xA;    lvl1.objectWidth     = 400&#xA;    lvl1.objectHeight    = 100&#xA;    lvl1.objectStyle.fillColor  = colorWhite&#xA;    lvl1.objectStyle.fontSize   = 16&#xA;    lvl1.objectStyle.fontName   = &quot;Calibri&quot;&#xA;    lvl1.objectStyle.fontBold   = &quot;1&quot;&#xA;    levels.Add 1, lvl1&#xA;&#xA;    ' Level 2: Phases&#xA;    Set lvl2 = New HierarchyLevel&#xA;    lvl2.numObjects      = 4      ' e.g. Q1-Q4&#xA;    lvl2.flowDirection   = LEFT_RIGHT_FLOW_DIRECTION&#xA;    lvl2.elementMetatype = &quot;Growth Package&quot;   ' expects sub-package with stereotype 'Phase'&#xA;    lvl2.horizOffset     = 10&#xA;    lvl2.horizSpace      = 10&#xA;    lvl2.vertOffset      = 120&#xA;    lvl2.vertSpace       = 10&#xA;    lvl2.objectWidth     = 180&#xA;    lvl2.objectHeight    = 60&#xA;    lvl2.objectStyle.fillColor  = colorLightSkyBlue&#xA;    lvl2.objectStyle.fontSize   = 12&#xA;    lvl2.objectStyle.fontBold   = &quot;1&quot;&#xA;    levels.Add 2, lvl2&#xA;&#xA;    ' Level 3: Milestones&#xA;    Set lvl3 = New HierarchyLevel&#xA;    lvl3.numObjects      = 6&#xA;    lvl3.flowDirection   = LEFT_RIGHT_FLOW_DIRECTION&#xA;    lvl3.elementMetatype = &quot;Initiative&quot;   ' expects elements with stereotype 'Milestone'&#xA;    lvl3.horizOffset     = 10&#xA;    lvl3.horizSpace      = 10&#xA;    lvl3.vertOffset      = 200&#xA;    lvl3.vertSpace       = 10&#xA;    lvl3.objectWidth     = 120&#xA;    lvl3.objectHeight    = 40&#xA;    lvl3.objectStyle.fillColor  = colorDeepSkyBlue&#xA;    lvl3.objectStyle.fontSize   = 10&#xA;    lvl3.objectStyle.fontColor  = colorWhite&#xA;    lvl3.objectStyle.fontBold   = &quot;1&quot;&#xA;    levels.Add 3, lvl3&#xA;&#xA;    Set getDiagramLevelList = levels&#xA;End Function&#xA;&#xA;OnProjectBrowserScript()"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="483"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DF609417-DA5C-490f-97EB-A9D4B61A256C}"/>
			<Column name="ScriptAuthor" value="{99650569-F144-4529-93FC-B88849FAB117}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Report External Package Dependencies (Summary)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Diagram Script Utilities.Set Current Diagram Objects Style&#xA;&#xA;dim m_packageHierarchyList 'as Scripting.Dictionary&#xA;dim m_extPackageList 'as Scripting.Dictionary&#xA;&#xA;const PACKAGE_WIDTH = 130&#xA;const PACKAGE_HEIGHT = 80&#xA;const PACKAGE_OFFSET = 20&#xA;const PACKAGE_HORIZ_SPACING = 20&#xA;const PACKAGE_VERT_SPACING = 150&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package as EA.Package&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;startReportExternalPackageDependencies package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub startReportExternalPackageDependencies( package)&#xA;&#xA;&#x9;dim packageHierarchyList ' as Scripting.Dictionary&#xA;&#x9;&#xA;&#x9;set m_packageHierarchyList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;set m_extPackageList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Report External Package Dependencies (Summary)&quot;&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Building package hierarchy list...&quot;&#xA;&#xA;&#x9;buildPackageHierarchyList package&#xA;&#x9;&#xA;&#x9;deletePackageDependencies package&#xA;&#x9;&#x9;&#xA;&#x9;checkPackage package&#xA;&#x9;&#xA;&#x9;reportPackages package&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkPackage( package)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;Session.Output &quot;- Checking package &quot; &amp; package.Name&#xA;&#x9;&#xA;&#x9;checkElement package.Element&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;checkElement element&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;checkPackage childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub reportPackages( package)&#xA;&#xA;&#x9;dim packageDiagram as EA.Diagram&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim dependConn as EA.Connector&#xA;&#x9;dim packageList 'as List( Of EA.Package)&#xA;&#x9;dim packageIndex 'as Integer&#xA;&#x9;dim packageKeyList 'as Object()&#xA;&#x9;dim packageKey 'as String&#xA;&#x9;dim extPackage as EA.Package&#xA;&#x9;dim connDirection 'as String&#xA;&#x9;dim extPackageElement as EA.Element&#xA;&#x9;dim fqName 'as String&#xA;&#x9;dim prevPackageRight 'as Integer&#xA;&#xA;&#x9;Session.output vbCRLF &#xA;&#x9;&#xA;&#x9;if m_extPackageList.Count = 0 then&#xA;&#x9;&#x9;Session.Output &quot;'&quot; &amp; package.Name &amp; &quot;': There are no external package dependencies for any elements.&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;'&quot; &amp; package.Name &amp; &quot;' External Package Dependencies&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set packageDiagram = package.Diagrams.AddNew(&quot;Package Dependencies&quot;, &quot;Package&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;packageDiagram.ShowPackageContents = false&#xA;&#x9;&#x9;packageDiagram.StyleEx = UpdateStyleList( packageDiagram.StyleEx, &quot;ShowFQN=1&quot;)&#xA;&#x9;&#x9;packageDiagram.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramObject = packageDiagram.DiagramObjects.AddNew( &quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramObject.ElementID = package.Element.ElementID&#xA;&#x9;&#x9;diagramObject.left = PACKAGE_OFFSET&#xA;&#x9;&#x9;diagramObject.top = - PACKAGE_OFFSET&#xA;&#x9;&#x9;diagramObject.right = diagramObject.left + PACKAGE_WIDTH&#xA;&#x9;&#x9;diagramObject.bottom = diagramObject.top - PACKAGE_HEIGHT&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;prevPackageRight = 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;packageKeyList = m_extPackageList.Keys&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for packageIndex = 0 to m_extPackageList.Count - 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageKey = packageKeyList( packageIndex)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set extPackage = m_extPackageList.Item( packageKey)&#xA;&#x9;&#x9;&#x9;set extPackageElement = Repository.GetElementByGuid( extPackage.PackageGUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;connDirection = Mid( packageKey, InStr( packageKey, &quot;:&quot;) + 1)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;fqName = Repository.GetFormattedName( extPackage.PackageGUID, &amp;H01 or &amp;H02 or &amp;H04 or &amp;H08 or &amp;H10 or &amp;H20 or &amp;H40 or &amp;H80 , &quot;::&quot;, 0)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;- &quot; &amp; connDirection &amp; &quot; '&quot; &amp; extPackage.Name &amp; &quot;' (&quot; &amp; fqName &amp; &quot;)&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set dependConn = package.Element.Connectors.AddNew( &quot;&quot;, &quot;Package&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connDirection = &quot;TO&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dependConn.ClientID = package.Element.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;dependConn.SupplierID = extPackageElement.ElementID&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;dependConn.ClientID = extPackageElement.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;dependConn.SupplierID = package.Element.ElementID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dependConn.Stereotype = &quot;import&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dependConn.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set diagramObject = packageDiagram.DiagramObjects.AddNew( &quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = extPackageElement.ElementID&#xA;&#x9;&#x9;&#x9;diagramObject.left = prevPackageRight + PACKAGE_OFFSET + PACKAGE_HORIZ_SPACING&#xA;&#x9;&#x9;&#x9;diagramObject.top =  - PACKAGE_OFFSET - PACKAGE_HEIGHT - PACKAGE_VERT_SPACING&#xA;&#x9;&#x9;&#x9;diagramObject.right = diagramObject.left + PACKAGE_WIDTH&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = diagramObject.top - PACKAGE_HEIGHT&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;packageDiagram.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram packageDiagram.DiagramID&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;prevPackageRight = diagramObject.right &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;Repository.SaveDiagram packageDiagram.DiagramID&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub deletePackageDependencies( package)&#xA;&#xA;&#x9;dim conn as EA.Connector&#xA;&#x9;dim connIndex 'as Integer&#xA;&#x9;&#xA;&#x9;for connIndex = package.Connectors.Count - 1 to 0 step -1&#xA;&#x9;&#xA;&#x9;&#x9;set conn = package.Connectors.GetAt( connIndex)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if conn.Type = &quot;Package&quot; and conn.Stereotype = &quot;import&quot; then&#xA;&#x9;&#x9;&#x9;package.Connectors.Delete( connIndex)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;package.Update&#xA;&#xA;end sub&#xA;&#xA;sub checkElement( element)&#xA;&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;Session.Output &quot;  + &quot; &amp; element.Name&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;checkConnector element, connector&#xA;&#x9;next&#x9;&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#x9;checkElement childElement&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub checkConnector( element, connector)&#xA;&#xA;&#x9;dim relatedElementID 'as Integer&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;dim relatedPackageID 'as Integer&#xA;&#x9;dim relatedPackage as EA.Package&#xA;&#x9;dim connDirection 'as String&#xA;&#x9;dim packageKey 'as String&#xA;&#x9;&#xA;&#x9;if element.ElementID = connector.ClientID then&#xA;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;connDirection = &quot;TO&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;connDirection = &quot;FROM&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;Session.Output &quot;    -&gt; &quot; &amp; connector.ConnectorGUID &amp; &quot; &quot; &amp; connDirection &amp; &quot; &quot; &amp; relatedElementID&#xA;&#x9;&#xA;&#x9;set relatedElement = Repository.GetElementByID( relatedElementID)&#xA;&#x9;&#xA;&#x9;relatedPackageID = relatedElement.PackageID&#xA;&#x9;&#xA;&#x9;if m_packageHierarchyList.Exists( relatedPackageID) = false then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;packageKey = CStr(relatedPackageID) &amp; &quot;:&quot; &amp; connDirection&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if m_extPackageList.Exists( packageKey) = false then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set relatedPackage = Repository.GetPackageByID( relatedPackageID)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;m_extPackageList.Add packageKey, relatedPackage&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;sub buildPackageHierarchyList( package)&#xA;&#xA;&#x9;dim childPackage as EA.Package&#xA;&#x9;&#xA;&#x9;m_packageHierarchyList.Add package.PackageID, package&#xA;&#x9;&#xA;&#x9;for each childPackage in package.Packages&#xA;&#x9;&#x9;buildPackageHierarchyList childPackage&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;'test&#xA;&#xA;sub test&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim package as EA.Package&#xA;&#x9;&#xA;&#x9;packageGUID = &quot;{43574089-F19F-43cd-AA71-9DC435BFCB6B}&quot;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;startReportExternalPackageDependencies package&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="484"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Diagram DAF M2M- non used "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="485"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C025ECCD-E788-4b0f-A6AF-3A49D03531C3}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TAM -&amp;gt; Create Application Map&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Copyright (c) 2019 Sparx Services North America. www.sparxsystems.us&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Report Scripts.Report Script Library&#xA;!INC SSNA Diagram Script Utilities.Color Constants&#xA;!INC SSNA Diagram Script Utilities.Set Current Diagram Objects Style&#xA;!INC SSNA Diagram Script Utilities.Clone Routines&#xA;&#xA;dim m_sqlStringTemplate 'as String&#xA;dim m_countryCode 'as String&#xA;&#xA;const APP_PACKAGE_ID = 5182&#xA;const SCALING_FACTOR = 2&#xA;&#xA;const SOLID_FILL_BORDER_STYLE = 0&#xA;const SOLID_NOFILL_BORDER_STYLE = 3&#xA;const LINE_HEIGHT = 13 ' 8pt font = 13 pixels tall&#xA;const TEXT_BOX_MARGIN = 5 ' 8pt font = 5 pixels top &amp; bottom&#xA;const PIXELS_PER_CHAR = 5 ' 8pt font = 5 pixels wide&#xA;&#xA;sub createTAMApplicationMap( packageGUID, templateDiagramGUID, sqlElementGUID, diagramSuffix)&#xA;&#xA;&#x9;dim templateDiagram as EA.Diagram&#xA;&#x9;dim newDiagram as EA.Diagram&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim elementID 'as Integer&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim customStyleList 'as String&#xA;&#x9;&#xA;&#x9;m_sqlStringTemplate = GetMappedApplicationsSQLString( sqlElementGUID) &#x9;&#xA;&#x9;set templateDiagram = Repository.GetDiagramByGuid( templateDiagramGUID)&#x9;&#xA;&#x9;set package = Repository.GetPackageByGUID( packageGUID)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Copying template diagram...&quot;&#xA;&#x9;&#xA;&#x9;set newDiagram = CopyElementDiagram( templateDiagram, package)&#xA;&#x9;&#xA;&#x9;newDiagram.Name = newDiagram.Name &amp; &quot; &quot; &amp; diagramSuffix&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Scaling diagram...&quot;&#xA;&#x9;&#xA;&#x9;ScaleDiagram newDiagram, SCALING_FACTOR&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Add Applications to TAM Diagram '&quot; &amp; newDiagram.name &amp; &quot;'&quot;&#xA;&#x9;&#xA;&#x9;for each diagramObject in newDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#x9;&#xA;&#x9;&#x9;set element = Repository.GetElementByID( elementID)&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Processing diagram element '&quot; &amp; element.Name &amp; &quot;' &quot; &amp; element.Stereotype &#x9;&#xA;&#x9;&#x9;customStyleList = &quot;SSJ=12:&quot; ' Name - Top Center&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;setDiagramObjectCustomStyle newDiagram, diagramObject, customStyleList&#xA;&#x9;&#xA;&#x9;&#x9;if element.Stereotype = &quot;TMF_Application&quot; then&#xA;&#x9;&#x9;&#x9;updateDiagramObject package, newDiagram, diagramObject, element&#xA;&#x9;&#x9;end if&#xA;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;newDiagram.StyleEx = UpdateStyleList( newDiagram.StyleEx, &quot;DSO=1&quot;)&#xA;&#x9;newDiagram.ExtendedStyle = UpdateStyleList( newDiagram.ExtendedStyle, &quot;HideEStereo=1&quot;)&#x9;&#xA;&#x9;newDiagram.Update&#x9;&#xA;&#x9;Repository.ReloadDiagram newDiagram.DiagramID&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Finished!&quot;&#xA;&#xA;end sub&#xA;&#xA;sub updateDiagramObject( package, diagram, diagramObject, element)&#xA;&#xA;&#x9;dim boundaryElement as EA.Element&#xA;&#x9;dim boundaryObject as EA.DiagramObject&#xA;&#x9;dim boundaryStyleList 'as String&#xA;&#x9;dim completeAppList 'as Scripting.Dictionary&#xA;&#x9;dim appNameList 'as Scripting.Dictionary&#xA;&#x9;dim appNameKeys 'as String()&#xA;&#x9;dim appArray 'as Object()&#xA;&#x9;dim application as EA.Element&#xA;&#x9;dim appCount 'as Integer&#xA;&#x9;dim appName 'as String&#xA;&#x9;dim appNameText 'as String&#xA;&#x9;dim textMaxLines 'as Integer&#xA;&#x9;dim columnCount 'as Integer&#xA;&#x9;dim columnWidth 'as Integer&#xA;&#x9;dim columnIndex 'as Integer&#xA;&#x9;dim appIndex 'as Integer&#xA;&#x9;dim textObject as EA.DiagramObject&#xA;&#x9;dim textElement as EA.Element&#xA;&#x9;dim objIndex 'as Integer&#xA;&#x9;dim topOffset 'as Integer&#xA;&#x9;dim boundaryHeight 'as Integer&#xA;&#x9;dim textHeight 'as Integer&#xA;&#x9;dim maxTextLength 'as Integer&#xA;&#x9;&#xA;&#x9;Session.Output &quot;'&quot; &amp; element.Name &amp; &quot;' TAM Application&quot;&#xA;&#x9;&#xA;&#x9;objIndex = -1&#xA;&#x9;&#xA;&#x9;set boundaryElement = package.Elements.AddNew( &quot;&quot;, &quot;Boundary&quot;)&#xA;&#x9;&#xA;&#x9;boundaryElement.Update&#xA;&#x9;&#xA;&#x9;setElementBorderStyle boundaryElement, SOLID_FILL_BORDER_STYLE&#xA;&#x9;&#xA;&#x9;set boundaryObject = diagram.DiagramObjects.AddNew( &quot;&quot;, &quot;&quot;)&#xA;&#x9;&#xA;&#x9;boundaryObject.ElementID = boundaryElement.ElementID&#xA;&#x9;boundaryObject.top = diagramObject.top - 20&#xA;&#x9;boundaryObject.bottom = diagramObject.bottom + 5&#xA;&#x9;boundaryObject.left = diagramObject.left + 5&#xA;&#x9;boundaryObject.right = diagramObject.right - 5&#xA;&#x9;boundaryObject.Sequence = objIndex&#xA;&#x9;&#xA;&#x9;boundaryStyleList = &quot;BCol=&quot; &amp; colorWhite &amp; &quot;;LCol=&quot; &amp; colorWhite &#xA;&#x9;&#xA;&#x9;SetDiagramObjectStyleList boundaryObject, boundaryStyleList&#xA;&#x9;&#xA;&#x9;boundaryObject.Update&#xA;&#x9;&#xA;&#x9;objIndex = objIndex - 1&#xA;&#x9;&#xA;&#x9;set appNameList = getMappedAppNameList( element)&#xA;&#x9;&#xA;&#x9;appCount = appNameList.Count&#xA;&#x9;&#xA;&#x9;if appCount &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;boundaryHeight = boundaryObject.top - boundaryObject.bottom &#xA;&#x9;&#xA;&#x9;&#x9;textMaxLines = Int( ( boundaryHeight - TEXT_BOX_MARGIN ) / LINE_HEIGHT)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if textMaxLines = 0 then&#xA;&#x9;&#x9;&#x9;textMaxLines = 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;textHeight = textMaxLines * LINE_HEIGHT + TEXT_BOX_MARGIN * 2&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if boundaryHeight &lt;&gt; textHeight then&#xA;&#x9;&#x9;&#x9;topOffset = ( textHeight - boundaryHeight ) / 2&#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;topOffset = 0&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;columnCount = Int( ( ( appCount - 1 ) / textMaxLines) + 1 )&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Session.Output element.Name &amp; &quot;: appCount = &quot; &amp; appCount &amp; &quot;, textMaxLines = &quot; &amp; textMaxLines &amp; &quot;, columnCount = &quot; &amp; columnCount&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;columnWidth = Int( ( boundaryObject.right - boundaryObject.left ) / columnCount)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;maxTextLength = Int( columnWidth / PIXELS_PER_CHAR)&#xA;&#x9;&#xA;&#x9;&#x9;appIndex = 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for columnIndex = 1 to columnCount&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set textElement = package.Elements.AddNew( &quot;&quot;, &quot;Text&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;textElement.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set textObject = diagram.DiagramObjects.AddNew( &quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;textObject.ElementID = textElement.ElementID&#xA;&#x9;&#x9;&#x9;textObject.top = boundaryObject.top + topOffset&#xA;&#x9;&#x9;&#x9;textObject.bottom = boundaryObject.bottom&#xA;&#x9;&#x9;&#x9;textObject.left = boundaryObject.left + ( columnIndex - 1) * columnWidth&#xA;&#x9;&#x9;&#x9;textObject.right = textObject.left + columnWidth&#xA;&#x9;&#x9;&#x9;textObject.Sequence = objIndex&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;textObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;appNameText = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;do&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;appNameKeys = appNameList.Keys()&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;appName = appNameKeys( appIndex)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Application '&quot; &amp; appName &amp; &quot;'...&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if ( len( appName) * PIXELS_PER_CHAR ) &gt; columnWidth then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appName = Left( appName, maxTextLength - 1) &amp; &quot;...&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if appNameText = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appNameText = appName&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;appNameText = appNameText &amp; vbCRLF &amp; appName&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;appIndex = appIndex + 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;loop until ( ( appIndex mod textMaxLines) = 0) or appIndex = appCount&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;textElement.Notes = appNameText&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;textElement.Update&#xA;&#xA;&#x9;&#x9;&#x9;objIndex = objIndex - 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function getMappedAppNameList( tamApp)&#xA;&#xA;&#x9;dim sqlString 'as String&#xA;&#x9;dim elementList_XML 'ss String&#xA;&#x9;dim elementList_XMLDoc 'as Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList 'as Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode 'as Xml.XmlNode&#xA;&#x9;dim appNameList 'as SortedList&#xA;&#x9;dim childNodeList 'as Xml.XmlNodeList&#xA;&#x9;dim appName&#x9;'as String&#xA;&#x9;dim appGUID 'as String&#xA;&#xA;&#x9;sqlString = Replace( m_sqlStringTemplate, &quot;%TAM_APP_GUID%&quot;, tamApp.ElementGUID)&#xA;&#x9;sqlString = Replace( sqlString, &quot;%COUNTRY_CODE%&quot;, m_countryCode)&#xA;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;&#xA;&#x9;set appNameList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#xA;&#x9;for each element_XMLNode in element_XMLNodeList&#xA;&#x9;&#xA;&#x9;&#x9;set childNodeList = element_XMLNode.ChildNodes&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;appName = childNodeList.Item(2).Text&#xA;&#x9;&#x9;appGUID = childNodeList.Item(3).Text&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;appNameList.Add appName, appGUID&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;&#x9;set getMappedAppNameList = appNameList&#xA;&#x9;&#xA;end function&#xA;&#xA;function getMappedApplicationsSQLString( sqlElementGUID)&#xA;&#xA;&#x9;dim sqlElement as EA.Element&#xA;&#x9;dim sqlString 'as String&#xA;&#x9;&#xA;&#x9;set sqlElement = Repository.GetElementByGuid( sqlElementGUID)&#xA;&#x9;&#xA;&#x9;sqlString = sqlElement.Notes&#xA;&#x9;&#xA;&#x9;getMappedApplicationsSQLString = sqlString&#xA;&#x9;&#xA;end function&#xA;&#xA;'DEPRECATED&#xA;function getMappedApplicationListEA( element, parentAppList)&#xA;&#xA;&#x9;dim appList 'as Scripting.Dictionary&#xA;&#x9;dim appIndex 'as Integer&#xA;&#x9;dim appName 'as String&#xA;&#x9;dim childElement as EA.Element&#xA;&#x9;dim childAppList 'as Scripting.Dictionary&#xA;&#x9;dim childAppIndex 'as Integer&#xA;&#x9;dim childAppName 'as String&#xA;&#x9;&#xA;&#x9;set appList = getSortedRelatedElementList( element, &quot;Association&quot;, &quot;ArchiMate_Assignment&quot;, &quot;Component&quot;, &quot;ArchiMate_ApplicationComponent&quot;, APP_PACKAGE_ID)&#xA;&#x9;&#xA;&#x9;for appIndex = 0 to appList.Count - 1&#xA;&#x9;&#xA;&#x9;&#x9;appName = appList.GetKey( appIndex)&#xA;&#x9;&#xA;&#x9;&#x9;if not parentAppList.ContainsKey( appName) then&#xA;&#x9;&#x9;&#x9;parentAppList.Add appName, appList( appName)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each childElement in element.Elements&#xA;&#x9;&#xA;&#x9;&#x9;set childAppList = getMappedApplicationList( childElement, parentAppList)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for childAppIndex = 0 to childAppList.Count - 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;childAppName = childAppList.GetKey( childAppIndex)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if not appList.ContainsKey( childAppName) then&#xA;&#x9;&#x9;&#x9;&#x9;appList.Add childAppName, childAppList( childAppName)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;&#x9;set getMappedApplicationList = appList&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setElementBorderStyle( boundaryElement, borderStyle)&#xA;&#xA;&#x9;setElementColumnValue boundaryElement, &quot;BorderStyle&quot;, borderStyle&#xA;&#xA;end sub&#xA;&#xA;sub setElementColumnValue( element, columnName, columnValue)&#xA;&#xA;&#x9;dim sqlString 'As String&#xA;&#xA;&#x9;sqlString = &quot;UPDATE t_object SET &quot; &amp; columnName &amp; &quot;='&quot; &amp; columnValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#xA;&#x9;Repository.Execute( sqlString)&#xA;&#xA;&#x9;element.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub scaleDiagram( diagram, scalingFactor)&#xA;&#xA;&#x9;dim diagObj as EA.DiagramObject&#xA;&#x9;&#xA;&#x9;for each diagObj in diagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;diagObj.left = diagObj.left * SCALING_FACTOR&#xA;&#x9;&#x9;diagObj.right = diagObj.right * SCALING_FACTOR&#xA;&#x9;&#x9;diagObj.top = diagObj.top * SCALING_FACTOR&#xA;&#x9;&#x9;diagObj.bottom = diagObj.bottom * SCALING_FACTOR&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagObj.Update&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram diagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;&#xA;&#xA;sub test&#xA;&#xA;&#x9;dim packageGUID 'as String&#xA;&#x9;dim templateDiagramGUID 'as String&#xA;&#x9;dim sqlElementGUID 'as String&#xA;&#x9;dim diagramSuffix 'as String&#xA;&#x9;&#xA;&#x9;'' the package where the template is&#xA;&#x9;'' packageGUID = &quot;{2159C734-5A2D-4d09-B713-A9493477BA27}&quot;&#xA;&#x9;packageGUID = &quot;{C7056F32-D521-41ff-A840-87929410BABF}&quot;&#xA;&#x9;'templateDiagramGUID = &quot;{1FDC0199-9232-45d1-B20D-99F45CFC476F}&quot; 'Test&#xA;&#x9;'templateDiagramGUID = &quot;{38A899FD-9E1F-40a8-BD2C-FB5E3577A591}&quot; '#1&#xA;&#x9;'templateDiagramGUID = &quot;{500B865F-2DED-44b8-8D28-842D3219B33C}&quot; '#2&#xA;&#x9;templateDiagramGUID = &quot;{18621EBC-596C-49c3-95A8-39C867FE54B8}&quot; '#3&#xA;&#x9;'sqlElementGUID = &quot;{61DE3C47-717B-4e5e-84FC-6D80726492DA}&quot; 'Across Countries&#xA;&#x9;'sqlElementGUID = &quot;{24DA0A36-C111-447f-8B25-08CBA6A91E82}&quot; 'By Country By App&#xA;&#x9;'sqlElementGUID = &quot;{A1A7AA62-A3EC-41bc-81FE-CAE8EACA3018}&quot; 'By App By Country&#xA;&#x9;'sqlElementGUID = &quot;{5F287123-C51A-4f93-A609-D1524A832731}&quot; 'Country Code Only&#xA;&#x9;sqlElementGUID = &quot;{77CBC20C-1511-435f-B510-FEAAC4FD14AC}&quot; 'Country Code + Shared&#xA;&#x9;&#xA;&#x9;m_countryCode = &quot;VE&quot;&#xA;&#x9;diagramSuffix = &quot;[&quot; &amp; m_countryCode &amp; &quot;]&quot;&#xA;&#x9;createTAMApplicationMap packageGUID, templateDiagramGUID, sqlElementGUID, diagramSuffix&#x9;&#xA;end sub&#xA;&#xA;test"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="486"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{61811CDB-2C35-4315-A2A7-66E350E9F731}"/>
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Layout Constants&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name: layout constants&#xA;' Author: &#xA;' Purpose:   ConstLayoutStyles&#xA;'  See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/constlayoutstylesenum.htm&#xA;' Date: &#xA;'&#xA;&#xA;const lsDiagramDefault&#x9;&#x9;&#x9;&#x9;= 0x00000000&#xA;const lsProgramDefault&#x9;&#x9;&#x9;&#x9;= 0xFFFFFFFF&#xA;const lsCycleRemoveGreedy&#x9;&#x9;&#x9;&#x9;= 0x80000000&#xA;const lsCycleRemoveDFS&#x9;&#x9;&#x9;&#x9;= 0x40000000&#xA;const lsLayeringLongestPathSink&#x9;&#x9;= 0x30000000&#xA;const lsLayeringLongestPathSource&#x9;&#x9;= 0x20000000&#xA;const lsLayeringOptimalLinkLength&#x9;&#x9;= 0x10000000&#xA;const lsInitializeNaive&#x9;&#x9;&#x9;&#x9;= 0x08000000&#xA;const lsInitializeDFSOut&#x9;&#x9;&#x9;&#x9;= 0x04000000&#xA;const lsInitializeDFSIn&#x9;&#x9;&#x9;&#x9;= 0x0C000000&#xA;const lsCrossReduceAggressive&#x9;&#x9;&#x9;= 0x02000000&#xA;const lsLayoutDirectionUp&#x9;&#x9;&#x9;&#x9;= 0x00010000&#xA;const lsLayoutDirectionDown&#x9;&#x9;&#x9;= 0x00020000&#xA;const lsLayoutDirectionLeft&#x9;&#x9;&#x9;= 0x00040000&#xA;const lsLayoutDirectionRight&#x9;&#x9;&#x9;= 0x00080000"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="487"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E59E40E5-C27D-4e28-9DF3-ACA10615A5FF}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - setstereotype&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;&#xA;// change all the stereitypes of a certain elements to a new one. Destructive script, use carefully.&#xA;// Replace the conversion  below with another element list to reuse this script.&#xA;//!INC Conversion Scripts.ConversionTable&#xA;&#xA;function TypeConversion(sourceObject,sourceStereotype,targetObject, targetStereotype)&#xA;{&#xA;    this.sourceObject = sourceObject;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetObject = targetObject;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var Conversions = new Array();&#xA;&#xA;//Convert standards to MDG standard&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;TMF_API&quot;, &quot;Interface&quot;, &quot;TMF_API&quot;);&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;TMF_BusinessEntity&quot;);//&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;TMF_Domain&quot;, &quot;Class&quot;, &quot;TMF_AF&quot;);&#xA;Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;ModelFlowConfig&quot;);&#xA;// =================================================================================&#xA;// Name: Element Conversion&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// The table is included as a file so it may be changed for other mappings&#xA;// Navigates from selected package and recursively modifies each element&#xA;// NOTE: Requires a package to be selected in the Project Browser&#xA;//&#xA;// Related APIs&#xA;// =================================================================================&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/element2.html&#xA;// Repository API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/repository3.html&#xA;// Tagged Value API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/taggedvalue.html&#xA;&#xA;function StartWithSelectedPackage()&#xA;{&#xA;    // Show the script output window&#xA;    Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;    Session.Output( &quot;JScript Type Convertion&quot; );&#xA;    Session.Output( &quot;===========================&quot; );&#xA;&#xA;    var thePackage as EA.Package;&#xA;    thePackage = Repository.GetTreeSelectedPackage();&#xA;   &#xA;    if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;    {&#xA;        NavigatePackage( &quot;&quot;, thePackage );&#xA;    }&#xA;    else&#xA;    {&#xA;        Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;            &quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;    }&#xA;   &#xA;    Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child&#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function NavigatePackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Add the current package's name to the list&#xA;    Session.Output( indent + currentPackage.Name + &quot; (PackageID=&quot; +&#xA;        currentPackage.PackageID + &quot;)&quot; );&#xA;   &#xA;    // Convert the elements this package contains&#xA;    ConvertElementsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;   &#xA;    // Recursively process any child packages&#xA;    var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;    while ( !childPackageEnumerator.atEnd() )&#xA;    {&#xA;        var childPackage as EA.Package;&#xA;        childPackage = childPackageEnumerator.item();&#xA;        NavigatePackage( indent + &quot;    &quot;, childPackage );&#xA;       &#xA;        childPackageEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertElementsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Iterate through all elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertElements( indent, theElement )&#xA;{&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    currentElement.ObjectType&#xA;    ConvertElement(indent+&quot;    &quot;,currentElement );&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentElement.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the element from BSIF to&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertElement( indent, theElement )&#xA;{&#xA;// Debug Comment out when run for real&#xA;    //Session.Output( indent + &quot;CALLED: ConvertElement with &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; Conversions.length ; i++ )&#xA;    {&#xA;        // If want to limit to stereotype that matches source list then convert&#xA;//        if ( (theElement.Stereotype == Conversions[i].sourceStereotype) &amp;&amp; (theElement.Type == Conversions[i].sourceObject ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED: &quot; + theElement.Name + &quot; (&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+Conversions[i].targetObject+&quot;,&quot;+Conversions[i].targetStereotype+&quot;)&quot; );&#xA;             theElement.Type = Conversions[i].targetObject;&#xA;            //Overright the stereotype list to have only one stereotype&#xA;            theElement.StereotypeEx = Conversions[i].targetStereotype;&#xA;            theElement.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;StartWithSelectedPackage();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="488"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{36A32F85-1621-4613-9AD2-672EC69B9F2B}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;MDA - TransformFromComposer&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name: * Author: Giu Platania&#xA;' Purpose: generate a ProtoBuff File. this is used in the schema composer&#xA;' Date: 8/28/2020&#xA;'&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;Sub main()&#xA;&#x9;Dim schema As EA.SchemaComposer&#xA;&#x9;Dim xmlType As EA.SchemaType&#xA;&#x9;&#xA;&#x9;Dim xmlTypeEnum As EA.SchemaTypeEnum&#xA;&#x9;Dim xmlProp As EA.SchemaProperty&#xA;&#x9;Dim xmlPropEnum As EA.SchemaPropEnum&#xA;&#x9;Dim xmlChoice As EA.SchemaType&#xA;&#x9;Dim xmlChoiceEnum As EA.SchemaTypeEnum&#xA;&#x9;' COnfiguration Header&#xA;&#xA;&#x9;Dim thesyntax 'As String&#xA;&#x9;thesyntax = &quot;syntax = &quot;&quot;proto3&quot;&quot;;&quot;&#xA;&#x9;Dim optionOptimizeFor 'As String&#xA;&#x9;optionOptimizeFor = &quot;option optimize_for = LITE_RUNTIME;&quot;&#xA;&#x9;Dim protobufPackage '' As String&#xA;&#x9;protobufPackage = &quot;package atakmap.commoncommo.protobuf.v3;&quot;&#xA;&#x9;&#xA;&#x9;Session.Output syntax&#xA;&#x9;Session.Output optionOptimizeFor&#xA;&#x9;Session.Output protobufPackage&#xA;&#x9;' Get SchemaComposer&#xA;&#x9;Set schema = Repository.SchemaComposer&#xA;&#x9;' Get Schema Types Enumerator&#xA;&#x9;Set xmlTypeEnum = schema.SchemaTypes&#xA;&#x9;' Get total number of types in schema&#xA;&#x9;Dim count ''As Integer&#xA;&#x9;count = xmlTypeEnum.GetCount()&#xA;&#x9;' Enumerate Types&#xA;&#x9;Dim UMLProtoDict ''As Object&#xA;&#x9;Set UMLProtoDict = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;UMLProtoDict.Add &quot;boolean&quot;, &quot;bool&quot;&#xA;&#x9;UMLProtoDict.Add &quot;int&quot;, &quot;sint32&quot;&#xA;&#x9;UMLProtoDict.Add &quot;string&quot;, &quot;string&quot;&#xA;&#x9;UMLProtoDict.Add &quot;float&quot;, &quot;float&quot;&#xA;&#x9;UMLProtoDict.Add &quot;long&quot;, &quot;sint64&quot;&#xA;&#x9;UMLProtoDict.Add &quot;byte&quot;, &quot;bytes&quot;&#xA;&#x9;UMLProtoDict.Add &quot;double&quot;, &quot;double&quot;&#xA;&#x9;Set xmlType = xmlTypeEnum.GetFirst()&#xA;&#x9;While Not (xmlType Is Nothing)&#xA;&#x9;&#x9;' Print Class note&#xA;&#x9;&#x9;'Session.Output( &quot;// &quot; + xmlType. + &quot; {&quot;);&#xA;&#x9;&#x9;Session.Output &quot;Message &quot; &amp; xmlType.TypeName &amp; &quot; {&quot;&#xA;&#x9;&#x9;Set xmlPropEnum = xmlType.Properties&#xA;&#x9;&#x9;Dim number ''As Integer&#xA;&#x9;&#x9;number = 0&#xA;&#x9;&#x9;If Not (xmlPropEnum Is Nothing) Then&#xA;&#x9;&#x9;&#x9;Set xmlProp = xmlPropEnum.GetFirst()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;While Not (xmlProp Is Nothing)&#xA;&#x9;&#x9;&#x9;&#x9;number = number + 1&#xA;&#x9;&#x9;&#x9;&#x9;Dim sPropDesc  '' As String&#xA;&#x9;&#x9;&#x9;&#x9;sPropDesc = xmlProp.Name&#xA;&#x9;&#x9;&#x9;&#x9;sPropDesc = sPropDesc &amp; &quot; =&quot; &amp; number&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;' checks if attribute is optional&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;If xmlProp.IsPrimitive() Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc = UMLProtoDict.Item(xmlProp.PrimitiveType) &amp; &quot; &quot; &amp; sPropDesc&#xA;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'seems to be triggered on attrib type being a uml object instance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc = xmlProp.TypeName.charAt(0).toUpperCase() + xmlProp.TypeName.substring(1) + &quot; &quot; + sPropDesc;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;If xmlProp.Cardinality = &quot;0..1&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc = &quot;optional &quot; &amp; sPropDesc&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;If xmlProp.InitialValue.length&gt;0 Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc = sPropDesc &amp; &quot; [default = &quot; &amp; xmlProp.InitialValue &amp; &quot;]&quot;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;If xmlProp.IsByReference() Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc = sPropDesc &amp; &quot; (by reference) &quot;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;If xmlProp.IsInline() Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sPropDesc = sPropDesc &amp; &quot; (inline) &quot;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Dim comment ''As String&#xA;&#x9;&#x9;&#x9;&#x9;comment = xmlProp.Annotation.replace(/(\r\n|\n|\r)/gm, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot; &quot; &amp; sPropDesc &amp; &quot;;   // &quot; &amp; comment&#xA;&#x9;&#x9;&#x9;&#x9;Set xmlChoiceEnum = xmlProp.Choices&#xA;&#x9;&#x9;&#x9;&#x9;If xmlChoiceEnum.GetCount()&gt;0 Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set xmlChoice = xmlChoiceEnum.GetFirst()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot; ENUM: &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;While Not (xmlChoice Is Nothing)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot; &quot; &amp; xmlChoice.TypeName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Set xmlChoice = xmlChoiceEnum.GetNext()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Wend&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;Set xmlProp = xmlPropEnum.GetNext()&#xA;&#x9;&#x9;&#x9;Wend&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;Set xmlType = xmlTypeEnum.GetNext()&#xA;&#x9;&#x9;' close tag&#xA;&#x9;&#x9;Session.Output &quot;}&quot;&#xA;&#x9;Wend&#xA;&#x9;'TODO: change from VB to JS&#xA;&#x9;set scriptFile = New TextFile&#xA;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;''save the script&#xA;&#x9;scriptFile.FullPath = Path &amp; SourceStereotype&amp; &quot;_&quot; &amp; connectortype  &amp; &quot;_&quot; &amp; TargetStereotype &amp; &quot;.sql&quot;&#xA;&#x9;scriptFile.Save&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="489"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6711E440-128E-4411-A6B0-EDD50E29FED1}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA - Create IIC Dependencies Dia&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a component IIC diagram with ABE and processes&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;Component&quot;, true ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Independent Component&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 400&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;level1.elementProfiles.Add &quot;Function&quot;, elementProfileFunc&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ABE;Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 70&#xA;&#x9;level2.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 25&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillColor = colorWhite&#xA;&#x9;level2.objectstyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectstyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;dim elementProfileFunc&#xA;&#x9;set elementProfileFunc = new ElementProfile&#xA;&#x9;&#xA;&#x9;dim relationProfileFunc &#xA;&#x9;set relationProfileFunc = new RelationProfile&#xA;&#x9;relationProfileFunc.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;elementProfileFunc.relationProfiles.Add &quot;NestedFunc&quot;, relationProfileFunc&#xA;&#x9;elementProfileFunc.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;dim relationProfileAggFunc &#xA;&#x9;set relationProfileAggFunc = new RelationProfile&#xA;&#x9;relationProfileAggFunc.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;dim elementProfileAggFunc&#xA;&#x9;set elementProfileAggFunc = new ElementProfile&#xA;&#x9;elementProfileAggFunc.relationProfiles.Add &quot;NestedAggFunc&quot;, relationProfileAggFunc&#xA;&#x9;elementProfileAggFunc.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add &quot;Function&quot;, elementProfileFunc&#xA;&#x9;level2.elementProfiles.Add &quot;AggFunction&quot;, elementProfileAggFunc&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' begin level 3 definition NOT USED&#xA;&#x9;set level3 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level3.numobjects = 3&#xA;&#x9;level3.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level3.elementMetatype = &quot;Aggregated Function;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 70&#xA;&#x9;level3.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 25&#x9;&#xA;&#x9;level3.horizSpace = 10&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level3.objectstyle.fillColor = colorWhite&#xA;&#x9;level3.objectstyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectstyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile&#xA;&#x9;dim Level3FuncElementProfile &#xA;&#x9;set Level3FuncElementProfile = new ElementProfile&#xA;&#x9;Level3FuncElementProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile, aggregation relation profile&#xA;&#x9;dim Level3FuncRelationProfileAggr &#xA;&#x9;set Level3FuncRelationProfileAggr = new RelationProfile&#xA;&#x9;Level3FuncRelationProfileAggr.nestingType = &quot;Related&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relationType = &quot;Aggregation&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relatedStereotype = &quot;TMF_AF&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relatedType = &quot;Class&quot;&#xA;&#x9;Level3FuncElementProfile.relationProfiles.Add &quot;AggregatedRel&quot;, Level3FuncRelationProfileAggr&#xA;&#x9;' end level 3 function element profile, aggregation relation profile&#xA;&#x9;&#xA;&#x9;' end level 3 function element profile&#xA;&#x9;&#xA;&#x9;' begin level 3 Aggregated Function element profile&#xA;&#x9;dim Level3AggFuncElementProfile&#xA;&#x9;set Level3AggFuncElementProfile = new ElementProfile&#xA;&#x9;Level3AggFuncElementProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 3 aggregated function element profile, nested profile&#xA;&#x9;dim Level3NestRelationProfile &#xA;&#x9;set Level3NestRelationProfile = new RelationProfile&#xA;&#x9;Level3NestRelationProfile.nestingType = &quot;Nested&quot;&#xA;&#x9;Level3AggFuncElementProfile.relationProfiles.Add &quot;Nested&quot;, Level3NestRelationProfile&#xA;&#x9;' end level 3 aggregated function element profile, nested profile&#xA;&#x9;&#xA;&#x9;' end level 3 Aggregated Function element profile&#xA;&#x9;&#xA;&#x9;level3.elementProfiles.Add &quot;Function&quot;, Level3FuncElementProfile&#xA;&#x9;level3.elementProfiles.Add &quot;AggFunction&quot;, Level3AggFuncElementProfile&#xA;&#x9;&#xA;&#x9;''levellist.add 3, level3&#xA;&#x9;' end level 3&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Aggregated Function&quot;, false&#xA;&#x9;next&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="490"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EB464026-69FD-4931-B912-1DCD70389045}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen Doc - Component&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose: generate a word Document. WIP&#xA;' Date:&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected connector/objects&#xA;&#x9;&#x9;dim selectedConnector as EA.Connector&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedConnector = currentDiagram.SelectedConnector&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#xA;&#x9;&#x9;if not selectedConnector is nothing then&#xA;&#x9;&#x9;&#x9;' A connector is selected&#xA;&#x9;&#x9;elseif selectedObjects.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="491"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4D619ED1-2FB1-48b9-A1D8-3414994D882E}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Create IIC element&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreatecheckElement Not ready&#xA;' Version : 4.1&#xA;' Author: Giu &#xA;' Purpose: This method creates a Implementation Independent Component (IIC) from a package, and connect the new ISC with the using a Realization. &#xA;' in the project browser, right click on a package containing IIC, &#xA;&#xA;' Date: 15-Oct-2022&#xA;' Project Browser Script main function&#xA;'&#xA;Dim CheckElementCount, createdChecks&#xA;CheckElementCount = 12&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;CreateCheckElements basePackageElement, CheckElementCount&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The ISC class created for the ISC element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if createdChecks &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;Check  created for &quot; &amp;  createdChecks &amp; &quot; Artifacts.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;IIC can ONLY be created for elements of type Artifacts .&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;Sub CreateCheckElements(basePackageElement, CheckElementCount)&#xA;&#x9;Dim i 'as Integer&#xA;&#x9;For i = 1 To CheckElementCount&#xA;&#x9;&#x9;Dim Check as EA.Element&#xA;&#x9;&#x9;set Check = basePackageElement.Elements.AddNew(i, &quot;Artifact&quot;)&#xA;&#x9;&#x9;' If you want to update the element after adding it&#xA;&#x9;&#x9;createdChecks = createdChecks +1&#xA;&#x9;&#x9;Check.Update()&#xA;&#x9;Next&#xA;&#x9;' Refresh the package to see the new elements&#xA;&#x9;basePackageElement.Elements.Refresh()&#xA;End Sub&#xA;&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim Check as EA.Element&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be dFeature. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;TMF_ISC&quot;)  then&#xA;&#x9;&#x9;'When the Use Case already exist for feature. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;TMF_IIC  already exist for ISC &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;_IIC&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot; &quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;TMF_IIC&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;TMF_IIC&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the ISC element if it has an IIC element with same name already&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name + &quot;_IIC&quot;&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;TMF_IIC&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="492"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3596660A-C35F-4839-AE1F-A8ED4E1ED30D}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - Create Candidate Relationship Diagram&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;!INC EAScriptLib.JavaScript-Database&#xA;/*&#xA; * Script Name: &#xA; * Author: &#xA; * Purpose: &#xA; * Date: &#xA; */&#xA; var repo as EA.Repository;&#xA;repo = Repository;&#xA;function main()&#xA;{&#xA;&#x9;&#xA;&#x9;var diagramPackage as EA.Package;&#xA;&#x9;diagramPackage = repo.GetPackageByGuid(&quot;{D5259ADD-8012-4f18-8735-F8DFA3EF2C57}&quot;);&#xA;&#x9;&#xA;&#x9;var xmlContent = repo.SQLQuery(&quot;SELECT SourceElement.Object_ID as 'source_guid', TargetElement.Object_ID AS 'target_guid', conn.Connector_ID AS 'conn_ID'  FROM t_object AS TargetElement     INNER JOIN  &#x9;t_connector AS conn ON conn.End_Object_ID = TargetElement.Object_ID    INNER JOIN  &#x9;t_object AS SourceElement ON conn.Start_Object_ID = SourceElement.Object_ID    Inner Join  &#x9;t_connectortag Assessed ON (conn.Connector_ID = Assessed.ElementID  and Assessed.Property='Assessed')   Inner Join  &#x9;t_connectortag confidence ON (conn.Connector_ID = confidence.ElementID  and confidence.Property='confidence')   &#x9; Inner Join  &#x9;t_connectortag TargetStereotype  &#x9;ON (conn.Connector_ID = TargetStereotype.ElementID  and TargetStereotype.Property='TargetStereotype')  &#x9;WHERE conn.Stereotype = 'TMF_CandidateRelationship'   order by SourceElement.ea_guid DESC&quot;)                                                 &#xA;&#x9;&#xA;&#x9;Session.Output(xmlContent)&#xA;&#x9;var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument&quot;);&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;var doc = xmlDOM.loadXML(xmlContent)&#xA;&#x9;&#xA;&#x9;Session.Output(doc)&#xA;&#x9;Session.Output(&quot;running&quot;)&#xA;&#x9;&#xA;&#x9;let elements = []&#xA;&#x9;&#xA;&#x9;// Get GUIDs of all elements&#xA;&#x9;let rowNodes = xmlDOM.documentElement.selectNodes(&quot;Dataset_0/Data/Row&quot;);&#xA;&#x9;&#xA;&#x9;for (let i = 0; i &lt; rowNodes.length; i++) {&#xA;&#x9;&#x9;let sourceGuid = rowNodes.item(i).childNodes.item(0).text;&#xA;&#x9;&#x9;let targetGuid = rowNodes.item(i).childNodes.item(1).text;&#xA;&#x9;&#x9;let relID = parseInt(rowNodes.item(i).childNodes.item(2).text);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (targetGuid !== null &amp;&amp; sourceGuid !== null) {&#xA;&#x9;&#x9;&#x9;elements.push([sourceGuid, targetGuid, relID]);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// entry: [diagram, index, visibleLinks, leftCount]&#xA;&#x9;var diagrams = [];&#xA;&#x9;&#x9;&#xA;&#x9;let diagramIndex = 0;&#xA;&#x9;&#xA;&#x9;let diagram = diagramPackage.Diagrams.AddNew(&quot;Relationship Diagram Group 0 Page 0&quot;, &quot;&quot;);&#xA;&#x9;&#xA;&#x9;diagramPackage.Update();&#xA;&#x9;diagram.Update();&#xA;&#x9;&#xA;&#x9;diagrams.push([[diagram], 0, [], 10]);&#xA;&#x9;&#x9;&#xA;&#x9;// loop element sets&#xA;&#x9;for (let i=0; i&lt;elements.length; i++) &#xA;&#x9;{&#xA;&#x9;&#x9;diagramIndex = 0;&#xA;&#x9;&#x9;let elementSet = elements[i];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// get the current diagram set&#xA;&#x9;&#x9;let diagramSet = getDiagram(diagramPackage, diagrams, diagramIndex);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// iterate down the diagram list until a diagram without either element is found&#xA;&#x9;&#x9;// pass the current element set and the last page&#xA;&#x9;&#x9;while (diagramContainsElements(elementSet, diagramSet[0][diagramSet[0].length-1]))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;diagramIndex += 1;&#xA;&#x9;&#x9;&#x9;diagramSet = getDiagram(diagramPackage, diagrams, diagramIndex);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// add the element set to the diagram set&#xA;&#x9;&#x9;addElementSetToDiagram(diagramSet, elementSet);&#xA;&#x9;}&#xA;&#x9;diagramPackage.Update()&#xA;&#x9;// iterate all diagram sets&#xA;&#x9;for (let i=0; i&lt;diagrams.length; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;// get the diagramPage list&#xA;&#x9;&#x9;let diagramPages = diagrams[i][0];&#xA;&#x9;&#x9;// iterate the diagram pages&#xA;&#x9;&#x9;for (let n=0; n&lt;diagramPages.length; n++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//get the diagram page&#xA;&#x9;&#x9;&#x9;let diagram = diagramPages[n];&#xA;&#x9;&#x9;&#x9;// get the visible links list&#xA;&#x9;&#x9;&#x9;let visibleLinks = diagrams[i][2];&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagram.Update()&#xA;&#x9;&#x9;&#x9;diagram.DiagramLinks.Refresh();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// iterate all diagram links on page&#xA;&#x9;&#x9;&#x9;for (let n = 0; n&lt;diagram.DiagramLinks.Count; n++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// get link n&#xA;&#x9;&#x9;&#x9;&#x9;let link = diagram.DiagramLinks.GetAt(n);&#xA;&#x9;&#x9;&#x9;&#x9;// check if link n is in the visibleLinks list&#xA;&#x9;&#x9;&#x9;&#x9;let index = visibleLinks.indexOf(link.ConnectorID);&#xA;&#x9;&#x9;&#x9;&#x9;// if link n is not in visibleLinks hide it&#xA;&#x9;&#x9;&#x9;&#x9;if (index == -1)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;link.IsHidden = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;link.Update();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.DiagramLinks.Refresh()&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;// otherwise remove it from the list&#xA;&#x9;&#x9;&#x9;&#x9;//else&#xA;&#x9;&#x9;&#x9;&#x9;//{&#xA;&#x9;&#x9;&#x9;&#x9;//&#x9;visibleLinks.splice(index, 1);&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;// update the diagram&#xA;&#x9;&#x9;&#x9;diagram.Update();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;// add a set of elements to a diagram set. the element set contains source and target element guids,&#xA;// the diagram set has the current index of the diagram and the diagram object. &#xA;function addElementSetToDiagram(diagramSet, elementSet){&#xA;&#x9;// get last diagram page&#xA;&#x9;let diagram = diagramSet[0][diagramSet[0].length-1];&#xA;&#x9;// get current index&#xA;&#x9;let index = diagramSet[1];&#xA;&#x9;// get the left starting point&#xA;&#x9;let leftSide = diagramSet[3];&#xA;&#x9;// add the rel ID to the visible rels&#xA;&#x9;diagramSet[2].push(elementSet[2]);&#xA;&#x9;&#xA;&#x9;// add the source element to the diagram&#xA;&#x9;// var sourceDiagramObj as EA.DiagramObject;&#xA;&#x9;let dimensions = calculateElemVals(90, 70, index, leftSide, 100, 130, 4);&#xA;&#x9;let top = dimensions[0];&#xA;&#x9;let bottom = dimensions[1];&#xA;&#x9;let left = dimensions[2];&#xA;&#x9;let right = dimensions[3];&#xA;&#x9;let sourceElem = addElementToDiagram(diagram, elementSet[0], top, bottom, left, right);&#xA;&#x9;&#xA;&#x9;// add the target element to the diagram&#xA;&#x9;dimensions = calculateElemVals(90, 70, index+1, dimensions[3], 100, 130, 4);&#xA;&#x9;top = dimensions[0];&#xA;&#x9;bottom = dimensions[1];&#xA;&#x9;// add 5 pixels per character in relationship name between related elements&#xA;&#x9;let link = repo.GetConnectorByID(elementSet[2])&#xA;&#x9;let linkName = link.Name&#xA;&#x9;left = dimensions[2] + (linkName.length*3);&#xA;&#x9;diagramSet[3] = dimensions[2] + (linkName.length*3);&#xA;&#x9;right = dimensions[3] + (linkName.length*3);&#xA;&#x9;let targetElem = addElementToDiagram(diagram, elementSet[1], top, bottom, left, right);&#xA;&#x9;let newLink = diagram.DiagramLinks.AddNew(&quot;&quot;, &quot;&quot;)&#xA;&#x9;newLink.ConnectorID = link.ConnectorID;&#xA;&#x9;newLink.Update()&#xA;&#x9;Session.Output(diagram.DiagramLinks.GetLastError())&#xA;&#xA;&#x9;// update both diagrams&#xA;&#x9;let sourceElemUpdated = sourceElem.Update();&#xA;&#x9;let targetElemUpdated = targetElem.Update();&#xA;&#x9;let linkUpdated = link.Update();&#xA;&#x9;diagram.DiagramLinks.Refresh()&#xA;&#x9;let diagramUpdated = diagram.Update();&#xA;&#x9;&#xA;&#x9;// update the diagram index&#xA;&#x9;diagramSet[1] += 2;&#xA;}&#xA;&#xA;// check if the diagram contains the given element&#xA;function diagramContainsElements(elements, diagram)&#xA;{&#xA;&#x9;diagram.DiagramObjects.Refresh();&#xA;&#x9;for (let i=0; i&lt;diagram.DiagramObjects.Count; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;for (let n=0; n&lt;elements.length; n++){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (diagram.DiagramObjects.GetAt(i).ElementID == elements[n]){&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return false;&#xA;}&#xA;&#xA;function getDiagram(diagramPackage, diagrams, index)&#xA;{&#xA;&#x9;//var diagrams as Array&#xA;&#x9;// check if the diagrams list is long enough&#xA;&#x9;// if it isn't long enough create a new diagram&#xA;&#x9;if (diagrams.length-1&lt;index){&#xA;&#x9;&#x9;var diagram as EA.Diagram;&#xA;&#x9;&#x9;diagram = diagramPackage.Diagrams.AddNew(&quot;Relationship Diagram Group &quot;+index+&quot; Page 0&quot;, &quot;Class&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramPackage.Update();&#xA;&#x9;&#x9;diagram.Update();&#xA;&#x9;&#x9;// make a diagram set with a single page, a 0 index, no visible relations and a left starting point of 10&#xA;&#x9;&#x9;diagrams.push([[diagram], 0, [], 10]);&#xA;&#x9;}&#xA;&#x9;// access the diagram set at the specified index&#xA;&#x9;let diagramSet = diagrams[index];&#xA;&#x9;// if the diagram set index is greater than 14 add another page&#xA;&#x9;if (diagramSet[1] &gt; 10){&#xA;&#x9;&#x9;var diagram as EA.Diagram;&#xA;&#x9;&#x9;diagram = diagramPackage.Diagrams.AddNew(&quot;Relationship Diagram Group &quot;+index+&quot; Page &quot;+diagramSet[0].length, &quot;Class&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramPackage.Update();&#xA;&#x9;&#x9;diagram.Update();&#xA;&#x9;&#x9;// push new page&#xA;&#x9;&#x9;diagramSet[0].push(diagram);&#xA;&#x9;&#x9;// set the index to 0&#xA;&#x9;&#x9;diagramSet[1] = 0;&#xA;&#x9;&#x9;// set the left starting point to 10&#xA;&#x9;&#x9;diagramSet[3] = 10;&#xA;&#x9;};&#xA;&#x9;return diagrams[index];&#xA;}&#xA;&#xA;function calculateElemVals(width, height, index, prevLeft, verticalSpace, horizontalSpace, elementsPerRow)&#xA;{&#xA;&#x9;let topVal = (((index-(index%elementsPerRow))/elementsPerRow)*(-verticalSpace))-10;&#xA;&#x9;let bottomVal = topVal-height;&#xA;&#x9;let leftVal = 10;&#xA;&#x9;if (index%elementsPerRow != 0){&#xA;&#x9;&#x9;leftVal = prevLeft+horizontalSpace;&#xA;&#x9;}&#xA;&#x9;let rightVal = leftVal+width;&#xA;&#x9;return [topVal, bottomVal, leftVal, rightVal];&#xA;}&#xA;&#xA;function addElementToDiagram(diagram, elementID, top, bottom, left, right)&#xA;{&#xA;&#x9;// var diagramObj as EA.DiagramObject&#xA;&#x9;diagram.DiagramObjects.Refresh();&#xA;&#x9;let diagramObj = diagram.DiagramObjects.AddNew(elementID, &quot;Class&quot;);&#xA;&#x9;diagramObj.ElementID = elementID;&#xA;&#x9;diagramObj.top = top;&#xA;&#x9;diagramObj.bottom = bottom;&#xA;&#x9;diagramObj.left = left;&#xA;&#x9;diagramObj.right = right;&#xA;&#x9;let diagramObjUpdated = diagramObj.Update();&#xA;&#x9;return diagramObj;&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="493"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C7C5E180-A69B-491a-A2C5-092253AE18A5}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Create IIC Sequence Diagrams&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA;  &#xA; * &#xA; * Script Name: ODA -Create IIC Sequence Diagrams &#xA; * Author:&#xA; * Purpose: Not ready. Create empty sequence diagrams to document a ODa component .Not ready&#xA; * Date:&#xA; */&#xA;&#xA;/*&#xA; * Project Browser Script main function&#xA; */&#xA;function OnProjectBrowserScript()&#xA;{&#xA;&#x9;// Get the type of element selected in the Project Browser&#xA;&#x9;var treeSelectedType = Repository.GetTreeSelectedItemType();&#xA;&#x9;&#xA;&#x9;// Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;// NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;// selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;switch ( treeSelectedType )&#xA;&#x9;{&#xA;&#x9;&#x9;case otElement :&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Code for when an element is selected&#xA;&#x9;&#x9;&#x9;var theElement as EA.Element;&#xA;&#x9;&#x9;&#x9;theElement = Repository.GetTreeSelectedObject();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (theElement.Stereotype != 'TMF_IIC'){&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for (int i=0; i&lt;theElement.Elements.Count; i++){&#xA;&#x9;&#x9;&#x9;&#x9;var currElem as EA.Element;&#xA;&#x9;&#x9;&#x9;&#x9;currElem = theElement.Elements.GetAt(i);&#xA;&#x9;&#x9;&#x9;&#x9;if (currElem.Stereotype = '')&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt( &quot;This script does not support items of this type.&quot;, promptOK );&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;OnProjectBrowserScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="494"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0A1A3919-A9AD-4554-850C-3C0AE545D4AB}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Relationship Manager - General Scripts&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * Script Name: &#xA; * Author: &#xA; * Purpose: &#xA; * Date: &#xA; */&#xA; &#xA;function approveRelationship(candidateRelationship)&#xA;{&#xA;&#x9;candidateRelationship.StereotypeEx = &quot;TMF::&quot;+candidateRelationship.TaggedValues.GetAt(2).Value;&#xA;&#x9;Session.Output(&quot;set rel stereo to &quot;+candidateRelationship.StereotypeEx);&#xA;&#x9;candidateRelationship.Type = candidateRelationship.TaggedValues.GetAt(3).Value;&#xA;&#x9;Session.Output(&quot;set rel type to &quot;+candidateRelationship.Type);&#xA;&#x9;//selection.ObjectType = selection.TaggedValues.GetAt(3).Value;&#xA;&#x9;Session.Output(&quot;rel update success &quot;+candidateRelationship.Update());&#xA;&#x9;var client = Repository.GetElementByID(candidateRelationship.ClientID);&#xA;&#x9;Session.Output(&quot;client update success &quot;+client.Update());&#xA;&#x9;var supplier = Repository.GetElementByID(candidateRelationship.SupplierID);&#xA;&#x9;Session.Output(&quot;supplier update success &quot;+supplier.Update());&#xA;&#x9;supplier.Connectors.Refresh();&#xA;&#x9;client.Connectors.Refresh();&#xA;}&#xA;&#xA;function rejectRelationship(candidateRelationship)&#xA;{&#xA;&#x9;var client = Repository.GetElementByID(candidateRelationship.ClientID)&#xA;&#x9;for (n=0; n&lt;client.Connectors.Count; n++){&#xA;&#x9;&#x9;if (client.Connectors.GetAt(n).Name == selection.Name){&#xA;&#x9;&#x9;&#x9;client.Connectors.Delete(n)&#xA;&#x9;&#x9;&#x9;client.Update()&#xA;&#x9;&#x9;&#x9;client.Connectors.Refresh()&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="495"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AAE15E5F-DE0B-4ba5-8F24-0643FD62F2C1}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA - Extract Messages From IIC&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;/*&#xA; * Script Name: ODA - Extract Messages From IIC&#xA; * Author: Natha&#xA; * Purpose: WIP, this script will extract all the messages from a ISC and create the sequence diagram automatically. WIP&#xA; * Date: &#xA; */&#xA; &#xA; var Repository as EA.Repository;&#xA; &#xA;function main(elementID, DiagramType)&#xA;{&#xA;&#x9;var IIC as EA.Element;&#xA;&#x9;IIC = Repository.GetElementByID(elementID);&#xA;&#x9;&#xA;&#x9;var ISC as EA.Element;&#xA;&#x9;ISC = getISCFromIIC(IIC);&#xA;&#x9;&#xA;&#x9;var diagrams as EA.Collection;&#xA;&#x9;diagrams = ISC.Diagrams;&#xA;&#x9;&#xA;&#x9;var xmlOutput = '&lt;messages&gt;';&#xA;&#x9;&#xA;&#x9;for (o=0; o&lt;diagrams.Count; o++)&#xA;&#x9;{&#xA;&#x9;&#x9;var diagram as EA.Diagram;&#xA;&#x9;&#x9;diagram = diagrams.GetAt(o);&#xA;&#x9;&#x9;xmlOutput+=getMessageNamesFromDiagram(diagram, xmlOutput);&#xA;&#x9;}&#xA;&#x9;xmlOutput+='&lt;/messages&gt;'&#xA;&#x9;Session.Output(xmlOutput)&#xA;&#x9;&#xA;&#x9;&#xA;}&#xA;&#xA;function getMessageNamesFromDiagram(diagram){&#xA;&#x9;var xmlContent = &quot;&quot;;&#xA;&#x9;&#xA;&#x9;for (l=0; l&lt;diagram.DiagramLinks.Count; l++){&#xA;&#x9;&#x9;var link as EA.DiagramLink;&#xA;&#x9;&#x9;link = diagram.DiagramLinks.GetAt(l);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var connector as EA.Connector;&#xA;&#x9;&#x9;connector = Repository.GetConnectorByID(link.ConnectorID);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (connector.Type == 'Sequence'){&#xA;&#x9;&#x9;&#x9;xmlContent+=&quot;&lt;message&gt;&quot;+connector.Name+&quot;&lt;/message&gt;&quot;&#xA;&#x9;&#x9;&#x9;Session.Output(connector.Name);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#x9;return xmlContent;&#xA;&#x9;&#xA;}&#xA;&#xA;function formatMessageName(name){&#xA;&#x9;name = name.split(&quot;()&quot;)[0]&#xA;&#x9;return name.split(&quot;(?&lt;!(^|[A-Z]))(?=[A-Z])|(?&lt;!^)(?=[A-Z][a-z])&quot;)&#xA;}&#xA;&#xA;function getISCFromIIC(IIC){&#xA;&#x9;for (n=0; n&lt;IIC.Elements.Count; n++){&#xA;&#x9;&#x9;var child as EA.Element;&#xA;&#x9;&#x9;child = IIC.Elements.GetAt(n);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (child.Stereotype == 'TMF_ISC'){&#xA;&#x9;&#x9;&#x9;return child;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;main('{D21E1D3F-8094-4f13-A3F7-BC080585E00D}');"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="496"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{757B0A60-137B-40da-AC3C-8B6D4C379733}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Extract Messages From IIC&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-XML&#xA;&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose: Print a table with all the messages between a ISC and API for doc generators&#xA;' Date:&#xA;&#xA;Function GenerateMessages(elementGuid, diagramType)&#xA;&#x9;dim IIC&#xA;    'set IIC = Repository.GetElementByGuid(elementGuid)&#xA;&#x9;set IIC = Repository.GetElementByID(elementGuid)&#xA;    'Dim ISC&#xA;    'Set ISC = GetISCFromIIC(IIC)&#xA;&#xA;    Dim diagrams&#xA;    Set diagrams = IIC.Diagrams&#xA;&#xA;    Dim xmlOutput&#xA;    xmlOutput = &quot;&lt;EADATA&gt;&lt;Dataset_0&gt;&lt;Data&gt;&quot;&#xA;&#xA;    Dim o&#xA;    For o = 0 To diagrams.Count - 1&#xA;        Dim diagram as EA.Diagram&#xA;        Set diagram = diagrams.GetAt(o)&#xA;&#x9;&#x9;If diagram.MetaType = diagramType Then&#xA;&#x9;&#x9;&#x9;xmlOutput = xmlOutput &amp; GetMessageNamesFromDiagram(diagram)&#xA;&#x9;&#x9;End If&#xA;    Next&#xA;    xmlOutput = xmlOutput &amp; &quot;&lt;/Data&gt;&lt;/Dataset_0&gt;&lt;/EADATA&gt;&quot;&#xA;    Session.Output xmlOutput&#xA;&#x9;GenerateMessages = xmlOutput&#xA;End Function&#xA;&#xA;Function GetMessageNamesFromDiagram(diagram)&#xA;    Dim xmlContent&#xA;    xmlContent = &quot;&quot;&#xA;&#xA;    Dim l&#xA;    For l = 0 To diagram.DiagramLinks.Count - 1&#xA;        Dim link&#xA;        Set link = diagram.DiagramLinks.GetAt(l)&#xA;&#xA;        Dim connector as EA.Connector&#xA;        Set connector = Repository.GetConnectorByID(link.ConnectorID)&#xA;&#xA;        If connector.Type = &quot;Sequence&quot; Then&#xA;'            xmlContent = xmlContent &amp; &quot;&lt;Row&quot;&amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; OperationName = &quot;&quot;&quot; &amp; ConvertToCamelCase(connector.Name) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ResourceName = &quot;&quot;&quot; &amp; GetReturnVal(connector.TransitionGuard) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; APIName = &quot;&quot;&quot; &amp; Repository.GetElementByID(connector.SupplierID).Name &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&gt;&lt;/Row&gt;&quot;&#xA;            xmlContent = xmlContent &amp; &quot;&lt;Row&gt;&quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;OperationName&gt;&quot; &amp; ConvertToCamelCase(connector.Name) &amp; &quot;&lt;/OperationName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;APIName&gt;&quot; &amp; Repository.GetElementByID(connector.SupplierID).Name &amp; &quot;&lt;/APIName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/Row&gt;&quot;&#xA;        End If&#xA;    Next&#xA;&#xA;    GetMessageNamesFromDiagram = xmlContent&#xA;End Function&#xA;&#xA;Function GetISCFromIIC(IIC)&#xA;    Dim n&#xA;    For n = 0 To IIC.Elements.Count - 1&#xA;        Dim child&#xA;        Set child = IIC.Elements.GetAt(n)&#xA;&#xA;        If child.Stereotype = &quot;TMF_ISC&quot; Then&#xA;            Set GetISCFromIIC = child&#xA;            Exit Function&#xA;        End If&#xA;    Next&#xA;    Set GetISCFromIIC = Nothing&#xA;End Function&#xA;&#xA;Function GetReturnVal(inputString)&#xA;&#x9;Dim result&#xA;&#x9;Dim parts&#xA;&#x9;parts = Split(Split(inputString, &quot;;&quot;)(0), &quot;=&quot;)&#xA;&#x9;if UBound(parts) + 1 &gt;1 then&#xA;&#x9;    if parts(0) = &quot;retval&quot; then&#xA;&#x9;&#x9;&#x9;GetReturnVal = parts(1)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;GetReturnVal = &quot;&quot;&#xA;&#x9;&#x9;End if&#xA;&#x9;Else&#xA;&#x9;&#x9;GetReturnVal = &quot;&quot;&#xA;&#x9;END IF&#xA;End Function&#xA;&#xA;Function ConvertToCamelCase(inputString)&#xA;    Dim parts&#xA;    Dim i&#xA;    Dim result&#xA;&#xA;    ' Split the input string by &quot;(&quot; to get the first part (the camel case name).&#xA;    parts = Split(inputString, &quot;(&quot;)&#xA;&#x9;if UBound(parts) + 1 &gt;0 then&#xA;&#x9;&#x9;ConvertToCamelCase = parts(0)&#xA;&#x9;Else&#xA;&#x9;&#x9;ConvertToCamelCase = &quot;&quot;&#xA;&#x9;END IF&#xA;    &#xA;End Function&#xA;&#xA;Function Main(elementGuid)&#xA;&#x9;Session.Output &quot;Processing Some Object id&quot;&#xA;&#x9;dim returnVal&#xA;    returnVal = GenerateMessages(elementGuid, &quot;Component::Components - Events Published&quot;)&#xA;&#x9;Main = returnVal&#xA;END Function&#xA;&#xA;'Main 50690"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="497"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D03FBA9A-A3AC-45c3-AB49-88B0BBC630A0}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA - Extract Messages From IIC (Required APIs)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-XML&#xA;&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;&#xA;Function GenerateMessages(elementGuid, diagramType)&#xA;&#x9;dim IIC&#xA;    'set IIC = Repository.GetElementByGuid(elementGuid)&#xA;&#x9;set IIC = Repository.GetElementByID(elementGuid)&#xA;    'Dim ISC&#xA;    'Set ISC = GetISCFromIIC(IIC)&#xA;&#xA;    Dim diagrams&#xA;    Set diagrams = IIC.Diagrams&#xA;&#xA;    Dim xmlOutput&#xA;    xmlOutput = &quot;&lt;EADATA&gt;&lt;Dataset_0&gt;&lt;Data&gt;&quot;&#xA;&#xA;    Dim o&#xA;    For o = 0 To diagrams.Count - 1&#xA;        Dim diagram as EA.Diagram&#xA;        Set diagram = diagrams.GetAt(o)&#xA;&#x9;&#x9;If diagram.MetaType = diagramType Then&#xA;&#x9;&#x9;&#x9;xmlOutput = xmlOutput &amp; GetMessageNamesFromDiagram(diagram)&#xA;&#x9;&#x9;End If&#xA;    Next&#xA;    xmlOutput = xmlOutput &amp; &quot;&lt;/Data&gt;&lt;/Dataset_0&gt;&lt;/EADATA&gt;&quot;&#xA;    Session.Output xmlOutput&#xA;&#x9;GenerateMessages = xmlOutput&#xA;End Function&#xA;&#xA;Function GetMessageNamesFromDiagram(diagram)&#xA;    Dim xmlContent&#xA;    xmlContent = &quot;&quot;&#xA;&#xA;    Dim l&#xA;    For l = 0 To diagram.DiagramLinks.Count - 1&#xA;        Dim link&#xA;        Set link = diagram.DiagramLinks.GetAt(l)&#xA;&#xA;        Dim connector as EA.Connector&#xA;        Set connector = Repository.GetConnectorByID(link.ConnectorID)&#xA;&#xA;        If connector.Type = &quot;Sequence&quot; Then&#xA;'            xmlContent = xmlContent &amp; &quot;&lt;Row&quot;&amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; OperationName = &quot;&quot;&quot; &amp; ConvertToCamelCase(connector.Name) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ResourceName = &quot;&quot;&quot; &amp; GetReturnVal(connector.TransitionGuard) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; APIName = &quot;&quot;&quot; &amp; Repository.GetElementByID(connector.SupplierID).Name &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&gt;&lt;/Row&gt;&quot;&#xA;            xmlContent = xmlContent &amp; &quot;&lt;Row&gt;&quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;OperationName&gt;&quot; &amp; ConvertToCamelCase(connector.Name) &amp; &quot;&lt;/OperationName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;ResourceName&gt;&quot; &amp; GetReturnVal(connector.TransitionGuard) &amp; &quot;&lt;/ResourceName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;APIName&gt;&quot; &amp; Repository.GetElementByID(connector.SupplierID).Name &amp; &quot;&lt;/APIName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/Row&gt;&quot;&#xA;        End If&#xA;    Next&#xA;&#xA;    GetMessageNamesFromDiagram = xmlContent&#xA;End Function&#xA;&#xA;Function GetISCFromIIC(IIC)&#xA;    Dim n&#xA;    For n = 0 To IIC.Elements.Count - 1&#xA;        Dim child&#xA;        Set child = IIC.Elements.GetAt(n)&#xA;&#xA;        If child.Stereotype = &quot;TMF_ISC&quot; Then&#xA;            Set GetISCFromIIC = child&#xA;            Exit Function&#xA;        End If&#xA;    Next&#xA;    Set GetISCFromIIC = Nothing&#xA;End Function&#xA;&#xA;Function GetReturnVal(inputString)&#xA;&#x9;Dim result&#xA;&#x9;Dim parts&#xA;&#x9;parts = Split(Split(inputString, &quot;;&quot;)(0), &quot;=&quot;)&#xA;&#x9;if UBound(parts) + 1 &gt;1 then&#xA;&#x9;    if parts(0) = &quot;retval&quot; then&#xA;&#x9;&#x9;&#x9;GetReturnVal = parts(1)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;GetReturnVal = &quot;&quot;&#xA;&#x9;&#x9;End if&#xA;&#x9;Else&#xA;&#x9;&#x9;GetReturnVal = &quot;&quot;&#xA;&#x9;END IF&#xA;End Function&#xA;&#xA;Function ConvertToCamelCase(inputString)&#xA;    Dim parts&#xA;    Dim i&#xA;    Dim result&#xA;&#xA;    ' Split the input string by &quot;(&quot; to get the first part (the camel case name).&#xA;    parts = Split(inputString, &quot;(&quot;)&#xA;&#x9;if UBound(parts) + 1 &gt;0 then&#xA;&#x9;&#x9;ConvertToCamelCase = parts(0)&#xA;&#x9;Else&#xA;&#x9;&#x9;ConvertToCamelCase = &quot;&quot;&#xA;&#x9;END IF&#xA;    &#xA;End Function&#xA;&#xA;Function Main(elementGuid)&#xA;&#x9;Session.Output &quot;Processing Some Object id&quot;&#xA;&#x9;dim returnVal&#xA;    returnVal = GenerateMessages(elementGuid, &quot;Component::Components - Required API&quot;)&#xA;&#x9;Main = returnVal&#xA;END Function&#xA;&#xA;'Main 50690"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="498"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FDE23A00-9B5E-40a5-BB7B-583965DD5168}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA - Messages Subscribed Events&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-XML&#xA;&#xA;' Script Name: ODA - Messages Subscribed Events&#xA;' Author: Natha&#xA;' Purpose: returns a series of Events Subscribed for document generation&#xA;' Date:&#xA;&#xA;Function GenerateMessages(elementGuid, diagramType)&#xA;&#x9;dim IIC&#xA;    'set IIC = Repository.GetElementByGuid(elementGuid)&#xA;&#x9;set IIC = Repository.GetElementByID(elementGuid)&#xA;    'Dim ISC&#xA;    'Set ISC = GetISCFromIIC(IIC)&#xA;&#xA;    Dim diagrams&#xA;    Set diagrams = IIC.Diagrams&#xA;&#xA;    Dim xmlOutput&#xA;    xmlOutput = &quot;&lt;EADATA&gt;&lt;Dataset_0&gt;&lt;Data&gt;&quot;&#xA;&#xA;    Dim o&#xA;    For o = 0 To diagrams.Count - 1&#xA;        Dim diagram as EA.Diagram&#xA;        Set diagram = diagrams.GetAt(o)&#xA;&#x9;&#x9;If diagram.MetaType = diagramType Then&#xA;&#x9;&#x9;&#x9;xmlOutput = xmlOutput &amp; GetMessageNamesFromDiagram(diagram)&#xA;&#x9;&#x9;End If&#xA;    Next&#xA;    xmlOutput = xmlOutput &amp; &quot;&lt;/Data&gt;&lt;/Dataset_0&gt;&lt;/EADATA&gt;&quot;&#xA;    Session.Output xmlOutput&#xA;&#x9;GenerateMessages = xmlOutput&#xA;End Function&#xA;&#xA;Function GetMessageNamesFromDiagram(diagram)&#xA;    Dim xmlContent&#xA;    xmlContent = &quot;&quot;&#xA;&#xA;    Dim l&#xA;    For l = 0 To diagram.DiagramLinks.Count - 1&#xA;        Dim link&#xA;        Set link = diagram.DiagramLinks.GetAt(l)&#xA;&#xA;        Dim connector as EA.Connector&#xA;        Set connector = Repository.GetConnectorByID(link.ConnectorID)&#xA;&#xA;        If connector.Type = &quot;Sequence&quot; Then&#xA;'            xmlContent = xmlContent &amp; &quot;&lt;Row&quot;&amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; OperationName = &quot;&quot;&quot; &amp; ConvertToCamelCase(connector.Name) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ResourceName = &quot;&quot;&quot; &amp; GetReturnVal(connector.TransitionGuard) &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; APIName = &quot;&quot;&quot; &amp; Repository.GetElementByID(connector.SupplierID).Name &amp; &quot;&quot;&quot;&quot; &amp;_&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&gt;&lt;/Row&gt;&quot;&#xA;            xmlContent = xmlContent &amp; &quot;&lt;Row&gt;&quot;&amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;OperationName&gt;&quot; &amp; ConvertToCamelCase(connector.Name) &amp; &quot;&lt;/OperationName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;APIName&gt;&quot; &amp; Repository.GetElementByID(connector.SupplierID).Name &amp; &quot;&lt;/APIName&gt;&quot; &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/Row&gt;&quot;&#xA;        End If&#xA;    Next&#xA;&#xA;    GetMessageNamesFromDiagram = xmlContent&#xA;End Function&#xA;&#xA;Function GetISCFromIIC(IIC)&#xA;    Dim n&#xA;    For n = 0 To IIC.Elements.Count - 1&#xA;        Dim child&#xA;        Set child = IIC.Elements.GetAt(n)&#xA;&#xA;        If child.Stereotype = &quot;TMF_ISC&quot; Then&#xA;            Set GetISCFromIIC = child&#xA;            Exit Function&#xA;        End If&#xA;    Next&#xA;    Set GetISCFromIIC = Nothing&#xA;End Function&#xA;&#xA;Function GetReturnVal(inputString)&#xA;&#x9;Dim result&#xA;&#x9;Dim parts&#xA;&#x9;parts = Split(Split(inputString, &quot;;&quot;)(0), &quot;=&quot;)&#xA;&#x9;if UBound(parts) + 1 &gt;1 then&#xA;&#x9;    if parts(0) = &quot;retval&quot; then&#xA;&#x9;&#x9;&#x9;GetReturnVal = parts(1)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;GetReturnVal = &quot;&quot;&#xA;&#x9;&#x9;End if&#xA;&#x9;Else&#xA;&#x9;&#x9;GetReturnVal = &quot;&quot;&#xA;&#x9;END IF&#xA;End Function&#xA;&#xA;Function ConvertToCamelCase(inputString)&#xA;    Dim parts&#xA;    Dim i&#xA;    Dim result&#xA;&#xA;    ' Split the input string by &quot;(&quot; to get the first part (the camel case name).&#xA;    parts = Split(inputString, &quot;(&quot;)&#xA;&#x9;if UBound(parts) + 1 &gt;0 then&#xA;&#x9;&#x9;ConvertToCamelCase = parts(0)&#xA;&#x9;Else&#xA;&#x9;&#x9;ConvertToCamelCase = &quot;&quot;&#xA;&#x9;END IF&#xA;    &#xA;End Function&#xA;&#xA;Function Main(elementGuid)&#xA;&#x9;Session.Output &quot;Processing Some Object id&quot;&#xA;&#x9;dim returnVal&#xA;    returnVal = GenerateMessages(elementGuid, &quot;Component::Components - Events Subscribed&quot;)&#xA;&#x9;Main = returnVal&#xA;END Function&#xA;&#xA;'Main 50690"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="499"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DCA065DD-769C-46cc-A618-08FA893182CE}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util - move element to correct package&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Model Management Utilities&#xA;!INC Utils.Util&#xA;'&#xA;' Script Name:  Util - move element to correct package&#xA;' Author: Giu&#xA;' Purpose: this script supports models that are aggregated by groups elements and on the same time , listed in packages with the same name of the grouping element.&#xA;' The script will move the element under a package with the same name of the grouping element.&#xA;' Date: 2023 12 06&#xA;'&#x9;&#xA;&#x9;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#x9;' configure this&#xA;&#x9;&#x9;GroupingStereotypeName = &quot;TMF_MetricGroup&quot;&#xA;&#x9; GroupingMetaTypeName = &quot;Metric Group&quot;&#xA;&#x9; StereotypeName = &quot;TMF_Metric&quot;&#xA;&#x9; MetaTypeName = &quot;Metric&quot;&#xA;&#x9; ' end of config&#xA;&#xA;&#x9;  Dim metricElement As EA.Element&#xA;&#x9;    Dim metricGroupElement As EA.Element&#xA;&#x9;&#x9;dim treeSelectedType&#xA;&#x9;&#x9; dim Masterpackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;&#x9; dim pkg &#x9;&#x9;&#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;&#x9; dim targetPackage as EA.Package&#xA;&#x9;&#x9; dim GroupingStereotypeName, StereotypeName&#xA;&#x9;&#x9; dim GroupingMetaTypeName, MetaTypeName&#xA;&#x9;&#x9; dim connector as EA.Connector&#xA;&#x9;&#x9; dim Query 'as string&#xA;&#x9;&#x9;  Dim result&#xA;&#x9;&#x9;Dim resultArray&#xA;&#x9;&#x9;&#x9;Dim sqlGetPackage&#xA;&#xA;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;set Masterpackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;' Iterate through all elements with the &quot;TMF_metric&quot; stereotype&#xA;&#x9;&#x9;'For Each metricElement In Repository.Models.GetElementsByQuery(&quot;SELECT * FROM t_object WHERE Stereotype='TMF_metric'&quot;)&#xA;&#x9;&#x9;&#x9;for each metricElement in Masterpackage.Elements&#xA;&#x9;&#x9;&#x9;    ' find those of a specific metatype and set the RefGUID of their associated package&#xA;&#x9;&#x9;&#x9;if metricElement.MetaType = MetaTypeName then&#xA;&#x9;&#x9;&#x9;&#x9;session.output(&quot;processing: &quot; &amp; metricElement.name)&#xA;&#x9;&#x9;&#x9;' Find the connected &quot;TMF_MetricGroup&quot; element via a &quot;TMF_MetricGroupMetric&quot; relationship&#xA;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;Set metricGroupElement = Nothing&#xA;&#x9;&#x9;&#x9;&#x9;For Each connector In metricElement.Connectors&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If connector.Stereotype = &quot;TMF_MetricGroupMetric&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Set metricGroupElement = Repository.GetElementByID(connector.SupplierID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9; ' Check if a valid &quot;TMF_MetricGroup&quot; element was found&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If Not metricGroupElement Is Nothing Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' Use a SQL query to find the target package with the same name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sqlGetPackage = &quot;SELECT o.Package_ID  FROM t_package as o WHERE o.Name = '&quot; &amp; metricGroupElement.Name &amp; &quot;'&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;session.output(&quot;executing query: &quot; &amp; sqlGetPackage)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Query = Repository.SQLQuery(sqlGetPackage)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;session.output(&quot;result of query: &quot; &amp; Query)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultArray = convertQueryResultToArray(Query)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; If Not IsEmpty(resultArray) Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' Get the first package ID from the result&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; for each result in resultArray&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;on error resume next  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;session.output(&quot;Get the corresponding package based on package ID: &quot; &amp; result)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set targetPackage = Repository.GetPackageByID(result)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'&#x9;&#x9; Move the &quot;TMF_metric&quot; element to the found package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If Not targetPackage Is Nothing Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;session.output(&quot;found package: &quot; &amp; targetPackage.name)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;metricElement.PackageID = targetPackage.PackageID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;metricElement.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next ' for each result in resultArray&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If ' is not empty&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If 'Not metricGroupElement Is Nothing Then&#xA;&#x9;&#x9;&#x9;&#x9;end if ' metricElement.MetaType = MetaTypeName&#xA;&#x9;&#x9;Next ' for each metricElement&#xA;&#x9;&#x9;session.output(&quot;done processing &quot; &amp; MetaTypeName  )&#xA;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script is looking for elements &quot; = MetaTypeName + &quot;in a package.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;end sub&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="500"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2D901197-5310-4af0-A419-E92800EE6513}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF - Create Composition extended&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Include&#xA;!INC Utils.Model Management Utilities&#xA;&#xA;&#xA;&#xA;' Script Name: Create FF Compositions extended WIP&#xA;' Author: Giu Platania&#xA;' Purpose: THis script will traverse a project tree and extract all the element with a certain stereotype&#xA;' It will then get the children of the current element and create a relationship between the owner and the child&#xA;' Date: 2023.12&#xA;' TODO: add check to avoid duplicate relationship&#xA;' TODO:&#xA;' retrieve element&#xA;' retrieve Tagged Value called RefGUID&#xA;' get corresponding package&#xA;' get all element in that package&#xA;&#xA;&#xA;Dim componentElementCount, componentControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;componentElementCount = 0&#xA;componentControllerClassCreated = 0&#xA; dim Stereo, connType, connStereotype &#xA; Stereo = &quot;TMF_Function&quot;&#xA;connType = &quot;Aggregation&quot;&#xA;connStereotype = &quot;TMF_AFGreggatesFunction&quot;&#xA;&#xA;'&#xA;&#xA;Function createRelationship(fromElement)&#x9;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = getChildElementList(fromElement,Stereo) &#xA;&#x9;&#xA;&#x9;for each childElement in fromElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = stereo then&#xA;&#x9;&#x9;&#x9;addConnector childElement, connType, connStereotype, fromElement&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;created relationship from &quot; + childElement.Name + &quot; to &quot; + fromElement.name )&#xA;&#x9;&#x9;&#x9;fromElement.Update&#xA;&#x9;&#x9;&#x9;childElement.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;end function&#xA; &#xA; function retrieveCorrespondingPackage(packagesubElement)&#xA;&#x9;dim refguid ' as string&#xA;&#x9;'dim retrieveCorrespondingPackage as EA.Package&#xA;&#x9;' retrieve Tagged Value called RefGUID&#xA;&#x9; refguid = packagesubElement.ElementGUID&#xA;&#x9; ' get Package with a tagged value&#xA;&#x9;set retrieveCorrespondingPackage = lookupElementTaggedValue(&quot;RefGUID&quot;, refguid,&quot;&quot;, &quot;package&quot;)&#xA;&#x9; ' get corresponding package&#xA;&#x9;'set retrieveCorrespondingPackag Repository.GetPackageByGuid(refguid)&#xA;&#x9;'Session.Output( &quot;found package &quot; + retrieveCorrespondingPackag.Name)&#xA;' get all element in that package&#xA; end function&#xA; &#xA; &#xA; &#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage ' this is a package containing elelemets 1-6&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element 'level 1&#xA;&#x9;&#x9;&#x9;dim subElement as EA.Element ''level 2&#xA;&#x9;&#x9;&#x9;dim subsubElement as EA.Element '' level 3&#xA;&#x9;&#x9;&#x9;dim subsubsubElement as EA.Element '' level 4&#xA;&#x9;&#x9;&#x9;dim subsubsubsubElement as EA.Element '' level 5&#xA;&#x9;&#x9;&#x9;dim subsubsubsubsubElement as EA.Element '' level 6&#xA;&#x9;&#x9;&#x9;dim CorrespondingPackage as EA.Package' the package with the GUID of the element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;package &quot; + basePackageElement.Name)&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;'''level 1&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;set CorrespondingPackage =&#x9;retrieveCorrespondingPackage(packagesubElement)&#xA;&#x9;&#x9;&#x9;&#x9;createRelationship(CorrespondingPackage)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;''level 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in packagesubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubsubElement in subsubsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end If '' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'element selected&#xA;&#x9;&#x9;&#x9;dim Element as EA.Element&#xA;&#x9;&#x9;&#x9;set packagesubElement = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;createRelationship(packagesubElement)&#xA;&#x9;&#x9;&#x9;componentElementCount =componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;''level 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in packagesubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubsubElement in subsubsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end If '' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if componentElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;relationship created for for&quot; &amp;  componentElementCount &amp; &quot; &quot; &amp; Stereo, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;relationship can ONLY be created for elements of type&quot; &amp; Stereo, promptOK&#x9;&#x9;&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA; OnProjectBrowserScript()"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="501"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{DE2C4E95-A021-4d14-8E8C-2094C760F564}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen Excel - API operations&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="Option Explicit&#xA;&#xA;' Create an Excel file that lists all TMF API and their operations in a package&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;&#xA;Sub OnProjectBrowserScript()&#xA;    Dim treeSelectedType&#xA;    Dim package As EA.Package&#xA;&#xA;    treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#xA;    Select Case treeSelectedType&#xA;        Case otPackage&#xA;            Set package = Repository.GetTreeSelectedPackage()&#xA;            If Not package Is Nothing Then&#xA;                ' Create Excel file and write header&#xA;                Dim excelOutput&#xA;                Set excelOutput = CreateObject(&quot;Excel.Application&quot;)&#xA;&#xA;                ' Create a new workbook&#xA;                Dim workbook&#xA;                Set workbook = excelOutput.Workbooks.Add&#xA;&#xA;                ' Create a new worksheet&#xA;                Dim worksheet&#xA;                Set worksheet = workbook.Worksheets(1)&#xA;&#x9;&#x9;&#x9;&#x9;worksheet.Name = package.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                ' Write header&#xA;                worksheet.Cells(1, 1).Value = &quot;Element Name&quot;&#xA;                worksheet.Cells(1, 2).Value = &quot;Element Type&quot;&#xA;                worksheet.Cells(1, 3).Value = &quot;Operation&quot;&#xA;&#x9;&#x9;&#x9;&#x9;worksheet.Cells(1, 4).Value = &quot;Parameters&quot;&#xA;&#x9;&#x9;&#x9;&#x9;worksheet.Cells(1, 5).Value = &quot;ReturnType&quot;&#xA;&#xA;                ' Start writing elements from the second row&#xA;                Dim currentRow&#xA;                currentRow = 2&#xA;&#xA;                ' Collect elements and their operations in the package&#xA;                CollectElementsInPackage package, worksheet, currentRow&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;workbook.Saveas getUserSelectedFileName ' WTF!!!!!!!!!!!!!!!!??????????????????&#xA;&#x9;&#x9;&#x9;&#x9;excelOutput.Visible = True &#xA;                excelOutput.Quit&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot; Finished Export API Tree '&quot; &#xA;&#xA;            End If&#xA;&#xA;        Case Else&#xA;            Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;    End Select&#xA;End Sub&#xA;&#xA;Sub CollectElementsInPackage(package, worksheet, currentRow)&#xA;    Dim element As EA.Element&#xA;    Dim operation as EA.Method&#xA;&#xA;    ' Loop through each element in the package&#xA;    For Each element In package.Elements&#xA;&#x9;&#x9;If element.Stereotype = &quot;TMF_API&quot; then&#xA;        ' Write the current element's information to the worksheet&#xA;        WriteElementToWorksheet element, worksheet, currentRow&#xA;&#xA;        ' Increment the current row for the next element&#xA;        currentRow = currentRow + 1&#xA;&#xA;        ' Collect operations of the current element&#xA;&#x9;&#x9;&#x9;For Each operation In element.Methods&#xA;                WriteOperationToWorksheet operation, worksheet, currentRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.Parameters.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'WriteParameterToWorksheet operation, worksheet, currentRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;worksheet.Cells(currentRow, 4).Value = GetParameterNames(operation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;currentRow = currentRow + 1&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;End If&#xA;    Next&#xA;End Sub&#xA;&#xA;Sub WriteElementToWorksheet(element, worksheet, currentRow)&#xA;    ' Write element information to the worksheet&#xA;    worksheet.Cells(currentRow, 1).Value = element.Name&#xA;    worksheet.Cells(currentRow, 2).Value = element.Stereotype&#xA;End Sub&#xA;&#xA;Sub WriteOperationToWorksheet(operation, worksheet, currentRow)&#xA;    ' Write operation information to the worksheet&#xA;    worksheet.Cells(currentRow, 3).Value = operation.Name&#xA;&#x9;worksheet.Cells(currentRow, 5).Value = operation.ReturnType&#xA;&#xA;End Sub&#xA;&#xA;&#xA;sub WriteParameterToWorksheet (operation, worksheet, currentRow)&#xA;Dim i &#xA;dim j&#xA;&#x9;i = operation.Parameters.Count - 1&#xA;dim Parameter as EA.Parameter&#xA;For j = 0 to i&#xA;&#x9;Set&#x9;Parameter = operation.Parameters.GetAt(j)&#xA;&#x9;worksheet.Cells(currentRow, 4).Value = Parameter.Type&#xA;&#x9;&#x9;&#x9;&#x9;currentRow = currentRow + 1&#xA;next&#xA;End Sub&#xA;&#xA;Function getUserSelectedFileName()&#xA;    Dim selectedFileName&#xA;    Dim project&#xA;    Set project = Repository.GetProjectInterface()&#xA;    selectedFileName = project.GetFileNameDialog(&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 2, &quot;&quot;, 1) ' Save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;    getUserSelectedFileName = selectedFileName &#xA;End Function&#xA;&#xA;OnProjectBrowserScript()"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="502"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3D1B7496-0DED-4f1d-8D49-97333B1C49AB}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;eTOM - Create Process Diagram Lev 5-7&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' applied to a package, will create diagram containing elements of level 5,6 and 7 for each element of the package&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element ' lev 1&#xA;&#x9;dim subElement &#x9;&#x9;&#x9;as EA.Element ' lev 2&#xA;&#x9;dim subsubElement&#x9;&#x9;as EA.Element ' lev 3&#xA;&#x9;dim subsubsubElement&#x9;&#x9;as EA.Element ' lev 4&#xA;&#x9;dim startElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package &quot;+ package.Name  + &quot; selected&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element &quot; + subsubElement.Name + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.MetaType = &quot;eTOM Process&quot; AND subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subsubElement, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'createNestedHierarchyDiagram subsubsubElement, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script support items of type package.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Process&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectstyle.fillcolor = cololorKhakh1&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** 2nd LEVEL ***&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 180&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 20&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;' level2.objectstyle.fillcolor = cololorKhakh1&#xA;&#x9;level2.objectstyle.fontname = &quot;Arial&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL ***&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level3.objectHeight&#x9;= 50&#xA;&#x9;level3.objectWidth = 160&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 20&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level4.objectHeight&#x9;= 40&#xA;&#x9;level4.objectWidth = 140&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="503"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CB4DFC7C-CE6E-4bbe-B129-35DDF201AC98}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;eTOM -Create Process Dia From Element&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="&#xA;' create a diagram with up - to 4 levels of eTOM elements inside any selected process&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element ' lev 1&#xA;&#x9;dim subElement &#x9;&#x9;&#x9;as EA.Element ' lev 2&#xA;&#x9;dim subsubElement&#x9;&#x9;as EA.Element ' lev 3&#xA;&#x9;dim subsubsubElement&#x9;as EA.Element ' lev 4&#xA;&#x9;dim startElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otElement&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Element &quot;+ theElement.Name  + &quot; selected&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in theElement.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element &quot; + element.Name + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;eTOM Process&quot; AND element.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'createNestedHierarchyDiagram subsubsubElement, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'next&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#x9;&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;This script support items of type Etom process.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Process&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectstyle.fillcolor = cololorKhakh1&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** 2nd LEVEL ***&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 180&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 20&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;' level2.objectstyle.fillcolor = cololorKhakh1&#xA;&#x9;level2.objectstyle.fontname = &quot;Arial&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL ***&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level3.objectHeight&#x9;= 50&#xA;&#x9;level3.objectWidth = 160&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 20&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level4.objectHeight&#x9;= 40&#xA;&#x9;level4.objectWidth = 140&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="504"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7A5F2EB8-8AA6-4870-9837-E685A0672965}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF- Create AF diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a diagram with all the AF and the related functions &#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;Aggregated Function;Function&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Aggregated Function&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Aggregated Function;Function&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 400&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;level1.elementProfiles.Add &quot;Function&quot;, elementProfileFunc&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Aggregated Function;Function&quot;&#xA;&#x9;level2.objectHeight&#x9;= 70&#xA;&#x9;level2.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 25&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillColor = colorWhite&#xA;&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;dim elementProfileFunc&#xA;&#x9;set elementProfileFunc = new ElementProfile&#xA;&#x9;&#xA;&#x9;dim relationProfileFunc &#xA;&#x9;set relationProfileFunc = new RelationProfile&#xA;&#x9;relationProfileFunc.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;elementProfileFunc.relationProfiles.Add &quot;NestedFunc&quot;, relationProfileFunc&#xA;&#x9;elementProfileFunc.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;dim relationProfileAggFunc &#xA;&#x9;set relationProfileAggFunc = new RelationProfile&#xA;&#x9;relationProfileAggFunc.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;dim elementProfileAggFunc&#xA;&#x9;set elementProfileAggFunc = new ElementProfile&#xA;&#x9;elementProfileAggFunc.relationProfiles.Add &quot;NestedAggFunc&quot;, relationProfileAggFunc&#xA;&#x9;elementProfileAggFunc.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add &quot;Function&quot;, elementProfileFunc&#xA;&#x9;level2.elementProfiles.Add &quot;AggFunction&quot;, elementProfileAggFunc&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' begin level 3 definition&#xA;&#x9;set level3 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level3.numobjects = 3&#xA;&#x9;level3.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level3.elementMetatype = &quot;Aggregated Function;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 70&#xA;&#x9;level3.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 25&#x9;&#xA;&#x9;level3.horizSpace = 10&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level3.objectstyle.fillColor = colorWhite&#xA;&#x9;level3.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level3.objectstyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile&#xA;&#x9;dim Level3FuncElementProfile&#xA;&#x9;set Level3FuncElementProfile = new ElementProfile&#xA;&#x9;Level3FuncElementProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile, aggregation relation profile&#xA;&#x9;dim Level3FuncRelationProfileAggr &#xA;&#x9;set Level3FuncRelationProfileAggr = new RelationProfile&#xA;&#x9;Level3FuncRelationProfileAggr.nestingType = &quot;Related&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relationType = &quot;Aggregation&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relatedStereotype = &quot;TMF_AF&quot;&#xA;&#x9;Level3FuncRelationProfileAggr.relatedType = &quot;Class&quot;&#xA;&#x9;Level3FuncElementProfile.relationProfiles.Add &quot;AggregatedRel&quot;, Level3FuncRelationProfileAggr&#xA;&#x9;' end level 3 function element profile, aggregation relation profile&#xA;&#x9;&#xA;&#x9;' end level 3 function element profile&#xA;&#x9;&#xA;&#x9;' begin level 3 Aggregated Function element profile&#xA;&#x9;dim Level3AggFuncElementProfile&#xA;&#x9;set Level3AggFuncElementProfile = new ElementProfile&#xA;&#x9;Level3AggFuncElementProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 3 aggregated function element profile, nested profile&#xA;&#x9;dim Level3NestRelationProfile &#xA;&#x9;set Level3NestRelationProfile = new RelationProfile&#xA;&#x9;Level3NestRelationProfile.nestingType = &quot;Nested&quot;&#xA;&#x9;Level3AggFuncElementProfile.relationProfiles.Add &quot;Nested&quot;, Level3NestRelationProfile&#xA;&#x9;' end level 3 aggregated function element profile, nested profile&#xA;&#x9;&#xA;&#x9;' end level 3 Aggregated Function element profile&#xA;&#x9;&#xA;&#x9;level3.elementProfiles.Add &quot;Function&quot;, Level3FuncElementProfile&#xA;&#x9;level3.elementProfiles.Add &quot;AggFunction&quot;, Level3AggFuncElementProfile&#xA;&#x9;&#xA;&#x9;levellist.add 3, level3&#xA;&#x9;' end level 3&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="505"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FBE3C739-A905-4e85-A18C-0F545088354D}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF- create AF diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script Name: Create AF 1-2-Funct&#xA;' Author: Giu Platania&#xA;' Purpose: create a diagram containing AF leve 1, AF lev 2 and the related functions&#xA;' Date: 2023.11&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting AF Diagram&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Aggregated Function;Function&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;This script supports  Aggregated Functions in Packages.&quot;, promptOK&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting Domain AF Function diagram&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Aggregated Function;Function&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Aggregated Function;Function&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 14&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile&#xA;&#x9;dim AggFuncProfile&#xA;&#x9;set AggFuncProfile = new ElementProfile&#xA;&#x9;AggFuncProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level1.elementProfiles.Add 1, AggFuncProfile&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile, nested relation profile&#xA;&#x9;dim AggFuncNested&#xA;&#x9;set AggFuncNested = new RelationProfile&#xA;&#x9;AggFuncNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;AggFuncProfile.relationProfiles.Add 1, AggFuncNested&#xA;&#x9;' end level 1 aggregated function element profile, nested relation profile&#xA;&#x9;' end level 1 aggregated function element profile&#xA;&#x9;&#xA;&#x9;' begin level 1 function element profile&#xA;&#x9;dim L1FuncProfile&#xA;&#x9;set L1FuncProfile = new ElementProfile&#xA;&#x9;L1FuncProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 1 function element profile, nested relation profile&#xA;&#x9;dim L1FuncNested&#xA;&#x9;set L1FuncNested = new RelationProfile&#xA;&#x9;L1FuncNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;L1FuncProfile.relationProfiles.Add 1, L1FuncNested&#xA;&#x9;' end level 1 function element profile, nested relation profile&#xA;&#x9;level1.elementProfiles.Add 2, L1FuncProfile&#xA;&#x9;' end level 1 function element profile&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Function&quot;&#xA;&#x9;level2.objectHeight&#x9;= 45&#xA;&#x9;level2.objectWidth = 100&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 80&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;'level2.nestingType = &quot;Related&quot;&#xA;&#x9;'level2.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level2.relationStereotype = &quot;TMF_AFAggregatesFunction;TMF_DomainAggregatesDomain&quot;&#xA;&#x9;'level2.relatedType = &quot;Class&quot;&#xA;&#x9;'level2.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;'level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile&#xA;&#x9;dim L2FuncProfile&#xA;&#x9;set L2FuncProfile = new ElementProfile&#xA;&#x9;L2FuncProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2FuncRelatedAF&#xA;&#x9;set L2FuncRelatedAF = new RelationProfile&#xA;&#x9;L2FuncRelatedAF.nestingType = &quot;Related&quot;&#xA;&#x9;L2FuncRelatedAF.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2FuncRelatedAF.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L2FuncRelatedAF.relatedType = &quot;Class&quot;&#xA;&#x9;L2FuncRelatedAF.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L2FuncProfile.relationProfiles.Add 1, L2FuncRelatedAF&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2FuncRelatedAD&#xA;&#x9;set L2FuncRelatedAD = new RelationProfile&#xA;&#x9;L2FuncRelatedAD.nestingType = &quot;Related&quot;&#xA;&#x9;L2FuncRelatedAD.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2FuncRelatedAD.relationStereotype = &quot;TMF_DomainAggregatesDomain&quot;&#xA;&#x9;L2FuncRelatedAD.relatedType = &quot;Class&quot;&#xA;&#x9;L2FuncRelatedAD.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L2FuncProfile.relationProfiles.Add 2, L2FuncRelatedAD&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add 1, L2FuncProfile&#xA;&#x9;' end level 2 function element profile&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL *** NOT ACITVE&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 38&#xA;&#x9;level3.objectWidth = 105&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;'level3.nestingType = &quot;Related&quot;&#xA;&#x9;'level3.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level3.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;'level3.relatedType = &quot;Class&quot;&#xA;&#x9;'level3.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 9&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL *** NOT ACITVE&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level4.objectHeight&#x9;= 30&#xA;&#x9;level4.objectWidth = 85&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;'level4.nestingType = &quot;Related&quot;&#xA;&#x9;'level4.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level4.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;'level4.relatedType = &quot;Class&quot;&#xA;&#x9;'level4.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="506"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{822B65F8-F366-4eee-A84C-F91E18A1C7FD}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ALL - Create Diagram Selected Element and Children&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;'&#xA;&#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose: Create a diagram with all the children (owned) elements and the parent (if Any). Diagram layout is WIP.&#xA;' Date:&#xA;&#xA;' Project Browser Script main function&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim theElement as EA.Element&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Starting Diagram&quot;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;OK, Its an element of stereotype &quot; + theElement.Stereotype&#xA;&#x9;&#x9;&#x9;createDiagram (theElement)&#xA;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otPackage&#xA;'&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;'&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;'&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;createDiagram theElement&#xA;'&#x9;&#xA;'&#x9;&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;end sub&#xA;&#xA;sub createDiagram(theElement)&#xA;&#x9;' Create a new diagram and set its properties&#xA;&#x9;Dim newDiagram as EA.Diagram&#xA;&#x9;Dim selectedElement as EA.Element&#xA;&#x9;Set selectedElement = Repository.GetTreeSelectedObject()&#xA;&#xA;&#x9;Set newDiagram = selectedElement.Diagrams.AddNew( selectedElement.Name &amp; &quot;_Diagram&quot;, &quot;Logical&quot;)&#xA;&#x9;newDiagram.Author = &quot;Your Name&quot;&#xA;&#x9;newDiagram.Notes = &quot;This diagram shows the element&quot; + selectedElement.Name +   &quot; and its children&quot;&#xA;&#x9;newDiagram.Version = &quot;1.0&quot;&#xA;&#x9;newDiagram.PackageID = selectedElement.PackageID&#xA;&#x9;newDiagram.Update()&#xA;&#x9;Session.Output &quot;New Diagram created&quot;&#xA;&#x9;' Add the selected element and its parent to the diagram&#xA;&#xA;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;set selectedObject = newDiagram.DiagramObjects.AddNew (&quot;&quot;, &quot;&quot;)&#xA;&#xA;&#x9;&#x9;selectedObject.ElementID = selectedElement.ElementID&#xA;&#x9;&#x9;selectedObject.Update()&#xA;&#x9;&#x9;newDiagram.Update()&#xA;&#xA;&#x9;Dim parent as EA.Element&#xA;&#xA;&#x9;&#x9;If Not selectedElement.ParentID = 0 Then&#xA;&#x9;&#x9;&#x9;Set parent = Repository.GetElementByID(selectedElement.ParentID)&#xA;&#x9;&#x9;&#x9;If Not parent is Nothing Then&#xA;&#x9;&#x9;&#x9;&#x9;Set selectedObject = newDiagram.DiagramObjects.AddNew (&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;selectedObject.ElementID = parent.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;selectedObject.Update()&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Parent Objects&quot;+ selectedObject.name + &quot; added&quot;&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;Else Session.Output &quot;No Parent objects found&quot;&#xA;&#x9;&#x9;End If&#xA;&#xA;&#x9;' Add all child elements to the diagram&#xA;&#xA;&#x9;Dim child as EA.Element&#xA;&#x9;&#x9;If selectedElement.Elements.Count = 0 Then&#xA;&#x9;&#x9;&#x9;Session.Output &quot;No Child Objects found&quot;&#xA;&#x9;&#x9;Else For Each child In selectedElement.Elements&#xA;&#x9;&#x9;&#x9;Set selectedObject = newDiagram.DiagramObjects.AddNew(&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;selectedObject.ElementID = child.ElementID&#xA;&#x9;&#x9;&#x9;selectedObject.Update()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;a Child Object was added&quot;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;End If&#xA;&#x9;' Refresh the diagram view in the EA interface&#xA;&#x9;Repository.ReloadDiagram(newDiagram.DiagramID)&#xA;&#x9;&#xA;&#x9;'' layout the diagram&#xA;&#x9;layoutDiagram newDiagram.DiagramID&#xA;&#x9;' Save the changes to the project&#xA;&#x9;newDiagram.Update()&#xA;&#xA;&#x9;Session.Prompt &quot;Finished!&quot;, promptOK&#xA;&#x9;' End of script&#xA;end sub&#xA;&#xA;sub layoutDiagram(DiagramGUID)&#xA;&#x9; Dim LayoutStyle, Iterations, LayerSpacing, ColumnSpacing, SaveToDiagram&#xA;    Dim Project As EA.Project&#xA;    Dim Repository As EA.Repository&#xA;    &#xA;    Set Repository = CreateObject(&quot;EA.Repository&quot;)&#xA;    Set Project = Repository.GetProjectInterface()&#xA;&#x9;Session.Output &quot;layout Diagram&quot;&#xA;&#xA;    'DiagramGUID = Project.GUIDtoXML(Repository.GetCurrentDiagram().DiagramGUID)&#xA;&#xA;    'See ConstLayoutStyles in EAConstants-VBcript&#xA;    'LayoutStyle = lsDiagramDefault&#xA;    'LayoutStyle = lsCycleRemoveDFS 'Or lsLayeringOptimalLinkLength Or lsInitializeDFSOut Or lsLayoutDirectionDown&#xA;&#x9; LayoutStyle = lsLayoutDirectionDown&#xA;&#xA;    Iterations = 4&#xA;    LayerSpacing = 20&#xA;    ColumnSpacing = 20&#xA;    SaveToDiagram = true&#xA;&#x9;&#xA;&#x9;dim diagramGUIDXml&#xA;&#x9;'The project interface needs GUID's in XML format, so we need to convert first.&#xA;&#x9;diagramGUIDXml = Repository.GetProjectInterface().GUIDtoXML(DiagramGUID)&#xA;&#x9;'Then call the layout operation&#xA;&#x9;&#x9;Session.Output &quot;diagram UID in Xml &quot;  + diagramGUIDXml&#xA;&#x9;Repository.GetProjectInterface().LayoutDiagramEx diagramGUIDXml, lsDiagramDefault, 4, 20 , 20, false&#xA;&#x9;&#xA;&#xA;    'Project.LayoutDiagramEx DiagramGUID, LayoutStyle, Iterations, LayerSpacing, ColumnSpacing, SaveToDiagram&#xA;end sub&#xA;&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="507"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{82A1D14C-27A4-4eca-9C9F-4BF6B921A7E6}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF- Create Dom-AF-Function&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' create a huge diagram with all the Domains AF and function. the resulting diagram is overwhelming. &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting AF&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;'next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting Domain AF Function diagram&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Domain&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 14&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile&#xA;&#x9;dim DomainProfile&#xA;&#x9;set DomainProfile = new ElementProfile&#xA;&#x9;DomainProfile.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level1.elementProfiles.Add 1, DomainProfile&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile, nested relation profile&#xA;&#x9;dim DomainNested&#xA;&#x9;set DomainNested = new RelationProfile&#xA;&#x9;DomainNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;DomainProfile.relationProfiles.Add 1, DomainNested&#xA;&#x9;' end level 1 aggregated function element profile, nested relation profile&#xA;&#x9;' end level 1 aggregated function element profile&#xA;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level2.objectHeight&#x9;= 110&#xA;&#x9;level2.objectWidth = 230&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 80&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile&#xA;&#x9;dim L2AFProfile&#xA;&#x9;set L2AFProfile = new ElementProfile&#xA;&#x9;L2AFProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2AFRelatedFunction&#xA;&#x9;set L2AFRelatedFunction = new RelationProfile&#xA;&#x9;L2AFRelatedFunction.nestingType = &quot;Related&quot;&#xA;&#x9;L2AFRelatedFunction.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2AFRelatedFunction.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L2AFRelatedFunction.relatedType = &quot;Class&quot;&#xA;&#x9;L2AFRelatedFunction.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L2AFProfile.relationProfiles.Add 1, L2AFRelatedFunction&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2AFRelatedAD&#xA;&#x9;set L2AFRelatedAD = new RelationProfile&#xA;&#x9;L2AFRelatedAD.nestingType = &quot;Related&quot;&#xA;&#x9;L2AFRelatedAD.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2AFRelatedAD.relationStereotype = &quot;TMF_DomainAggregatesFunction&quot;&#xA;&#x9;L2AFRelatedAD.relatedType = &quot;Class&quot;&#xA;&#x9;L2AFRelatedAD.relatedStereotype = &quot;TMF_AF&quot;&#xA;&#x9;&#xA;&#x9;L2AFProfile.relationProfiles.Add 2, L2AFRelatedAD&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add 1, L2AFProfile&#xA;&#x9;' end level 2 function element profile&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL *** &#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 4&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;level3.elementMetatype = &quot;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 180&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile&#xA;&#x9;dim L3FunctionProfile&#xA;&#x9;set L3FunctionProfile = new ElementProfile&#xA;&#x9;L3FunctionProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile, AF relation profile&#xA;&#x9;dim L3FunctionRelatedAF&#xA;&#x9;set L3FunctionRelatedAF = new RelationProfile&#xA;&#x9;L3FunctionRelatedAF.nestingType = &quot;Related&quot;&#xA;&#x9;L3FunctionRelatedAF.relationType = &quot;Aggregation&quot;&#xA;&#x9;L3FunctionRelatedAF.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L3FunctionRelatedAF.relatedType = &quot;Class&quot;&#xA;&#x9;L3FunctionRelatedAF.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L3FunctionProfile.relationProfiles.Add 1, L3FunctionRelatedAF &#xA;&#x9;' end level 3 function element profile, function relation profile&#xA;&#x9;&#xA;&#x9;&#x9;level3.elementProfiles.Add 1, L3FunctionProfile&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL *** &#xA;&#x9;set level4 = New HierarchyLevel&#xA;'&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level4.objectHeight&#x9;= 30&#xA;&#x9;level4.objectWidth = 85&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.nestingType = &quot;Related&quot;&#xA;&#x9;level4.relationType = &quot;Aggregation&quot;&#xA;&#x9;level4.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;level4.relatedType = &quot;Class&quot;&#xA;&#x9;level4.relatedStereotype = &quot;TMF_Function&quot;&#xA;'&#x9;&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;level4.objectStyle.lineWidth = 1&#xA;&#x9;level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="508"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7784587A-14F3-4bdc-BB4E-8C11B960A03B}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF -create AF lev2-function dia&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' create a diagram with all the AF and the functions&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting AF&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Set element = Repository.GetContextObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting AF diagram&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 14&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile&#xA;&#x9;dim AggFuncProfile&#xA;&#x9;set AggFuncProfile = new ElementProfile&#xA;&#x9;AggFuncProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level1.elementProfiles.Add 1, AggFuncProfile&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile, nested relation profile&#xA;&#x9;dim AggFuncNested&#xA;&#x9;set AggFuncNested = new RelationProfile&#xA;&#x9;AggFuncNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;AggFuncProfile.relationProfiles.Add 1, AggFuncNested&#xA;&#x9;' end level 1 aggregated function element profile, nested relation profile&#xA;&#x9;' end level 1 aggregated function element profile&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Function&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 80&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;'level2.nestingType = &quot;Related&quot;&#xA;&#x9;'level2.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level2.relationStereotype = &quot;TMF_AFAggregatesFunction;TMF_DomainAggregatesDomain&quot;&#xA;&#x9;'level2.relatedType = &quot;Class&quot;&#xA;&#x9;'level2.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;'level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile&#xA;&#x9;dim L2FuncProfile&#xA;&#x9;set L2FuncProfile = new ElementProfile&#xA;&#x9;L2FuncProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2FuncRelatedAF&#xA;&#x9;set L2FuncRelatedAF = new RelationProfile&#xA;&#x9;L2FuncRelatedAF.nestingType = &quot;Related&quot;&#xA;&#x9;L2FuncRelatedAF.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2FuncRelatedAF.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L2FuncRelatedAF.relatedType = &quot;Class&quot;&#xA;&#x9;L2FuncRelatedAF.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L2FuncProfile.relationProfiles.Add 1, L2FuncRelatedAF&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2FuncRelatedAD&#xA;&#x9;set L2FuncRelatedAD = new RelationProfile&#xA;&#x9;L2FuncRelatedAD.nestingType = &quot;Related&quot;&#xA;&#x9;L2FuncRelatedAD.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2FuncRelatedAD.relationStereotype = &quot;TMF_DomainAggregatesDomain&quot;&#xA;&#x9;L2FuncRelatedAD.relatedType = &quot;Class&quot;&#xA;&#x9;L2FuncRelatedAD.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L2FuncProfile.relationProfiles.Add 2, L2FuncRelatedAD&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add 1, L2FuncProfile&#xA;&#x9;' end level 2 function element profile&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL *** NOT ACITVE&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 50&#xA;&#x9;level3.objectWidth = 160&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;'level3.nestingType = &quot;Related&quot;&#xA;&#x9;'level3.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level3.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;'level3.relatedType = &quot;Class&quot;&#xA;&#x9;'level3.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 9&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL *** NOT ACITVE&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level4.objectHeight&#x9;= 40&#xA;&#x9;level4.objectWidth = 140&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;'level4.nestingType = &quot;Related&quot;&#xA;&#x9;'level4.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level4.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;'level4.relatedType = &quot;Class&quot;&#xA;&#x9;'level4.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="509"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A97E4CD6-6F05-4ecf-876A-E0D2035122BD}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -Create Component Spprtd Elmnts Dia&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;' Script Name: Create component sub diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a diagram with a component containing ABEs and Processes&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim component &#x9;&#x9;&#x9;' as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;set component = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram component, levelList, &quot;Aggregated Function;Function&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Aggregated Function&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = new hierarchylevel&#xA;&#x9;level1.isParent = True&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.objectHeight&#x9;= 80&#xA;&#x9;level1.objectWidth = 250&#x9;&#x9;&#xA;&#x9;'level1.objectstyle.fillColor = colorWhite&#xA;&#x9;level1.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectstyle.fontSize = 16&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' begin level 2 definition&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;TMF_ABE;TMF_Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 50&#xA;&#x9;level2.objectWidth = 170&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 25&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 20&#xA;&#x9;&#xA;&#x9;'level2.objectstyle.fillColor = colorWhite&#xA;&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;' begin level 1 function element profile&#xA;&#x9;dim TMF_ABE&#xA;&#x9;set TMF_ABE = new ElementProfile&#xA;&#x9;TMF_ABE.elementMetatype = &quot;TMF_ABE&quot;&#xA;&#x9;&#xA;&#x9;' begin level 1 function element profile, aggregation relation profile&#xA;&#x9;dim TMF_ComponentsDependsABE&#xA;&#x9;set TMF_ComponentsDependsABE = new RelationProfile&#xA;&#x9;TMF_ComponentsDependsABE.nestingType = &quot;Related&quot;&#xA;&#x9;TMF_ComponentsDependsABE.relationType = &quot;Dependency&quot;&#xA;&#x9;TMF_ComponentsDependsABE.relationStereotype = &quot;TMF_ComponentDependsOnABE&quot;&#xA;&#x9;TMF_ComponentsDependsABE.relatedStereotype = &quot;TMF_ABE&quot;&#xA;&#x9;TMF_ComponentsDependsABE.relatedType = &quot;Class&quot;&#xA;&#x9;' end level 1 function element profile, aggregation relation profile&#xA;&#x9;&#xA;&#x9;TMF_ABE.relationProfiles.Add 1, TMF_ComponentsDependsABE&#xA;&#x9;' end level 1 function element profile&#xA;&#x9;&#xA;&#x9;' begin level 1 Aggregated Function element profile&#xA;&#x9;dim TMF_Process&#xA;&#x9;set TMF_Process = new ElementProfile&#xA;&#x9;TMF_Process.elementMetatype = &quot;TMF_Process&quot;&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile, nested profile&#xA;&#x9;dim TMF_ComponentsDependsProcess &#xA;&#x9;set TMF_ComponentsDependsProcess = new RelationProfile&#xA;&#x9;TMF_ComponentsDependsProcess.nestingType = &quot;Related&quot;&#xA;&#x9;TMF_ComponentsDependsProcess.relationType = &quot;Dependency&quot;&#xA;&#x9;TMF_ComponentsDependsProcess.relationStereotype = &quot;TMF_ComponentDependsProcess&quot;&#xA;&#x9;TMF_ComponentsDependsProcess.relatedStereotype = &quot;TMF_Process&quot;&#xA;&#x9;TMF_ComponentsDependsProcess.relatedType = &quot;Class&quot;&#xA;&#x9;' end level 1 aggregated function element profile, nested profile&#xA;&#x9;&#xA;&#x9;TMF_Process.relationProfiles.Add 1, TMF_ComponentsDependsProcess&#xA;&#x9;' end level 1 Aggregated Function element profile&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add 1, TMF_ABE&#xA;&#x9;level2.elementProfiles.Add 2, TMF_Process&#xA;&#x9;&#xA;&#x9;' a null value at levellist 1 will include the parent object in the diagramw&#xA;&#x9;levellist.add 1, level1&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;' end level 1&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="510"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E0537412-D9A2-404e-B2FF-E33E82886B19}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ODA -create Block-Comp Dia&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' create a diagram with Function Blocks, IIC and Functions&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting Function Block&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting Domain AF Function diagram&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Domain&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;ODA Function Block&quot;&#xA;&#x9;level1.objectHeight&#x9;= 500&#xA;&#x9;level1.objectWidth = 2000&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 20&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;' begin level 1 oda function block element profile&#xA;&#x9;dim BlockElementProfile&#xA;&#x9;set BlockElementProfile = new ElementProfile&#xA;&#x9;BlockElementProfile.elementMetatype = &quot;ODA Function Block&quot;&#xA;&#x9;&#xA;&#x9;' begin level 1 oda function block element profile, nested relation profile&#xA;&#x9;dim ODAFunctionBlockNested&#xA;&#x9;set ODAFunctionBlockNested = new RelationProfile&#xA;&#x9;ODAFunctionBlockNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;BlockElementProfile.relationProfiles.Add 1, ODAFunctionBlockNested&#xA;&#x9;' end level 1 oda function block element profile, nested relation profile&#xA;&#x9;level1.elementProfiles.Add 1, BlockElementProfile&#xA;&#x9;&#xA;&#x9;' end level 1 oda function block element profile&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#x9;&#xA;&#x9;' begin level 2 Independent component&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 7&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.objectHeight&#x9;= 90&#xA;&#x9;level2.objectWidth = 250&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 30&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Arial&quot;&#xA;&#x9;level2.objectstyle.fontsize = 12&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' begin level 2 Independent Component element profile&#xA;&#x9;dim IndependentComponentElementProfile&#xA;&#x9;set IndependentComponentElementProfile = new ElementProfile&#xA;&#x9;IndependentComponentElementProfile.elementMetatype = &quot;Impl. Independent Component&quot;&#xA;&#x9;&#xA;&#x9;' begin level 2 Indpendent Component element profile, nested profile&#xA;&#x9;dim IndependentComponentNested&#xA;&#x9;set IndependentComponentNested = new RelationProfile&#xA;&#x9;IndependentComponentNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;IndependentComponentElementProfile.relationProfiles.Add 1, IndependentComponentNested&#xA;&#x9;' end level 2 Indpendent Component element profile, nested profile&#xA;&#xA;&#x9;' begin level 2 Indpendent Component element profile, related profile&#xA;&#x9;dim IndependentComponentRelated&#xA;&#x9;set IndependentComponentRelated = new RelationProfile&#xA;&#x9;IndependentComponentRelated.nestingType = &quot;Related&quot;&#xA;&#x9;IndependentComponentRelated.relationType = &quot;Aggregation&quot;&#xA;&#x9;IndependentComponentRelated.relationStereotype = &quot;TMF_BlockContainsComponent&quot;&#xA;&#x9;IndependentComponentRelated.relatedType = &quot;Class&quot;&#xA;&#x9;IndependentComponentRelated.relatedStereotype = &quot;TMF_IIC&quot;&#xA;&#x9;&#xA;&#x9;IndependentComponentElementProfile.relationProfiles.Add 2, IndependentComponentRelated&#xA;&#x9;' end level 2 Indpendent Component element profile, related profile&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add 1, IndependentComponentNested&#xA;&#x9;' end level 2 Independent Componen&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL *** NOT active&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 70&#xA;&#x9;level3.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 70&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;'level3.nestingType = &quot;nested&quot;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 9&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***  *** NOT active&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Function&quot;&#xA;&#x9;level4.objectHeight&#x9;= 45&#xA;&#x9;level4.objectWidth = 180&#xA;&#x9;level4.horizOffset = 25&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 60&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;&#xA;&#x9;'level4.nestingType = &quot;Related&quot;&#xA;&#x9;'level4.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level4.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;'level4.relatedType = &quot;Class&quot;&#xA;&#x9;'level4.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;' levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="511"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9594DDCD-330F-476b-972E-F2A89E07F435}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF- Create AF 1-2-Funct&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name: Create AF 1-2-Funct&#xA;' Author: Giu Platania&#xA;' Purpose: create a diagram containing AF leve 1, AF lev 2 and the related functions&#xA;' Date: 2023.04&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting AF&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script supports  Aggregated Functions in Packages.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{05436461-CFAA-4886-89D9-C7068172264B}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting AF diagram&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;level1.isParent = true&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile&#xA;&#x9;dim AggFuncProfile&#xA;&#x9;set AggFuncProfile = new ElementProfile&#xA;&#x9;AggFuncProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level1.elementProfiles.Add 1, AggFuncProfile&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile, nested relation profile&#xA;&#x9;dim AggFuncNested&#xA;&#x9;set AggFuncNested = new RelationProfile&#xA;&#x9;AggFuncNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;AggFuncProfile.relationProfiles.Add 1, AggFuncNested&#xA;&#x9;' end level 1 aggregated function element profile, nested relation profile&#xA;&#x9;' end level 1 aggregated function element profile&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;level2.numObjects = 2&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level2.objectHeight&#x9;= 100&#xA;&#x9;level2.objectWidth = 300&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 30&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level2.vertOffset = 60&#xA;&#x9;level2.vertSpace = 20&#xA;&#x9;level2.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;level2.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;' begin level 2 aggregated function element profile&#xA;&#x9;dim AggFuncProfile2&#xA;&#x9;set AggFuncProfile2 = new ElementProfile&#xA;&#x9;AggFuncProfile2.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level2.elementProfiles.Add 1, AggFuncProfile&#xA;&#x9;&#xA;&#x9;' begin level 2 aggregated function element profile, nested relation profile&#xA;&#x9;dim AggFuncNested2&#xA;&#x9;set AggFuncNested2 = new RelationProfile&#xA;&#x9;AggFuncNested2.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;AggFuncProfile2.relationProfiles.Add 2, AggFuncNested&#xA;&#x9;&#xA;&#x9;levelList.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL ***&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 2&#xA;&#x9;level3.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 160&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;level3.objectStyle.lineWidth = 1&#xA;&#x9;level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;&#x9;' begin level 2 function element profile&#xA;&#x9;dim L3FuncProfile&#xA;&#x9;set L3FuncProfile = new ElementProfile&#xA;&#x9;L3FuncProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L3FuncRelatedAF&#xA;&#x9;set L3FuncRelatedAF = new RelationProfile&#xA;&#x9;L3FuncRelatedAF.nestingType = &quot;Related&quot;&#xA;&#x9;L3FuncRelatedAF.relationType = &quot;Aggregation&quot;&#xA;&#x9;L3FuncRelatedAF.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L3FuncRelatedAF.relatedType = &quot;Class&quot;&#xA;&#x9;L3FuncRelatedAF.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;L3FuncProfile.relationProfiles.Add 1, L3FuncRelatedAF&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;level3.elementProfiles.Add 1, L3FuncProfile&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL *** NOT ACTITVE&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level4.objectHeight&#x9;= 40&#xA;&#x9;level4.objectWidth = 140&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;'level4.nestingType = &quot;Related&quot;&#xA;&#x9;'level4.relationType = &quot;Aggregation&quot;&#xA;&#x9;'level4.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;'level4.relatedType = &quot;Class&quot;&#xA;&#x9;'level4.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;'levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="512"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7BFFA98E-9154-49ed-8854-4F73DA9ED5E1}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - SetPackageRefId&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Model Management Utilities&#xA;!INC Utils.Util&#xA;&#xA;'&#xA;' Script Name: SetPackageRefId&#xA;' Author: Giu Platania&#xA;' Purpose: This script search for elements of a determine type and the for a package with the exact same name&#xA;'&#x9;&#x9;&#x9;the it set the a Tag value with the reference ID of the element in the package&#xA;'&#x9;&#x9;&#x9;The script can be configured for different cases by commenting out the specific line of code.&#xA;' Date: 2023-05-16&#xA;&#x9; dim StereotypeName, MetaTypeName&#xA;&#x9; dim Masterpackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9; dim subElement &#x9;&#x9;&#x9;as EA.Element ' lev 2&#xA;&#x9; dim subsubElement&#x9;&#x9;as EA.Element ' lev 3&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;''comment and uncomment as required&#xA;&#x9;StereotypeName = &quot;TMF_ABE&quot;&#xA;&#x9; MetaTypeName = &quot;ABE&quot;&#x9; &#xA;&#x9; ' StereotypeName = &quot;TMF_AF&quot;&#xA;&#x9;  'MetaTypeName = &quot;Aggregated Function&quot;&#xA; &#x9;'StereotypeName = &quot;TMF_MetricGroup&quot;&#xA;&#x9;' MetaTypeName = &quot;Metric Group&quot;&#xA; &#xA;'&#xA;function SetRefGUID(element)&#xA;&#x9; Dim package As EA.Package&#xA;&#x9; Dim parentPackage as EA.Package&#xA;&#x9; &#x9;&#xA;&#x9;' find the package which should be relatred to the given element&#xA;&#x9; set package = getCorrespondingPackage(element.name, StereotypeName)&#xA;&#x9; ' if the package exists then set it's RefGUID to add traceability&#xA;&#x9; If Not package Is Nothing Then&#xA;&#x9;&#x9;Session.Output &quot;Package found: &quot; &amp; package.Name &amp; &quot; with package ID &quot; &amp; package.PackageID&#xA;&#x9;&#x9;setTaggedValuePackageValue Package, &quot;RefGUID&quot;, element.ElementGUID&#x9;&#x9;&#xA;&#x9;Else&#xA;&#x9;&#x9;' Package not found&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;ERROR! Package &quot; &amp; element.name &amp; &quot; not found nor created&quot;&#xA;&#x9;end if&#xA;&#x9; 'GetPackageByName element.name&#xA;&#x9;&#x9;&#x9;&#xA;end function&#xA;&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;Session.Prompt &quot;This script currently check for &quot; + MetaTypeName, promptOK&#x9;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set Masterpackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;' iterate the first level of elements in the package&#xA;&#x9;&#x9;&#x9;for each element in Masterpackage.Elements&#xA;&#x9;&#x9;&#x9;    ' find those of a specific metatype and set the RefGUID of their associated package&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = MetaTypeName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;processing &quot; + element.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SetRefGUID element&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;' now evaluate children&#xA;&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = MetaTypeName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set Masterpackage = getParentPackage(element.name, StereotypeName)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Parent package is&quot; + Masterpackage.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;processing &quot; + subElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SetRefGUID subElement&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' now evaluate children's children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subelement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.MetaType = MetaTypeName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set Masterpackage = getParentPackage(subelement.name, StereotypeName)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Parent package for &quot;&amp; subsubElement.name &amp; &quot; is&quot; + Masterpackage.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;processing &quot; + subsubElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;SetRefGUID subsubElement&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next ' subsubElement&#xA;&#x9;&#x9;&#x9;&#x9;next 'subelement&#xA;&#x9;&#x9;&#x9;next ' element&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Done setting all REFGUID! &quot; &amp; Masterpackage.Elements.Count&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script is looking for elements &quot; = MetaTypeName + &quot;in a package.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;' get a package with the same name as the element by SQL&#xA;function getCorrespondingPackage(ElementName, StereotypeName)&#xA;&#x9;dim sqlGetElement&#xA;&#x9;dim masterElement as EA.Package&#xA;&#x9;dim getCorrespondingElement as EA.Package&#xA;&#x9;dim parentPackage as EA.Package&#xA;&#x9;dim connectorIDs&#xA;&#x9;dim connectorID&#xA;&#x9;dim result&#xA;&#x9;&#xA;&#x9;'initialize to nothing&#xA;&#x9;'set getCorrespondingElement = nothing&#xA;&#x9;sqlGetElement = &quot;SELECT p.Package_ID                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS o                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_package as p ON o.name = p.name          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE o.Stereotype = '&quot;&amp; StereotypeName &amp;&quot;'            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND o.name='&quot;&amp; ElementName &amp;&quot;'   &quot;&#xA;&#x9;&#xA;&#x9;' execute query to get all pacakges of name `ElementName` and stereotype `StereotypeName`&#xA;&#x9;result = Repository.SQLQuery(sqlGetElement)&#xA;&#x9;&#x9;'Session.Output &quot;XML query is&quot; &amp; result&#xA;&#x9;&#xA;&#x9;' QUESTION: why is the result of the query Connector IDs?&#xA;&#x9;connectorIDs = convertQueryResultToArray(result)&#xA;&#x9; 'Iterate over connectorIDs array and get the first result&#xA;    for each connectorID in connectorIDs&#xA;&#xA;&#x9;&#x9;on error resume next&#xA;&#x9;&#x9;' Get the corresponding package based on connectorID&#xA;&#x9;&#x9;&#x9;set getCorrespondingElement = Repository.GetPackageByID(connectorID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' QUESTION: why do we create a new package here but not on line 29?&#xA;&#x9;&#x9;if err.Number &lt;&gt; 0 or getCorrespondingElement is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Package &quot;&amp; element.name &amp; &quot; not found. creating a new one&quot;&#xA;&#x9;&#x9;on error goto 0&#xA;&#x9;&#x9;&#x9;set parentPackage = Masterpackage&#xA;&#x9;&#x9;&#x9;set getCorrespondingElement = parentPackage.Packages.AddNew(ElementName, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;getCorrespondingElement.Update()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;err.Clear&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#xA;        ' Exit the loop after getting the first result&#xA;        exit for&#xA;    next   &#xA;    ' Return the corresponding package&#xA;    set getCorrespondingPackage = getCorrespondingElement&#x9;&#x9;&#xA;end function&#xA;&#xA;&#xA;' Function: getParentPackage&#xA;'&#xA;' Description: Retrieves the parent package with the specified name and stereotype.&#xA;'              If not found, it returns the Masterpackage.&#xA;'&#xA;' Parameters:&#xA;' - ElementName: The name of the element to find.&#xA;' - StereotypeName: The stereotype of the element to find.&#xA;'&#xA;' Returns: The parent package if found, or the Masterpackage if not found.&#xA;'&#xA;'----&#xA;&#xA;Function getParentPackage(ElementName, StereotypeName)&#xA;    Dim sqlGetElement&#xA;    Dim newMasterPackage As EA.Package&#xA;    Dim result&#xA;&#x9;Dim resultArray&#xA;&#x9;DIM Query&#xA;&#x9;&#xA;    ' Define the SQL query to find the package&#xA;    sqlGetElement = &quot;SELECT o.Package_ID                                    &quot; &amp; vbNewLine &amp; _&#xA;                    &quot; FROM t_package AS o                                    &quot; &amp; vbNewLine &amp; _&#xA;                    &quot; WHERE o.name='&quot;&amp; ElementName &amp;&quot;'   &quot; &#xA;    &#xA;    ' Execute the query to get the package ID&#xA;    Query = Repository.SQLQuery(sqlGetElement)&#xA;    resultArray = convertQueryResultToArray(Query)&#xA;    ' Check if the query returned any results&#xA;    If Not IsEmpty(resultArray) Then&#xA;        ' Get the first package ID from the result&#xA;&#x9;&#x9; for each result in resultArray&#xA;&#x9;&#x9;&#x9;on error resume next   &#xA;&#x9;&#x9;&#x9;' Get the corresponding package based on package ID&#xA;&#x9;&#x9;&#x9;session.output(&quot;Get the corresponding package based on package ID: &quot; &amp; result)&#xA;&#x9;&#x9;&#x9;Set newMasterPackage = Repository.GetPackageByID(result)       &#xA;&#x9;&#x9;&#x9;&#x9;' Check if the package exists&#xA;&#x9;&#x9;&#x9;&#x9;If Not (newMasterPackage Is Nothing) Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Return the corresponding package&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Set getParentPackage = newMasterPackage&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;session.output(&quot;Parent is&quot; = getParentPackage.name)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Exit Function&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;On Error GoTo 0&#xA;&#x9;&#x9;next&#xA;    End If&#xA;    ' If the package was not found, return the Masterpackage&#xA;    Set getParentPackage = Masterpackage&#xA;&#x9;session.output(&quot;failed to retrieve. Parent is&quot; = getParentPackage.name)&#xA;End Function&#xA;&#xA;&#xA;' NOT USED ATM&#xA;' we look for a package to be the new parent with the name of the element&#xA;function getParentPackage2(ElementName, StereotypeName)&#xA;    dim sqlGetElement&#xA;    dim masterElement as EA.Package&#xA;    dim getCorrespondingElement as EA.Package&#xA;    dim parentPackage as EA.Package&#xA;    dim connectorIDs&#xA;    dim connectorID&#xA;    dim result&#xA;    &#xA;    ' Initialize to nothing&#xA;    ' Set getCorrespondingElement = nothing&#xA;    sqlGetElement = &quot;SELECT o.Package_ID                                    &quot; &amp; vbNewLine &amp; _&#xA;                    &quot; FROM t_object AS o                                    &quot; &amp; vbNewLine &amp; _&#xA;                    &quot; WHERE o.Stereotype = '&quot;&amp; StereotypeName &amp;&quot;'                         &quot; &amp; vbNewLine &amp; _&#xA;                    &quot; AND o.name='&quot;&amp; ElementName &amp;&quot;'   &quot;&#xA;    &#xA;    ' Execute query to get all packages of name `ElementName` and stereotype `StereotypeName`&#xA;    result = Repository.SQLQuery(sqlGetElement)&#xA;    ' Session.Output &quot;XML query is&quot; &amp; result&#xA;    &#xA;    connectorIDs = convertQueryResultToArray(result)&#xA;    ' Iterate over connectorIDs array and get the first result&#xA;    for each connectorID in connectorIDs&#xA;        on error resume next&#xA;        ' Get the corresponding package based on connectorID&#xA;        set getCorrespondingElement = Repository.GetPackageByID(connectorID)&#xA;&#x9;&#x9;  Session.Output &quot;Master Package &quot; &amp; getCorrespondingElement.name&#xA;        if err.Number &lt;&gt; 0 or getCorrespondingElement is nothing then&#xA;            Session.Output &quot;ERROR: Package &quot;&amp; ElementName &amp; &quot; not found.&quot;&#xA;&#x9;&#x9;&#x9; set getParentPackage = Masterpackage&#xA;&#x9;&#x9;&#x9; break&#xA;            on error goto 0&#xA;        end if    &#xA;        ' Exit the loop after getting the first result&#xA;        exit for&#xA;    next   &#xA;    ' Return the corresponding package&#xA;    set getParentPackage = getCorrespondingElement       &#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;' NOT working&#xA;' Search for a package by name with API within all packages and sub-packages&#xA;Function GetPackageByName(packageName, parentPackage)&#xA;    Dim package As EA.Package&#xA;    For Each package In parentPackage.Packages&#xA;        If package.Name = packageName Then&#xA;            Set GetPackageByName = package&#xA;            Exit Function&#xA;        Else&#xA;            Dim foundPackage&#xA;            Set foundPackage = GetPackageByName(packageName, package)&#xA;            If Not foundPackage Is Nothing Then&#xA;                Set GetPackageByName = foundPackage&#xA;                Exit Function&#xA;            End If&#xA;        End If&#xA;    Next&#xA;    Set GetPackageByName = Nothing&#xA;End Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="513"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B8EEAFC7-67E4-4573-A369-2B83D4EC4B81}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TMF - eamatic&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'EA-Matic&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Tell EA what the menu options should be&#xA;function EA_GetMenuItems(MenuLocation, MenuName)&#xA;    if MenuName = &quot;&quot; then&#xA;        'Menu Header&#xA;        EA_GetMenuItems = &quot;-&amp;TMF&quot;&#xA;    else&#xA;        if MenuName = &quot;-&amp;TMF&quot; then&#xA;            'Menu items&#xA;            Dim menuItems(2)&#xA;             menuItems(0) = &quot;Create Diagrams&quot;&#xA;&#x9;&#x9;&#x9; menuItems(1) = &quot;Utils&quot;&#xA;             menuItems(2) = &quot;DiagramMenu&quot;&#xA;             EA_GetMenuItems = menuItems&#xA;         end if&#xA;    end if&#xA;end function&#xA;&#xA;'Define the state of the menu options&#xA;function EA_GetMenuState(MenuLocation, MenuName, ItemName, IsEnabled, IsChecked)&#xA;    if MenuName = &quot;-&amp;TMF&quot; then&#xA;        Select Case ItemName&#xA;            case &quot;Create Diagrams&quot;&#xA;                if MenuLocation = &quot;TreeView&quot; then&#xA;                    IsEnabled = true&#xA;                else&#xA;                    IsEnabled = false&#xA;                end if&#xA;            case &quot;DiagramMenu&quot;&#xA;                if MenuLocation = &quot;Diagram&quot; then&#xA;                    IsEnabled = true&#xA;                else&#xA;                    IsEnabled = false&#xA;                end if&#xA;        end select&#xA;    end if&#xA;    'to return out parameter values we should return an array with all parameters&#xA;    EA_GetMenuState = Array(MenuLocation, MenuName, ItemName, IsEnabled, IsChecked)&#xA;end function&#xA;&#xA;'react to user clicking a menu option&#xA;function EA_MenuClick(MenuLocation, MenuName, ItemName)&#xA;        if MenuName = &quot;-&amp;TMF&quot; then&#xA;        Select Case ItemName&#xA;            case &quot;Create Diagrams&quot;&#xA;                Dim Package&#xA;                Set Package = Repository.GetTreeSelectedPackage()&#xA;                MsgBox (&quot;Current Package is: &quot; &amp; Package.Name)&#xA;            case &quot;Utils&quot;&#xA;               &#xA;                Set Package = Repository.GetTreeSelectedPackage()&#xA;                MsgBox (&quot;util functions &quot;)&#x9;&#xA;            case &quot;DiagramMenu&quot;&#xA;                Dim Diagram&#xA;                Set Diagram = Repository.GetCurrentDiagram()&#xA;                MsgBox(&quot;Current Diagram is: &quot; &amp; Diagram.Name)&#xA;        end select&#xA;    end if&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="514"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{829BA467-4C93-45e1-9727-4BFF9E0CD70E}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Util - Sort by Alias&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Logging&#xA;'&#xA;' Script Name: SortbyAlias &#xA;' Author: Giu Platania&#xA;' Purpose: Sort elements contained in the selected package from the Project Browser by the Alias name ASC&#xA;' Date: 2023 11&#xA;'&#xA;sub SortDictionary (objDict)&#xA;   ' constants&#xA;   Const dictKey  = 1&#xA;   Const dictItem = 2&#xA;   ' variables&#xA;   Dim strDict()&#xA;   Dim objKey&#xA;   Dim strKey,strItem&#xA;   Dim X,Y,Z&#xA;   ' get the dictionary count&#xA;   Z = objDict.Count &#xA;   ' sorting needs more than one item&#xA;   If Z &gt; 1 Then&#xA;     ' create an array to store dictionary information&#xA;     ReDim strDict(Z,2)&#xA;     X = 0&#xA;     ' populate the string array&#xA;     For Each objKey In objDict&#xA;         strDict(X,dictKey)  = CStr(objKey)&#xA;         strDict(X,dictItem) = CStr(objDict(objKey))&#xA;         X = X + 1&#xA;     Next &#xA;     ' perform a a shell sort of the string array&#xA;     For X = 0 To (Z - 2)&#xA;       For Y = X To (Z - 1)&#xA;         If StrComp(strDict(X,1),strDict(Y,1),vbTextCompare) &gt; 0 Then&#xA;             strKey  = strDict(X,dictKey)&#xA;             strItem = strDict(X,dictItem)&#xA;             strDict(X,dictKey)  = strDict(Y,dictKey)&#xA;             strDict(X,dictItem) = strDict(Y,dictItem)&#xA;             strDict(Y,dictKey)  = strKey&#xA;             strDict(Y,dictItem) = strItem&#xA;         End If&#xA;       Next&#xA;     Next&#xA;     ' erase the contents of the dictionary object&#xA;     objDict.RemoveAll&#xA;     ' repopulate the dictionary with the sorted information&#xA;     For X = 0 To (Z - 1)&#xA;       objDict.Add strDict(X,dictKey), strDict(X,dictItem)&#xA;     Next&#xA;&#x9;' sort the package elements based on the new sorting order&#xA;&#x9;dim newOrder&#xA;&#x9;newOrder = 0&#xA;&#x9;dim theItem&#xA;&#x9;dim eaelement&#xA; &#x9;for each objKey in objDict&#xA;&#x9;&#x9;theItem = objDict.Item(objKey)&#xA;&#x9;&#x9;Set eaelement = Repository.GetElementByGuid(theItem)&#xA;&#x9;&#x9;'change the position of the element in the package to the new sorting order value&#xA;&#x9;&#x9;eaelement.TreePos = CLng(newOrder)&#xA;&#x9;&#x9;eaelement.Update()&#xA;&#x9;&#x9;newOrder = newOrder + 1&#xA;&#x9;next&#xA;   end if&#xA;end sub&#xA;&#xA;sub sortElementsbyAlias (selectedPackage)&#xA;&#x9;LOGInfo(&quot;Processing selected package &quot; &amp; selectedPackage.Name)&#xA;&#x9;dim elements as EA.Collection&#xA;&#x9;dim i&#xA;&#x9;dim processedElements&#xA;&#x9;set processedElements = CreateObject( &quot;Scripting.Dictionary&quot; )&#xA;&#x9;set elements = selectedPackage.Elements&#x9;&#x9;&#xA;&#x9;for i = 0 to elements.Count - 1&#xA;&#x9;&#x9;&#x9;dim currentElement as EA.Element&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set currentElement = elements.GetAt( i )&#xA;&#x9;&#x9;&#x9;&#x9;LOGInfo(&quot;Processing &quot; &amp; currentElement.Type &amp; &quot; no &quot; &amp; i &amp; &quot; with alias &quot; &amp; currentElement.Alias &amp; &quot;(&quot; &amp;  currentElement.ElementGUID &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;processedElements.Add currentElement.Alias, currentElement.ElementGUID&#xA;&#x9;next&#xA;&#x9;LOGInfo(&quot;Sorting package elements&quot;)&#xA;&#x9;SortDictionary processedElements&#xA;end sub&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;Repository.ClearOutput &quot;Script&quot;&#xA;&#x9;LOGInfo( &quot;Starting SortbyAlias script&quot; )&#xA;&#x9;LOGInfo( &quot;==============================&quot; )&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;sortElementsbyAlias thePackage&#xA;&#x9;&#x9;&#x9;Repository.RefreshModelView (thePackage.PackageID)&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;end select&#xA;end sub&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="515"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0ED9430C-F5AF-48d5-8981-3899179A3255}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;util - Sort by UID&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Logging&#xA;'&#xA;' Script Name: SortbyTaggedValue_SortingOrder &#xA;' Author: Giu.platania&#xA;' Purpose: Sort elements contained in the selected package from the Project Browser by the tagged value SortingOrder value&#xA;' current version contains a Function to transform property into integer format when those are in a eTOM like format &#xA;' e.g. propertiesArray = Array(&quot;7&quot;, &quot;7.4&quot;, &quot;7.4.1&quot;, &quot;7.4.1.1&quot;, &quot;7.4.1.2&quot;)&#xA;' Date: 25/05/2023&#xA;'&#xA;' SortDictionary subroutine sorts the keys of a given dictionary in ascending order&#xA;' and repositions elements in an Enterprise Architect model based on the sorted order&#xA;&#xA;dim taggedValueName&#xA;taggedValueName = &quot;Process Identifier&quot;&#xA;sub SortDictionary (objDict)&#xA;&#xA;   ' Declare dictionary key and item constants&#xA;   Const dictKey  = 1&#xA;   Const dictItem = 2&#xA;&#xA;   ' Declare variables&#xA;   Dim strDict()&#xA;   Dim objKey&#xA;   Dim strKey,strItem&#xA;   Dim X,Y,Z&#xA;&#xA;   ' Get the count of items in the dictionary&#xA;   Z = objDict.Count &#xA;&#xA;   ' Proceed if the dictionary has more than one item&#xA;   If Z &gt; 1 Then&#xA;     ' Create a 2D array to hold dictionary key-item pairs&#xA;     ReDim strDict(Z,2)&#xA;     X = 0&#xA;&#xA;     ' Populate the array with keys and items from the dictionary&#xA;     For Each objKey In objDict&#xA;         strDict(X,dictKey)  = CStr(objKey)&#xA;         strDict(X,dictItem) = CStr(objDict(objKey))&#xA;         X = X + 1&#xA;     Next &#xA;&#xA;     ' Implement shell sort on the array based on the keys&#xA;     For X = 0 To (Z - 2)&#xA;       For Y = X To (Z - 1)&#xA;         If StrComp(strDict(X,1),strDict(Y,1),vbTextCompare) &gt; 0 Then&#xA;             ' If the key at index X is greater than the key at index Y, swap them&#xA;             strKey  = strDict(X,dictKey)&#xA;             strItem = strDict(X,dictItem)&#xA;             strDict(X,dictKey)  = strDict(Y,dictKey)&#xA;             strDict(X,dictItem) = strDict(Y,dictItem)&#xA;             strDict(Y,dictKey)  = strKey&#xA;             strDict(Y,dictItem) = strItem&#xA;         End If&#xA;       Next&#xA;     Next&#xA;&#xA;     ' Clear the original dictionary&#xA;     objDict.RemoveAll&#xA;&#xA;     ' Repopulate the dictionary with the sorted key-item pairs&#xA;     For X = 0 To (Z - 1)&#xA;       objDict.Add strDict(X,dictKey), strDict(X,dictItem)&#xA;     Next&#xA;&#xA;&#x9; ' Initialize the new order variable&#xA;&#x9; dim newOrder&#xA;&#x9; newOrder = 0&#xA;&#x9; dim theItem&#xA;&#x9; dim eaelement&#xA;&#xA;&#x9; ' For each key in the sorted dictionary, find the corresponding Enterprise Architect element &#xA;&#x9; ' and reposition it in the model based on the new order&#xA;&#x9; for each objKey in objDict&#xA;&#x9;&#x9;theItem = objDict.Item(objKey)&#xA;&#x9;&#x9;Set eaelement = Repository.GetElementByGuid(theItem)&#xA;&#xA;&#x9;&#x9;' Change the tree position of the element to the new order value&#xA;&#x9;&#x9;eaelement.TreePos = CLng(newOrder)&#xA;&#x9;&#x9;eaelement.Update()&#xA;&#x9;&#x9;newOrder = newOrder + 1&#xA;&#x9; next&#xA;   end if&#xA;end sub&#xA;&#xA;sub SortbyTaggedValue_SortingOrder (selectedPackage)&#xA;&#x9;LOGInfo(&quot;Processing selected package &quot; &amp; selectedPackage.Name)&#xA;&#x9;LOGInfo(&quot;sorting TAG is &quot; &amp;  taggedValueName)&#xA;&#x9;dim elements as EA.Collection&#xA;&#x9;dim i&#xA;&#x9;dim processedElements&#xA;&#x9;dim aLong  ' as Long&#xA;&#x9;set processedElements = CreateObject( &quot;Scripting.Dictionary&quot; )&#xA;&#x9;set elements = selectedPackage.Elements&#x9;&#x9;&#xA;&#x9;for i = 0 to elements.Count - 1&#xA;&#x9;&#x9;&#x9;dim currentElement as EA.Element&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set currentElement = elements.GetAt( i )&#xA;&#x9;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;&#x9;set tag = currentElement.TaggedValues.GetByName(taggedValueName)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if tag Is Nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'nothing to do : the element will be at the beginning&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGInfo(&quot;tag is nothing for&quot; &amp; currentElement.Name &amp; &quot; no &quot; &amp; i &amp; &quot;( &quot; &amp;  currentElement.Type &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;processedElements.Add &quot;0&quot;, currentElement.ElementGUID&#xA;&#x9;&#x9;&#x9;&#x9;else&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGInfo(&quot;Processing &quot; &amp; currentElement.Name &amp; &quot; no &quot; &amp; i &amp; &quot; TV= &quot; &amp; tag.Value &amp; &quot; (&quot; &amp;  currentElement.ElementGUID &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;tag.Value = TransformProperty(tag.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;aLong  = CLng(tag.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGInfo(&quot;Long is &quot; &amp; aLong) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;processedElements.Add aLong , currentElement.ElementGUID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;LOGInfo(&quot;Sorting package elements&quot;)&#xA;&#x9;SortDictionary processedElements&#xA;&#x9;'SortEtomArray processedElements&#xA;end sub&#xA;&#xA;' Function to transform property into integer format when those are in a eTOM like format &#xA;' e.g. propertiesArray = Array(&quot;7&quot;, &quot;7.4&quot;, &quot;7.4.1&quot;, &quot;7.4.1.1&quot;, &quot;7.4.1.2&quot;)&#xA;&#xA;Function TransformProperty2(property)&#xA;    Dim parts&#xA;    parts = Split(property, &quot;.&quot;)&#xA;    Dim transformedParts&#xA;    ReDim transformedParts(Ubound(parts))&#xA;&#xA;    Dim i&#xA;    For i = 0 To Ubound(parts)&#xA;        transformedParts(i) = CInt(parts(i))&#xA;    Next&#xA;    TransformProperty = Join(transformedParts, &quot;.&quot;)&#xA;End Function&#xA;&#xA;' Function to transform property into padded format when those are in an eTOM like format &#xA;' e.g. propertiesArray = Array(&quot;7&quot;, &quot;7.4&quot;, &quot;7.4.1&quot;, &quot;7.4.1.1&quot;, &quot;7.4.1.2&quot;)&#xA;&#xA;Function TransformProperty(property)&#xA;    Dim parts&#xA;&#x9;dim partcount&#xA;&#x9;&#xA;    parts = Split(property, &quot;.&quot;)&#xA;&#x9;&#xA;&#x9; If Ubound(parts) &lt; 5 Then&#xA;&#x9;&#x9;Dim transformedParts&#xA;&#x9;&#x9;ReDim transformedParts(Ubound(parts))&#xA;&#xA;&#x9;&#x9;Dim i&#xA;&#x9;&#x9;For i = 0 To Ubound(parts)&#xA;&#x9;&#x9;&#x9;' Pad each segment to 5 digits width by adding leading zeros&#xA;&#x9;&#x9;&#x9;transformedParts(i) = Right(&quot;00000&quot; &amp; parts(i), 1)&#xA;&#x9;&#x9;Next&#xA;&#xA;&#x9;&#x9;' Return the joined parts as a single number&#xA;&#x9;&#x9;TransformProperty = CLng(Join(transformedParts, &quot;&quot;))&#xA;&#x9;Else&#xA;            ' If a part has 5 or more characters, bypass the padding and use it as is&#xA;             If IsNumeric(Join(parts, &quot;&quot;)) Then&#xA;&#x9;&#x9;&#x9;&#x9;TransformProperty = CLng(Join(parts, &quot;&quot;))&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9; Randomize ' Initialize random-number generator.&#xA;&#x9;&#x9;&#x9;&#x9;TransformProperty = Int((1000000 - 1 + 1) * Rnd + 1)&#xA;&#x9;&#x9;&#x9;End If&#xA;    End If&#xA;End Function&#xA;&#xA;' Sort the array using transformed properties&#xA;function SortEtomArray(propertiesArray)&#xA;&#x9;dim dicitionary&#xA;&#x9;set dicitionary = CreateObject( &quot;Scripting.Dictionary&quot; )&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Dim i, j, temp&#xA;&#x9;&#xA;&#x9;' Iterate over the array&#xA;&#x9;For i = 0 To propertiesArray.Count - 2&#xA;&#x9;&#x9;For j = i + 1 To propertiesArray.Count - 1&#xA;&#x9;&#x9;&#x9;' Convert to long instead of integer and compare&#xA;&#x9;&#x9;&#x9;If CLng(TransformProperty(propertiesArray.GetAt(i))) &gt; CLng(TransformProperty(propertiesArray.GetAt(j))) Then&#xA;&#x9;&#x9;&#x9;&#x9;' Swap elements&#xA;&#x9;&#x9;&#x9;&#x9;temp = propertiesArray.GetAt(i)&#xA;&#x9;&#x9;&#x9;&#x9;propertiesArray.SetAt i, propertiesArray.GetAt(j)&#xA;&#x9;&#x9;&#x9;&#x9;propertiesArray.SetAt j, temp&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;Next&#xA;&#x9;Next&#xA;&#xA;&#x9;' Output the sorted array&#xA;&#x9;For i = 0 To propertiesArray.Count - 1&#xA;&#x9;&#x9;Session.Output(propertiesArray.GetAt(i))&#xA;&#x9;Next&#xA;end Function&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;Repository.ClearOutput &quot;Script&quot;&#xA;&#x9;LOGInfo( &quot;Starting SortbyTaggedValue_SortingOrder script&quot; )&#xA;&#x9;LOGInfo( &quot;==============================&quot; )&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;SortbyTaggedValue_SortingOrder thePackage&#xA;&#x9;&#x9;&#x9;Repository.RefreshModelView (thePackage.PackageID)&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;end select&#xA;end sub&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="516"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{02269F26-4EEC-4a9c-8F1F-A0E55256471E}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;eTOM - Create Compositions&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Include&#xA;&#xA;' Script Name: Create ETOM Compositions&#xA;' Author: Giu&#xA;' Purpose: THis script will traverse a project tree and extract all the element with a certain stereotype&#xA;' It will then get the children of the current element and create a relationship between the owner and the child&#xA;' Date: 2023.06&#xA;' TODO: add check to avoid duplicate relationship&#xA;&#xA;&#xA;Dim componentElementCount, componentControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;componentElementCount = 0&#xA;componentControllerClassCreated = 0&#xA; dim Stereo, connType, connStereotype &#xA; Stereo = &quot;TMF_Process&quot;&#xA;connType = &quot;Aggregation&quot;&#xA;connStereotype = &quot;TMF_isComposedByProcess&quot;&#xA;&#xA;'&#xA;&#xA;Function createRelationship(fromElement)&#x9;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = getChildElementList(fromElement,Stereo) &#xA;&#x9;for each childElement in fromElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = stereo then&#xA;&#x9;&#x9;&#x9;addConnector childElement, connType, connStereotype, fromElement&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;created relationship from &quot; + childElement.Name + &quot; to &quot; + fromElement.name )&#xA;&#x9;&#x9;&#x9;fromElement.Update&#xA;&#x9;&#x9;&#x9;childElement.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;end function&#xA; &#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element 'level 1&#xA;&#x9;&#x9;&#x9;dim subElement as EA.Element ''level 2&#xA;&#x9;&#x9;&#x9;dim subsubElement as EA.Element '' level 3&#xA;&#x9;&#x9;&#x9;dim subsubsubElement as EA.Element '' level 4&#xA;&#x9;&#x9;&#x9;dim subsubsubsubElement as EA.Element '' level 5&#xA;&#x9;&#x9;&#x9;dim subsubsubsubsubElement as EA.Element '' level 6&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;package &quot; + basePackageElement.Name)&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;'''level 1&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(packagesubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;''level 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in packagesubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubsubElement in subsubsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end If '' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'element selected&#xA;&#x9;&#x9;&#x9;dim Element as EA.Element&#xA;&#x9;&#x9;&#x9;set packagesubElement = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;createRelationship(packagesubElement)&#xA;&#x9;&#x9;&#x9;componentElementCount =componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;''level 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in packagesubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubsubElement in subsubsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end If '' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if componentElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;relationship created for for&quot; &amp;  componentElementCount &amp; &quot; Process.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;relationship can ONLY be created for elements of type&quot; &amp; Stereo, promptOK&#x9;&#x9;&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA; OnProjectBrowserScript()"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="517"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{943B61B5-D1C3-4df2-AF31-9CEEB8420E25}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DMM - Capabilities and Requirements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' Script Name: DMM - Capabilities and Requirements&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a diagram with 3 levels of capabilities and the related requirements as 4th level. WIP&#xA;' Date: 2022-06025&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting DMM&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'if element.MetaType = &quot;Aggregated Function&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;'next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting DMM diagram&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Capability&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;' *** FIRST LEVEL ***&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Capability&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 14&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile&#xA;&#x9;dim DomainProfile&#xA;&#x9;set DomainProfile = new ElementProfile&#xA;&#x9;DomainProfile.elementMetatype = &quot;Capability&quot;&#xA;&#x9;level1.elementProfiles.Add 1, DomainProfile&#xA;&#x9;&#xA;&#x9;' begin level 1 aggregated function element profile, nested relation profile&#xA;&#x9;dim DomainNested&#xA;&#x9;set DomainNested = new RelationProfile&#xA;&#x9;DomainNested.nestingType = &quot;Nested&quot;&#xA;&#x9;&#xA;&#x9;DomainProfile.relationProfiles.Add 1, DomainNested&#xA;&#x9;' end level 1 aggregated function element profile, nested relation profile&#xA;&#x9;' end level 1 aggregated function element profile&#xA;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;level2.objectHeight&#x9;= 110&#xA;&#x9;level2.objectWidth = 230&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 80&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile&#xA;&#x9;dim L2AFProfile&#xA;&#x9;set L2AFProfile = new ElementProfile&#xA;&#x9;L2AFProfile.elementMetatype = &quot;Aggregated Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2AFRelatedFunction&#xA;&#x9;set L2AFRelatedFunction = new RelationProfile&#xA;&#x9;L2AFRelatedFunction.nestingType = &quot;Related&quot;&#xA;&#x9;L2AFRelatedFunction.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2AFRelatedFunction.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L2AFRelatedFunction.relatedType = &quot;Class&quot;&#xA;&#x9;L2AFRelatedFunction.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L2AFProfile.relationProfiles.Add 1, L2AFRelatedFunction&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;' begin level 2 function element profile, AF relation profile&#xA;&#x9;dim L2AFRelatedAD&#xA;&#x9;set L2AFRelatedAD = new RelationProfile&#xA;&#x9;L2AFRelatedAD.nestingType = &quot;Related&quot;&#xA;&#x9;L2AFRelatedAD.relationType = &quot;Aggregation&quot;&#xA;&#x9;L2AFRelatedAD.relationStereotype = &quot;TMF_DomainAggregatesFunction&quot;&#xA;&#x9;L2AFRelatedAD.relatedType = &quot;Class&quot;&#xA;&#x9;L2AFRelatedAD.relatedStereotype = &quot;TMF_AF&quot;&#xA;&#x9;&#xA;&#x9;L2AFProfile.relationProfiles.Add 2, L2AFRelatedAD&#xA;&#x9;' end level 2 function element profile, AF relation profile&#xA;&#x9;&#xA;&#x9;level2.elementProfiles.Add 1, L2AFProfile&#xA;&#x9;' end level 2 function element profile&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL *** &#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 4&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#x9;level3.elementMetatype = &quot;Function&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 180&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 9&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile&#xA;&#x9;dim L3FunctionProfile&#xA;&#x9;set L3FunctionProfile = new ElementProfile&#xA;&#x9;L3FunctionProfile.elementMetatype = &quot;Function&quot;&#xA;&#x9;&#xA;&#x9;' begin level 3 function element profile, AF relation profile&#xA;&#x9;dim L3FunctionRelatedAF&#xA;&#x9;set L3FunctionRelatedAF = new RelationProfile&#xA;&#x9;L3FunctionRelatedAF.nestingType = &quot;Related&quot;&#xA;&#x9;L3FunctionRelatedAF.relationType = &quot;Aggregation&quot;&#xA;&#x9;L3FunctionRelatedAF.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;L3FunctionRelatedAF.relatedType = &quot;Class&quot;&#xA;&#x9;L3FunctionRelatedAF.relatedStereotype = &quot;TMF_Function&quot;&#xA;&#x9;&#xA;&#x9;L3FunctionProfile.relationProfiles.Add 1, L3FunctionRelatedAF &#xA;&#x9;' end level 3 function element profile, function relation profile&#xA;&#x9;&#xA;&#x9;&#x9;level3.elementProfiles.Add 1, L3FunctionProfile&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL *** &#xA;&#x9;set level4 = New HierarchyLevel&#xA;'&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Requirement&quot;&#xA;&#x9;level4.objectHeight&#x9;= 30&#xA;&#x9;level4.objectWidth = 85&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.nestingType = &quot;Related&quot;&#xA;&#x9;level4.relationType = &quot;Aggregation&quot;&#xA;&#x9;level4.relationStereotype = &quot;TMF_AFAggregatesFunction&quot;&#xA;&#x9;level4.relatedType = &quot;Class&quot;&#xA;&#x9;level4.relatedStereotype = &quot;TMF_Function&quot;&#xA;'&#x9;&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;level4.objectStyle.lineWidth = 1&#xA;&#x9;level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="518"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7966BF70-924B-44e0-A4FF-FB4E52CA701D}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;FF - create composition&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Include&#xA;&#xA;' Script Name: Create FF Compositions&#xA;' Author: Giu Platania&#xA;' Purpose: THis script will traverse a project tree and extract all the element with a certain stereotype&#xA;' It will then get the children of the current element and create a relationship between the owner and the child&#xA;' Date: 2023.12&#xA;' TODO: add check to avoid duplicate relationship&#xA;' TODO:&#xA;' retrieve element&#xA;' retrieve Tagged Value called RefGUID&#xA;' get corresponding package&#xA;' get all element in that package&#xA;&#xA;&#xA;Dim componentElementCount, componentControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;componentElementCount = 0&#xA;componentControllerClassCreated = 0&#xA; dim Stereo, connType, connStereotype &#xA; Stereo = &quot;TMF_Function&quot;&#xA;connType = &quot;Aggregation&quot;&#xA;connStereotype = &quot;TMF::TMF_AFAggregatesFunction&quot;&#xA;&#xA;'&#xA;&#xA;Function createRelationship(fromElement)&#x9;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = getChildElementList(fromElement,Stereo) &#xA;&#x9;for each childElement in fromElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = stereo then&#xA;&#x9;&#x9;&#x9;addConnectorMDG childElement, connType, connStereotype, fromElement &#xA;&#x9;&#x9;&#x9;Session.Output( &quot;created relationship from &quot; + childElement.Name + &quot; to &quot; + fromElement.name )&#xA;&#x9;&#x9;&#x9;fromElement.Update&#xA;&#x9;&#x9;&#x9;childElement.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;end function&#xA; &#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element 'level 1&#xA;&#x9;&#x9;&#x9;dim subElement as EA.Element ''level 2&#xA;&#x9;&#x9;&#x9;dim subsubElement as EA.Element '' level 3&#xA;&#x9;&#x9;&#x9;dim subsubsubElement as EA.Element '' level 4&#xA;&#x9;&#x9;&#x9;dim subsubsubsubElement as EA.Element '' level 5&#xA;&#x9;&#x9;&#x9;dim subsubsubsubsubElement as EA.Element '' level 6&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;package &quot; + basePackageElement.Name)&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;'''level 1&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(packagesubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;''level 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in packagesubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubsubElement in subsubsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end If '' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'element selected&#xA;&#x9;&#x9;&#x9;dim Element as EA.Element&#xA;&#x9;&#x9;&#x9;set packagesubElement = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;createRelationship(packagesubElement)&#xA;&#x9;&#x9;&#x9;componentElementCount =componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;''level 2&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in packagesubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if subsubsubElement.Elements.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubsubsubElement in subsubsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createRelationship(subsubsubsubElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if '' lev 4&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end If '' level 3&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if componentElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;relationship created for for &quot; &amp;  componentElementCount &amp; &quot; &quot; &amp; Stereo, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;relationship can ONLY be created for elements of type&quot; &amp; Stereo, promptOK&#x9;&#x9;&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA; OnProjectBrowserScript()"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="519"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A7EC9417-1249-4f60-8B6C-3B76F984D6C6}"/>
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Test&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Model Management Utilities&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name:&#xA;' Author:&#xA;' Purpose:&#xA;' Date:&#xA;'&#xA;&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;dim jsonElement&#x9;as EA.Element&#xA;&#x9;dim sourceClass as EA.Element&#xA;&#x9;&#xA;&#x9;set jsonElement = Repository.GetElementByGuid (&quot;{C1763ED8-75C2-465d-B981-E385A2F406B5}&quot;)&#xA;&#x9;set sourceClass = Repository.GetElementByGuid (&quot;{8E4FF238-DAD9-4e5c-AD87-D9DD2042F5AB}&quot;)&#xA;&#x9;&#xA;&#x9;CreateAssociation sourceClass, jsonElement&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub CreateAssociation (sourceClass, sourceJsonElem)&#xA;    ' define variables&#xA;    dim connectorList&#xA;&#x9;dim targetElem as EA.Element&#xA;&#x9;dim targetJsonElem as EA.Element&#xA;&#x9;dim connectorGUID as EA.Connector&#xA;&#x9;dim connector&#x9;&#x9;AS EA.Connector&#xA;&#x9;' get all associations from sourceClass&#xA;&#x9;set connectorList = getRelatedSupplierElementList3 (sourceClass, &quot;Association&quot;, &quot;Class&quot;)&#xA;&#x9; &#xA;&#x9;' iterate associations and create &#xA;&#x9;for each connectorGUID in connectorList&#xA;&#x9;&#x9;set connector = Repository.GetConnectorByGuid (connectorGUID)&#xA;&#x9;&#x9;' search for element w/ target name and stereotype&#xA;&#x9;&#x9;set targetElem = Repository.GetElementByID(connector.SupplierID)&#xA;&#x9;&#x9;set targetJsonElem = lookupElement (targetElem.Name, &quot;TMF_JSON_Schema&quot;, &quot;Class&quot;)&#xA;&#x9;&#x9;' if not found, create element and association&#xA;&#x9;&#x9;if targetJsonElem = null then&#xA;&#x9;&#x9;&#x9;set targetJsonElem = TransferClass (targetElem, Repository.GetCurrentDiagram)&#xA;&#x9;&#x9;&#x9;addConnector sourceJsonElem, &quot;Association&quot;, &quot;TMF_Schema_Associates_Schema&quot;, targetJsonElem&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="520"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4AE8951F-D343-4f0d-9356-930631798EB4}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element -&amp;gt; displayTaggedValues&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;/*&#xA; * Script Name: &#x9;Populate Note with Tagged Values&#xA; * Author:&#x9;&#x9;&#x9;Nick Hoggard&#xA; * Purpose:&#x9;&#x9;&#x9;Extracts the Tagged Value (Name/Value) pairs from the Eement&#xA; * &#x9;&#x9;&#x9;&#x9;&#x9;(or Connector) associated with the Note, and replaces the note &#xA; * &#x9;&#x9;&#x9;&#x9;&#x9;content with a representation of these values.&#xA; * Date:&#x9;&#x9;&#x9;16/06/2018&#xA; * Sparx Version:&#x9;13.5&#xA; */&#xA;&#xA;function main()&#xA;{&#xA;&#x9;Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#x9;&#xA;&#x9;var selectedObject as EA.Element;&#xA;&#x9;var connector as EA.Connector;&#xA;&#x9;var associatedElement as EA.Element;&#xA;&#x9;var taggedValues as EA.Collection;&#xA;&#x9;var connectorID;&#xA;&#x9;&#xA;&#x9;selectedObject = Repository.GetContextObject();&#xA;&#x9;if (selectedObject.Type == &quot;Note&quot;) &#xA;&#x9;{&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// The note might be connected to either an Element, a Connector, Nothing, or More than 1 object&#xA;&#x9;&#x9;// Connecting to nothing, or to more than one object is not supported&#xA;&#x9;&#x9;// The connection between the note and the element must originate (ClientID) at the note and terminate (SupplierID)&#xA;&#x9;&#x9;// on the target object.&#xA;&#x9;&#x9;if (selectedObject.Connectors.Count == 0 &amp;&amp; selectedObject.MiscData(3) != &quot;&quot;) {&#xA;&#x9;&#x9;&#x9;// Sparx (13.5) stores a connection from a Note to a Connector in PDATA4 on the element record&#xA;&#x9;&#x9;&#x9;// &#x9;This is accessed via the MiscData(3) property.&#xA;&#x9;&#x9;&#x9;//  This is one of the aspects of this script that might not survive a Sparx version upgrade.&#xA;&#x9;&#x9;&#x9;// PDATA 4 is stored as &quot;idref1=ID;&quot;, so the ID has to be extracted before we find the connector&#xA;&#x9;&#x9;&#x9;connectorID = selectedObject.MiscData(3). replace(&quot;idref1=&quot;,&quot;&quot;).replace(&quot;;&quot;,&quot;&quot;);&#xA;&#x9;&#x9;&#x9;connector = Repository.GetConnectorByID(connectorID);&#xA;&#x9;&#x9;&#x9;taggedValues = connector.TaggedValues;&#xA;&#x9;&#x9;} else if (selectedObject.Connectors.Count == 1) {&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output (&quot;connector found! &quot; + selectedObject.Connectors.Count); &#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// If there is an object in the Connectors collection, this means the note is associated with an element.&#xA;&#x9;&#x9;&#x9;associatedElement = Repository.GetElementByID(selectedObject.Connectors.GetAt(0).SupplierID);&#xA;&#x9;&#x9;&#x9;Session.Output (&quot;element found! &quot; + associatedElement.name);&#xA;&#x9;&#x9;&#x9;taggedValues = associatedElement.TaggedValues;&#xA;&#x9;&#x9;} else { &#xA;&#x9;&#x9;&#x9;Session.Output (&quot;Incorrect number of connectors&quot; + selectedObject.Connectors.Count); &#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#x9;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;var output = &quot;&lt;u&gt;&lt;b&gt;TMF Properties&lt;/b&gt;&lt;/u&gt;\r\n&quot;;&#x9;&#xA;&#x9;&#x9;for ( var i = 0 ; i &lt; taggedValues.Count ; i++ )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var tv as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;output = output + &quot;&lt;b&gt;&quot; + taggedValues.GetAt(i).Name + &quot;&lt;/b&gt;  : &quot; + taggedValues.GetAt(i).Value + &quot;\r\n&quot;;&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Again, this is likely to be unsupported, but I like the &quot;Memo&quot; style for the notes&#xA;&#x9;&#x9;selectedObject.StyleEx=&quot;NS=1;&quot;;&#xA;&#x9;&#x9;selectedObject.Notes = output;&#xA;&#x9;&#x9;selectedObject.Update();&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Output (&quot;Incorrect element type, need a Note&quot;); &#xA;&#x9;&#x9;}&#xA;}&#xA;&#xA;&#xA;main(); &#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="521"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EEA1DEE3-6F0E-4d89-8D55-CA2CB509C344}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Set Stereotype To Rectangle style&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; *&#xA; * Script Name: Elements -&gt; Set Stereotype To Rectangle style&#xA; * Author: Giu Platania&#xA; * Purpose: set all the elements of a certain stereotype to the rectangle syle&#xA; * Date: 2023-12.04&#xA; */&#xA;&#xA;/*&#xA; * Diagram Script main function&#xA; */&#xA; &#xA;// constants&#xA;// the target stereotype for style modification&#xA;TARGET_STEREOTYPE = &quot;TMF_Process&quot;;&#xA;&#xA;// 0 to remove rect 1 to use rect&#xA;SET_RECT = 0;&#xA; &#xA;var repo as EA.Repository;&#xA;repo = Repository;&#xA; &#xA;function OnDiagramScript()&#xA;{&#xA;&#x9;// Get a reference to the current diagram&#xA;&#x9;var currentDiagram as EA.Diagram;&#xA;&#x9;currentDiagram = Repository.GetCurrentDiagram();&#xA;&#x9;//ONLY FOR DEBUGGING!&#xA;&#x9;if (currentDiagram == null){&#xA;&#x9;&#x9;currentDiagram = Repository.GetDiagramByGuid(&quot;{BD6B5062-3B7E-41cf-93E8-E9332DBB13B8}&quot;)&#xA;&#x9;}&#xA;&#x9;if ( currentDiagram != null )&#xA;&#x9;{&#xA;&#x9;&#x9;/*&#xA;&#x9;&#x9;var query as String;&#xA;&#x9;&#x9;query = &quot;SELECT t_diagramobjects.ObjectStyle FROM t_diagramobjects join t_diagram on t_diagram.Diagram_ID = t_diagramobjects.Diagram_ID join t_object on t_diagramobjects.Object_ID = t_object.Object_ID where t_diagram.ea_guid = '&quot; + currentDiagram.DiagramGUID + &quot;' and t_object.Stereotype = '&quot; + TARGET_STEREOTYPE + &quot;';&quot;;                            &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var xmlContent as String;&#xA;&#x9;&#x9;var xmlContent = repo.SQLQuery(query);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument&quot;);&#xA;&#x9;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;&#x9;xmlDOM.async = false;&#xA;&#x9;&#x9;var doc = xmlDOM.loadXML(xmlContent)&#xA;&#x9;&#x9;*/&#xA;&#x9;&#x9;for (let i = 0; i &lt; currentDiagram.DiagramObjects.Count; i++) {&#xA;&#x9;&#x9;&#x9;let currDiagramObj = currentDiagram.DiagramObjects.GetAt(i);&#xA;&#x9;&#x9;&#x9;let currObj = Repository.GetElementByID(currDiagramObj.ElementID);&#xA;&#x9;&#x9;&#x9;if (currObj.Stereotype != TARGET_STEREOTYPE){&#xA;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//var style as String;&#xA;&#x9;&#x9;&#x9;let style = currDiagramObj.Style;&#xA;&#x9;&#x9;&#x9;// Check if UCRect exists in the input string&#xA;&#x9;&#x9;&#x9;if (style.includes(&quot;UCRect&quot;)) {&#xA;&#x9;&#x9;&#x9;&#x9;// If UCRect exists, replace its value with 0&#xA;&#x9;&#x9;&#x9;&#x9;style = style.replace(/UCRect=[01]/, 'UCRect='+SET_RECT);&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;// If UCRect doesn't exist, add it to the end with a value of 0&#xA;&#x9;&#x9;&#x9;&#x9;style += &quot;;UCRect=&quot;+SET_RECT+&quot;;&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;currDiagramObj.Style = style;&#xA;&#x9;&#x9;&#x9;currDiagramObj.Update();&#xA;&#x9;&#x9;&#x9;currObj.Update();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;currentDiagram.Update();&#xA;&#x9;&#x9;Repository.ReloadDiagram(currentDiagram.DiagramID);&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt( &quot;This script requires a diagram to be visible.&quot;, promptOK)&#xA;&#x9;}&#xA;}&#xA;&#xA;OnDiagramScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="522"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CA845FF8-95B0-476d-B276-25ADBC7EF837}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Hide all top labels&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;/*&#xA; * Script Name: &#x9;&#xA; * Author:&#x9;&#x9;&#x9;G platania&#xA; * Purpose:&#x9;&#x9;&#x9;hides all the top labels in a diagram middle/top labels&#xA; * Date:&#x9;&#x9;&#x9;10/2023&#xA; * Sparx Version:&#x9;16.1&#xA; */&#xA;// Get a reference to the current diagram&#xA;var currentDiagram as EA.Diagram;&#xA;currentDiagram = Repository.GetCurrentDiagram();&#xA;&#xA;if (currentDiagram != null)&#xA;{&#xA;    for (var i = 0; i &lt; currentDiagram.DiagramLinks.Count; i++)&#xA;    {&#xA;        var currentDiagramLink as EA.DiagramLink;&#xA;        currentDiagramLink = currentDiagram.DiagramLinks.GetAt(i);&#xA;&#x9;&#x9; Session.Output(currentDiagramLink.);&#xA;&#xA;currentDiagramLink.Geometry = currentDiagramLink.Geometry&#xA;&#x9;&#x9;.replace(/(LLT=[^;]*HDN)=0([^;]*;)/, &quot;$1=1$2&quot;) &#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;.replace(/(LRT=[^;]*HDN)=0([^;]*;)/, &quot;$1=1$2&quot;) &#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;.replace(/LLT=;/, &quot;LLT=HDN=1;&quot;) &#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;.replace(/LRT=;/, &quot;LRT=HDN=1;&quot;); &#xA;        if (!currentDiagramLink.Update())&#xA;        {&#xA;            Session.Output(currentDiagramLink.GetLastError());&#xA;        }&#xA;    }&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="523"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{05401951-4662-45dd-A6B1-7E850D6ECB32}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; Hide Middle Top label&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="var currentDiagram as EA.Diagram;&#xA;currentDiagram = Repository.GetCurrentDiagram();&#xA;&#xA;if (currentDiagram != null)&#xA;{&#xA;    for (var i = 0; i &lt; currentDiagram.DiagramLinks.Count; i++)&#xA;    {&#xA;        var currentDiagramLink as EA.DiagramLink;&#xA;        currentDiagramLink = currentDiagram.DiagramLinks.GetAt(i);&#xA;&#xA;        // Set the geometry to hide middle top labels&#xA;        currentDiagramLink.Geometry = currentDiagramLink.Geometry&#xA;            .replace(/(LLT=[^;]*HDN)=0([^;]*;)/, &quot;$1=1$2&quot;)&#xA;            .replace(/(LRT=[^;]*HDN)=0([^;]*;)/, &quot;$1=1$2&quot;)&#xA;            .replace(/LLT=;/, &quot;LLT=HDN=1;&quot;)&#xA;            .replace(/LRT=;/, &quot;LRT=HDN=1;&quot;);&#xA;&#xA;        // Update the diagram link&#xA;        if (!currentDiagramLink.Update())&#xA;        {&#xA;            Session.Output(currentDiagramLink.GetLastError());&#xA;        }&#xA;    }&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="524"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1E4DA0A4-83B4-4a61-9F50-D60CD9C4D564}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Text Management Utilities&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;&#xA;Function StripHTMLCharacters(str)&#xA;    Dim htmlRegex&#xA;    Set htmlRegex = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;    &#xA;    ' Define the regular expression pattern to match HTML tags and entities&#xA;    htmlRegex.Pattern = &quot;&lt;[^&gt;]+&gt;|&amp;[^;]+;&quot;&#xA;    &#xA;    ' Replace HTML tags and entities with an empty string&#xA;    StripHTMLCharacters = htmlRegex.Replace(str, &quot;&quot;)&#xA;End Function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="525"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="Browser -TMF doc gen"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="526"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{60A4CD5F-D9DA-42d8-9DAF-506275284800}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen  Excel - Components &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project EC\EAC scripts]&#xA;'[group=EAC scripts]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Export components Tree to Excel&#xA;' Author: giu Platania&#xA;' Purpose: Exports the list of components to an excel file&#xA;' Date: 2023-12-08&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Export components&quot;&#xA;dim excelOutput&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#xA;&#x9;&#x9;'create the excel file&#xA;&#x9;&#x9;set excelOutput = new ExcelFile&#xA;&#x9;&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;Session.Output now() &amp; &quot; Starting components Export &quot;&#xA;&#x9;&#x9;'do the actual export&#xA;&#x9;&#x9;exportProgrammeTree()&#xA;&#x9;&#xA;&#x9;&#x9;' export the processes&#xA;&#x9;&#x9;Session.Output now() &amp; &quot; Exporting components' processes&quot;&#xA;&#x9;&#x9;exportProcesses()&#xA;&#x9;&#x9;'export the functions&#xA;&#x9;&#x9;Session.Output now() &amp; &quot; Exporting components' functions&quot;&#xA;&#x9;&#x9;exportFunction()&#xA;&#x9;&#x9;' export ABEs&#xA;&#x9;&#x9;&#x9;Session.Output now() &amp; &quot; Exporting components' ABEs&quot;&#xA;&#x9;&#x9;&#x9;exportABE()&#xA;&#x9;&#x9;' Export APIs&#xA;&#x9;&#x9;Session.Output now() &amp; &quot; Exporting components' APIs&quot;&#xA;&#x9;&#x9;exportAPI()&#x9;&#xA;&#x9;&#x9;excelOutput.save&#xA;&#x9;&#x9;excelOutput.close&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; Finished Export components Tree '&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;function defineHeader()&#xA;    dim messageHeaders(9)&#xA;    messageHeaders(0) = &quot;Function Block&quot;&#xA;    messageHeaders(1) = &quot;Component Name&quot;&#xA;    messageHeaders(2) = &quot;Short Name&quot; &#xA;    messageHeaders(3) = &quot;ID&quot;&#xA;    messageHeaders(4) = &quot;Status&quot; &#xA;    messageHeaders(5) = &quot;Version&quot;&#xA;    messageHeaders(6) = &quot;Release&quot; &#xA;    messageHeaders(7) = &quot;Description&quot; &#xA;&#x9;messageHeaders(8) =&quot;Remarks&quot;&#xA;    ' Return the messageHeaders array&#xA;    defineHeader = messageHeaders&#xA;end function&#xA;&#xA;function defineProcessHeader()&#xA;    dim messageHeaders(6)&#xA;    messageHeaders(0) = &quot;Component Name&quot;&#xA;    messageHeaders(1) = &quot;ID&quot;&#xA;    messageHeaders(2) = &quot;Process Name&quot; &#xA;    messageHeaders(3) = &quot;Process ID&quot;&#xA;    messageHeaders(4) = &quot;Proc. Level&quot; &#xA;    messageHeaders(5) = &quot;Process Documentation&quot;&#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineProcessHeader = messageHeaders&#xA;end function&#xA;&#xA;&#xA;function exportProgrammeTree()&#xA;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2&#xA;&#x9;&#xA;&#x9;getComponentList2 = &quot;SELECT ODAFunctionBlock.Name as  'ODA_FunctionslBlock', TMF_ODAComponents.Name as 'ComponentsName', TMF_ODAComponents.Alias as 'ComponentshortName',                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; CompID.value as 'ID', TMF_ODAComponents.status as 'status',                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; TMF_ODAComponents.version as 'version', TMF_ODAComponents.phase as 'Release', TMF_ODAComponents.Note as 'Description' , CompIssue.notes as 'Remarks'                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS TMF_ODAComponents                                                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_connector as connector ON TMF_ODAComponents.Object_ID = connector.Start_Object_ID                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS ODAFunctionBlock ON connector.End_Object_ID =  ODAFunctionBlock.Object_ID                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS CompID ON (CompID.Object_ID = TMF_ODAComponents.Object_ID AND CompID.property = 'ID')                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS CompIssue ON (CompIssue.Object_ID = TMF_ODAComponents.Object_ID AND CompIssue.property = 'issue')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE TMF_ODAComponents.Stereotype='TMF_ISC'                                                                                                                                                     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND  ODAFunctionBlock.Stereotype='TMF_ODAFunctionBlock'                                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND connector.Stereotype='TMF_BlockContainsFunction'                                                                                                                                             &quot;&#xA;&#x9;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineHeader()&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;Components&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.save&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function exportProcesses()&#xA;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2&#xA;&#x9;&#xA;&#x9;getComponentList2 = &quot;SELECT Distinct TMF_ODAComponents.name, TMF_IIC_ID.value as 'ComponentID', ProcID.value as ProcessID, TMF_Process.Name as  TMF_Process, HierarchiLevel.value as 'level', TMF_Process.Note as [Docs.Formatted]      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; --, CompID.value,  TMF_ODAComponents.Name as TMF_ODAComponents,                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS TMF_ODAComponents                                                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_connector as connector ON TMF_ODAComponents.Object_ID = connector.Start_Object_ID                                                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS TMF_Process ON connector.End_Object_ID =  TMF_Process.Object_ID                                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS ProcID ON (ProcID .Object_ID = TMF_Process.Object_ID                                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND ProcID .property = 'Process Identifier')                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS HierarchiLevel ON (HierarchiLevel.Object_ID = TMF_Process.Object_ID                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND HierarchiLevel.property = 'HierarchyLevel')&#x9;                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties TMF_IIC_ID on (TMF_IIC_ID.Object_ID = TMF_ODAComponents.Object_ID AND TMF_IIC_ID.property = 'ID')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE TMF_ODAComponents.Stereotype='TMF_IIC'                                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND  TMF_Process.Stereotype='TMF_Process'                                                                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND connector.Stereotype='TMF_ComponentDependsProcess'                                                                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND TMF_ODAComponents.status NOT like 'TODO'                                                                                                                                                                      &quot;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineProcessHeader()&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;Processes&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.save&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function defineAPIHeader()&#xA;    dim messageHeaders(6)&#xA;    messageHeaders(0) = &quot;Component Name&quot;&#xA;    messageHeaders(1) = &quot;ID&quot;&#xA;    messageHeaders(2) = &quot;API ID&quot; &#xA;    messageHeaders(3) = &quot;API Name&quot;&#xA;    messageHeaders(4) = &quot;Type&quot; &#xA;    messageHeaders(5) = &quot;Mandatory&quot;&#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineAPIHeader = messageHeaders&#xA;end function&#xA;&#xA;&#xA;function exportAPI()&#xA;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2&#xA;&#x9;&#xA;&#x9;getComponentList2 = &quot;SELECT TMF_IIC.name as 'component', TMF_IIC_ID.value as 'compID', TMF_API_ID.value as 'APIID', TMF_API.Name as  'API',                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Replace(Replace(TMF_API_INST.stereotype, 'TMF_ExposedAPI', 'Exposed API'), 'TMF_RequiredAPI', 'Dependent API')  as 'type',                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; TMF_API_INST_REQ.value as 'isMandatory'                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS TMF_IIC                                                                                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS TMF_API_INST on (TMF_API_INST.ParentID = TMF_IIC.Object_ID)                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS TMF_API on (TMF_API_INST.Classifier = TMF_API.Object_ID)                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties TMF_IIC_ID on (TMF_IIC_ID.Object_ID = TMF_IIC.Object_ID AND TMF_IIC_ID.property = 'ID')                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties TMF_API_ID on (TMF_API_ID.Object_ID = TMF_API.Object_ID AND TMF_API_ID.property = 'ID')                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties TMF_API_INST_REQ on (TMF_API_INST_REQ.Object_ID = TMF_API_INST.Object_ID)                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE TMF_IIC.Stereotype='TMF_IIC'                                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND (TMF_API_INST.Stereotype = 'TMF_ExposedAPI' OR TMF_API_INST.Stereotype = 'TMF_RequiredAPI' )                                                                                                     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND TMF_IIC.status NOT like 'TODO'                                                                                                                                                               &quot;   &#xA;&#x9;&#xA;&#x9;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineAPIHeader()&#x9;&#xA;&#x9;&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;API&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function defineABEHeader()&#xA;    dim messageHeaders(5)&#xA;    messageHeaders(0) = &quot;Component Name&quot;&#xA;    messageHeaders(1) = &quot;ID&quot;&#xA;    messageHeaders(2) = &quot;ABE Name&quot; &#xA;    messageHeaders(3) = &quot;Level&quot;&#xA;    messageHeaders(4) = &quot;ABE Documentation&quot; &#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineABEHeader = messageHeaders&#xA;end function&#xA;&#xA;&#xA;function exportABE()&#xA;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2&#xA;&#x9;&#xA;&#x9;getComponentList2 = &quot;SELECT distinct TMF_ODAComponents.name, TMF_IIC_ID.value, TMF_ABE.Name as  TMF_ABE, HierarchiLevel.value as 'level', TMF_ABE.Note as [Docs.Formatted]    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS TMF_ODAComponents                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_connector as connector ON TMF_ODAComponents.Object_ID = connector.Start_Object_ID                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties TMF_IIC_ID on (TMF_IIC_ID.Object_ID = TMF_ODAComponents.Object_ID AND TMF_IIC_ID.property = 'ID')                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS TMF_ABE ON connector.End_Object_ID=  TMF_ABE.Object_ID                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS HierarchiLevel ON (HierarchiLevel.Object_ID = TMF_ABE.Object_ID                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND HierarchiLevel.property = 'HierarchyLevel')&#x9;&#x9;&#x9;                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE TMF_ODAComponents.Stereotype='TMF_IIC'                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND TMF_ODAComponents.status NOT like 'TODO'                                                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND  TMF_ABE.Stereotype='TMF_ABE'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND connector.Stereotype='TMF_ComponentDependsOnABE'                                                                                                    &quot;&#xA;&#x9;&#xA;&#x9;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineABEHeader()&#x9;&#xA;&#x9;&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;ABE&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function defineFunctionHeader()&#xA;    dim messageHeaders(7)&#xA;    messageHeaders(0) = &quot;Component Name&quot;&#xA;    messageHeaders(1) = &quot;ID&quot;&#xA;    messageHeaders(2) = &quot;Function ID&quot; &#xA;    messageHeaders(4) = &quot;AF lev 2&quot;&#xA;    messageHeaders(5) = &quot;AF lev 1&quot; &#xA;    messageHeaders(6) = &quot;Function Documentation&quot; &#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineFunctionHeader = messageHeaders&#xA;end function&#xA;&#xA;&#xA;function exportFunction()&#xA;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2&#xA;&#x9;&#xA;&#x9;getComponentList2 = &quot;SELECT  TMF_ODAComponents.name, CompID.value,  FunctionIdentifier.value  as 'FunctionID', TMF_Function.Name as  TMF_Function, aDomain.Name as 'AggregatedFunctionLev2',  aDomain1.Name as AggregatedFunctionlev1,     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; TMF_Function.Note as [Docs.Formatted]                                                                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ---TMF_ODAComponents.Name as TMF_ODAComponents,                                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS TMF_ODAComponents                                                                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_connector as connector ON TMF_ODAComponents.Object_ID = connector.End_Object_ID                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS TMF_Function ON connector.Start_Object_ID =  TMF_Function.Object_ID                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS CompID ON (CompID.Object_ID = TMF_ODAComponents.Object_ID                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND CompID.property = 'ID')                                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS FunctionIdentifier ON (FunctionIdentifier.Object_ID = TMF_Function.Object_ID                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND FunctionIdentifier.property = 'Function Identifier')                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; -- AF lev 2                                                                                                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_connector as DomainConnector ON (TMF_Function.Object_ID = DomainConnector.Start_Object_ID                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND (DomainConnector.Stereotype = 'TMF_DomainAggregatesFunction' OR DomainConnector.Stereotype = 'TMF_AFAggregatesFunction'))                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS aDomain ON DomainConnector.End_Object_ID= aDomain.Object_ID                                                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; -- AF lev 1                                                                                                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_connector as Domain1Connector1 ON (aDomain.Object_ID = Domain1Connector1.Start_Object_ID                                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND (Domain1Connector1.Stereotype = 'TMF_DomainAggregatesDomain' OR Domain1Connector1.Stereotype = 'TMF_AFAggregatesAF'))                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_object AS aDomain1 ON Domain1Connector1.End_Object_ID= aDomain1.Object_ID&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE TMF_ODAComponents.Stereotype='TMF_IIC'                                                                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND  TMF_Function.Stereotype='TMF_Function'                                                                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND connector.Connector_Type ='Dependency'                                                                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND TMF_ODAComponents.status NOT like 'TODO'                                                                                                                                                                          &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineFunctionHeader()&#x9;&#xA;&#x9;&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;Function&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="527"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F0843510-57D3-4ef7-AADB-87FFB179DD3C}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen Excel - FF&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project EC\EAC scripts]&#xA;'[group=EAC scripts]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: Export components Tree to Excel, including tabs for Functions, Aggregated Functions amd AF of level 1&#xA;' Author: giu Platania&#xA;' Purpose: Exports the Programme tree to an excel file&#xA;' Date: 2023-04-11&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Export Functional Framework&quot;&#xA;dim excelOutput&#xA;set excelOutput = new ExcelFile&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#xA;&#x9;&#x9;Session.Output now() &amp; &quot; Starting FF Export to Excel V4&quot;&#xA;&#x9;&#x9;'do the actual export&#xA;&#x9;&#x9;exportFunction()&#xA;&#x9;&#x9;exportAFAll()&#xA;&#x9;&#x9;exportAFlev1()&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; Finished Export FF Tree to Excel&quot;&#xA;&#x9;&#xA;end sub&#xA;&#xA;'' Headers&#xA;function defineHeader()&#xA;    dim messageHeaders(4)&#xA;    messageHeaders(0) = &quot;Vertical&quot;&#xA;    messageHeaders(1) = &quot;Domain&quot;&#xA;    messageHeaders(2) = &quot;AF&quot; &#xA;    messageHeaders(3) = &quot;Description&quot;&#xA;    ' Return the messageHeaders array&#xA;    defineHeader = messageHeaders&#xA;end function&#xA;&#xA;&#xA;function defineHeaderAF()&#xA;   dim messageHeaders(5)&#xA;    messageHeaders(0) = &quot;ID&quot;&#xA;&#x9;messageHeaders(1) =&quot;UID&quot;&#xA;    messageHeaders(2) = &quot;AF&quot;&#xA;    messageHeaders(3) = &quot;Hierarchy&quot; &#xA;    messageHeaders(4) = &quot;Description&quot;&#xA;    ' Return the messageHeaders array&#xA;    defineHeaderAF = messageHeaders&#xA;end function&#xA;&#xA;function defineHeaderFunction&#xA;&#x9;dim messageHeaders(8)&#xA;    messageHeaders(0) = &quot;Domain&quot;&#xA;    messageHeaders(1) = &quot;AF Lev.1&quot;&#xA;    messageHeaders(2) = &quot;AF Lev.2'&quot; &#xA;    messageHeaders(3) = &quot;Function Name&quot;&#xA;&#x9;messageHeaders(4) = &quot;Function ID&quot;&#xA;&#x9;messageHeaders(5) = &quot;UID&quot;&#xA;&#x9;messageHeaders(6) = &quot;Description&quot;&#xA;&#x9;messageHeaders(7) = &quot;Vertical&quot;&#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineHeaderFunction = messageHeaders&#xA;end function&#xA;&#xA;function exportAFLev1()&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; Exporting AF Lev 1 &quot;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2, getComponentList3&#xA;&#xA;&#x9;getComponentList2 = &quot;SELECT  Distinct                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     'Vertical' = STUFF(                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         verticalNames.VerticalList, 1, 1, ''),                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; mainDomain.name as 'Domain', aDomain.name as 'AF',  aDomain.Note as [Docs.Formatted]                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS aDomain                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left JOIN t_connector as domainConnector ON (aDomain.Object_ID = domainConnector.Start_Object_ID                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;               AND (domainConnector.Stereotype = 'TMF_DomainAggregatesDomain' OR domainConnector.Stereotype = 'TMF_DomainAggregatesFunction' ))   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left JOIN t_object AS mainDomain ON domainConnector.End_Object_ID= mainDomain.Object_ID                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; left JOIN  t_objectproperties AS HierarchyLevel ON (HierarchyLevel.Object_ID = aDomain.Object_ID                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                AND HierarchyLevel.property = 'HierarchyLevel')                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; OUTER APPLY (                                                                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     SELECT (SELECT ',' + aVertical.name                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             FROM t_connector AS VerticalConnector                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             LEFT JOIN t_object AS aVertical ON VerticalConnector.End_Object_ID = aVertical.Object_ID                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             WHERE VerticalConnector.Start_Object_ID = aDomain.Object_ID                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                 AND VerticalConnector.Connector_Type = 'Dependency'                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') AS VerticalList                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ) AS verticalNames                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE aDomain.Stereotype = 'TMF_AF'                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND HierarchyLevel.value = '1'                                                                                                                   &quot;                                                                                                                          &#xA;&#x9;dim arrayResult&#xA;&#x9;'set arrayResult = CreateObject( &quot;System.Collections.ArrayList&quot; )&#xA;&#x9;&#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;dim i  ' as integer&#xA;&#x9;dim modifiedString ' as string&#xA;&#x9;messageHeaders = defineHeader()&#xA;&#xA;&#x9;if Ubound(arrayResult) &gt; 0 then&#xA;&#x9;&#xA;&#x9;&#x9;For i = 0 To UBound(arrayResult)&#xA;&#x9;&#x9;&#x9;modifiedString = StripHTMLCharacters(arrayResult(i, 3)) ' Accessing the string at position 4 (index 3) of each object&#xA;&#x9;&#x9;' Update the string property in the object&#xA;&#x9;&#x9;&#x9;arrayResult(i,3) =  modifiedString&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;excelOutput.createTab &quot;AF lev 1&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;&#x9;excelOutput.save&#xA;&#x9;&#x9;&#x9;' last tab so close the file&#xA;&#x9;&#x9;&#x9;&#x9;excelOutput.close&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function exportAFAll()&#xA;&#x9;Session.Output  now() &amp; &quot; Exporting AF all &quot;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getComponentList&#xA;&#x9;dim getComponentList2&#xA;&#x9;&#x9;getComponentList2 = &quot;SELECT    FunctionID.Value As 'ID', UID.Value as 'UID', aDomain.name as 'AF', HierarchyLevel.value As 'Hierarchy',  aDomain.Note as [Docs.Formatted]   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS aDomain                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS FunctionID ON (FunctionID.Object_ID = aDomain.Object_ID                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                AND FunctionID.property = 'FunctionID')                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS UID ON (UID.Object_ID = aDomain.Object_ID                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                AND UID.property = 'UID')                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN  t_objectproperties AS HierarchyLevel ON (HierarchyLevel.Object_ID = aDomain.Object_ID                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                AND HierarchyLevel.property = 'HierarchyLevel')&#x9;&#x9;&#x9;                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE aDomain.Stereotype = 'TMF_AF'                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND aDomain.status NOT LIKE '%TODO%'                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; order by FunctionID.value  ASC                                                                                                  &quot;&#xA;&#x9;dim i  ' as integer&#xA;&#x9;dim modifiedString ' as string&#xA;&#x9;dim arrayResult&#xA;&#x9;'set arrayResult = CreateObject( &quot;System.Collections.ArrayList&quot; )&#xA;&#x9;arrayResult = getArrayFromQuery(getComponentList2)&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineHeaderAF()&#xA;&#x9;&#xA;&#x9;&#x9;if IsArray(arrayResult) and UBound(arrayResult) &gt; -1 then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;For i = 0 To UBound(arrayResult)&#xA;&#x9;&#x9;&#x9;&#x9;modifiedString = StripHTMLCharacters(arrayResult(i, 3)) ' Accessing the string at position 4 (index 3) of each object&#xA;&#x9;&#x9;&#x9;'&#x9; Update the string property in the object&#xA;&#x9;&#x9;&#x9;&#x9;arrayResult(i,3) =  modifiedString&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;&#x9;&#x9;&#x9;&#x9;excelOutput.createTab &quot;AF All&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;&#x9;'excelOutput.save&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Output  now() &amp; &quot; Empty query!&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function exportFunction()&#xA;&#x9;Session.Output  now() &amp; &quot; Exporting Functions&quot;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;dim getPogrammeTreeContents2&#xA;&#x9;&#xA;&#x9;' new query with aggregation of vertical&#xA;&#x9;getPogrammeTreeContents = &quot;SELECT DISTINCT                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     RealDomain.name AS 'Domain',                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     aDomain1.name AS 'AFLev.1',                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     aDomain.name AS 'AFLev.2',                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     TMF_Function.Name AS 'Function',                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     FunctionID.value AS 'FunctionID',                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     SystemID.value AS 'SustemID',                                                              &#x9;   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     TMF_Function.Note as [Docs.Formatted],                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     'Vertical' = STUFF(                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         verticalNames.VerticalList, 1, 1, ''                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     )                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     t_object AS TMF_Function                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Inner JOIN t_connector AS DomainConnector ON                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     TMF_Function.Object_ID = DomainConnector.Start_Object_ID AND                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     (                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         DomainConnector.Stereotype = 'TMF_DomainAggregatesFunction' OR                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         DomainConnector.Stereotype = 'TMF_AFAggregatesFunction'                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     )                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Inner JOIN t_object AS aDomain ON DomainConnector.End_Object_ID = aDomain.Object_ID                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_connector AS Domain1Connector1 ON                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     aDomain.Object_ID = Domain1Connector1.Start_Object_ID AND                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     (                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         Domain1Connector1.Stereotype = 'TMF_DomainAggregatesDomain' OR                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         Domain1Connector1.Stereotype = 'TMF_AFAggregatesAF'                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     )                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_object AS aDomain1 ON Domain1Connector1.End_Object_ID = aDomain1.Object_ID                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_connector AS DomainConnector2 ON                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     aDomain1.Object_ID = DomainConnector2.Start_Object_ID AND                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     (                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         DomainConnector2.Stereotype = 'TMF_DomainAggregatesDomain' OR                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;         DomainConnector2.Stereotype = 'TMF_DomainAggregatesFunction'                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     )                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_object AS RealDomain ON                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     DomainConnector2.End_Object_ID = RealDomain.Object_ID AND                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     RealDomain.Stereotype = 'TMF_Domain'                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_objectproperties AS FunctionID ON                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     FunctionID.Object_ID = TMF_Function.Object_ID AND                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     FunctionID.property = 'Function Identifier'                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_objectproperties AS SystemID ON                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     SystemID.Object_ID = TMF_Function.Object_ID AND                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     SystemID.property = 'System ID'   &#x9;&#x9;&#x9;                                                     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; OUTER APPLY (                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;     SELECT (SELECT ',' + aVertical.name                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             FROM t_connector AS VerticalConnector                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             LEFT JOIN t_object AS aVertical ON VerticalConnector.End_Object_ID = aVertical.Object_ID   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             WHERE VerticalConnector.Start_Object_ID = aDomain1.Object_ID                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                 AND VerticalConnector.Connector_Type = 'Dependency'                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;             FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)') AS VerticalList                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; ) AS verticalNames                                                                                     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE TMF_Function.Stereotype = 'TMF_Function'                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND TMF_Function.status NOT LIKE '%TODO%'                                                              &quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;dim arrayResult&#xA;&#x9;'set arrayResult = CreateObject( &quot;System.Collections.ArrayList&quot; )&#xA;&#x9;&#xA;&#x9;arrayResult = getArrayFromQuery(getPogrammeTreeContents)&#xA;&#x9;dim messageHeaders&#xA;&#x9;dim i  ' as integer&#xA;&#x9;dim modifiedString ' as string&#xA;&#x9;messageHeaders = defineHeaderFunction()&#xA;&#x9;&#xA;&#x9;if IsArray(arrayResult) and UBound(arrayResult) &gt; -1 then&#xA;&#x9;&#x9;For i = 0 To UBound(arrayResult)&#xA;&#x9;&#x9;modifiedString = StripHTMLCharacters(arrayResult(i, 5)) ' Accessing the string at position 4 (index 3) of each object&#xA;    ' Update the string property in the object&#xA;&#x9;&#x9;arrayResult(i,5) =  modifiedString&#xA;&#x9;Next&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#x9;&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;Functions&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.saveTab&#x9;&#xA;&#x9;end if&#x9;&#x9;&#xA;end function&#xA;&#xA;Function StripHTMLCharacters(str)&#xA;&#x9;'Session.Output  now() &amp; &quot; stripping HTML&quot;&#xA;&#x9;On Error Resume Next&#xA;    Dim htmlRegex&#xA;    Set htmlRegex = CreateObject(&quot;VBScript.RegExp&quot;)&#xA;&#x9; If htmlRegex Is Nothing Then&#xA;        ' The VBScript.RegExp library is missing; return the original string&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; The VBScript.RegExp library is missing; return the original string&quot;&#xA;        StripHTMLCharacters = str&#xA;    Else&#xA;&#x9;&#x9;'Session.Output  now() &amp; &quot; The VBScript.RegExp library is present&quot;&#xA;&#x9;&#x9;htmlRegex.IgnoreCase = True&#xA;&#x9;&#x9;htmlRegex.Global = True&#xA;&#x9;&#x9;' Define the regular expression pattern to match HTML tags and entities&#xA;&#x9;&#x9;htmlRegex.Pattern = &quot;&lt;[^&gt;]+&gt;|&amp;[^;]+;&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' Replace HTML tags and entities with an empty string&#xA;&#x9;&#x9;StripHTMLCharacters = htmlRegex.Replace(str, &quot;&quot;)&#xA;&#x9;end if&#xA;End Function&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="528"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8E07598B-E4E9-466a-8443-1A337E03D754}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;conf Docx - Components&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;'&#xA;' Script Name: conf Docx - Components&#xA;' Author: Giu Platania&#xA;' Purpose: setup the generator to generate a TMFCXXX IIC component&#xA;' Instructions:&#xA;' 1. Ensure that a template called 'TMFCXXX_Appendix&quot; is present under Resources.Document Publ;ishing.Custom Template.Components Appendix &#xA;' 2. Navigate to a diagram where the IIC is located&#xA;' 3. RIght click on the IIC, select specialize.scripts.conf Docx - Components&#xA;' 4. navigate to the MODA.Documents.Document Generator.Components Documents.Component Document Generation&#xA;' &#xA;' Date: 2023-04-19&#xA;'&#xA;&#xA;class DocumentSelectedComponent&#xA;&#xA;    ' Define a method to set the SearchValue tagged value of the specified element&#xA;    Public Sub SetSearchValue(elementGuid)&#xA;        Dim searchValueElement&#xA;&#x9;&#x9;' main element&#xA;        Set searchValueElement = Repository.GetElementByGuid(&quot;{93FA3D76-E022-4737-A34E-981F0145DCFA}&quot;)&#xA;        Dim taggedValues&#xA;&#x9;&#x9;Set taggedValues = searchValueElement.TaggedValues&#xA;&#x9;&#x9;Dim taggedValue&#xA;        For Each taggedValue In taggedValues&#xA;            If taggedValue.Name = &quot;SearchValue&quot; Then&#xA;                taggedValue.Value = elementGuid&#xA;                taggedValue.Update()&#xA;                Exit For&#xA;            End If&#xA;        Next&#xA;        searchValueElement.Update()&#xA;    End Sub&#xA;    &#xA;    Public Sub UpdateAppendixTemplate(element)&#xA;&#x9;&#x9;Dim RTFTemplateName&#xA;&#x9;&#x9;RTFTemplateName = &quot;&quot;&#xA;&#x9;&#x9;Dim taggedValue&#xA;&#x9;&#x9;For Each taggedValue In element.taggedValues&#xA;            If taggedValue.Name = &quot;ID&quot; Then&#xA;                RTFTemplateName = RTFTemplateName+taggedValue.Value+&quot;_Appendix&quot;&#xA;                Exit For&#xA;            End If&#xA;        Next&#xA;&#x9;&#x9;Dim endElement&#xA;&#x9;&#x9;' Model Document appendix&#xA;&#x9;&#x9;' TODO need first to look for the existence of the template&#xA;&#x9;&#x9;&#xA;        Set endElement = Repository.GetElementByGuid(&quot;{846C6AEB-0BCD-4f9f-84CE-F3AA881B981C}&quot;)&#xA;&#x9;&#x9;For Each taggedValue In endElement.taggedValues&#xA;            If taggedValue.Name = &quot;RTFTemplate&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;taggedValue.Value = RTFTemplateName&#xA;&#x9;&#x9;&#x9; 'taggedValue.Value =  &quot;{0414AC96-337F-4ead-B819-21EF097AEE2F}&quot;&#xA;                taggedValue.Update()&#xA;                Exit For&#xA;            End If&#xA;        Next&#xA;        endElement.Update()&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' Define a method to open the Generate Documentation dialog&#xA;&#x9;' NOT IN USE&#xA;    Public Sub OpenGenerateDocumentation&#xA;&#x9;&#x9;Dim docGenerator As EA.DocumentGenerator&#xA;        Set docGenerator = Repository.CreateDocumentGenerator()&#xA;&#x9;&#x9;docGenerator.NewDocument &quot;&quot;&#xA;        docGenerator.DocumentElement &quot;{AF22BFE9-E653-4d73-9FFF-CBB5F2CA1CEC}&quot;, 0&#xA;    End Sub&#xA;&#x9;&#xA;&#x9;public sub UpdateMasterDocument(Element)&#xA;&#x9;&#x9;&#x9;Dim masterElement&#xA;&#x9;&#x9;&#x9;Dim taggedValue&#xA;&#x9;&#x9;&#x9;dim componentID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Set componentID = Element.TaggedValues.GetByName(&quot;ID&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;' Model Document appendix&#xA;&#x9;&#x9;' TODO need first to look for the existence of the template&#xA;&#x9;&#x9;&#xA;        Set masterElement = Repository.GetElementByGuid(&quot;{F2A36A2B-DF38-4f49-9699-5279DB9320F1}&quot;)&#xA;&#x9;&#x9;' e.g. TMFC001: Product Catalog Management v1.1.0&#x9;&#x9;&#xA;&#x9;&#x9;masterElement.Name = componentID.value &amp; &quot;: &quot; &amp; Element.Name &amp; &quot; v.&quot; &amp; Element.version&#xA;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Set taggedValue = masterElement.TaggedValues.GetByName(&quot;ReportTitle&quot;)          &#xA;                taggedValue.Value =  componentID.value&#xA;                taggedValue.Update()&#xA; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Set taggedValue = masterElement.TaggedValues.GetByName(&quot;ReportName&quot;) &#xA;                taggedValue.Value = Element.name&#xA;                taggedValue.Update()&#xA;&#xA;&#x9;&#xA;&#x9;&#x9;   ' more efficient approach&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Set taggedValue = masterElement.TaggedValues.GetByName(&quot;ReportVersion&quot;)&#xA;&#x9;&#x9;&#x9;taggedValue.Value = Element.version&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;taggedValue.Update()&#x9;&#x9;   &#xA;&#x9;&#x9;   masterElement.Update()   &#xA;&#x9;End Sub&#xA;&#x9;&#x9;&#xA;end class&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;dim diagramID&#xA;&#x9;&#x9;' the diagram ID where the generator is located&#xA;&#x9;&#x9;diagramID = &quot;5978&quot;&#xA;&#x9;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;' Get a reference to any selected objects&#xA;&#x9;&#x9;dim selectedObjects  as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; # selected &quot; &amp; selectedObjects.Count&#xA;&#xA;&#x9;' Get a reference to the current element&#xA;&#x9;dim currentElement as EA.Element&#xA;&#x9;'' this is wrong, you want to select in the diagram&#xA;&#x9;'' set currentElement = Repository.GetTreeSelectedObject()&#xA;&#x9;else &#x9;&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#x9;&#xA;   If selectedObjects.Count &gt; 0 Then&#xA;        Set currentElement = Repository.GetElementByID(selectedObjects(0).ElementID)&#xA;    End If&#xA;&#x9;&#xA;&#x9;'' Giu: this needs to be the stereotype&#xA;&#x9;&#x9;Session.Output  now() &amp; &quot; selected: &quot; &amp;  currentElement.Stereotype&#xA;&#x9;If currentElement.Stereotype &lt;&gt; &quot;TMF_IIC&quot; Then&#xA;&#x9;&#x9;Session.Prompt &quot;ERROR! This script requires an IIC to be selected a&quot; &amp;  currentElement.Stereotype , promptOK&#xA;&#x9;&#x9;Set currentElement = Nothing&#xA;&#x9;End If&#xA;&#xA;&#x9;if not currentElement is nothing then&#xA;&#x9;&#x9;dim genDoc&#xA;&#x9;&#x9;set genDoc = new DocumentSelectedComponent&#xA;&#x9;&#x9;genDoc.SetSearchValue(currentElement.ElementGUID)&#xA;&#x9;&#x9;genDoc.UpdateAppendixTemplate(currentElement)&#xA;&#x9;&#x9;genDoc.UpdateMasterDocument(currentElement)&#xA;&#x9;&#x9;Repository.OpenDiagram(diagramID)&#xA;&#x9;&#x9;Session.Prompt currentElement.Name &amp; &quot; configured! Please start the generation with F8&quot;, promptOK&#xA;&#x9;end if&#xA;&#x9;&#xA;&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="529"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8528E764-B3C0-4300-8CC1-4679F4D3749C}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen Excel - Metrics&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project EC\EAC scripts]&#xA;'[group=EAC scripts]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;'&#xA;' Script Name: gen Excel - Metrics&#xA;' Author: Giu Platania&#xA;' Purpose: Exports the full list of  to an excel file&#xA;' Date: 2023/04&#xA;'&#xA;'name of the output tab&#xA;const outPutName = &quot;Export Metrics&quot;&#xA;dim excelOutput&#xA;&#xA;sub main&#xA;&#xA;&#x9;'create output tab&#xA;&#x9;Repository.CreateOutputTab outPutName&#xA;&#x9;Repository.ClearOutput outPutName&#xA;&#x9;Repository.EnsureOutputVisible outPutName&#xA;&#xA;&#xA;&#x9;&#x9;'tell the user we are starting&#xA;&#x9;&#x9;'Repository.WriteOutput outPutName, now() &amp; &quot; Starting Export metric processes Tree &quot;&#xA;&#x9;&#x9;Session.Output &quot;Starting Export Metric Tree&quot;&#xA;&#x9;&#x9;' create the file&#xA;&#x9;&#x9;set excelOutput = new ExcelFile&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;exportmetricnotfullydevelopedTree&#xA;&#x9;&#x9;exportmetricTree&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' close the file&#xA;&#x9;&#x9;&#x9;excelOutput.save&#xA;&#x9;&#x9;' close file&#xA;&#x9;&#x9;excelOutput.close&#xA;&#x9;&#x9;'tell the user we are finished&#xA;&#x9;&#x9;Session.Output &quot; Finished Export Metric Tree '&quot; &#xA;&#xA;&#x9;&#xA;end sub&#xA;&#xA;function exportmetricTree()&#xA;&#x9;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;getPogrammeTreeContents = &#x9;&quot;select CAST(tid.value as int) as tid, mgroup.value as 'group',  maturity.value as 'maturity',  Metric.Name as  Metric,  metrictype.value as 'metricType',     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; category1.value as 'category1', category2.value as 'category2',   category3.value as 'category3',                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Note as 'Description', units.value as 'units', process.name as eTOMmapping,  ABE.name as ABE,                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  txtformula.value as 'textFormula', busvalue.Notes as 'BusinessValue'                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from ((((((((((((((t_object Metric                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS units ON units.Object_ID = Metric.Object_ID)                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS busvalue ON busvalue.Object_ID = Metric.Object_ID)                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS txtformula ON txtformula.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category3 ON category3.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category2 ON category2.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category1 ON category1.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS maturity ON maturity.Object_ID = Metric.Object_ID)                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS mgroup ON mgroup.Object_ID = Metric.Object_ID)                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS metrictype ON metrictype.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS tid ON (tid.Object_ID = Metric.Object_ID AND tid.property='tid'))                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_connector con on con.End_Object_ID = Metric.Object_ID)                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_object process on process.Object_ID = con.Start_Object_ID)                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_connector con2 on con2.Start_Object_ID = Metric.Object_ID)                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_object ABE on ABE.Object_ID = con2.End_Object_ID)                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Stereotype='TMF_Metric'                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and process.Stereotype='TMF_Process'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and con.Stereotype= 'TMF_isMeasuredBy'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and con2.Connector_Type='Dependency'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ABE.Stereotype='TMF_ABE'                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND metrictype.property='metrictype'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND mgroup.property='group'                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND maturity.property='maturity'                                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category1.property = 'category1'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category2.property = 'category2'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category3.property = 'category3'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and txtformula.property = 'txtformula'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and busvalue.property = 'busvalue'                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and units.property = 'units'                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ( maturity.value ='3-Validated' OR maturity.value='4-Normalized' OR maturity.value='5-Benchmarked')                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; UNION                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select CAST(tid.value as int) as tid,  mgroup.value as 'group',  maturity.value as 'maturity',  Metric.Name as  Metric,                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; category1.value as 'category1', category2.value as 'category2',   category3.value as 'category3',                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  metrictype.value as 'metricType', units.value as 'units',                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Note as 'Description', process.value as eTOMmapping,  ABE.value as ABE,                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  txtformula.value as 'textFormula', busvalue.Notes as 'BusinessValue'                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from ((((((((((((t_object Metric                                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS ABE ON ABE.Object_ID = Metric.Object_ID)                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS process ON process.Object_ID = Metric.Object_ID)                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS units ON units.Object_ID = Metric.Object_ID)                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS busvalue ON busvalue.Object_ID = Metric.Object_ID)                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS txtformula ON txtformula.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category3 ON category3.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category2 ON category2.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category1 ON category1.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS maturity ON (maturity.Object_ID = Metric.Object_ID  AND maturity.property='maturity'))                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS mgroup ON mgroup.Object_ID = Metric.Object_ID)                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS metrictype ON metrictype.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS tid ON tid.Object_ID = Metric.Object_ID)                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Stereotype='TMF_Metric'                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ABE.property='business objects'                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND process.property = 'etommapping'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND metrictype.property='metrictype'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND tid.property='tid'                                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND mgroup.property='group'                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category1.property = 'category1'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category2.property = 'category2'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category3.property = 'category3'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and txtformula.property = 'txtformula'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and busvalue.property = 'busvalue'                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and units.property = 'units'                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ( maturity.value ='3-Validated' OR maturity.value='4-Normalized' OR maturity.value='5-Benchmarked')                                                      &quot;&#xA;&#xA;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getPogrammeTreeContents)&#xA;&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineHeader()&#xA;&#x9;if IsArray(arrayResult) and UBound(arrayResult) &gt; -1 then&#x9;&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;METRICS-Main&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.saveTab&#xA;&#x9;&#x9;'excelOutput.close&#xA;&#x9;end if&#x9;&#xA;&#x9;&#xA;end function&#xA;&#xA;&#xA;function defineHeader()&#xA;    dim messageHeaders(14)&#xA;    messageHeaders(0) = &quot;tid&quot;&#xA;    messageHeaders(1) = &quot;Group&quot;&#xA;    messageHeaders(2) = &quot;Maturity&quot;&#xA;    messageHeaders(3) = &quot;Metric&quot;&#xA;    messageHeaders(4) = &quot;Metric Type&quot;&#xA;    messageHeaders(5) = &quot;Category 1&quot;&#xA;    messageHeaders(6) = &quot;Category 2&quot;&#xA;    messageHeaders(7) = &quot;Category 3&quot;&#xA;    messageHeaders(8) = &quot;Description&quot;&#xA;    messageHeaders(9) = &quot;units&quot;&#xA;    messageHeaders(10) = &quot;etomMapping&quot;&#xA;    messageHeaders(11) = &quot;ABE&quot;&#xA;    messageHeaders(12) = &quot;Text Formula&quot;&#xA;    messageHeaders(13) = &quot;Business Value&quot;&#xA;&#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineHeader = messageHeaders&#xA;end function&#xA;&#xA;function exportmetricnotfullydevelopedTree()&#xA;&#x9;&#xA;&#x9;dim getPogrammeTreeContents&#xA;&#x9;getPogrammeTreeContents = &#x9;&quot;select CAST(tid.value as int) as tid, mgroup.value as 'group',  maturity.value as 'maturity',  Metric.Name as  Metric,  metrictype.value as 'metricType',     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; category1.value as 'category1', category2.value as 'category2',   category3.value as 'category3',                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Note as 'Description', units.value as 'units', process.name as eTOMmapping,  ABE.name as ABE,                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  txtformula.value as 'textFormula', busvalue.Notes as 'BusinessValue'                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from ((((((((((((((t_object Metric                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS units ON units.Object_ID = Metric.Object_ID)                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS busvalue ON busvalue.Object_ID = Metric.Object_ID)                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS txtformula ON txtformula.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category3 ON category3.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category2 ON category2.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category1 ON category1.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS maturity ON maturity.Object_ID = Metric.Object_ID)                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS mgroup ON mgroup.Object_ID = Metric.Object_ID)                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS metrictype ON metrictype.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS tid ON (tid.Object_ID = Metric.Object_ID AND tid.property='tid'))                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_connector con on con.End_Object_ID = Metric.Object_ID)                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_object process on process.Object_ID = con.Start_Object_ID)                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_connector con2 on con2.Start_Object_ID = Metric.Object_ID)                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; full join t_object ABE on ABE.Object_ID = con2.End_Object_ID)                                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Stereotype='TMF_Metric'                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and process.Stereotype='TMF_Process'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and con.Stereotype= 'TMF_isMeasuredBy'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and con2.Connector_Type='Dependency'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ABE.Stereotype='TMF_ABE'                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND metrictype.property='metrictype'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND mgroup.property='group'                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND maturity.property='maturity'                                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category1.property = 'category1'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category2.property = 'category2'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category3.property = 'category3'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and txtformula.property = 'txtformula'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and busvalue.property = 'busvalue'                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and units.property = 'units'                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ( maturity.value ='3-Validated' OR maturity.value='4-Normalized' OR maturity.value='5-Benchmarked')                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; UNION                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; select CAST(tid.value as int) as tid,  mgroup.value as 'group',  maturity.value as 'maturity',  Metric.Name as  Metric,                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; category1.value as 'category1', category2.value as 'category2',   category3.value as 'category3',                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  metrictype.value as 'metricType', units.value as 'units',                                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Note as 'Description', process.value as eTOMmapping,  ABE.value as ABE,                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;  txtformula.value as 'textFormula', busvalue.Notes as 'BusinessValue'                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from ((((((((((((t_object Metric                                                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS ABE ON ABE.Object_ID = Metric.Object_ID)                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS process ON process.Object_ID = Metric.Object_ID)                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS units ON units.Object_ID = Metric.Object_ID)                                                                                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS busvalue ON busvalue.Object_ID = Metric.Object_ID)                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS txtformula ON txtformula.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category3 ON category3.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category2 ON category2.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS category1 ON category1.Object_ID = Metric.Object_ID)                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS maturity ON (maturity.Object_ID = Metric.Object_ID  AND maturity.property='maturity'))                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS mgroup ON mgroup.Object_ID = Metric.Object_ID)                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS metrictype ON metrictype.Object_ID = Metric.Object_ID)                                                                      &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_objectproperties AS tid ON tid.Object_ID = Metric.Object_ID)                                                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where                                                                                                                                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Metric.Stereotype='TMF_Metric'                                                                                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ABE.property='business objects'                                                                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND process.property = 'etommapping'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND metrictype.property='metrictype'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND tid.property='tid'                                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND mgroup.property='group'                                                                                                                                  &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;                                                                                                                                                              &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category1.property = 'category1'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category2.property = 'category2'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and category3.property = 'category3'                                                                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and txtformula.property = 'txtformula'                                                                                                                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and busvalue.property = 'busvalue'                                                                                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and units.property = 'units'                                                                                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND ( maturity.value ='1-Proposed' OR maturity.value='2-Defined')&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;                                                       &quot;&#xA;&#xA;dim arrayResult &#xA;&#x9;arrayResult = getArrayFromQuery(getPogrammeTreeContents)&#xA;&#xA;&#x9;dim messageHeaders&#xA;&#x9;messageHeaders = defineHeader()&#xA;&#x9;if IsArray(arrayResult) and UBound(arrayResult) &gt; -1 then&#x9;&#xA;&#x9;&#x9;dim mergedArray&#xA;&#x9;&#x9;mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;excelOutput.createTab &quot;METRICS-NotFullyDeveloped&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;&#x9;&#x9;'excelOutput.saveTab&#xA;&#x9;&#xA;&#x9;end if&#x9;&#xA;&#x9;&#xA;end function&#xA;&#xA;&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="531"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{65817D71-D8EE-4846-A9EE-AF7BE8719BF9}"/>
			<Column name="ScriptAuthor" value="{469E019B-C4EB-4F44-A523-F422AA39EDD6}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;eXAMPLEsEARCH&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * This code has been included from the default Search Script template.&#xA; * If you wish to modify this template, it is located in the Config\Script Templates&#xA; * directory of your EA install path.   &#xA; * &#xA; * Script Name:&#xA; * Author:&#xA; * Purpose:&#xA; * Date:&#xA; */&#xA;&#xA;// TODO 1: Define your search specification:&#xA;// The columns that will apear in the Model Search window&#xA;var SEARCH_SPECIFICATION = &quot;&lt;ReportViewData&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Fields&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=\&quot;CLASSGUID\&quot; /&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=\&quot;CLASSTYPE\&quot; /&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=\&quot;Element Name\&quot; /&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Field name=\&quot;Comments\&quot; /&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/Fields&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;Rows/&gt;&quot; +&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&lt;/ReportViewData&gt;&quot;;&#xA;&#xA;/*&#xA; * Search Script main function&#xA; */ &#xA;function OnSearchScript()&#xA;{&#x9;&#xA;&#x9;// Create a DOM object to represent the search tree&#xA;&#x9;var xmlDOM = new COMObject( &quot;MSXML2.DOMDocument.6.0&quot; );&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;&#xA;&#x9;// Load the search template&#xA;&#x9;if( xmlDOM.loadXML(SEARCH_SPECIFICATION) )&#xA;&#x9;{&#xA;&#x9;&#x9;var rowsNode = xmlDOM.selectSingleNode( &quot;//ReportViewData//Rows&quot; );&#xA;&#x9;&#xA;&#x9;&#x9;// TODO 2: Gather the required data from the repository&#xA;&#x9;&#x9;// This template adds a result row for a bogus class to the search document&#xA;&#x9;&#x9;AddRow( xmlDOM, rowsNode, &quot;{2917209A-D3E0-4de7-8AED-C7D7F059D96F}&quot;, &quot;ResultClass&quot;,&#xA;&#x9;&#x9;&#x9;&quot;Here are some comments about this class!&quot; );&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// Fill the Model Search window with the results&#xA;&#x9;&#x9;Repository.RunModelSearch( &quot;&quot;, &quot;&quot;, &quot;&quot;, xmlDOM.xml );&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt( &quot;Failed to load search xml&quot;, promptOK );&#xA;&#x9;}&#xA;}&#x9;&#xA;&#xA;/*&#xA; * TODO 3: Modify this function signature to include all information required for the search&#xA; * results. Entire objects (such as elements, attributes, operations etc) may be passed in.&#xA; *&#xA; * Adds an entry to the xml row node 'rowsNode'&#xA; */&#xA;function AddRow( xmlDOM, rowsNode, elementGUID, elementName, comments )&#xA;{&#xA;&#x9;// Create a Row node&#xA;&#x9;var row = xmlDOM.createElement( &quot;Row&quot; );&#xA;&#x9;&#xA;&#x9;// Add the Model Search row data to the DOM&#xA;&#x9;AddField( xmlDOM, row, &quot;CLASSGUID&quot;, elementGUID );&#xA;&#x9;AddField( xmlDOM, row, &quot;CLASSTYPE&quot;, &quot;Class&quot; );&#xA;&#x9;AddField( xmlDOM, row, &quot;Name&quot;, elementName );&#xA;&#x9;AddField( xmlDOM, row, &quot;Comments&quot;, comments );&#xA;&#x9;&#xA;&#x9;// Append the newly created row node to the rows node&#xA;&#x9;rowsNode.appendChild( row );&#xA;}&#xA;&#xA;/*&#xA; * Adds an Element to the DOM called Field which makes up the Row data for the Model Search window.&#xA; * &lt;Field name &quot;&quot; value &quot;&quot;/&gt;&#xA; */&#xA;function AddField( xmlDOM, row, name, value )&#xA;{&#xA;&#x9;var fieldNode = xmlDOM.createElement( &quot;Field&quot; );&#xA;&#x9;&#xA;&#x9;// Create first attribute for the name&#xA;&#x9;var nameAttribute = xmlDOM.createAttribute( &quot;name&quot; );&#xA;&#x9;nameAttribute.value = name;&#xA;&#x9;fieldNode.attributes.setNamedItem( nameAttribute );&#xA;&#x9;&#xA;&#x9;// Create second attribute for the value&#xA;&#x9;var valueAttribute = xmlDOM.createAttribute( &quot;value&quot; );&#xA;&#x9;valueAttribute.value = value;&#xA;&#x9;fieldNode.attributes.setNamedItem( valueAttribute );&#xA;&#x9;&#xA;&#x9;// Append the fieldNode&#xA;&#x9;row.appendChild( fieldNode );&#xA;}&#xA;&#xA;OnSearchScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="532"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{C03C1298-E6B0-4bd7-8EDB-F422E39295E3}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="testGroup"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="533"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3853DA3C-FD13-4200-90C4-64A59860521C}"/>
			<Column name="ScriptAuthor" value="{C03C1298-E6B0-4bd7-8EDB-F422E39295E3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Relationship Manager - create Relationship Diagrams&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC testGroup.JavaScript-Constants&#xA;!INC testGroup.JavaScript-XML&#xA;!INC testGroup.JavaScript-Database&#xA;/*&#xA; * Script Name: Relationship Manager - create Relationship Diagrams&#xA; * Author: Giu&#xA; * Purpose: this script create a set of diagrams that contains all the candidate relationships.&#xA; ' diagram are create inside the package MODA.Documents.AddInns.MODA Relationship Manager.diagrams&#xA; ' It's the companion of Show Candidate In Diagram and should execute before that.&#xA; * Date: 2023 12&#xA; */&#xA;var repo as EA.Repository;&#xA;repo = Repository;&#xA;&#xA;let baseGroup = 0;&#xA;&#xA;function main()&#xA;{&#xA;&#x9;let packageGuid = &quot;{D5259ADD-8012-4f18-8735-F8DFA3EF2C57}&quot;  /*MODA.Documents.AddInns.MODA Relationship Manager.diagrams*/&#xA;&#x9;var diagramPackage as EA.Package;&#xA;&#x9;diagramPackage = repo.GetPackageByGuid(packageGuid);&#xA;&#x9;&#xA;&#x9;baseGroup = getInitialGroup(packageGuid);&#xA;&#x9;&#xA;&#x9;var xmlContent = repo.SQLQuery(&quot;SELECT SourceElement.Object_ID as 'source_guid', TargetElement.Object_ID AS 'target_guid', conn.Connector_ID AS 'conn_ID'  FROM t_object AS TargetElement     INNER JOIN  &#x9;t_connector AS conn ON conn.End_Object_ID = TargetElement.Object_ID    INNER JOIN  &#x9;t_object AS SourceElement ON conn.Start_Object_ID = SourceElement.Object_ID    Inner Join  &#x9;t_connectortag Assessed ON (conn.Connector_ID = Assessed.ElementID  and Assessed.Property='Assessed')   Inner Join  &#x9;t_connectortag confidence ON (conn.Connector_ID = confidence.ElementID  and confidence.Property='confidence')   &#x9; Inner Join  &#x9;t_connectortag TargetStereotype  &#x9;ON (conn.Connector_ID = TargetStereotype.ElementID  and TargetStereotype.Property='TargetStereotype')  &#x9;WHERE conn.Stereotype = 'TMF_CandidateRelationship'   order by SourceElement.ea_guid DESC&quot;)                                                 &#xA;&#x9;&#xA;&#x9;Session.Output(xmlContent)&#xA;&#x9;var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument&quot;);&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;var doc = xmlDOM.loadXML(xmlContent)&#xA;&#x9;&#xA;&#x9;Session.Output(doc)&#xA;&#x9;Session.Output(&quot;running&quot;)&#xA;&#x9;&#xA;&#x9;let elements = []&#xA;&#x9;&#xA;&#x9;let existingRelationshipIDs = getExistingRelationships(packageGuid);&#xA;&#x9;&#xA;&#x9;// Get GUIDs of all elements&#xA;&#x9;let rowNodes = xmlDOM.documentElement.selectNodes(&quot;Dataset_0/Data/Row&quot;);&#xA;&#x9;&#xA;&#x9;for (let i = 0; i &lt; rowNodes.length; i++) {&#xA;&#x9;&#x9;let sourceGuid = rowNodes.item(i).childNodes.item(0).text;&#xA;&#x9;&#x9;let targetGuid = rowNodes.item(i).childNodes.item(1).text;&#xA;&#x9;&#x9;let relID = parseInt(rowNodes.item(i).childNodes.item(2).text);&#xA;&#x9;&#x9;if (existingRelationshipIDs.indexOf(relID) != -1){&#xA;&#x9;&#x9;&#x9;continue&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (targetGuid !== null &amp;&amp; sourceGuid !== null) {&#xA;&#x9;&#x9;&#x9;elements.push([sourceGuid, targetGuid, relID]);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;// entry: [diagram, index, visibleLinks, leftCount]&#xA;&#x9;var diagrams = [];&#xA;&#x9;&#x9;&#xA;&#x9;let diagramIndex = 0;&#xA;&#x9;&#xA;&#x9;var diagram as EA.Diagram;&#xA;&#x9;diagram = diagramPackage.Diagrams.AddNew(&quot;Relationship Diagram Group &quot;+baseGroup+&quot; Page 0&quot;, &quot;Class&quot;);&#xA;&#x9;&#xA;&#x9;diagramPackage.Update();&#xA;&#x9;diagram.Update();&#xA;&#x9;&#xA;&#x9;diagrams.push([[diagram], 0, [], 10]);&#xA;&#x9;&#x9;&#xA;&#x9;// loop element sets&#xA;&#x9;for (let i=0; i&lt;elements.length; i++) &#xA;&#x9;{&#xA;&#x9;&#x9;diagramIndex = 0;&#xA;&#x9;&#x9;let elementSet = elements[i];&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// get the current diagram set&#xA;&#x9;&#x9;let diagramSet = getDiagram(diagramPackage, diagrams, diagramIndex);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;// iterate down the diagram list until a diagram without either element is found&#xA;&#x9;&#x9;// pass the current element set and the last page&#xA;&#x9;&#x9;while (diagramContainsElements(elementSet, diagramSet[0][diagramSet[0].length-1]))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;diagramIndex += 1;&#xA;&#x9;&#x9;&#x9;diagramSet = getDiagram(diagramPackage, diagrams, diagramIndex);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;// add the element set to the diagram set&#xA;&#x9;&#x9;addElementSetToDiagram(diagramSet, elementSet);&#xA;&#x9;}&#xA;&#x9;diagramPackage.Update()&#xA;&#x9;// iterate all diagram sets&#xA;&#x9;for (let i=0; i&lt;diagrams.length; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;// get the diagramPage list&#xA;&#x9;&#x9;let diagramPages = diagrams[i][0];&#xA;&#x9;&#x9;// iterate the diagram pages&#xA;&#x9;&#x9;for (let n=0; n&lt;diagramPages.length; n++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//get the diagram page&#xA;&#x9;&#x9;&#x9;let diagram = diagramPages[n];&#xA;&#x9;&#x9;&#x9;// get the visible links list&#xA;&#x9;&#x9;&#x9;let visibleLinks = diagrams[i][2];&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagram.Update()&#xA;&#x9;&#x9;&#x9;diagram.DiagramLinks.Refresh();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// iterate all diagram links on page&#xA;&#x9;&#x9;&#x9;for (let n = 0; n&lt;diagram.DiagramLinks.Count; n++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// get link n&#xA;&#x9;&#x9;&#x9;&#x9;let link = diagram.DiagramLinks.GetAt(n);&#xA;&#x9;&#x9;&#x9;&#x9;// check if link n is in the visibleLinks list&#xA;&#x9;&#x9;&#x9;&#x9;let index = visibleLinks.indexOf(link.ConnectorID);&#xA;&#x9;&#x9;&#x9;&#x9;// if link n is not in visibleLinks hide it&#xA;&#x9;&#x9;&#x9;&#x9;if (index == -1)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;link.IsHidden = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;link.Update();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagram.DiagramLinks.Refresh()&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;// otherwise remove it from the list&#xA;&#x9;&#x9;&#x9;&#x9;//else&#xA;&#x9;&#x9;&#x9;&#x9;//{&#xA;&#x9;&#x9;&#x9;&#x9;//&#x9;visibleLinks.splice(index, 1);&#xA;&#x9;&#x9;&#x9;&#x9;//}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;// update the diagram&#xA;&#x9;&#x9;&#x9;diagram.Update();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;function getInitialGroup(packageGuid){&#xA;&#x9;&#xA;&#x9;let query = &quot;SELECT ISNULL(MAX(CAST(SUBSTRING(t_diagram.Name, CHARINDEX('Group ', t_diagram.Name) + 6, CHARINDEX(' Page', t_diagram.Name, CHARINDEX('Group ', t_diagram.Name) + 6) - (CHARINDEX('Group ', t_diagram.Name) + 6)) AS INT)), -1) AS max_group FROM t_diagram JOIN t_package on t_diagram.Package_ID = t_package.Package_ID WHERE t_package.ea_guid = '&quot;+ packageGuid +&quot;';&quot;&#xA;&#x9;let xmlContent = Repository.SQLQuery(query)&#xA;&#x9;var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument&quot;);&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;var doc = xmlDOM.loadXML(xmlContent)&#xA;&#x9;let rowNodes = xmlDOM.documentElement.selectNodes(&quot;Dataset_0/Data/Row&quot;);&#xA;&#x9;return parseInt(rowNodes.item(0).childNodes.item(0).text)+1;&#xA;&#x9;&#xA;}&#xA;&#xA;function getExistingRelationships(diagramPackageGuid){&#xA;&#x9;var query = &quot;SELECT t_diagramlinks.ConnectorID FROM t_diagram JOIN t_diagramlinks ON (t_diagram.Diagram_ID = t_diagramlinks.DiagramID) JOIN t_connector ON (t_connector.Connector_ID = t_diagramlinks.ConnectorID) JOIN t_package ON (t_diagram.Package_ID = t_package.Package_ID) WHERE t_diagramlinks.Hidden = 0 and t_package.ea_guid = '&quot;+ diagramPackageGuid + &quot;';&quot;&#xA;&#x9;var xmlContent = Repository.SQLQuery(query)&#xA;&#x9;&#xA;&#x9;var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument&quot;);&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;var doc = xmlDOM.loadXML(xmlContent)&#xA;&#x9;&#xA;&#x9;let rowNodes = xmlDOM.documentElement.selectNodes(&quot;Dataset_0/Data/Row&quot;);&#xA;&#x9;&#xA;&#x9;relationshipIDs = [];&#xA;&#x9;&#xA;&#x9;for (let i = 0; i&lt;rowNodes.length; i++){&#xA;&#x9;&#x9;let relID = parseInt(rowNodes.item(i).childNodes.item(0).text);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;relationshipIDs.push(relID);&#xA;&#x9;}&#xA;&#x9;return relationshipIDs;&#xA;}&#xA;&#xA;// add a set of elements to a diagram set. the element set contains source and target element guids,&#xA;// the diagram set has the current index of the diagram and the diagram object. &#xA;function addElementSetToDiagram(diagramSet, elementSet){&#xA;&#x9;// get last diagram page&#xA;&#x9;let diagram = diagramSet[0][diagramSet[0].length-1];&#xA;&#x9;// get current index&#xA;&#x9;let index = diagramSet[1];&#xA;&#x9;// get the left starting point&#xA;&#x9;let leftSide = diagramSet[3];&#xA;&#x9;// add the rel ID to the visible rels&#xA;&#x9;diagramSet[2].push(elementSet[2]);&#xA;&#x9;&#xA;&#x9;// add the source element to the diagram&#xA;&#x9;// var sourceDiagramObj as EA.DiagramObject;&#xA;&#x9;let dimensions = calculateElemVals(90, 70, index, leftSide, 100, 130, 4);&#xA;&#x9;let top = dimensions[0];&#xA;&#x9;let bottom = dimensions[1];&#xA;&#x9;let left = dimensions[2];&#xA;&#x9;let right = dimensions[3];&#xA;&#x9;let sourceElem = addElementToDiagram(diagram, elementSet[0], top, bottom, left, right);&#xA;&#x9;&#xA;&#x9;// add the target element to the diagram&#xA;&#x9;dimensions = calculateElemVals(90, 70, index+1, dimensions[3], 100, 130, 4);&#xA;&#x9;top = dimensions[0];&#xA;&#x9;bottom = dimensions[1];&#xA;&#x9;// add 5 pixels per character in relationship name between related elements&#xA;&#x9;let link = repo.GetConnectorByID(elementSet[2])&#xA;&#x9;let linkName = link.Name&#xA;&#x9;left = dimensions[2] + (linkName.length*3);&#xA;&#x9;diagramSet[3] = dimensions[2] + (linkName.length*3);&#xA;&#x9;right = dimensions[3] + (linkName.length*3);&#xA;&#x9;let targetElem = addElementToDiagram(diagram, elementSet[1], top, bottom, left, right);&#xA;&#x9;let newLink = diagram.DiagramLinks.AddNew(&quot;&quot;, &quot;&quot;)&#xA;&#x9;newLink.ConnectorID = link.ConnectorID;&#xA;&#x9;newLink.Update()&#xA;&#x9;Session.Output(diagram.DiagramLinks.GetLastError())&#xA;&#xA;&#x9;// update both diagrams&#xA;&#x9;let sourceElemUpdated = sourceElem.Update();&#xA;&#x9;let targetElemUpdated = targetElem.Update();&#xA;&#x9;let linkUpdated = link.Update();&#xA;&#x9;diagram.DiagramLinks.Refresh()&#xA;&#x9;let diagramUpdated = diagram.Update();&#xA;&#x9;&#xA;&#x9;// update the diagram index&#xA;&#x9;diagramSet[1] += 2;&#xA;}&#xA;&#xA;// check if the diagram contains the given element&#xA;function diagramContainsElements(elements, diagram)&#xA;{&#xA;&#x9;diagram.DiagramObjects.Refresh();&#xA;&#x9;for (let i=0; i&lt;diagram.DiagramObjects.Count; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;for (let n=0; n&lt;elements.length; n++){&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (diagram.DiagramObjects.GetAt(i).ElementID == elements[n]){&#xA;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return false;&#xA;}&#xA;&#xA;function getDiagram(diagramPackage, diagrams, index)&#xA;{&#xA;&#x9;//var diagrams as Array&#xA;&#x9;// check if the diagrams list is long enough&#xA;&#x9;// if it isn't long enough create a new diagram&#xA;&#x9;if (diagrams.length-1&lt;index){&#xA;&#x9;&#x9;var diagram as EA.Diagram;&#xA;&#x9;&#x9;diagram = diagramPackage.Diagrams.AddNew(&quot;Relationship Diagram Group &quot;+(index+baseGroup)+&quot; Page 0&quot;, &quot;Class&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramPackage.Update();&#xA;&#x9;&#x9;diagram.Update();&#xA;&#x9;&#x9;// make a diagram set with a single page, a 0 index, no visible relations and a left starting point of 10&#xA;&#x9;&#x9;diagrams.push([[diagram], 0, [], 10]);&#xA;&#x9;}&#xA;&#x9;// access the diagram set at the specified index&#xA;&#x9;let diagramSet = diagrams[index];&#xA;&#x9;// if the diagram set index is greater than 14 add another page&#xA;&#x9;if (diagramSet[1] &gt; 10){&#xA;&#x9;&#x9;var diagram as EA.Diagram;&#xA;&#x9;&#x9;diagram = diagramPackage.Diagrams.AddNew(&quot;Relationship Diagram Group &quot;+(index+baseGroup)+&quot; Page &quot;+diagramSet[0].length, &quot;Class&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramPackage.Update();&#xA;&#x9;&#x9;diagram.Update();&#xA;&#x9;&#x9;// push new page&#xA;&#x9;&#x9;diagramSet[0].push(diagram);&#xA;&#x9;&#x9;// set the index to 0&#xA;&#x9;&#x9;diagramSet[1] = 0;&#xA;&#x9;&#x9;// set the left starting point to 10&#xA;&#x9;&#x9;diagramSet[3] = 10;&#xA;&#x9;};&#xA;&#x9;return diagrams[index];&#xA;}&#xA;&#xA;function calculateElemVals(width, height, index, prevLeft, verticalSpace, horizontalSpace, elementsPerRow)&#xA;{&#xA;&#x9;let topVal = (((index-(index%elementsPerRow))/elementsPerRow)*(-verticalSpace))-10;&#xA;&#x9;let bottomVal = topVal-height;&#xA;&#x9;let leftVal = 10;&#xA;&#x9;if (index%elementsPerRow != 0){&#xA;&#x9;&#x9;leftVal = prevLeft+horizontalSpace;&#xA;&#x9;}&#xA;&#x9;let rightVal = leftVal+width;&#xA;&#x9;return [topVal, bottomVal, leftVal, rightVal];&#xA;}&#xA;&#xA;function addElementToDiagram(diagram, elementID, top, bottom, left, right)&#xA;{&#xA;&#x9;// var diagramObj as EA.DiagramObject&#xA;&#x9;diagram.DiagramObjects.Refresh();&#xA;&#x9;let diagramObj = diagram.DiagramObjects.AddNew(elementID, &quot;Class&quot;);&#xA;&#x9;diagramObj.ElementID = elementID;&#xA;&#x9;diagramObj.top = top;&#xA;&#x9;diagramObj.bottom = bottom;&#xA;&#x9;diagramObj.left = left;&#xA;&#x9;diagramObj.right = right;&#xA;&#x9;let diagramObjUpdated = diagramObj.Update();&#xA;&#x9;return diagramObj;&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="534"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7AF083D9-7059-41ed-87FC-24567B7BDB3F}"/>
			<Column name="ScriptAuthor" value="{C03C1298-E6B0-4bd7-8EDB-F422E39295E3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Database&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC testGroup.JavaScript-Constants&#xA;!INC testGroup.JavaScript-XML&#xA;&#xA;/**&#xA; * @file JavaScript-Database&#xA; * This script library contains helper functions to assist with querying the underlying database&#xA; * fields of an EA project.&#xA; *&#xA; * Some functions will behave differently according to the value of the script variable DBTYPE.&#xA; * You should ensure that this value reflects the corresponding database repository type that you&#xA; * are currently using.&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;var DBTYPE_EAP = 0;&#xA;var DBTYPE_MYSQL = 1;&#xA;var DBTYPE = DBTYPE_EAP;&#xA;&#xA;/**&#xA; * Queries the repository database for the first field value whose corresponding row matches the&#xA; * specified WHERE clause.&#xA; *&#xA; * @param[in] columnName (string) The column name whose field value will be queried for&#xA; * @param[in] table (string) The table that the column resides in&#xA; * @param[in] whereClause (string) The SQL where clause that the query will use to select the&#xA; * appropriate row&#xA; *&#xA; * @return A String representing the requested field value&#xA; */&#xA;function DBGetFieldValueString( columnName /* : String */, table /* : String */, whereClause /* : String */ ) /* : String */&#xA;{&#xA;&#x9;var stringValue = &quot;&quot;;&#xA;&#x9;&#xA;&#x9;// Construct and execute the query&#xA;&#x9;var sql = &quot;SELECT &quot; + columnName + &quot; FROM &quot; + table + &quot; WHERE &quot; + whereClause;&#xA;&#x9;var queryResult = Repository.SQLQuery( sql );&#xA;&#x9;&#xA;&#x9;if ( queryResult.length &gt; 0 )&#xA;&#x9;{&#xA;&#x9;&#x9;var resultDOM = XMLParseXML( queryResult );&#xA;&#x9;&#x9;if ( resultDOM )&#xA;&#x9;&#x9;&#x9;stringValue = XMLGetNodeText( resultDOM, &quot;//EADATA//Dataset_0//Data//Row//&quot; + columnName );&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return stringValue;&#xA;}&#xA;&#xA;/**&#xA; * Queries the repository database for the first field value whose corresponding row matches the&#xA; * specified WHERE clause.&#xA; *&#xA; * @param[in] columnName (string) The column name whose field value will be queried for&#xA; * @param[in] table (string) The table that the column resides in&#xA; * @param[in] whereClause (string) The SQL where clause that the query will use to select the&#xA; * appropriate row&#xA; *&#xA; * @return A Number representing the requested field value&#xA; */&#xA;function DBGetFieldValueNumber( columnName /* : String */, table /* : String */, whereClause /* : String */ ) /* : Number */&#xA;{&#xA;&#x9;// Get the field value as a String&#xA;&#x9;var numberValue = 0;&#xA;&#x9;var valueAsString = DBGetFieldValueString( columnName, table, whereClause );&#xA;&#x9;&#xA;&#x9;// Conver to number&#xA;&#x9;if ( valueAsString.length &gt; 0 )&#xA;&#x9;&#x9;numberValue = new Number( valueAsString );&#xA;&#x9;&#xA;&#x9;return numberValue;&#xA;}&#xA;&#xA;/**&#xA; * Queries the repository database for all field values whose corresponding row match the specified&#xA; * WHERE clause.&#xA; *&#xA; * @param[in] columnName (string) The column name whose values will be queried for&#xA; * @param[in] table (string) The table that the column resides in&#xA; * @param[in] whereClause (string) The SQL where clause that the query will use to select the&#xA; * appropriate rows&#xA; *&#xA; * @return An array of Strings representing the requested field values&#xA; */&#xA;function DBGetFieldValueArrayString( columnName /* : String */, table /* : String */, &#xA;&#x9;whereClause /* : String */ ) /* : Array */&#xA;{&#xA;&#x9;var resultArray = new Array();&#xA;&#x9;&#xA;&#x9;// Construct and execute the query&#xA;&#x9;var sql = &quot;SELECT &quot; + columnName + &quot; FROM &quot; + table;&#xA;&#x9;if ( typeof(whereClause) != &quot;undefined&quot; &amp;&amp; whereClause.length &gt; 0 )&#xA;&#x9;&#x9;sql += &quot; WHERE &quot; + whereClause;&#xA;&#x9;&#xA;&#x9;var queryResult = Repository.SQLQuery( sql );&#xA;&#x9;if ( queryResult.length &gt; 0 )&#xA;&#x9;{&#xA;&#x9;&#x9;var resultDOM = XMLParseXML( queryResult );&#xA;&#x9;&#x9;resultArray = XMLGetNodeTextArray( resultDOM, &quot;//EADATA//Dataset_0//Data//Row//&quot; &#xA;&#x9;&#x9;&#x9;+ columnName );&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return resultArray;&#xA;}&#xA;&#xA;/**&#xA; * Returns an escaped copy of the provided String that may be safely included in an SQL query.&#xA; * NOTE: This function automatically adds single quotation marks around the string value.&#xA; *&#xA; * @param[in] originalString The String to escape&#xA; *&#xA; * @return A String representing the SQL escaped version of the provided string&#xA; */&#xA;function DBSafeSQLString( originalString /* : String */ ) /* : String */&#xA;{&#xA;&#x9;// Replace single quotation marks with 2x single quotation marks&#xA;&#x9;var quotationRegEx = new RegExp( &quot;\'&quot;, &quot;gm&quot; );&#xA;&#x9;var modifiedContents = originalString.replace( quotationRegEx, &quot;\'\'&quot; );&#xA;&#x9;&#xA;&#x9;return &quot;\'&quot; + modifiedContents + &quot;\'&quot;;&#xA;}&#xA;&#xA;/**&#xA; * Returns a string representation of the provided Date which may be used in SQL queries&#xA; * NOTE: The output of this function depends on the value of the script variable DBTYPE.&#xA; *&#xA; * @param[in] scriptingDate The Date to the format&#xA; *&#xA; * @return A String representing the SQL formatted version of the provided Date&#xA; */&#xA;function DBGetSQLDate( scriptingDate /* : Date */ ) /* : String */&#xA;{&#xA;&#x9;var dateDelimiter = &quot;#&quot;;&#xA;&#x9;&#xA;&#x9;if ( DBTYPE == DBTYPE_MYSQL )&#xA;&#x9;&#x9;dateDelimiter = &quot;\'&quot;;&#xA;&#x9;&#xA;&#x9;var sqlDate = dateDelimiter;&#xA;&#x9;sqlDate += scriptingDate.getFullYear() + &quot;-&quot; + (scriptingDate.getMonth() + 1) + &quot;-&quot; + scriptingDate.getDate();&#xA;&#x9;sqlDate += &quot; &quot; + scriptingDate.getHours() + &quot;:&quot; + scriptingDate.getMinutes() + &quot;:&quot; + scriptingDate.getSeconds();&#xA;&#x9;sqlDate += dateDelimiter;&#xA;&#x9;&#xA;&#x9;return sqlDate;&#xA;}&#xA;&#xA;/**&#xA; * Run SQL and return the ResultSet as a JSON object&#xA; *&#xA; * @param[in] sql (string) The SQL SELECT statement to be executed&#xA; *&#xA; * @return A JSON object with three properties: SQL (string), Rows (Array) and Columns (Array).&#xA; * SQL will contain a copy of the sql statement that was passed to this function. Columns will&#xA; * contain an Array of the unique column names returned by the query. Rows will contain an Array&#xA; * of JSON objects, the properties of each object are based on the columns returned by the SQL Query.&#xA; */&#xA;function DBSQLQueryToJSON( sql /* : String */ ) /* : Object */&#xA;{&#xA;&#x9;// Create a new JSON object to represent the result set. Object has three properties: SQL (string), Columns (Array) and Rows (Array)&#xA;&#x9;var resultSet = {&#xA;&#x9;&#x9;&quot;SQL&quot; : sql,&#xA;&#x9;&#x9;&quot;Columns&quot; : [],&#xA;&#x9;&#x9;&quot;Rows&quot; : []&#xA;&#x9;&#x9;};&#xA;&#x9;&#xA;&#x9;var xml = Repository.SQLQuery(sql);&#xA;&#x9;var xmlDOM = XMLParseXML(xml);&#xA;&#x9;var rowCount = 0;&#xA;&#xA;&#x9;var xmlRows = xmlDOM.documentElement.selectNodes( &quot;//EADATA//Dataset_0//Data//Row&quot; );&#xA;&#x9;if (xmlRows != null)&#xA;&#x9;{&#xA;&#x9;&#x9;// Loop each Row node in the xml&#xA;&#x9;&#x9;var xmlRow = xmlRows.nextNode();&#xA;&#x9;&#x9;while (xmlRow != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Create a new JSON Object for each row&#xA;&#x9;&#x9;&#x9;var row = {};&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// Loop each node which is a child of the current row (i.e. the columns)&#xA;&#x9;&#x9;&#x9;var xmlColumns = xmlRow.childNodes;&#xA;&#x9;&#x9;&#x9;var xmlColumn = xmlColumns.nextNode();&#xA;&#x9;&#x9;&#x9;while (xmlColumn != null)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// Create a property on the row object with the same name and value as the node found in the xml&#xA;&#x9;&#x9;&#x9;&#x9;row[xmlColumn.nodeName] = xmlColumn.text;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// For first row only, add all unique column names to the Columns array&#xA;&#x9;&#x9;&#x9;&#x9;if (rowCount == 0 &amp;&amp; !resultSet.Columns.includes(xmlColumn.nodeName))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultSet.Columns.push(xmlColumn.nodeName);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;// Next column&#xA;&#x9;&#x9;&#x9;&#x9;xmlColumn = xmlColumns.nextNode();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// Append new row to ResultSet.Rows&#xA;&#x9;&#x9;&#x9;resultSet.Rows.push(row);&#xA;&#x9;&#x9;&#x9;rowCount++;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// Next row&#xA;&#x9;&#x9;&#x9;xmlRow = xmlRows.nextNode();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return resultSet;&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="535"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{BF11E1B4-F928-4d3a-BFD3-7B329E73011F}"/>
			<Column name="ScriptAuthor" value="{C03C1298-E6B0-4bd7-8EDB-F422E39295E3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Logging&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/**&#xA; * @file JavaScript-Logging&#xA; * This script library contains helper functions to assist with logging. Log messages can be &#xA; * submitted to the various functions in this module, and will be filtered according to the value&#xA; * of LOGLEVEL.&#xA; *&#xA; * Valid values for LOGLEVEL are:&#xA; * - LOGLEVEL_ERROR&#xA; * - LOGLEVEL_WARNING&#xA; * - LOGLEVEL_INFO&#xA; * - LOGLEVEL_DEBUG&#xA; * - LOGLEVEL_TRACE&#xA; *&#xA; * You can change the log level at any time during execution by setting the LOGLEVEL variable to the&#xA; * desired value.&#xA; *&#xA; * Functions provided by this module are identified by the prefix LOG&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;&#xA;// LOGLEVEL values&#xA;var LOGLEVEL_ERROR = 0;&#xA;var LOGLEVEL_WARNING = 1;&#xA;var LOGLEVEL_INFO = 2;&#xA;var LOGLEVEL_DEBUG = 3;&#xA;var LOGLEVEL_TRACE = 4;&#xA;&#xA;// The level to log at&#xA;var LOGLEVEL = LOGLEVEL_INFO;&#xA;&#xA;/**&#xA; * Logs a message at the ERROR level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_ERROR or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGError( message /* : String */ ) /* : void */&#xA;{&#xA;&#x9;if ( LOGLEVEL &gt;= LOGLEVEL_ERROR )&#xA;&#x9;&#x9;Session.Output( _LOGGetDisplayDate() + &quot; [ERROR]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the INFO level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_INFO or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGInfo( message /* : String */ ) /* : void */&#xA;{&#xA;&#x9;if ( LOGLEVEL &gt;= LOGLEVEL_INFO )&#xA;&#x9;&#x9;Session.Output( _LOGGetDisplayDate() + &quot; [INFO]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the WARNING level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_WARNING or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGWarning( message /* : String */ ) /* : void */&#xA;{&#xA;&#x9;if ( LOGLEVEL &gt;= LOGLEVEL_WARNING )&#xA;&#x9;&#x9;Session.Output( _LOGGetDisplayDate() + &quot; [WARNING]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the DEBUG level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_DEBUG or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGDebug( message /* : String */ ) /* : void */&#xA;{&#xA;&#x9;if ( LOGLEVEL &gt;= LOGLEVEL_DEBUG )&#xA;&#x9;&#x9;Session.Output( _LOGGetDisplayDate() + &quot; [DEBUG]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the TRACE level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_TRACE or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGTrace( message /* : String */ ) /* : void */&#xA;{&#xA;&#x9;if ( LOGLEVEL &gt;= LOGLEVEL_TRACE )&#xA;&#x9;&#x9;Session.Output( _LOGGetDisplayDate() + &quot; [TRACE]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Returns the current date/time in a format suitable for logging.&#xA; *&#xA; * @return A String representing the current date/time&#xA; */&#xA;function _LOGGetDisplayDate() /* : String */&#xA;{&#xA;&#x9;var now = new Date();&#xA;&#x9;&#xA;&#x9;// Pad hour value&#xA;&#x9;var hours = now.getHours();&#xA;&#x9;if ( hours &lt; 10 )&#xA;&#x9;&#x9;hours = &quot;0&quot; + hours;&#xA;&#x9;&#xA;&#x9;// Pad minute value&#xA;&#x9;var minutes = now.getMinutes();&#xA;&#x9;if ( minutes &lt; 10 )&#xA;&#x9;&#x9;minutes = &quot;0&quot; + minutes;&#xA;&#x9;&#xA;&#x9;// Pad second value&#xA;&#x9;var seconds = now.getSeconds();&#xA;&#x9;if ( seconds &lt; 10 )&#xA;&#x9;&#x9;seconds = &quot;0&quot; + seconds;&#xA;&#x9;&#xA;&#x9;var displayDate = now.getFullYear() + &quot;-&quot; + (now.getMonth() + 1) + &quot;-&quot; + now.getDate();&#xA;&#x9;displayDate += &quot; &quot; + hours + &quot;:&quot; + minutes + &quot;:&quot; + seconds;&#xA;&#xA;&#x9;return displayDate;&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="536"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A6F039AF-592E-489e-90A9-1025E1E2EE40}"/>
			<Column name="ScriptAuthor" value="{C03C1298-E6B0-4bd7-8EDB-F422E39295E3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-XML&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC testGroup.JavaScript-Logging&#xA;&#xA;/**&#xA; * @file JavaScript-XML&#xA; * This script library contains helper functions to assist with reading and writing XML. Functions &#xA; * provided by this module are identified by the prefix XML&#xA; * &#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;&#xA;//Set by XMLCreateXMLObject depending on which version of the DOM Object is successfully created.&#xA;var XMLDOMDocumentVersion = &quot;&quot;;&#xA;&#xA;/**&#xA; * Attempts to create an MSXML2.DOMDocument object, depending upon the versions of MSXML available&#xA; * on the current system. It will try to create in order of preference: 6.0, 3.0 or 4.0.&#xA; *&#xA; * @return A new XML DOMDocument object ready for processing. If the object could not be &#xA; * created, the function will return null. Errors will be logged at the WARNING level.&#xA; * Success will be logged at the TRACE level.&#xA; */&#xA;function XMLCreateXMLObject() /* : MSXML2.DOMDocument */&#xA;{&#xA;&#x9;var xmlDOM = null;&#xA;&#x9;var ProgId = &quot;&quot;;&#xA;&#x9;var attempt = 0;&#xA;&#x9;&#xA;&#x9;while (xmlDOM == null)&#xA;&#x9;{&#xA;&#x9;&#x9;switch (attempt++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case 0:&#x9;ProgId = &quot;MSXML2.DOMDocument.6.0&quot;; break;&#x9;//MSXML 6.0&#xA;&#x9;&#x9;&#x9;case 1:&#x9;ProgId = &quot;MSXML2.DOMDocument.3.0&quot;; break;&#x9;//MSXML 3.0&#xA;&#x9;&#x9;&#x9;case 2:&#x9;ProgId = &quot;MSXML2.DOMDocument&quot;; break;&#x9;&#x9;//MSXML 3.0&#xA;&#x9;&#x9;&#x9;case 3:&#x9;ProgId = &quot;MSXML2.DOMDocument.4.0&quot;; break;&#x9;//MSXML 4.0&#xA;&#x9;&#x9;&#x9;default: LOGWarning(&quot;Could not create DOMDocument.&quot;); return;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;try { xmlDOM = new COMObject( ProgId ); LOGTrace(&quot;DOMDocument object created: &quot; + ProgId); } catch (err) { xmlDOM = null; }&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;if (xmlDOM != null)&#xA;&#x9;{&#xA;&#x9;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;&#x9;xmlDOM.async = false;&#xA;&#x9;&#x9;XMLDOMDocumentVersion = ProgId;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return xmlDOM;&#xA;}&#xA;&#xA;/**&#xA; * Parses a string containing an XML document into an XML DOMDocument object.&#xA; *&#xA; * @param[in] xmlDocument (String) A String value containing an XML document.&#xA; *&#xA; * @return An XML DOMDocument representing the parsed XML Document. If the document could not be &#xA; * parsed, the function will return null. Parse errors will be logged at the WARNING level&#xA; */&#xA;function XMLParseXML( xmlDocument /* : String */ ) /* : MSXML2.DOMDocument */&#xA;{&#xA;&#x9;// Create a new DOM object&#xA;&#x9;var xmlDOM = XMLCreateXMLObject();&#xA;&#x9;&#xA;&#x9;// Parse the string into the DOM&#xA;&#x9;var parsed = xmlDOM.loadXML( xmlDocument );&#xA;&#x9;if ( !parsed )&#xA;&#x9;{&#xA;&#x9;&#x9;// A parse error occured, so log the last error and set the return value to null&#xA;&#x9;&#x9;LOGWarning( _XMLDescribeParseError(xmlDOM.parseError) );&#xA;&#x9;&#x9;xmlDOM = null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return xmlDOM;&#xA;}&#xA;&#xA;/**&#xA; * Parses an XML file into an XML DOMDocument object.&#xA; *&#xA; * @param[in] xmlPath (String) A String value containing the path name to the XML file to parse.&#xA; *&#xA; * @return An XML DOMDocument representing the parsed XML File.  If the document could not be &#xA; * parsed, the function will return null. Parse errors will be logged at the WARNING level&#xA; */&#xA;function XMLReadXMLFromFile( xmlPath /* : String */ ) /* : MSXML2.DOMDocument */&#xA;{&#xA;&#x9;var xmlDOM = XMLCreateXMLObject();&#xA;&#x9;xmlDOM.validateOnParse = true;&#xA;&#x9;xmlDOM.async = true;&#xA;&#xA;&#x9;var loaded = xmlDOM.load( xmlPath );&#xA;&#x9;if ( !loaded )&#xA;&#x9;{&#xA;&#x9;&#x9;LOGWarning( _XMLDescribeParseError(xmlDOM.parseError) );&#xA;&#x9;&#x9;xmlDOM = null;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return xmlDOM;&#xA;}&#xA;&#xA;/**&#xA; * Saves the provided DOMDocument to the specified file path.&#xA; *&#xA; * @parameter[in] xmlDOM (MSXML2.DOMDocument) The XML DOMDocument to save&#xA; * @parameter[in] filePath (String) The path to save the file to&#xA; * @parameter[in] xmlDeclaration (Boolean) Whether the XML declaration should be included in the &#xA; * output file&#xA; * @parameter[in] indent (Boolean) Whether the output should be formatted with indents&#xA; */&#xA;function XMLSaveXMLToFile( xmlDOM /* : MSXML2.DOMDocument */, filePath /* : String */ , &#xA;&#x9;xmlDeclaration /* : Boolean */, indent /* : Boolean */ ) /* : void */&#xA;{&#xA;&#x9;// Create the file to write out to&#xA;&#x9;var fileIOObject = new COMObject( &quot;Scripting.FileSystemObject&quot; );&#xA;&#x9;var outFile = fileIOObject.CreateTextFile( filePath, true );&#xA;&#x9;&#xA;&#x9;// Create the formatted writer&#xA;&#x9;var xmlWriter = new COMObject( &quot;MSXML2.MXXMLWriter&quot; );&#xA;&#x9;xmlWriter.omitXMLDeclaration = !xmlDeclaration;&#xA;&#x9;xmlWriter.indent = indent;&#xA;&#x9;&#x9;&#xA;&#x9;// Create the sax reader and assign the formatted writer as its content handler&#xA;&#x9;var xmlReader = new COMObject( &quot;MSXML2.SAXXMLReader&quot; );&#xA;&#x9;xmlReader.contentHandler = xmlWriter;&#xA;&#x9;&#xA;&#x9;// Parse and write the output&#xA;&#x9;xmlReader.parse( xmlDOM );&#xA;&#x9;outFile.Write( xmlWriter.output );&#xA;&#x9;outFile.Close();&#xA;}&#xA;&#xA;/**&#xA; * Retrieves the value of the named attribute that belongs to the node at nodePath.&#xA; *&#xA; * @param[in] xmlDOM (MSXML2.DOMDocument) The XML document that the node resides in&#xA; * @param[in] nodePath (String) The XPath path to the node that contains the desired attribute&#xA; * @param[in] attributeName (String) The name of the attribute whose value will be retrieved&#xA; *&#xA; * @return A String representing the value of the requested attribute&#xA; */&#xA;function XMLGetAttributeValue( xmlDOM /* : MSXML2.DOMDocument */, nodePath /* : String */, &#xA;&#x9;attributeName /* : String */ ) /* : String */&#xA;{&#xA;&#x9;var value = &quot;&quot;;&#xA;&#x9;&#xA;&#x9;// Get the node at the specified path&#xA;&#x9;var node = xmlDOM.selectSingleNode( nodePath );&#xA;&#x9;if ( node )&#xA;&#x9;{&#xA;&#x9;&#x9;// Get the node's attributes&#xA;&#x9;&#x9;var attributeMap = node.attributes;&#xA;&#x9;&#x9;if ( attributeMap != null )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Get the specified attribute&#xA;&#x9;&#x9;&#x9;var attribute = attributeMap.getNamedItem( attributeName )&#xA;&#x9;&#x9;&#x9;if ( attribute != null )&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// Get the attribute's value&#xA;&#x9;&#x9;&#x9;&#x9;value = attribute.value;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;// Specified attribute not found&#xA;&#x9;&#x9;&#x9;&#x9;LOGWarning( &quot;Node at path &quot; + nodePath + &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; does not contain an attribute named: &quot; + attributeName );&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Node cannot contain attributes&#xA;&#x9;&#x9;&#x9;LOGWarning( &quot;Node at path &quot; + nodePath + &quot; does not contain attributes&quot; );&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;// Specified node not found&#xA;&#x9;&#x9;LOGWarning( &quot;Node not found at path: &quot; + nodePath );&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return value;&#xA;}&#xA;&#xA;/**&#xA; * Returns the text value of the XML node at nodePath&#xA; *&#xA; * @param[in] xmlDOM (MSXML2.DOMDocument) The XML document that the node resides in&#xA; * @param[in] nodePath (String) The XPath path to the desired node&#xA; *&#xA; * @return A String representing the desired node's text value&#xA; */&#xA;function XMLGetNodeText( xmlDOM /* : MSXML2.DOMDocument */, nodePath /* : String */ ) /* : String */&#xA;{&#xA;&#x9;var value = &quot;&quot;;&#xA;&#x9;&#xA;&#x9;// Get the node at the specified path&#xA;&#x9;var node = xmlDOM.selectSingleNode( nodePath );&#xA;&#x9;if ( node != null )&#xA;&#x9;{&#xA;&#x9;&#x9;value = node.text;&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;// Specified node not found&#xA;&#x9;&#x9;LOGWarning( &quot;Node not found at path: &quot; + nodePath );&#x9;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return value;&#xA;}&#xA;&#xA;/**&#xA; * Returns an array populated with the text values of the XML nodes at nodePath&#xA; *&#xA; * @param[in] xmlDOM (MSXML2.DOMDocument) The XML document that the nodes reside in&#xA; * @param[in] nodePath (String) The XPath path to the desired nodes&#xA; *&#xA; * @return An array of Strings representing the text values of the desired nodes&#xA; */&#xA;function XMLGetNodeTextArray( xmlDOM /* : MSXML2.DOMDocument */, nodePath /* : String */ ) /* : Array */&#xA;{&#xA;&#x9;var nodeList = xmlDOM.documentElement.selectNodes( nodePath );&#xA;&#x9;var textArray = [];&#xA;&#x9;&#xA;&#x9;for ( var i = 0 ; i &lt; nodeList.length ; i++ )&#xA;&#x9;{&#xA;&#x9;&#x9;var currentNode = nodeList.nextNode();&#xA;&#x9;&#x9;if (currentNode != null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;textArray.push(currentNode.text);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return textArray;&#xA;}&#xA;&#xA;/**&#xA; * Returns a string containing the value of the named attribute owned by the provided DOM Node.&#xA; * Empty string is returned if named node not found.&#xA; *&#xA; * @param[in] node (IXMLDOMNode) The XML document node being queried&#xA; * @param[in] attName (String) The name of the attribute&#xA; *&#xA; * @return String representing the text value of the named attribute&#xA; */&#xA;function XMLGetNamedAttribute( node /* : IXMLDOMNode */, attName /* : String */ ) /* : String */&#xA;{&#xA;&#x9;var value = &quot;&quot;;&#xA;&#x9;&#xA;&#x9;var attrib = node.attributes.getNamedItem( attName );&#xA;&#x9;if (attrib != null)&#xA;&#x9;{&#xA;&#x9;&#x9;value = attrib.value;&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;LOGWarning( &quot;Attribute not found: &quot; + attName );&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return value;&#xA;}&#xA;&#xA;/**&#xA; * Returns a description of the provided parse error&#xA; *&#xA; * @return A String description of the last parse error that occured&#xA; */&#xA;function _XMLDescribeParseError( parseError )&#xA;{&#xA;&#x9;var reason = &quot;Unknown Error&quot;;&#xA;&#x9;&#xA;&#x9;// If we have an error&#xA;&#x9;if ( typeof(parseError) != &quot;undefined&quot; )&#xA;&#x9;{&#xA;&#x9;&#x9;// Format a description of the error&#xA;&#x9;&#x9;reason = &quot;XML Parse Error at [line: &quot; + parseError.line + &quot;, pos: &quot; + &#xA;&#x9;&#x9;&#x9;parseError.linepos + &quot;] &quot; + parseError.reason;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return reason;&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="537"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F08EEF68-AE49-4865-86B5-1CDD62B673FB}"/>
			<Column name="ScriptAuthor" value="{C03C1298-E6B0-4bd7-8EDB-F422E39295E3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Constants&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA; * Script Name: EAConstants-JavaScript.js&#xA; * Author: Sparx Systems&#xA; * Purpose: Provides constant values for the Enterprise Architect automation API. &#xA; * Date: 2010-05-31&#xA; */&#xA;&#xA;// =================================================================================================&#xA;// ObjectType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/objecttypeenum.htm&#xA;// =================================================================================================&#xA;var otNone &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var otProject &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var otRepository &#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var otCollection &#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var otElement &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var otPackage &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;var otModel &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 6;&#xA;var otConnector &#x9;&#x9;&#x9;&#x9;&#x9;= 7;&#xA;var otDiagram &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 8;&#xA;var otRequirement &#x9;&#x9;&#x9;&#x9;&#x9;= 9;&#xA;var otScenario &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 10;&#xA;var otConstraint &#x9;&#x9;&#x9;&#x9;&#x9;= 11;&#xA;var otTaggedValue &#x9;&#x9;&#x9;&#x9;&#x9;= 12;&#xA;var otFile &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 13;&#xA;var otEffort &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 14;&#xA;var otMetric &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 15;&#xA;var otIssue &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 16;&#xA;var otRisk &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 17;&#xA;var otTest &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 18;&#xA;var otDiagramObject &#x9;&#x9;&#x9;&#x9;= 19;&#xA;var otDiagramLink &#x9;&#x9;&#x9;&#x9;&#x9;= 20;&#xA;var otResource &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 21;&#xA;var otConnectorEnd &#x9;&#x9;&#x9;&#x9;&#x9;= 22;&#xA;var otAttribute &#x9;&#x9;&#x9;&#x9;&#x9;= 23;&#xA;var otMethod &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 24;&#xA;var otParameter &#x9;&#x9;&#x9;&#x9;&#x9;= 25;&#xA;var otClient &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 26;&#xA;var otAuthor &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 27;&#xA;var otDatatype &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 28;&#xA;var otStereotype &#x9;&#x9;&#x9;&#x9;&#x9;= 29;&#xA;var otTask &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 30;&#xA;var otTerm &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 31;&#xA;var otProjectIssues &#x9;&#x9;&#x9;&#x9;= 32;&#xA;var otAttributeConstraint &#x9;&#x9;&#x9;= 33;&#xA;var otAttributeTag &#x9;&#x9;&#x9;&#x9;&#x9;= 34;&#xA;var otMethodConstraint &#x9;&#x9;&#x9;&#x9;= 35;&#xA;var otMethodTag &#x9;&#x9;&#x9;&#x9;&#x9;= 36;&#xA;var otConnectorConstraint &#x9;&#x9;&#x9;= 37;&#xA;var otConnectorTag &#x9;&#x9;&#x9;&#x9;&#x9;= 38;&#xA;var otProjectResource &#x9;&#x9;&#x9;&#x9;= 39;&#xA;var otReference &#x9;&#x9;&#x9;&#x9;&#x9;= 40;&#xA;var otRoleTag&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 41;&#xA;var otCustomProperty &#x9;&#x9;&#x9;&#x9;= 42;&#xA;var otPartition &#x9;&#x9;&#x9;&#x9;&#x9;= 43;&#xA;var otTransition &#x9;&#x9;&#x9;&#x9;&#x9;= 44;&#xA;var otEventProperty &#x9;&#x9;&#x9;&#x9;= 45;&#xA;var otEventProperties &#x9;&#x9;&#x9;&#x9;= 46;&#xA;var otPropertyType &#x9;&#x9;&#x9;&#x9;&#x9;= 47;&#xA;var otProperties &#x9;&#x9;&#x9;&#x9;&#x9;= 48;&#xA;var otProperty &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 49;&#xA;var otSwimlaneDef &#x9;&#x9;&#x9;&#x9;&#x9;= 50;&#xA;var otSwimlanes &#x9;&#x9;&#x9;&#x9;&#x9;= 51;&#xA;var otSwimlane &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 52;&#xA;var otModelWatcher &#x9;&#x9;&#x9;&#x9;&#x9;= 53;&#xA;var otScenarioStep &#x9;&#x9;&#x9;&#x9;&#x9;= 54;&#xA;var otScenarioExtension &#x9;&#x9;&#x9;= 55;&#xA;var otParamTag&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 56;&#xA;var&#x9;otProjectRole&#x9;&#x9;&#x9;&#x9;&#x9;= 57;&#xA;var otDocumentGenerator&#x9;&#x9;&#x9;&#x9;= 58;&#xA;var otMailInterface&#x9;&#x9;&#x9;&#x9;&#x9;= 59;&#xA;&#xA;// =================================================================================================&#xA;// MDGMenus&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/mdgmenusenum.htm&#xA;// =================================================================================================&#xA;var mgMerge &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var mgBuildProject &#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var mgRun &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;&#xA;// =================================================================================================&#xA;// EnumXMIType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/xmitypeenum.htm&#xA;// =================================================================================================&#xA;var xmiEADefault &#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var xmiRoseDefault &#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var xmiEA10 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var xmiEA11 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var xmiEA12 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var xmiRose10 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;var xmiRose11 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 6;&#xA;var xmiRose12 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 7;&#xA;var xmiMOF13 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 8;&#xA;var xmiMOF14 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 9;&#xA;var xmiEA20 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 10;&#xA;var xmiEA21 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 11;&#xA;var xmiEA211 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 12;&#xA;var xmiEA212 &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 13;&#xA;var xmiEA22&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;= 14;&#xA;var xmiEA23&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;= 15;&#xA;var xmiEA24&#x9;&#x9;&#x9;&#x9;&#x9;    &#x9;= 16;&#xA;var xmiEA241&#x9;&#x9;&#x9;&#x9;    &#x9;= 17;&#xA;var xmiEA242                        = 18;&#xA;var xmiEcore                        = 19;&#xA;var xmiBPMN20                       = 20;&#xA;var xmiXPDL22                       = 21;&#xA;var xmiEA251&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 22;&#xA;var xmiARCGIS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 23;&#xA;&#xA;// =================================================================================================&#xA;// EnumMVErrorType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/project_2.htm&#xA;// =================================================================================================&#xA;var mvError &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var mvWarning &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var mvInformation &#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var mvErrorCritical &#x9;&#x9;&#x9;&#x9;= 3;&#xA;&#xA;// =================================================================================================&#xA;// CreateModelType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/createmodelitype_enum.htm&#xA;// =================================================================================================&#xA;var cmEAPFromBase &#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var cmEAPFromSQLRepository &#x9;&#x9;&#x9;= 1;&#xA;&#xA;// =================================================================================================&#xA;// EAEditionTypes&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/eaeditiontypes_enum.htm&#xA;// =================================================================================================&#xA;var piLite &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= -1;&#xA;var piDesktop &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var piProfessional &#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var piCorporate &#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var piBusiness &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var piSystemEng &#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var piUltimate &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;&#xA;// =================================================================================================&#xA;// ScenarioStepType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/scenariosteptype.htm&#xA;// =================================================================================================&#xA;var stSystem &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var stActor &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;&#xA;// =================================================================================================&#xA;// ExportPackageXMIFlag&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/exportpackagexmiflag.htm&#xA;// =================================================================================================&#xA;var epSaveToStub&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var epExcludeEAExtensions           = 2;&#xA;&#xA;// =================================================================================================&#xA;// CreateBaselineFlag&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/createbaselineflag.htm&#xA;// =================================================================================================&#xA;var cbSaveToStub&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;&#xA;// =================================================================================================&#xA;// EnumScenarioDiagramType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/project_2.htm&#xA;// =================================================================================================&#xA;var sdActivity &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var sdActivityWithActivityParameter&#x9;= 1;&#xA;var sdActivityWithAction&#x9;&#x9;&#x9;= 2;&#xA;var sdActivityhWithActionPin &#x9;&#x9;= 3;&#xA;var sdRuleFlow&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var sdState&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;var sdSequence&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 6;&#xA;var sdRobustness&#x9;&#x9;&#x9;&#x9;&#x9;= 7;&#xA;&#xA;// =================================================================================================&#xA;// EnumScenarioTestType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/project_2.htm&#xA;// =================================================================================================&#xA;var stInternal&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var stExternal&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var stHorizontalTestSuite&#x9;&#x9;&#x9;= 2;&#xA;var stVerticalTestSuite&#x9;&#x9;&#x9;&#x9;= 3;&#xA;&#xA;// =================================================================================================&#xA;// EnumCodeSection&#xA;// =================================================================================================&#xA;var cpWhole &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var cpNotes &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var cpText &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;&#xA;// =================================================================================================&#xA;// EnumRelationSetType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/enumrelationsettypeenum.htm&#xA;// =================================================================================================&#xA;var rsGeneralizeStart&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var rsGeneralizeEnd&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var rsRealizeStart&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var rsRealizeEnd&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var rsDependStart&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var rsDependEnd&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;var rsParents&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 6;&#xA;&#xA;// =================================================================================================&#xA;// EnumCodeElementType&#xA;// =================================================================================================&#xA;var ctInvalid&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var ctNamespace&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var ctClass&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var ctAttribute&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var ctOperation&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var ctOperationParam&#x9;&#x9;&#x9;&#x9;= 5;&#xA;&#xA;// =================================================================================================&#xA;// PropType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/proptype_enum.htm&#xA;// =================================================================================================&#xA;var ptString&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var ptInteger&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var ptFloatingPoint&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var ptBoolean&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var ptEnum&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var ptArray&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;&#xA;// =================================================================================================&#xA;// SwimlaneOrientationType&#xA;// =================================================================================================&#xA;var soVertical&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var soHorizontal&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;&#xA;// =================================================================================================&#xA;// ReloadType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/reloadtype_enum.htm&#xA;// =================================================================================================&#xA;var rtNone&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var rtEntireModel&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var rtPackage&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var rtElement&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;&#xA;// =================================================================================================&#xA;// ConstLayoutStyles&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/constlayoutstylesenum.htm&#xA;// =================================================================================================&#xA;var lsDiagramDefault&#x9;&#x9;&#x9;&#x9;= 0x00000000;&#xA;var lsProgramDefault&#x9;&#x9;&#x9;&#x9;= 0xFFFFFFFF;&#xA;var lsCycleRemoveGreedy&#x9;&#x9;&#x9;&#x9;= 0x80000000;&#xA;var lsCycleRemoveDFS&#x9;&#x9;&#x9;&#x9;= 0x40000000;&#xA;var lsLayeringLongestPathSink&#x9;&#x9;= 0x30000000;&#xA;var lsLayeringLongestPathSource&#x9;&#x9;= 0x20000000;&#xA;var lsLayeringOptimalLinkLength&#x9;&#x9;= 0x10000000;&#xA;var lsInitializeNaive&#x9;&#x9;&#x9;&#x9;= 0x08000000;&#xA;var lsInitializeDFSOut&#x9;&#x9;&#x9;&#x9;= 0x04000000;&#xA;var lsInitializeDFSIn&#x9;&#x9;&#x9;&#x9;= 0x0C000000;&#xA;var lsCrossReduceAggressive&#x9;&#x9;&#x9;= 0x02000000;&#xA;var lsLayoutDirectionUp&#x9;&#x9;&#x9;&#x9;= 0x00010000;&#xA;var lsLayoutDirectionDown&#x9;&#x9;&#x9;= 0x00020000;&#xA;var lsLayoutDirectionLeft&#x9;&#x9;&#x9;= 0x00040000;&#xA;var lsLayoutDirectionRight&#x9;&#x9;&#x9;= 0x00080000;&#xA;&#xA;// =================================================================================================&#xA;// WorkFlowConstants&#xA;// =================================================================================================&#xA;var MaxWorkFlowUsers&#x9;&#x9;&#x9;&#x9;= 50;&#xA;var MaxWorkFlowItems&#x9;&#x9;&#x9;&#x9;= 100;&#xA;&#xA;// =================================================================================================&#xA;// PromptType&#xA;// =================================================================================================&#xA;var promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var promptYESNO&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var promptYESNOCANCEL&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var promptOKCANCEL&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;&#xA;// =================================================================================================&#xA;// PromptResult&#xA;// =================================================================================================&#xA;var resultOK&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var resultCancel&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var resultYes&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var resultNo&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;&#xA;// =================================================================================================&#xA;// WorkFlowResult&#xA;// =================================================================================================&#xA;var WorkFlowSucceeded&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var WorkFlowError&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var WorkFlowExists&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var WorkFlowNotFound&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var WorkFlowLimitReached&#x9;&#x9;&#x9;= 5;&#xA;var WorkFlowDenied&#x9;&#x9;&#x9;&#x9;&#x9;= 6;&#xA;var WorkFlowPermitted&#x9;&#x9;&#x9;&#x9;= 7;&#xA;var WorkFlowIsMember&#x9;&#x9;&#x9;&#x9;= 8;&#xA;var WorkFlowIsNotMember&#x9;&#x9;&#x9;&#x9;= 9;&#xA;var WorkFlowBadParam&#x9;&#x9;&#x9;&#x9;= 10;&#xA;&#xA;// =================================================================================================&#xA;// DocumentType&#xA;// =================================================================================================&#xA;var dtRTF&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var dtHTML&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var dtPDF&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var dtDOCX&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;&#xA;// =================================================================================================&#xA;// DocumentBreak&#xA;// =================================================================================================&#xA;var breakPage&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var breakSection&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;&#xA;// =================================================================================================&#xA;// TextAlignment&#xA;// =================================================================================================&#xA;var alignLeft &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var alignCenter &#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var alignRight &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var alignJustify &#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;&#xA;// =================================================================================================&#xA;// MessageFlag&#xA;// =================================================================================================&#xA;var mfNone&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 0;&#xA;var mfComplete &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 1;&#xA;var mfPurple &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 2;&#xA;var mfOrange &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 3;&#xA;var mfGreen &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 4;&#xA;var mfYellow &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 5;&#xA;var mfBlue &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 6;&#xA;var mfRed &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= 7;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="538"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{BC51E359-A6D6-41e9-BAC3-E01035DC0347}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="MODA Relationship Manager"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="539"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3103F887-9403-4acf-8A42-56165E9D5D9C}"/>
			<Column name="ScriptAuthor" value="{BC51E359-A6D6-41e9-BAC3-E01035DC0347}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Relationship Manager - Approve Relationship&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;!INC TM Forum Normal Scripts.Relationship Manager - General Scripts&#xA;&#xA;/*&#xA; * This code has been included from the default Diagram Script template.&#xA; * If you wish to modify this template, it is located in the Config\Script Templates&#xA; * directory of your EA install path.&#xA; *&#xA; * Script Name:&#xA; * Author:&#xA; * Purpose:&#xA; * Date:&#xA; */&#xA;&#xA;/*&#xA; * Diagram Script main function&#xA; */&#xA;function OnDiagramScript()&#xA;{&#xA;&#x9;// Get a reference to the current diagram&#xA;&#x9;var currentDiagram as EA.Diagram;&#xA;&#x9;currentDiagram = Repository.GetCurrentDiagram();&#xA;&#xA;&#x9;if ( currentDiagram != null )&#xA;&#x9;{&#xA;&#x9;&#x9;// Get a reference to any selected connector/objects&#xA;&#x9;&#x9;var selectedConnector as EA.Connector;&#xA;&#x9;&#x9;var selectedObjects as EA.Collection;&#xA;&#x9;&#x9;selectedConnector = currentDiagram.SelectedConnector;&#xA;&#x9;&#x9;selectedObjects = currentDiagram.SelectedObjects;&#xA;&#xA;&#x9;&#x9;if ( selectedConnector != null )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;approveRelationship(selectedConnector);&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(currentDiagram.DiagramID);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Session.Prompt( &quot;You must select a connector to be approved.&quot;, promptOK)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt( &quot;This script requires a diagram to be visible.&quot;, promptOK)&#xA;&#x9;}&#xA;}&#xA;&#xA;OnDiagramScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="540"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{439C1910-5D05-4476-8913-8FD5F97A3806}"/>
			<Column name="ScriptAuthor" value="{BC51E359-A6D6-41e9-BAC3-E01035DC0347}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Relationship Manager - Reject Relationship&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * This code has been included from the default Diagram Script template.&#xA; * If you wish to modify this template, it is located in the Config\Script Templates&#xA; * directory of your EA install path.&#xA; *&#xA; * Script Name:&#xA; * Author:&#xA; * Purpose:&#xA; * Date:&#xA; */&#xA;&#xA;/*&#xA; * Diagram Script main function&#xA; */&#xA;function OnDiagramScript()&#xA;{&#xA;&#x9;// Get a reference to the current diagram&#xA;&#x9;var currentDiagram as EA.Diagram;&#xA;&#x9;currentDiagram = Repository.GetCurrentDiagram();&#xA;&#xA;&#x9;if ( currentDiagram != null )&#xA;&#x9;{&#xA;&#x9;&#x9;// Get a reference to any selected connector/objects&#xA;&#x9;&#x9;var selectedConnector as EA.Connector;&#xA;&#x9;&#x9;var selectedObjects as EA.Collection;&#xA;&#x9;&#x9;selectedConnector = currentDiagram.SelectedConnector;&#xA;&#x9;&#x9;selectedObjects = currentDiagram.SelectedObjects;&#xA;&#xA;&#x9;&#x9;if ( selectedConnector != null )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;var client = Repository.GetElementByID(selectedConnector.ClientID)&#xA;&#x9;&#x9;&#x9;for (n=0; n&lt;client.Connectors.Count; n++){&#xA;&#x9;&#x9;&#x9;&#x9;if (client.Connectors.GetAt(n).Name == selectedConnector.Name){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;client.Connectors.Delete(n)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;client.Update()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;client.Connectors.Refresh()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(currentDiagram.DiagramID);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;Session.Prompt( &quot;You must select a connector to be rejected.&quot;, promptOK)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt( &quot;This script requires a diagram to be visible.&quot;, promptOK)&#xA;&#x9;}&#xA;}&#xA;&#xA;OnDiagramScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="541"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{29042A6D-52A9-475b-88B3-CCA1B9915C65}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;MODELSEARCH&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="MODA Relationship Manager"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="542"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{37286DA9-1E86-461a-B72C-F4C32F90F96F}"/>
			<Column name="ScriptAuthor" value="{29042A6D-52A9-475b-88B3-CCA1B9915C65}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Show Candidate In Diagram&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * Script Name: Show Candidate In Diagram&#xA; * Author: Natha&#xA; * Purpose: jump to the diagram (if any) where a candidate relationship is displayed also select the relationship&#xA; * Date: &#xA; */&#xA; &#xA;function main()&#xA;{&#xA;&#x9;let diagramPackageGuid = &quot;{D5259ADD-8012-4f18-8735-F8DFA3EF2C57}&quot;;&#xA;&#x9;if (Repository.CurrentSelection.List.Count&gt;1){&#xA;&#x9;&#x9;Session.Prompt(&quot;only one element can be shown at a time, only select one relation&quot;, promptOK);&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;let relGuid = Repository.CurrentSelection.List.GetAt(0).ElementGUID;&#xA;&#x9;&#xA;&#x9;Session.Output(relGuid)&#xA;&#x9;&#xA;&#x9;let selectedRel = Repository.GetConnectorByGuid(relGuid);&#xA;&#x9;&#xA;&#x9;let selectedRelID = selectedRel.ConnectorID;&#xA;&#x9;&#xA;&#x9;var query = &quot;SELECT t_diagramlinks.DiagramID FROM t_diagram JOIN t_diagramlinks ON (t_diagram.Diagram_ID = t_diagramlinks.DiagramID) JOIN t_connector ON (t_connector.Connector_ID = t_diagramlinks.ConnectorID) JOIN t_package ON (t_diagram.Package_ID = t_package.Package_ID) WHERE t_diagramlinks.Hidden = 0 and t_package.ea_guid = '&quot;+ diagramPackageGuid + &quot;' AND t_diagramlinks.ConnectorID = &quot;+selectedRelID+&quot;;&quot;&#xA;&#x9;&#xA;&#x9;Session.Output(query)&#xA;&#x9;var xmlContent = Repository.SQLQuery(query)&#xA;&#x9;Session.Output(&quot;Result of query:&quot;)&#xA;&#x9;Session.Output(xmlContent)&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument&quot;);&#xA;&#x9;xmlDOM.validateOnParse = false;&#xA;&#x9;xmlDOM.async = false;&#xA;&#x9;var doc = xmlDOM.loadXML(xmlContent)&#xA;&#x9;let rowNodes = xmlDOM.documentElement.selectNodes(&quot;Dataset_0/Data/Row&quot;);&#xA;&#x9;let diagramID = rowNodes.item(0).childNodes.item(0).text;&#xA;&#x9;let targetDiagram = Repository.GetDiagramByID(diagramID);&#xA;&#x9;Repository.OpenDiagram(diagramID);&#xA;&#x9;targetDiagram.SelectedConnector = selectedRel;&#xA;&#x9;Repository.RefreshOpenDiagrams(false)&#xA;&#x9;}&#xA;&#x9;catch (e) &#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt(&quot;this relationship is not displayed in any diagram,you may need to generate the candidate diagrams again&quot;, promptOK);&#xA;&#x9;&#x9;Session.Output(&quot;Exception is:&quot;  + e.message, promptOK)&#xA;&#x9;}&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="543"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{06C26F42-C3D0-4987-BDC1-7DF1C969B81F}"/>
			<Column name="ScriptAuthor" value="{29042A6D-52A9-475b-88B3-CCA1B9915C65}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Reject Relationship&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * Script Name:  Reject Relationship&#xA; * Author: Giu Platania&#xA; * Purpose: part of the MODA relationship manager, allows to delete  a candidate relationship&#xA; * Date: 2023 12&#xA; */&#xA; &#xA; &#xA;function main()&#xA;{&#xA;&#x9;for (i=0; i&lt;Repository.CurrentSelection.List.Count; i++){&#xA;&#x9;&#x9;var elemGuid = Repository.CurrentSelection.List.GetAt(i).ElementGUID;&#xA;&#x9;&#x9;Session.Output(elemGuid)&#xA;&#x9;&#x9;var selection = Repository.GetConnectorByGuid(elemGuid);&#xA;&#x9;&#x9;var client = Repository.GetElementByID(selection.ClientID)&#xA;&#x9;&#x9;for (n=0; n&lt;client.Connectors.Count; n++){&#xA;&#x9;&#x9;&#x9;if (client.Connectors.GetAt(n).Name == selection.Name){&#xA;&#x9;&#x9;&#x9;&#x9;client.Connectors.Delete(n)&#xA;&#x9;&#x9;&#x9;&#x9;client.Update()&#xA;&#x9;&#x9;&#x9;&#x9;client.Connectors.Refresh()&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;Repository.RunModelSearch(&quot;View Candidates&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)&#xA;&#xA;&#x9;Repository.SearchWindow.EnsureVisible()&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="544"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6347CF6C-732C-41c8-96D9-CE47CB511F4E}"/>
			<Column name="ScriptAuthor" value="{29042A6D-52A9-475b-88B3-CCA1B9915C65}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Approve Relationship&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;!INC TM Forum Normal Scripts.Relationship Manager - General Scripts&#xA;&#xA;/*&#xA; * Script Name:  Approve Relationship&#xA; * Author: Giu Platania&#xA; * Purpose: part of the MODA relationship manager, allows to transform a candidate relationship into a stereotyped relationship&#xA; * Date: 2023 12&#xA; */&#xA; &#xA; TARGET_STEREOTYPE = &quot;&quot;&#xA; &#xA;function main()&#xA;{&#xA;&#x9;Session.Output(Repository.CurrentSelection.List.Count);&#xA;&#x9;for (i=0; i&lt;Repository.CurrentSelection.List.Count; i++){&#xA;&#x9;&#x9;let elemGuid = Repository.CurrentSelection.List.GetAt(i).ElementGUID;&#xA;&#x9;&#x9;Session.Output(elemGuid)&#xA;&#x9;&#x9;var selection as EA.Connector;&#xA;&#x9;&#x9;selection = Repository.GetConnectorByGuid(elemGuid);&#xA;&#x9;&#x9;approveRelationship(selection);&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;Repository.RunModelSearch(&quot;View Candidates&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);&#xA;&#x9;&#x9;&#xA;&#x9;Repository.SearchWindow.EnsureVisible();&#xA;&#x9;&#xA;&#x9;Repository.RefreshOpenDiagrams(true);&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="546"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E71E6E0E-BD55-4d5a-8F77-0C340428F9C2}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;customTable&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;function populateCustomTable() {&#xA;    // Define the SQL query&#xA;    var sqlQuery = `&#xA;        SELECT Capability.Object_ID, Capability.ea_guid AS CLASSGUID, Capability.Object_Type AS CLASSTYPE,&#xA;               Capability.Name AS Capability, BusinessValue.value AS BusinessValue, Category.value AS Category,&#xA;               ID.value AS ID, Owner.value AS Owner, Source.value AS Source, Increments.value AS Increments,&#xA;               IncrementsToBe.value AS IncrementsToBe, IncrementVertical.value AS IncrementVertical,&#xA;               IncrementSupplyChain.value AS IncrementSupplyChain, Cost.value AS Cost,&#xA;               Criticality.value AS Criticality, Risk.value AS Risk&#xA;        FROM t_object AS Capability&#xA;        INNER JOIN t_objectproperties AS BusinessValue ON (BusinessValue.Object_ID = Capability.Object_ID AND BusinessValue.Property = 'BusinessValue')&#xA;        INNER JOIN t_objectproperties AS Category ON (Category.Object_ID = Capability.Object_ID AND Category.Property = 'Category')&#xA;        INNER JOIN t_objectproperties AS ID ON (ID.Object_ID = Capability.Object_ID AND ID.Property = 'ID')&#xA;        INNER JOIN t_objectproperties AS Owner ON (Owner.Object_ID = Capability.Object_ID AND Owner.Property = 'Owner')&#xA;        INNER JOIN t_objectproperties AS Source ON (Source.Object_ID = Capability.Object_ID AND Source.Property = 'Source')&#xA;        INNER JOIN t_objectproperties AS Increments ON (Increments.Object_ID = Capability.Object_ID AND Increments.Property = 'Increments')&#xA;        INNER JOIN t_objectproperties AS IncrementsToBe ON (IncrementsToBe.Object_ID = Capability.Object_ID AND IncrementsToBe.Property = 'IncrementsToBe')&#xA;        INNER JOIN t_objectproperties AS IncrementVertical ON (IncrementVertical.Object_ID = Capability.Object_ID AND IncrementVertical.Property = 'IncrementVertical')&#xA;        INNER JOIN t_objectproperties AS IncrementSupplyChain ON (IncrementSupplyChain.Object_ID = Capability.Object_ID AND IncrementSupplyChain.Property = 'IncrementSupplyChain')&#xA;        INNER JOIN t_objectproperties AS Cost ON (Cost.Object_ID = Capability.Object_ID AND Cost.Property = 'Cost')&#xA;        INNER JOIN t_objectproperties AS Criticality ON (Criticality.Object_ID = Capability.Object_ID AND Criticality.Property = 'Criticality')&#xA;        INNER JOIN t_objectproperties AS Risk ON (Risk.Object_ID = Capability.Object_ID AND Risk.Property = 'Risk')&#xA;        WHERE Capability.stereotype = 'dCapability'&#xA;    `;&#xA;&#xA;    // Execute the SQL query&#xA;    var queryResult = Repository.SQLQuery(sqlQuery);&#xA;&#xA;    // Load the XML result into a DOM for parsing&#xA;    var xmlDOM = new COMObject(&quot;MSXML2.DOMDocument.6.0&quot;);&#xA;    xmlDOM.async = false;&#xA;    xmlDOM.loadXML(queryResult);&#xA;&#xA;    // Specify the ElementID of the Custom Table&#xA;    var customTableElementID = 7691; // Replace with your actual ElementID&#xA;&#xA;    // Retrieve the Custom Table element using its ElementID&#xA;    var customTable = Repository.GetElementByID(customTableElementID);&#xA;    if (!customTable) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;Custom Table with ElementID &quot; + customTableElementID + &quot; not found.&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;    // Access the ElementGrid of the Custom Table&#xA;    var grid = customTable.GetElementGrid();&#xA;    if (!grid) {&#xA;        Session.Output(&quot;Failed to access the ElementGrid of the Custom Table.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // Define the columns based on the SQL query&#xA;    var columns = [&#xA;        &quot;Capability&quot;, &quot;BusinessValue&quot;, &quot;Category&quot;, &quot;ID&quot;, &quot;Owner&quot;, &quot;Source&quot;,&#xA;        &quot;Increments&quot;, &quot;IncrementsToBe&quot;, &quot;IncrementVertical&quot;, &quot;IncrementSupplyChain&quot;,&#xA;        &quot;Cost&quot;, &quot;Criticality&quot;, &quot;Risk&quot;&#xA;    ];&#xA;&#xA;    // Set the grid size: rows = number of results + 1 for header, columns = number of fields&#xA;    var rowNodes = xmlDOM.selectNodes(&quot;//EADATA/Dataset_0/Data/Row&quot;);&#xA;&#x9;Session.Output(&quot;rowNode is&quot; + rowNodes);&#xA;    var rows = rowNodes.length + 1;&#xA;    var cols = columns.length;&#xA;    grid.SetGridSize(rows, cols);&#xA;&#xA;    // Populate the header row&#xA;    for (var c = 0; c &lt; cols; c++) &#xA;&#x9;&#x9;{&#xA;        grid.SetCell(0, c, columns[c]);&#xA;&#x9;&#x9;}&#xA;&#xA;    // Populate the grid with data&#xA;    for (var r = 0; r &lt; rowNodes.length; r++) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#xA;        var rowNode = rowNodes[r];&#xA;&#x9;&#x9;&#x9; if (rowNode == null) &#xA;&#x9;&#x9;&#x9; {&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;Encountered an undefined rowNode at index &quot; + r);&#xA;&#x9;&#x9;&#x9;&#x9;continue;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;        for (var c = 0; c &lt; cols; c++) {&#xA;            var cellNode = rowNode.selectSingleNode(columns[c]);&#xA;            var cellValue = cellNode ? cellNode.text : &quot;&quot;;&#xA;            grid.SetCell(r + 1, c, cellValue);&#xA;        }&#xA;    }&#xA;&#xA;    // Update the grid to apply changes&#xA;    grid.Update();&#xA;&#xA;    // Refresh the diagram to display the updated table&#xA;    var diagram = Repository.GetCurrentDiagram();&#xA;    if (diagram) {&#xA;        Repository.ReloadDiagram(diagram.DiagramID);&#xA;    }&#xA;&#xA;    Session.Output(&quot;Custom Table populated successfully.&quot;);&#xA;}&#xA;&#xA;    Session.Output(&quot;start function.&quot;);&#xA;// Execute the function&#xA;populateCustomTable();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="547"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9A737860-45C7-4e67-8E99-0AA8D444847C}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;custom table 2&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;&#xA;function populateCustomTable() {&#xA;&#x9;&#xA;&#x9;// Define the SQL query&#xA;    var sqlQuery = `&#xA;        SELECT Capability.Object_ID, Capability.ea_guid AS CLASSGUID, Capability.Object_Type AS CLASSTYPE,&#xA;               Capability.Name AS Capability, BusinessValue.value AS BusinessValue, Category.value AS Category,&#xA;               ID.value AS ID, Owner.value AS Owner, Source.value AS Source, Increments.value AS Increments,&#xA;               IncrementsToBe.value AS IncrementsToBe, IncrementVertical.value AS IncrementVertical,&#xA;               IncrementSupplyChain.value AS IncrementSupplyChain, Cost.value AS Cost,&#xA;               Criticality.value AS Criticality, Risk.value AS Risk&#xA;        FROM t_object AS Capability&#xA;        INNER JOIN t_objectproperties AS BusinessValue ON (BusinessValue.Object_ID = Capability.Object_ID AND BusinessValue.Property = 'BusinessValue')&#xA;        INNER JOIN t_objectproperties AS Category ON (Category.Object_ID = Capability.Object_ID AND Category.Property = 'Category')&#xA;        INNER JOIN t_objectproperties AS ID ON (ID.Object_ID = Capability.Object_ID AND ID.Property = 'ID')&#xA;        INNER JOIN t_objectproperties AS Owner ON (Owner.Object_ID = Capability.Object_ID AND Owner.Property = 'Owner')&#xA;        INNER JOIN t_objectproperties AS Source ON (Source.Object_ID = Capability.Object_ID AND Source.Property = 'Source')&#xA;        INNER JOIN t_objectproperties AS Increments ON (Increments.Object_ID = Capability.Object_ID AND Increments.Property = 'Increments')&#xA;        INNER JOIN t_objectproperties AS IncrementsToBe ON (IncrementsToBe.Object_ID = Capability.Object_ID AND IncrementsToBe.Property = 'IncrementsToBe')&#xA;        INNER JOIN t_objectproperties AS IncrementVertical ON (IncrementVertical.Object_ID = Capability.Object_ID AND IncrementVertical.Property = 'IncrementVertical')&#xA;        INNER JOIN t_objectproperties AS IncrementSupplyChain ON (IncrementSupplyChain.Object_ID = Capability.Object_ID AND IncrementSupplyChain.Property = 'IncrementSupplyChain')&#xA;        INNER JOIN t_objectproperties AS Cost ON (Cost.Object_ID = Capability.Object_ID AND Cost.Property = 'Cost')&#xA;        INNER JOIN t_objectproperties AS Criticality ON (Criticality.Object_ID = Capability.Object_ID AND Criticality.Property = 'Criticality')&#xA;        INNER JOIN t_objectproperties AS Risk ON (Risk.Object_ID = Capability.Object_ID AND Risk.Property = 'Risk')&#xA;        WHERE Capability.stereotype = 'dCapability'&#xA;&#x9;&#x9;AND Category.value = 'AiaB'&#xA;    `;&#xA;&#xA;    // Execute the SQL query&#xA;    var result = Repository.SQLQuery(sqlQuery);&#xA;&#xA;     &#xA;    // Parse the XML into a DOM structure&#xA;    var xmlDoc = XMLParseXML(result);&#xA;&#xA;    // Extract nodes using XPath&#xA;    var objectIDNodes = XMLGetNodeTextArray(xmlDoc, &quot;//Row/Increments&quot;);&#xA;    var capabilityNodes = XMLGetNodeTextArray(xmlDoc, &quot;//Row/Capability&quot;);&#xA;    var businessValueNodes = XMLGetNodeTextArray(xmlDoc, &quot;//Row/BusinessValue&quot;);&#xA;    var categoryNodes = XMLGetNodeTextArray(xmlDoc, &quot;//Row/Risk&quot;);&#xA;&#xA;    // Define the Custom Table Element ID&#xA;    var customTableElementID = 7691; // Replace with your actual ElementID&#xA;&#xA;    // Retrieve the Custom Table element using its ElementID&#xA;    var customTable = Repository.GetElementByID(customTableElementID);&#xA;    if (!customTable) {&#xA;        Session.Output(&quot;Custom Table with ElementID &quot; + customTableElementID + &quot; not found.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // Access the ElementGrid of the Custom Table&#xA;    var grid = customTable.GetElementGrid();&#xA;    if (!grid) {&#xA;        Session.Output(&quot;Failed to access the ElementGrid of the Custom Table.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // Define column headers&#xA;    var columns = [&quot;Maturity&quot;, &quot;Capability&quot;, &quot;BusinessValue&quot;, &quot;Risk&quot;];&#xA;&#xA;    // Set the grid size: rows = number of results + 1 for header, columns = number of fields&#xA;    var rows = objectIDNodes.length + 1;&#xA;    var cols = columns.length;&#xA;    grid.SetGridSize(rows, cols);&#xA;&#xA;    // Populate the header row&#xA;    for (var c = 0; c &lt; cols; c++) {&#xA;        grid.SetCell(0, c, columns[c]);&#xA;    }&#xA;&#xA;    // Populate the grid with data&#xA;    for (var r = 0; r &lt; objectIDNodes.length; r++) {&#xA;        grid.SetCell(r + 1, 0, objectIDNodes[r]); // Object_ID&#xA;        grid.SetCell(r + 1, 1, capabilityNodes[r]); // Capability&#xA;        grid.SetCell(r + 1, 2, businessValueNodes[r]); // BusinessValue&#xA;        grid.SetCell(r + 1, 3, categoryNodes[r]); // Category&#xA;    }&#xA;&#xA;    // Update the grid to apply changes&#xA;    grid.Update();&#xA;&#xA;    // Refresh the diagram to display the updated table&#xA;    var diagram = Repository.GetCurrentDiagram();&#xA;    if (diagram) {&#xA;        Repository.ReloadDiagram(diagram.DiagramID);&#xA;    }&#xA;&#xA;    Session.Output(&quot;Custom Table populated successfully.&quot;);&#xA;}&#xA;&#xA;// Execute the function&#xA;populateCustomTable();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="548"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8AA319B5-6253-4c75-90D9-81B9FF132A6C}"/>
			<Column name="ScriptAuthor" value="{3B66C883-8099-42c7-9C00-1AE1361C66C3}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;gen Excel - dCapability&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="'[path=\Projects\Project EC\EAC scripts]&#xA;'[group=EAC scripts]&#xA;&#xA;option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Wrappers.Include&#xA;&#xA;' Script Name: Export Capabilities to Excel&#xA;' Purpose: Exports the list of capabilities to an Excel file&#xA;' Date: 2024-12-06&#xA;&#xA;'name of the output tab&#xA;const outPutName = &quot;Export Capabilities&quot;&#xA;dim excelOutput&#xA;&#xA;sub main&#xA;    'create output tab&#xA;    Repository.CreateOutputTab outPutName&#xA;    Repository.ClearOutput outPutName&#xA;    Repository.EnsureOutputVisible outPutName&#xA;&#xA;    'create the Excel file&#xA;    set excelOutput = new ExcelFile&#xA;&#xA;    'tell the user we are starting&#xA;    Session.Output now() &amp; &quot; Starting Capabilities Export&quot;&#xA;&#xA;    'do the actual export&#xA;    exportCapabilities()&#xA;&#xA;    'save and close the Excel file&#xA;    excelOutput.save&#xA;    excelOutput.close&#xA;&#xA;    'tell the user we are finished&#xA;    Session.Output now() &amp; &quot; Finished Export Capabilities&quot;&#xA;end sub&#xA;&#xA;function defineHeader()&#xA;    dim messageHeaders(16)&#xA;    messageHeaders(0) = &quot;Object_ID&quot;&#xA;    messageHeaders(1) = &quot;CLASSGUID&quot;&#xA;    messageHeaders(2) = &quot;CLASSTYPE&quot;&#xA;    messageHeaders(3) = &quot;Capability&quot;&#xA;    messageHeaders(4) = &quot;BusinessValue&quot;&#xA;    messageHeaders(5) = &quot;Category&quot;&#xA;    messageHeaders(6) = &quot;ID&quot;&#xA;    messageHeaders(7) = &quot;Owner&quot;&#xA;    messageHeaders(8) = &quot;Source&quot;&#xA;    messageHeaders(9) = &quot;Increments&quot;&#xA;    messageHeaders(10) = &quot;IncrementsToBe&quot;&#xA;    messageHeaders(11) = &quot;IncrementVertical&quot;&#xA;    messageHeaders(12) = &quot;IncrementSupplyChain&quot;&#xA;    messageHeaders(13) = &quot;Cost&quot;&#xA;    messageHeaders(14) = &quot;Criticality&quot;&#xA;    messageHeaders(15) = &quot;Risk&quot;&#xA;&#xA;    ' Return the messageHeaders array&#xA;    defineHeader = messageHeaders&#xA;end function&#xA;&#xA;function exportCapabilities()&#xA;    dim getCapabilitiesQuery&#xA;    dim arrayResult&#xA;    dim messageHeaders&#xA;&#xA;    ' Define the SQL query&#xA;    getCapabilitiesQuery = &quot;SELECT Distinct Capability.Object_ID, Capability.ea_guid AS CLASSGUID, Capability.Object_Type AS CLASSTYPE,&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;       Capability.Name AS Capability, BusinessValue.value AS BusinessValue, Category.value AS Category,&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;       ID.value AS ID, Owner.value AS Owner, Source.value AS Source, Increments.value AS Increments,&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;       IncrementsToBe.value AS IncrementsToBe, IncrementVertical.value AS IncrementVertical,&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;       IncrementSupplyChain.value AS IncrementSupplyChain, Cost.value AS Cost,&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;       Criticality.value AS Criticality, Risk.value AS Risk&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;FROM t_object AS Capability&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS BusinessValue ON (BusinessValue.Object_ID = Capability.Object_ID AND BusinessValue.Property = 'BusinessValue')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Category ON (Category.Object_ID = Capability.Object_ID AND Category.Property = 'Category')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS ID ON (ID.Object_ID = Capability.Object_ID AND ID.Property = 'ID')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Owner ON (Owner.Object_ID = Capability.Object_ID AND Owner.Property = 'Owner')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Source ON (Source.Object_ID = Capability.Object_ID AND Source.Property = 'Source')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Increments ON (Increments.Object_ID = Capability.Object_ID AND Increments.Property = 'Increments')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS IncrementsToBe ON (IncrementsToBe.Object_ID = Capability.Object_ID AND IncrementsToBe.Property = 'IncrementsToBe')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS IncrementVertical ON (IncrementVertical.Object_ID = Capability.Object_ID AND IncrementVertical.Property = 'IncrementVertical')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS IncrementSupplyChain ON (IncrementSupplyChain.Object_ID = Capability.Object_ID AND IncrementSupplyChain.Property = 'IncrementSupplyChain')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Cost ON (Cost.Object_ID = Capability.Object_ID AND Cost.Property = 'Cost')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Criticality ON (Criticality.Object_ID = Capability.Object_ID AND Criticality.Property = 'Criticality')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;INNER JOIN t_objectproperties AS Risk ON (Risk.Object_ID = Capability.Object_ID AND Risk.Property = 'Risk')&quot; &amp; vbNewLine &amp; _&#xA;                           &quot;WHERE Capability.stereotype = 'dCapability'&quot;&#xA;&#xA;    ' Execute the query and get the result as an array&#xA;    arrayResult = getArrayFromQuery(getCapabilitiesQuery)&#xA;    messageHeaders = defineHeader()&#xA;&#xA;    if Ubound(arrayResult) &gt; 0 then&#xA;        dim mergedArray&#xA;        mergedArray = AddRowToArray(arrayResult, messageHeaders)&#xA;        &#xA;        ' Create a tab in Excel with the results&#xA;        excelOutput.createTab &quot;Capabilities&quot;, mergedArray, true, &quot;TableStyleMedium13&quot;&#xA;    else&#xA;        Session.Output now() &amp; &quot; Empty query!&quot;&#xA;    end if&#xA;end function&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="549"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9763C46C-B5EF-4357-9A7F-12ABB4AF6459}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Promote to Catalogs&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Model Management Utilities&#xA;!INC Utils.DAF Conf&#xA;&#xA;'&#xA;' Script Name: PromoteStereotypesToCatalogs&#xA;' Author: Giu Platania&#xA;' Date: 2025-01-22&#xA;' Purpose: &#xA;'   This script reads a CSV file containing stereotype and package GUID mappings &#xA;'   and promotes elements with specified stereotypes to their respective catalogs/packages.&#xA;'   It automates the task of reorganizing elements into their designated repositories.&#xA;&#xA;' Description:&#xA;' This script performs the following steps:&#xA;' - Reads a two-dimensional array of stereotypes and their corresponding package GUIDs from a CSV file.&#xA;' - Iterates through a given diagram's elements to check for specified stereotypes.&#xA;' - Moves the elements to the package specified in the CSV mapping.&#xA;' - Skips elements with unrecognized stereotypes and outputs relevant debug information.&#xA;'&#xA;' Usage:&#xA;' 1. Configure/generate the CSV file with stereotype and package GUID mappings.&#xA;' 2. Update the script DAF Conf to the location of the CSV file &#xA;' 3. import thew packages of the Architecture Landscape&#xA;' 4. Run the script within Sparx EA to promote stereotypes to their catalogs.&#xA;'&#xA;' Inputs:&#xA;' - Diagram with elements to be checked and promoted.&#xA;' - CSV file containing stereotype-to-package GUID mappings.&#xA;'&#xA;' Outputs:&#xA;' - Elements moved to the appropriate catalogs/packages.&#xA;' - Debug output in the Sparx EA script console for skipped or processed elements.&#xA;'&#xA;' Notes:&#xA;' - Ensure that the CSV file is correctly formatted with stereotype names in the first column and package GUIDs in the second column.&#xA;' - The script assumes the existence of the target packages within the EA repository.&#xA;' - Skips elements with unrecognized stereotypes or missing tagged values.&#xA;'&#xA;&#xA;'&#xA;!INC Utils.Model Management Utilities&#xA;'!INC DAF MDG.DAF M3 Conf&#xA;!INC Wrappers.Include&#xA;&#xA;Dim project as EA.Project&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;&#xA;sub Start()&#xA;&#xA;    dim diagram as EA.Diagram&#xA;    set project = Repository.GetProjectInterface()    &#xA;    set diagram  = Repository.GetCurrentDiagram&#xA;    if not diagram is nothing then&#xA;&#x9;&#x9;Session.Output &quot;diagram found!&quot; &#xA;        RelocateDiagramElements diagram&#xA;    end if    &#xA;end sub&#xA;&#xA;&#xA;Sub RelocateDiagramElements(diagram)&#xA;&#xA;    Dim stereotypePackageMap&#xA;    Dim diagramObject As EA.DiagramObject&#xA;    Dim elementID&#xA;    Dim element As EA.Element&#xA;    Dim targetPackage As EA.Package&#xA;&#xA;    ' Load the stereotype-to-package map from the CSV file&#xA;&#x9;'Set stereotypePackageMap = LoadStereotypePackageMap(CSVPath &amp; &quot;DAFCatalogs.csv&quot;)&#xA;&#xA;&#x9;' load stereotype from internal array&#xA;&#x9;Set stereotypePackageMap =&#x9;LoadPromotionPackageMap()&#xA;&#xA;    ' Iterate through all diagram elements&#xA;    For Each diagramObject In diagram.DiagramObjects&#xA;        elementID = diagramObject.ElementID&#xA;        Set element = Repository.GetElementByID(elementID)&#xA;        Session.Output &quot;Processing element: &quot; &amp; element.Name&#xA;&#xA;        ' Check if the stereotype exists in the map&#xA;        If stereotypePackageMap.Exists(element.Stereotype) Then&#xA;&#x9;&#x9;&#x9; Session.Output &quot;found &quot; &amp; element.Stereotype &amp; &quot; to package: &quot; &amp; targetPackage.Name&#xA;            Set targetPackage = Repository.GetPackageByGuid(stereotypePackageMap(element.Stereotype))&#xA;            &#xA;            ' Move the element to the target package&#xA;            element.PackageID = targetPackage.PackageID&#xA;            element.Update&#xA;            Session.Output &quot;Moved element: &quot; &amp; element.Name &amp; &quot; to package: &quot; &amp; targetPackage.Name&#xA;        Else&#xA;            ' Skip elements with unknown stereotypes&#xA;            Session.Output &quot;Skipping element: &quot; &amp; element.Name &amp; &quot; with unknown stereotype: &quot; &amp; element.Stereotype&#xA;        End If&#xA;    Next&#xA;&#xA;End Sub&#xA;&#xA;' Function to load the stereotype-to-package mapping from a CSV file&#xA;Function LoadStereotypePackageMap(csvFilePath)&#xA;    Dim fso, file, line, columns&#xA;    Dim map&#xA;    Set map = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#xA;    ' Open the CSV file&#xA;    Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;    If Not fso.FileExists(csvFilePath) Then&#xA;        Session.Output &quot;CSV file not found: &quot; &amp; csvFilePath&#xA;        Exit Function&#xA;    End If&#xA;&#xA;    Set file = fso.OpenTextFile(csvFilePath, 1)&#xA;    file.SkipLine ' Skip the header row&#xA;&#xA;    ' Read each line and populate the dictionary&#xA;    Do Until file.AtEndOfStream&#xA;        line = file.ReadLine&#xA;        columns = Split(line, &quot;,&quot;)&#xA;        If UBound(columns) &gt;= 1 Then&#xA;            map(columns(0)) = columns(1) ' Map stereotype to package GUID&#xA;        End If&#xA;    Loop&#xA;&#xA;    file.Close&#xA;    Set LoadStereotypePackageMap = map&#xA;End Function&#xA;&#xA;'-------------------------------------------------&#xA;' Load the stereotype→package GUID map from a hard-coded list&#xA;'-------------------------------------------------&#xA;Function LoadPromotionPackageMap()&#xA;    Dim map, lines, i&#xA;    Set map = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#xA;    ' Hard-coded stereotype/GUID pairs (two columns per entry)&#xA;    lines = Array( _&#xA;        &quot;dAction&quot;, &quot;{52762144-0680-48eb-9F4C-5691D8B5F520}&quot;, _&#xA;        &quot;dActivity&quot;, &quot;{E6AE40A9-4876-4876-8525-AF0B58BEFF46}&quot;, _&#xA;        &quot;dActor&quot;, &quot;{C9C86C4A-30CA-4753-AB53-29705C34A964}&quot;, _&#xA;        &quot;dAPI&quot;, &quot;{A74025BE-3836-4fd7-B9BF-799FEA518081}&quot;, _&#xA;        &quot;dAPIOperation&quot;, &quot;{CE51691A-A738-4844-9ED0-23A354223612}&quot;, _&#xA;        &quot;dAPIParameter&quot;, &quot;{2152322F-DC63-4b27-865C-5BCE38895FDB}&quot;, _&#xA;        &quot;dAPIResponse&quot;, &quot;{EE31E97C-3124-47fd-8825-F247283B762E}&quot;, _&#xA;        &quot;dApplicationComponent&quot;, &quot;{B6B92CC9-C80A-4361-934F-293BCFF46DAB}&quot;, _&#xA;        &quot;dApplicationFunction&quot;, &quot;{14D985AF-090B-4b15-A8EF-FE1AB0E23EA2}&quot;, _&#xA;        &quot;dBusinessProcess&quot;, &quot;{48176930-49D9-4104-AEA0-DE1721B89606}&quot;, _&#xA;        &quot;dBusinessService&quot;, &quot;{9F2DC9E6-C19C-4466-BD39-216443E8D8C5}&quot;, _&#xA;        &quot;dBusinessUseCase&quot;, &quot;{EA2C36DB-CAA6-4266-90C6-5CC3E7A1155E}&quot;, _&#xA;        &quot;dCapability&quot;, &quot;{AD8A466A-B92F-4fbd-BB96-AFED1B482B03}&quot;, _&#xA;        &quot;dCluster&quot;, &quot;{7E68C070-57B6-4ce7-BC5B-E6F6E89697EC}&quot;, _&#xA;        &quot;dContainer&quot;, &quot;{5D425066-8C0F-4115-81EB-246B6206A82D}&quot;, _&#xA;        &quot;dController&quot;, &quot;{BBC97969-A460-490b-84F2-5B4B38866782}&quot;, _&#xA;        &quot;dDataEntity&quot;, &quot;{43F1D5F7-3A4F-43bb-99DA-BC1125515A5F}&quot;, _&#xA;        &quot;dDecision&quot;, &quot;{BF488E70-DA65-4d26-B0ED-B1CCBE5533B2}&quot;, _&#xA;        &quot;dDeploymentModel&quot;, &quot;{78BE6EF7-A5E4-46b0-84AD-B3932F39B25C}&quot;, _&#xA;        &quot;dDeploymentNode&quot;, &quot;{23F2A1B4-583B-4854-B287-518E33F97F77}&quot;, _&#xA;        &quot;dEvent&quot;, &quot;{0335D7C4-8F6E-4328-ACFC-12851FA390D2}&quot;, _&#xA;        &quot;dFeature&quot;, &quot;{B7A598FE-B25B-4ab6-AC7D-54706D29DE29}&quot;, _&#xA;        &quot;dGoal&quot;, &quot;{C4BBAED1-BFC2-42a1-89B6-5F85E5B23B49}&quot;, _&#xA;        &quot;dGrowthPackage&quot;, &quot;{C965F5D5-CCF9-434f-811B-4569BBF2FE46}&quot;, _&#xA;        &quot;dInitiative&quot;, &quot;{53977AC5-AED6-4238-ADC8-8E7F94FB4928}&quot;, _&#xA;        &quot;dIPRange&quot;, &quot;{BA227C9F-8F56-4d02-88BB-ADBBD1B6FCBF}&quot;, _&#xA;        &quot;dIssue&quot;, &quot;{87FF78BD-94B1-4a1f-A1BB-2079CA27D58C}&quot;, _&#xA;        &quot;dJSON_Attribute&quot;, &quot;{64B82117-CB3D-44f0-B6B1-F0519A36F389}&quot;, _&#xA;        &quot;dJSON_Datatype&quot;, &quot;{0E379EFB-574C-40c7-96A6-B2DFA36420D7}&quot;, _&#xA;        &quot;dJSON_Element&quot;, &quot;{968E1090-80FC-41e9-8859-392669442D65}&quot;, _&#xA;        &quot;dJSON_Schema&quot;, &quot;{055E73F9-F2C6-4616-BBD2-D29E6BDFFED7}&quot;, _&#xA;&#x9;&#x9;&quot;TMF_JSON_Schema&quot;, &quot;{A7317844-4196-4e1c-8566-C77C3F4577CE}&quot;, _&#xA;        &quot;dJSON_SchemaSubSet&quot;, &quot;{97CA581B-6971-4602-B4BB-379E370A8787}&quot;, _&#xA;        &quot;dJSON_Type&quot;, &quot;{90335BD2-C233-43ab-8EE5-CA86B773E6A9}&quot;, _&#xA;        &quot;dLocation&quot;, &quot;{4C3565C0-2529-4543-B7E1-9F049FC98449}&quot;, _&#xA;        &quot;dLogicalAppComponent&quot;, &quot;{7893E7CD-BFE7-4ed4-ABA7-249C06C7BCEE}&quot;, _&#xA;        &quot;dMeasurementArea&quot;, &quot;{BF67E988-4AAE-4439-9D65-3B53CD18BDBF}&quot;, _&#xA;        &quot;dMeasurementCategory&quot;, &quot;{1475678A-AA92-4e02-8B50-6C3D747295DE}&quot;, _&#xA;        &quot;dMeasurementGrouping&quot;, &quot;{AE8A0ADF-01B5-4bc1-863A-E5222637C3E8}&quot;, _&#xA;        &quot;dMeasurementIndicator&quot;, &quot;{468F5F36-AA19-4a74-96EE-A49AC78F38E8}&quot;, _&#xA;        &quot;dModelClass&quot;, &quot;{A7317844-4196-4e1c-8566-C77C3F4577CE}&quot;, _&#xA;        &quot;dNetwork&quot;, &quot;{C8057F85-3A22-4de3-A8F0-CDC9D61256A2}&quot;, _&#xA;        &quot;dObject&quot;, &quot;{59E74D72-6E50-4efe-9941-1F87570577D7}&quot;, _&#xA;        &quot;dObjective&quot;, &quot;{1526F58C-8207-4872-97A1-918F3C9FB56F}&quot;, _&#xA;        &quot;dOnPremise&quot;, &quot;{6AC74886-B897-45bb-9516-883951A38F96}&quot;, _&#xA;        &quot;dOpinion&quot;, &quot;{D0BB972D-28ED-498f-ABF8-4D468CFCBA10}&quot;, _&#xA;        &quot;dOpinionInner&quot;, &quot;{AFC27792-1A22-4b0d-88BC-04FCAED6A17A}&quot;, _&#xA;        &quot;dOrganizationUnit&quot;, &quot;{EE0438E8-49A9-4893-8673-F87A70193BBE}&quot;, _&#xA;        &quot;dPhysicalService&quot;, &quot;{EE3CA6E2-BF2D-416d-8C94-BB88D5371070}&quot;, _&#xA;        &quot;dPrinciple&quot;, &quot;{EA6108EE-A506-4b6a-895E-DA23D94B2412}&quot;, _&#xA;        &quot;dProduct&quot;, &quot;{A04DE34C-E0DE-450e-83E4-C8A753109A3E}&quot;, _&#xA;        &quot;dProgram&quot;, &quot;{E7C60807-7C2A-4726-8B0E-3C315021B12D}&quot;, _&#xA;        &quot;dPublicCluster&quot;, &quot;{AD10E934-DAE6-4c77-8145-92DFFCABBE23}&quot;, _&#xA;        &quot;dRegion&quot;, &quot;{81D7C531-591B-41f0-A584-C4D3594CCFC2}&quot; , _&#xA;        &quot;dRequirement&quot;, &quot;{DEAB0217-D28D-470d-905F-0B57884DD18F}&quot; , _&#xA;        &quot;dResource&quot;, &quot;{50992834-EC54-476d-A334-4E92040A45FD}&quot; , _&#xA;        &quot;dRisk&quot;, &quot;{A755E7D0-A225-4704-A9C7-52FDB8745A66}&quot;, _&#xA;        &quot;dRole&quot;, &quot;{FD3A51B5-eeBB-4ac0-A15B-60AC52D3DEEE}&quot; _&#xA;    )&#xA;&#xA;    ' Populate mapping&#xA;    For i = 0 To UBound(lines) Step 2&#xA;        map(lines(i)) = lines(i + 1)&#xA;    Next&#xA;&#xA;    Set LoadPromotionPackageMap = map&#xA;End Function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;Start"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="550"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{747D7B89-9ADC-4c16-AC24-A374216AAADB}"/>
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DAF Conf&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value=" &#xA;' Script Name: DAF MDG configuration&#xA;&#xA;' Purpose: use this script to configure the targets for the M3 MDG scripts &#xA;' for compatibility it's assumed that all the files are placed under C:/tmp&#xA;' Date: 2025 01 21 &#xA;' Version: 1.20250122&#xA;'&#xA;&#xA;&#xA;&#x9;dim metamodelPackageGUID ' as String&#xA;&#x9;dim profilePackageGUID   ' as String&#xA;&#x9;dim relationshipPackageGUID ' as String&#xA;&#x9;dim quickLinkFileName    ' as String&#xA;&#x9;dim ProfileName    ' as String&#xA;&#x9;dim mdgTechFilePath    ' as String&#xA;&#x9;dim ProfileDiagramGUID ' as String &#xA;&#x9;dim UMLProfileFilename' as String&#xA;&#x9;dim ProfileToolboxClassGUID ''as String&#xA;&#x9;dim ProfileToolboxConnectorGUID 'as String&#xA;&#x9;dim GenerateCatalogs ' as boolean&#xA;&#x9;dim generateSLQ ' as boolean&#xA;&#x9;dim IconPath  'as String&#xA;&#x9;dim SQLPath 'as String&#xA;&#x9;dim GenerateCSV 'as String&#xA;&#x9;dim CSVPath 'as String&#xA;&#xA;&#x9;'metamodelPackageGUID = &quot;{02BC7973-A0CB-4865-A42E-ECA442FF2D0D}&quot; ' DAF Metamodel package&#xA;&#x9;'profilePackageGUID = &quot;{BEFFD7D1-82EE-478f-A0EE-5670EC836630}&quot; ' DAF Profile Package&#xA;&#x9;'relationshipPackageGUID = &quot;{C3097ACD-177F-4d58-B51F-771989DAFF70}&quot; ' package where to store relationships&#xA;&#x9;'quickLinkFileName = &quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\quicklinker\QuickLink.csv&quot; ' DAF location of the Quicklinker file&#xA;&#x9;'ProfileName = &quot;DAF&quot;&#xA;&#x9;'mdgTechFilePath=&quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\DAF40.mts&quot; 'DAF MTS location&#xA;&#x9;'ProfileDiagramGUID=&quot;{B91435BE-4D2E-4511-8A96-481522342E3A}&quot; ' GUID of the diagram where the DAF profile is located&#xA;&#x9;'UMLProfileFilename=&quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\profile\DAFProfile.xml&quot; 'location of the UML profile saved&#xA;&#x9;'ProfileToolboxClassGUID=&quot;{5D7B181D-D531-42d2-9B13-0E0A77BD5522}&quot; 'the class GUID containing all the links to Elements&#xA;&#x9;'ProfileToolboxConnectorGUID=&quot;{5FE30409-43C0-4444-B469-28337E579EFA}&quot; 'the class GUID containing all the links to connectors&#xA;&#x9;IconPath=&quot;C:\tmp\Icons\&quot;&#xA;&#x9;SQLPath=&quot;C:\tmp\queries\&quot;&#xA;&#x9;CSVPath =&quot;C:\tmp\csv\&quot;&#xA;&#x9;GenerateCatalogs = 0&#xA;&#x9;generateSLQ = 0&#xA;&#x9;GenerateCSV = 0"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="551"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A6FC20B9-592F-45a7-9927-0CA6C35A9B55}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Custom Table - populate from query&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value=" &#xA;!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;&#xA;/*&#xA; * Script Name: &#xA; * Author: &#xA; * Purpose: &#xA; * Date: &#xA; */&#xA;&#xA;function populateGridFromQuery(sqlQuery, columns, elementId) {&#xA;    // Execute the SQL query&#xA;    var result = Repository.SQLQuery(sqlQuery);&#xA;    &#xA;    // Parse the XML result&#xA;    var xmlDoc = XMLParseXML(result);&#xA;    if (!xmlDoc) {&#xA;        Session.Output(&quot;Failed to parse XML result&quot;);&#xA;        return false;&#xA;    }&#xA;&#xA;    // Collect data for each column&#xA;    var columnData = [];&#xA;    for (var c = 0; c &lt; columns.length; c++) {&#xA;        var nodes = XMLGetNodeTextArray(xmlDoc, columns[c].xpath);&#xA;        columnData.push(nodes);&#xA;    }&#xA;&#xA;    // Validate we have data to populate&#xA;    if (columnData.length === 0 || columnData[0].length === 0) {&#xA;        Session.Output(&quot;No data found to populate grid&quot;);&#xA;        return false;&#xA;    }&#xA;&#xA;    // Get the target element&#xA;    var customTable = Repository.GetElementByID(elementId);&#xA;    if (!customTable) {&#xA;        Session.Output(&quot;Element with ID &quot; + elementId + &quot; not found&quot;);&#xA;        return false;&#xA;    }&#xA;&#xA;    // Access the element grid&#xA;    var grid = customTable.GetElementGrid();&#xA;    if (!grid) {&#xA;        Session.Output(&quot;Failed to access element grid&quot;);&#xA;        return false;&#xA;    }&#xA;&#xA;    // Calculate grid dimensions&#xA;    var rowCount = columnData[0].length + 1; // +1 for header&#xA;    var colCount = columns.length;&#xA;&#xA;    // Resize grid&#xA;    grid.SetGridSize(rowCount, colCount);&#xA;&#xA;    // Set column headers&#xA;    for (var c = 0; c &lt; colCount; c++) {&#xA;        grid.SetCell(0, c, columns[c].name);&#xA;    }&#xA;&#xA;    // Populate data rows&#xA;    for (var r = 0; r &lt; columnData[0].length; r++) {&#xA;        for (var c = 0; c &lt; colCount; c++) {&#xA;            grid.SetCell(r + 1, c, columnData[c][r]);&#xA;        }&#xA;    }&#xA;&#xA;    // Save changes&#xA;    grid.Update();&#xA;&#xA;    // Refresh diagram if open&#xA;    var diagram = Repository.GetCurrentDiagram();&#xA;    if (diagram) {&#xA;        Repository.ReloadDiagram(diagram.DiagramID);&#xA;    }&#xA;&#xA;    Session.Output(&quot;Grid populated successfully with &quot; + columnData[0].length + &quot; rows&quot;);&#xA;    return true;&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="552"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2CB5E2F5-04C2-4a7f-BBBC-8F590A0C4FD0}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Custom Table - Capabilities&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA; * Script Name: &#xA; * Author: &#xA; * Purpose: &#xA; * Date: &#xA; */&#xA; &#xA;!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;!INC TM Forum Normal Scripts.Custom Table - populate from query&#xA;&#xA;function main() {&#xA;&#x9;   // Get current diagram&#xA;&#x9;&#x9;var diagram = Repository.GetCurrentDiagram();&#xA;&#x9;&#x9;if (!diagram) {&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Error: Please open a diagram containing the custom table&quot;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Get selected elements in the diagram&#xA;&#x9;&#x9;var selectedElements = diagram.SelectedObjects;&#xA;&#x9;&#x9;if (selectedElements.Count != 1) {&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Error: Please select exactly one custom table element in the diagram&quot;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Get the selected element&#xA;&#x9;&#x9;var selectedElement = Repository.GetElementByID(selectedElements.GetAt(0).ElementID);&#xA;&#x9;&#x9;if (!selectedElement) {&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Error: Failed to retrieve selected element&quot;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;// Define SQL query for specific business case&#xA;&#x9;var sqlQuery = `&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; SELECT Distinct Capability.Object_ID, Capability.ea_guid AS CLASSGUID, &#xA;           Capability.Object_Type AS CLASSTYPE, Capability.Name AS Capability,&#xA;           BusinessValue.value AS BusinessValue, Risk.value AS Risk,&#xA;           Increments.value AS Increments&#xA;&#x9;&#x9;&#x9;FROM t_object AS Capability&#xA;&#x9;&#x9;&#x9;INNER JOIN t_objectproperties AS BusinessValue &#xA;&#x9;&#x9;&#x9;&#x9;ON (BusinessValue.Object_ID = Capability.Object_ID AND BusinessValue.Property = 'BusinessValue')&#xA;&#x9;&#x9;&#x9;INNER JOIN t_objectproperties AS Risk &#xA;&#x9;&#x9;&#x9;&#x9;ON (Risk.Object_ID = Capability.Object_ID AND Risk.Property = 'Risk')&#xA;&#x9;&#x9;&#x9;INNER JOIN t_objectproperties AS Increments &#xA;&#x9;&#x9;&#x9;&#x9;ON (Increments.Object_ID = Capability.Object_ID AND Increments.Property = 'Increments')&#xA;&#x9;&#x9;&#x9;INNER JOIN t_objectproperties AS Category &#xA;&#x9;&#x9;&#x9;&#x9;ON (Category.Object_ID = Capability.Object_ID AND Category.Property = 'Category')&#xA;&#x9;&#x9;&#x9;WHERE Capability.stereotype = 'dCapability'&#xA;&#x9;&#x9;&#x9;AND Category.value = 'AiaB'&#xA;&#x9;   `;&#xA;&#xA;&#x9;// Define grid column configuration&#xA;&#x9;&#x9;var gridColumns = [&#xA;&#x9;&#x9;&#x9;{ name: &quot;Maturity&quot;,    xpath: &quot;//Row/Increments&quot; },&#xA;&#x9;&#x9;&#x9;{ name: &quot;Capability&quot;,  xpath: &quot;//Row/Capability&quot; },&#xA;&#x9;&#x9;&#x9;{ name: &quot;BusinessValue&quot;, xpath: &quot;//Row/BusinessValue&quot; },&#xA;&#x9;&#x9;&#x9;{ name: &quot;Risk&quot;,       xpath: &quot;//Row/Risk&quot; }&#xA;&#x9;&#x9;];&#xA;&#xA;&#x9;// Specify target element ID&#xA;&#x9;var targetElementId = selectedElement.ElementID; &#xA;&#xA;&#x9;// Execute the population function&#xA;&#x9;populateGridFromQuery(sqlQuery, gridColumns, targetElementId);&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="553"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B3851120-4FB5-41b1-900B-9CB6ED475787}"/>
			<Column name="ScriptAuthor" value="{2B087455-273F-4b5f-AB2C-38B8EB713A29}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Custom Table - Measurement&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/*&#xA; * Script Name: &#xA; * Author: &#xA; * Purpose: &#xA; * Date: &#xA; */&#xA; &#xA;!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;!INC TM Forum Normal Scripts.Custom Table - populate from query&#xA;&#xA;function main() {&#xA;&#x9;   // Get current diagram&#xA;&#x9;&#x9;var diagram = Repository.GetCurrentDiagram();&#xA;&#x9;&#x9;if (!diagram) {&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Error: Please open a diagram containing the custom table&quot;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Get selected elements in the diagram&#xA;&#x9;&#x9;var selectedElements = diagram.SelectedObjects;&#xA;&#x9;&#x9;if (selectedElements.Count != 1) {&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Error: Please select exactly one custom table element in the diagram&quot;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// Get the selected element&#xA;&#x9;&#x9;var selectedElement = Repository.GetElementByID(selectedElements.GetAt(0).ElementID);&#xA;&#x9;&#x9;if (!selectedElement) {&#xA;&#x9;&#x9;&#x9;Session.Output(&quot;Error: Failed to retrieve selected element&quot;);&#xA;&#x9;&#x9;&#x9;return;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;// Define SQL query for specific business case&#xA;&#x9;var sqlQuery = `&#xA;&#x9;   SELECT &#xA;&#x9;&#x9; dMeasurementGrouping.Name AS [MeasurementGroup],&#xA;&#x9;&#x9;AVG(CAST(CurrentLevel.Value AS SIGNED)) AS [Currenct], &#xA;&#x9;&#x9;AVG(CAST(SatisfactionLevel.Value AS SIGNED)) AS [Satisfacion]&#xA;&#x9;   &#xA;&#x9;FROM &#xA;&#x9;&#x9;t_object AS KPI&#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;t_objectproperties AS CurrentLevel ON CurrentLevel.Object_ID = KPI.Object_ID&#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;t_objectproperties AS SatisfactionLevel ON SatisfactionLevel.Object_ID = KPI.Object_ID&#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;t_connector AS conn ON conn.Start_Object_ID = KPI.Object_ID&#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;t_object AS dMeasurementGrouping ON conn.End_Object_ID = dMeasurementGrouping.Object_ID&#xA;&#x9;WHERE &#xA;&#x9;&#x9;KPI.Stereotype = 'dMeasurementIndicator'&#xA;&#x9;&#x9;AND SatisfactionLevel.Property = 'SatisfactionLevel'&#xA;&#x9;&#x9;AND CurrentLevel.Property = 'CurrentLevel'&#xA;&#x9;&#x9;AND dMeasurementGrouping.Stereotype = 'dMeasurementGrouping'&#xA;&#x9;GROUP BY &#xA;&#x9;&#x9;dMeasurementGrouping.Name&#xA;&#x9;ORDER BY &#xA;&#x9;&#x9;SUM(CAST(CurrentLevel.Value AS SIGNED)) DESC;&#xA;&#xA;&#x9;   `;&#xA;&#xA;&#x9;// Define grid column configuration&#xA;&#x9;var gridColumns = [&#xA;&#x9;&#x9;{ name: &quot;Measurement Group&quot;,    xpath: &quot;//Row/MeasurementGroup&quot; },&#xA;&#x9;&#x9;{ name: &quot;Currenct&quot;,  xpath: &quot;//Row/Currenct&quot; },&#xA;&#x9;&#x9;{ name: &quot;Satisfacion&quot;, xpath: &quot;//Row/Satisfacion&quot; }&#xA;&#x9;];&#xA;&#xA;&#x9;// Specify target element ID&#xA;&#x9;var targetElementId = selectedElement.ElementID; &#xA;&#xA;&#x9;// Execute the population function&#xA;&#x9;populateGridFromQuery(sqlQuery, gridColumns, targetElementId);&#xA;}&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="555"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0A83887C-5551-4246-ADAE-2103FF435102}"/>
			<Column name="ScriptAuthor" value="{16F573BB-C7E6-4af1-8D7B-DDD2BA7242B2}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;populate dashboard&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;!INC EAScriptLib.JavaScript-XML&#xA;&#xA;function calculateComplexity() {&#xA;    Session.Output(&quot;⏳ Calculating Complexity…&quot;);&#xA;&#xA;    //––– element IDs –––&#xA;    var applicationsID = 8023;   // “Impacted Applications”&#xA;    var interfacesID   = 8033;   // “Identified Interfaces”&#xA;    var processesID    = 8066;   // “Impacted Processes”&#xA;    var rolesID        = 8051;   // “Impacted Roles”&#xA;    var complexityID   = 8065;   // “Artemis Complexity”&#xA;&#xA;    //––– fetch elements –––&#xA;    var appElem   = Repository.GetElementByID(applicationsID);&#xA;    var ifaceElem = Repository.GetElementByID(interfacesID);&#xA;    var procElem  = Repository.GetElementByID(processesID);&#xA;    var roleElem  = Repository.GetElementByID(rolesID);&#xA;    var compElem  = Repository.GetElementByID(complexityID);&#xA;&#xA;    //––– parse their Name (which holds the counts) –––&#xA;    var appsCount   = parseInt(appElem.Name,   10) || 0;&#xA;    var ifacesCount = parseInt(ifaceElem.Name, 10) || 0;&#xA;    var procsCount  = parseInt(procElem.Name,  10) || 0;&#xA;    var rolesCount  = parseInt(roleElem.Name,  10) || 0;&#xA;&#xA;    //––– raw complexity = sum of all “nodes” + “relationships” –––&#xA;    var complexityValue = (appsCount * ifacesCount)  + procsCount + rolesCount ;&#xA;    Session.Output(&quot; • Raw complexity = &quot; + complexityValue);&#xA;&#xA;    //––– write it back into the Complexity element’s Name –––&#xA;    compElem.Name = complexityValue.toString();&#xA;    compElem.Update();&#xA;&#xA;    //––– refresh EA’s tree so you see the new value –––&#xA;   // Repository.RefreshModelView(appElem.PackageID);&#xA;    var diag = Repository.GetCurrentDiagram();&#xA;    if (diag) {&#xA;        Repository.ReloadDiagram(diag.DiagramID);&#xA;        Session.Output(&quot;Diagram refreshed.&quot;);&#xA;&#x9;}&#xA;&#xA;    Session.Output(&quot;✅ Complexity updated on element ID &quot; + complexityID);&#xA;}&#xA;&#xA;/**&#xA; * Resets the Name of each dashboard element to &quot;processing&quot;&#xA; * so you can visually show counts are about to be recalculated.&#xA; */&#xA;&#xA;&#xA;function resetDashboardProcessing() {&#xA;    Session.Output(&quot;⏳ Resetting dashboard elements to 'processing'…&quot;);&#xA;&#xA;&#x9;&#xA;    // IDs of the elements to reset&#xA;    var elementIDs = [&#xA;        8023,  // Impacted Applications&#xA;        8033,  // Identified Interfaces&#xA;        8066,  // Impacted Processes&#xA;        8051,  // Impacted Roles&#xA;        8065   // Artemis Complexity&#xA;    ];&#xA;&#xA;    // Loop and reset each one&#xA;    elementIDs.forEach(function(id) {&#xA;        var elem = Repository.GetElementByID(id);&#xA;        if (elem) {&#xA;            elem.Name = &quot;processing&quot;;&#xA;            elem.Update();&#xA;            Session.Output(&quot; • Element  &quot; + elem.alias + &quot; set to 'processing'&quot;);&#xA;        }&#xA;        else {&#xA;            Session.Output(&quot; ⚠️ Element ID &quot; + elem.alias + &quot; not found!&quot;);&#xA;        }&#xA;    });&#xA;&#xA;    // Refresh the current diagram so the new names appear immediately&#xA;    var diag = Repository.GetCurrentDiagram();&#xA;    if (diag) {&#xA;        Repository.ReloadDiagram(diag.DiagramID);&#xA;        Session.Output(&quot;???? Diagram refreshed.&quot;);&#xA;    }&#xA;&#xA;    Session.Output(&quot;✅ All dashboard elements reset.&quot;);&#xA;}&#xA;&#xA;&#xA;/**&#xA; * Populates (in this case renames) a boundary element with the result of a single-row count query.&#xA; *&#xA; * @param {string} sqlQuery         - The SQL to execute (must return at least one row with a &lt;Row&gt;&lt;Value&gt;count&lt;/Value&gt;&lt;/Row&gt;).&#xA; * @param {number} boundaryElementID - The EA.Element.ElementID of the boundary to update.&#xA; */&#xA;function populateBoundaryFromQuery(sqlQuery, boundaryElementID) {&#xA;    Session.Output(&quot;=== Starting populateBoundaryFromQuery ===&quot;);&#xA;&#xA;    // 1) Execute the SQL and get back EA's XML result&#xA;    var rawXml = Repository.SQLQuery(sqlQuery);&#xA;    if (!rawXml || rawXml.trim() === &quot;&quot;) {&#xA;        Session.Output(&quot;No data returned from SQLQuery.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // 2) Parse XML into a DOM&#xA;    var xmlDoc = XMLParseXML(rawXml);&#xA;&#xA;    // 3) Extract the numeric count from each &lt;Row&gt;/&lt;Value&gt; node&#xA;    var counts = XMLGetNodeTextArray(xmlDoc, &quot;//Row/Value&quot;);&#xA;    if (counts.length === 0) {&#xA;        Session.Output(&quot;Query returned zero rows.&quot;);&#xA;        return;&#xA;    }&#xA;&#xA;    // 4) Retrieve the boundary element by its ElementID&#xA;    var boundaryElem = Repository.GetElementByID(boundaryElementID);&#xA;    if (!boundaryElem) {&#xA;        Session.Output(&quot;Boundary ElementID &quot; + boundaryElementID + &quot; not found.&quot;);&#xA;        return;&#xA;    }&#xA;    Session.Output(&quot;Located boundary element: &quot; + boundaryElem.Name);&#xA;&#xA;    // 5) Apply the first row's count as the new element Name&#xA;    //    (You could also set Notes or a TaggedValue instead, as needed.)&#xA;    boundaryElem.Name = counts[0];&#xA;    Session.Output(&quot;Boundary renamed to: &quot; + boundaryElem.Name);&#xA;&#xA;    // 6) Save and refresh&#xA;    boundaryElem.Update();&#xA;    var diag = Repository.GetCurrentDiagram();&#xA;    if (diag) {&#xA;        Repository.ReloadDiagram(diag.DiagramID);&#xA;        Session.Output(&quot;Diagram refreshed.&quot;);&#xA;    }&#xA;    Session.Output(&quot;=== populateBoundaryFromQuery complete ===&quot;);&#xA;}&#xA;&#xA;// Execute the reset at the start of your dashboard script&#xA;resetDashboardProcessing();&#xA;&#xA;// TMF Elements:&#xA;var sql = `&#xA;    SELECT&#xA;      'TMF-Elements' AS Metric,&#xA;      COUNT(*)              AS Value&#xA;    FROM t_object AS result&#xA;    WHERE result.stereotype LIKE 'TMF\\_%'&#xA;      AND result.status    NOT LIKE 'TODO'&#xA;`;&#xA;var boundaryID = 8046;  // &lt;-- TMF elements replace with your actual ElementID&#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;// TMF connectors:&#xA;var sql = `&#xA;&#x9;   SELECT &#xA;&#x9; COUNT(t_connector.Connector_ID) AS Value&#xA;&#x9;FROM &#xA;&#x9;  t_connector&#xA;&#x9;WHERE &#xA;&#x9;  t_connector.Stereotype LIKE '%TMF_%'&#xA;`;&#xA;var boundaryID = 8039;  // &lt;-- replace with your actual ElementID&#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;// Alll diagrams&#xA;var sql = `&#xA;SELECT&#xA;  COUNT(Diagram_ID) AS TotalDiagrams&#xA;FROM t_diagram;&#xA;&#xA;`;&#xA;var boundaryID = 8045; &#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;// artemis applications&#xA;var sql = `&#xA;  SELECT&#xA;      'Artemis' AS application,&#xA;      COUNT(*)              AS Value&#xA;    FROM t_object AS result&#xA;    WHERE result.stereotype LIKE 'd%'&#xA;      AND result.Phase    LIKE '1.0'&#xA;`;&#xA;var boundaryID = 8023; &#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;//  applications interfaces&#xA;var sql = `&#xA;SELECT &#xA;    COUNT(*) AS Value&#xA;FROM &#xA;    t_connector AS con&#xA;  INNER JOIN &#xA;    t_object AS o1 &#xA;      ON con.Start_Object_ID = o1.Object_ID&#xA;         AND o1.Stereotype = 'dApplicationComponent'&#xA;         AND o1.phase      = '1.0'&#xA;  INNER JOIN &#xA;    t_object AS o2 &#xA;      ON con.End_Object_ID   = o2.Object_ID&#xA;         AND o2.Stereotype = 'dApplicationComponent'&#xA;         AND o2.phase      = '1.0';&#xA;`;&#xA;var boundaryID = 8033; &#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;//  Entities&#xA;var sql = `&#xA;       SELECT 'Artemis' AS Entities,&#xA;      COUNT(*)              AS Value&#xA;    FROM t_object AS result&#xA;    WHERE result.stereotype LIKE 'dDataEntity'&#xA;      AND result.Phase    LIKE '1.0'&#xA;`;&#xA;var boundaryID = 8020; &#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;&#xA;// “Impacted Processes”&#xA;var sql = `&#xA;       SELECT 'Artemis' AS dBusinessProcess,&#xA;      COUNT(*)              AS Value&#xA;    FROM t_object AS result&#xA;    WHERE result.stereotype LIKE 'dBusinessProcess'&#xA;      AND result.Phase    LIKE '1.0'&#xA;`;&#xA;var boundaryID   = 8066;   &#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;&#xA; // “Impacted Roles”&#xA; var sql = `&#xA;        SELECT 'Artemis' AS dRole,&#xA;      COUNT(*)              AS Value&#xA;    FROM t_object AS result&#xA;    WHERE result.stereotype LIKE 'dRole'&#xA;      AND result.Phase    LIKE '1.0'&#xA; `;&#xA;var boundaryID      = 8051;  &#xA;populateBoundaryFromQuery(sql, boundaryID);&#xA;&#xA;// calculateComplexity&#xA;calculateComplexity();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="556"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A7DD2860-08D9-4a03-B2DF-BD11D2334279}"/>
			<Column name="ScriptAuthor" value="{AF6F47DC-E2A8-43f7-8725-A14561A4DF1E}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Element - print name and ID&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC Local Scripts.EAConstants-JavaScript&#xA;&#xA;/*&#xA; * Script Name:&#xA; * Author:&#xA; * Purpose: Element - print name and ID&#xA; * Date:&#xA; */&#xA;&#xA;/*&#xA; * Diagram Script main function&#xA; */&#xA;function OnDiagramScript()&#xA;{&#xA;&#x9;// Get a reference to the current diagram&#xA;&#x9;var currentDiagram as EA.Diagram;&#xA;&#x9;currentDiagram = Repository.GetCurrentDiagram();&#xA;&#xA;&#x9;if ( currentDiagram != null )&#xA;&#x9;{&#xA;&#x9;&#x9;// Get a reference to any selected connector/objects&#xA;&#x9;&#x9;var selectedConnector as EA.Connector;&#xA;&#x9;&#x9;var selectedObjects as EA.Collection;&#xA;&#x9;&#x9;selectedConnector = currentDiagram.SelectedConnector;&#xA;&#x9;&#x9;selectedObjects = currentDiagram.SelectedObjects;&#xA;&#xA;&#x9;&#x9;if ( selectedConnector != null )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// A connector is selected&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if ( selectedObjects.Count &gt; 0 )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// One or more diagram objects are selected&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;// Nothing is selected&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;Session.Prompt( &quot;This script requires a diagram to be visible.&quot;, promptOK)&#xA;&#x9;}&#xA;}&#xA;&#xA;OnDiagramScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="557"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="558"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="559"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{6A44EDEC-7AC1-4644-874B-48ACD76A90D4}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="DAF MDG"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="560"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AC1F9DF6-B0F2-41b3-B467-A264BD0452F7}"/>
			<Column name="ScriptAuthor" value="{6A44EDEC-7AC1-4644-874B-48ACD76A90D4}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;DAF M3 Conf&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value=" &#xA;' Script Name: UML profile configuration&#xA;&#xA;' Purpose: use this script to configure the targets for the M3 MDG scripts &#xA;' Date: 2025 / 08/ 25&#xA;' Version: 1.2025825&#xA;'&#xA;&#xA;&#xA;&#x9;dim metamodelPackageGUID ' as String&#xA;&#x9;dim profilePackageGUID   ' as String&#xA;&#x9;dim relationshipPackageGUID ' as String&#xA;&#x9;dim quickLinkFileName    ' as String&#xA;&#x9;dim ProfileName    ' as String&#xA;&#x9;dim mdgTechFilePath    ' as String&#xA;&#x9;dim ProfileDiagramGUID ' as String &#xA;&#x9;dim UMLProfileFilename' as String&#xA;&#x9;dim ProfileToolboxClassGUID ''as String&#xA;&#x9;dim ProfileToolboxConnectorGUID 'as String&#xA;&#x9;dim GenerateCatalogs ' as boolean&#xA;&#x9;dim generateSLQ ' as boolean&#xA;&#x9;dim IconPath  'as String&#xA;&#x9;dim SQLPath 'as String&#xA;&#x9;dim GenerateCSV 'as String&#xA;&#x9;dim CSVPath 'as String&#xA;&#xA;&#x9;metamodelPackageGUID = &quot;{02BC7973-A0CB-4865-A42E-ECA442FF2D0D}&quot; ' DAF Metamodel package&#xA;&#x9;profilePackageGUID = &quot;{BEFFD7D1-82EE-478f-A0EE-5670EC836630}&quot; ' DAF Profile Package&#xA;&#x9;relationshipPackageGUID = &quot;{C3097ACD-177F-4d58-B51F-771989DAFF70}&quot; ' package where to store relationships&#xA;&#x9;quickLinkFileName = &quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\quicklinker\QuickLink.csv&quot; ' DAF location of the Quicklinker file&#xA;&#x9;ProfileName = &quot;DAF&quot;&#xA;&#x9;mdgTechFilePath=&quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\DAF40.mts&quot; 'DAF MTS location&#xA;&#x9;TechFilePath = &quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\technology&quot; ' where to store the technology in XML format&#xA;&#x9;ProfileDiagramGUID=&quot;{B91435BE-4D2E-4511-8A96-481522342E3A}&quot; ' GUID of the diagram where the DAF profile is located&#xA;&#x9;UMLProfileFilename=&quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\profile\DAFProfile.xml&quot; 'location of the UML profile saved&#xA;&#x9;ProfileToolboxClassGUID=&quot;{5D7B181D-D531-42d2-9B13-0E0A77BD5522}&quot; 'the class GUID containing all the links to Elements&#xA;&#x9;ProfileToolboxConnectorGUID=&quot;{5FE30409-43C0-4444-B469-28337E579EFA}&quot; 'the class GUID containing all the links to connectors&#xA;&#x9;IconPath=&quot;C:\tmp\Icons\&quot;&#xA;&#x9;SQLPath=&quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\queries\&quot;&#xA;&#x9;CSVPath =&quot;C:\Users\broth\Dropbox\work\Method\EA method\3.1\csv\&quot;&#xA;&#x9;GenerateCatalogs = 1&#xA;&#x9;generateSLQ = 0&#xA;&#x9;GenerateCSV = 1"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="561"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="562"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="564"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{314E029A-9073-4c40-AF63-403F57373194}"/>
			<Column name="ScriptAuthor" value="{9DCD3AF7-1F19-470d-A665-C7270CAC79B4}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; promote to catalog&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: RelocatePackageElements&#xA;' Author: Giu Platania&#xA;' Date: 2025-08-06&#xA;' Version: 2.3&#xA;' Purpose:&#xA;'   Moves diagram elements into target packages based on their stereotypes using an internal mapping.&#xA;'   Iterates the open diagram and updates element.PackageID accordingly.&#xA;&#xA;&#xA;&#xA;' Entry point: invoked on a selected package in the Project Browser&#xA;Sub OnProjectBrowserScript()&#xA;    Dim selType 'As Long&#xA;    Dim pkg As EA.Package&#xA;    Dim stereotypePackageMap 'As Object&#xA;    Dim elm As EA.Element&#xA;    Dim targetPkg As EA.Package&#xA;    Dim pkgGuid 'As String&#xA;&#xA;    ' Ensure a package is selected&#xA;    selType = Repository.GetTreeSelectedItemType()&#xA;    If selType &lt;&gt; otPackage Then&#xA;        Session.Prompt &quot;Please select a package before running this script.&quot;, promptOK&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    ' Get the selected package&#xA;    Set pkg = Repository.GetTreeSelectedObject()&#xA;    Session.Output &quot;Relocating elements in package: &quot; &amp; pkg.Name&#xA;&#xA;    ' Load the internal stereotype→package GUID map&#xA;    Set stereotypePackageMap = LoadPromotionPackageMap()&#xA;&#xA;    ' Iterate through each element in the package&#xA;    For Each elm In pkg.Elements&#xA;        Session.Output &quot;Processing element: &quot; &amp; elm.Name &amp; &quot; (stereotype=&quot; &amp; elm.Stereotype &amp; &quot;)&quot;&#xA;&#xA;        If stereotypePackageMap.Exists(elm.Stereotype) Then&#xA;            pkgGuid = stereotypePackageMap(elm.Stereotype)&#xA;            Set targetPkg = Repository.GetPackageByGuid(pkgGuid)&#xA;            If Not targetPkg Is Nothing Then&#xA;                elm.PackageID = targetPkg.PackageID&#xA;                If elm.Update() Then&#xA;                    Session.Output &quot;Moved '&quot; &amp; elm.Name &amp; &quot;' to package '&quot; &amp; targetPkg.Name &amp; &quot;'.&quot;&#xA;                Else&#xA;                    Session.Output &quot;Failed to update element: &quot; &amp; elm.Name&#xA;                End If&#xA;            Else&#xA;                Session.Output &quot;Target package not found for GUID: &quot; &amp; pkgGuid&#xA;            End If&#xA;        Else&#xA;            Session.Output &quot;Skipping element with unknown stereotype: &quot; &amp; elm.Stereotype&#xA;        End If&#xA;    Next&#xA;&#xA;    Session.Output &quot;Relocation complete.&quot;&#xA;End Sub&#xA;&#xA;'-------------------------------------------------&#xA;' Move each element in the diagram to its target package&#xA;' based on stereotype→GUID map&#xA;'-------------------------------------------------&#xA;Sub RelocateDiagramElements(diagram)&#xA;    Dim stereotypePackageMap ' As Object&#xA;    Dim diagramObject As EA.DiagramObject&#xA;    Dim element As EA.Element&#xA;    Dim targetPkg As EA.Package&#xA;    Dim pkgGuid 'As String&#xA;&#xA;    ' Load stereotype→package map from internal list&#xA;    Set stereotypePackageMap = LoadPromotionPackageMap()&#xA;&#xA;    ' Iterate through all diagram objects&#xA;    For Each diagramObject In diagram.DiagramObjects&#xA;        Set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;        Session.Output &quot;Processing element: &quot; &amp; element.Name &amp; &quot; (stereotype=&quot; &amp; element.Stereotype &amp; &quot;)&quot;&#xA;&#xA;        If stereotypePackageMap.Exists(element.Stereotype) Then&#xA;            pkgGuid = stereotypePackageMap(element.Stereotype)&#xA;            Set targetPkg = Repository.GetPackageByGuid(pkgGuid)&#xA;            If Not targetPkg Is Nothing Then&#xA;                element.PackageID = targetPkg.PackageID&#xA;                If element.Update() Then&#xA;                    Session.Output &quot;Moved '&quot; &amp; element.Name &amp; &quot;' to package '&quot; &amp; targetPkg.Name &amp; &quot;'.&quot;&#xA;                Else&#xA;                    Session.Output &quot;Failed to update element: &quot; &amp; element.Name&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;            Else&#xA;                Session.Output &quot;Target package not found for GUID: &quot; &amp; pkgGuid&#xA;            End If&#xA;        Else&#xA;            Session.Output &quot;Skipping element with unknown stereotype: &quot; &amp; element.Stereotype&#xA;        End If&#xA;    Next&#xA;End Sub&#xA;&#xA;'-------------------------------------------------&#xA;' Load the stereotype→package GUID map from hard-coded list&#xA;'-------------------------------------------------&#xA;Function LoadPromotionPackageMap()&#xA;    Dim map, lines, i&#xA;    Set map = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#xA;    ' Hard-coded stereotype/GUID pairs&#xA;&#x9;  'lines = Array(&quot;dAction&quot;,&quot;{52762144-0680-48eb-9F4C-5691D8B5F520}&quot;,&quot;dActivity&quot;,&quot;{E6AE40A9-4876-4876-8525-AF0B58BEFF46}&quot;,&quot;dActor&quot;,&quot;{C9C86C4A-30CA-4753-AB53-29705C34A964}&quot;,&quot;dAPI&quot;,&quot;{A74025BE-3836-4fd7-B9BF-799FEA518081}&quot;,&quot;dAPIOperation&quot;,&quot;{CE51691A-A738-4844-9ED0-23A354223612}&quot;)&#xA; &#xA;&#x9;&#x9;   lines = Array( _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dAction&quot;, &quot;{52762144-0680-48eb-9F4C-5691D8B5F520}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dActivity&quot;, &quot;{E6AE40A9-4876-4876-8525-AF0B58BEFF46}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dActor&quot;, &quot;{C9C86C4A-30CA-4753-AB53-29705C34A964}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dAPI&quot;, &quot;{A74025BE-3836-4fd7-B9BF-799FEA518081}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dAPIOperation&quot;, &quot;{CE51691A-A738-4844-9ED0-23A354223612}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dAPIParameter&quot;, &quot;{2152322F-DC63-4b27-865C-5BCE38895FDB}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dAPIResponse&quot;, &quot;{EE31E97C-3124-47fd-8825-F247283B762E}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dApplicationComponent&quot;, &quot;{B6B92CC9-C80A-4361-934F-293BCFF46DAB}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dApplicationFunction&quot;, &quot;{14D985AF-090B-4b15-A8EF-FE1AB0E23EA2}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dBusinessProcess&quot;, &quot;{48176930-49D9-4104-AEA0-DE1721B89606}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dBusinessService&quot;, &quot;{9F2DC9E6-C19C-4466-BD39-216443E8D8C5}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dBusinessUseCase&quot;, &quot;{EA2C36DB-CAA6-4266-90C6-5CC3E7A1155E}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dCapability&quot;, &quot;{AD8A466A-B92F-4fbd-BB96-AFED1B482B03}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dCluster&quot;, &quot;{7E68C070-57B6-4ce7-BC5B-E6F6E89697EC}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dContainer&quot;, &quot;{5D425066-8C0F-4115-81EB-246B6206A82D}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dController&quot;, &quot;{89EDDC56-FF2A-47e4-84D6-87EE616E7C10}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dDataEntity&quot;, &quot;{43F1D5F7-3A4F-43bb-99DA-BC1125515A5F}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dDecision&quot;, &quot;{BF488E70-DA65-4d26-B0ED-B1CCBE5533B2}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dDeploymentModel&quot;, &quot;{78BE6EF7-A5E4-46b0-84AD-B3932F39B25C}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dDeploymentNode&quot;, &quot;{23F2A1B4-583B-4854-B287-518E33F97F77}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dEvent&quot;, &quot;{0335D7C4-8F6E-4328-ACFC-12851FA390D2}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dFeature&quot;, &quot;{B7A598FE-B25B-4ab6-AC7D-54706D29DE29}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dGoal&quot;, &quot;{C4BBAED1-BFC2-42a1-89B6-5F85E5B23B49}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dGrowthPackage&quot;, &quot;{C965F5D5-CCF9-434f-811B-4569BBF2FE46}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dInitiative&quot;, &quot;{53977AC5-AED6-4238-ADC8-8E7F94FB4928}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dIPRange&quot;, &quot;{BA227C9F-8F56-4d02-88BB-ADBBD1B6FCBF}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dIssue&quot;, &quot;{87FF78BD-94B1-4a1f-A1BB-2079CA27D58C}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dJSON_Attribute&quot;, &quot;{64B82117-CB3D-44f0-B6B1-F0519A36F389}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dJSON_Datatype&quot;, &quot;{0E379EFB-574C-40c7-96A6-B2DFA36420D7}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dJSON_Element&quot;, &quot;{968E1090-80FC-41e9-8859-392669442D65}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dJSON_Schema&quot;, &quot;{055E73F9-F2C6-4616-BBD2-D29E6BDFFED7}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dJSON_SchemaSubSet&quot;, &quot;{97CA581B-6971-4602-B4BB-379E370A8787}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dTest&quot;, &quot;{44522E55-EFF4-4409-A0C5-CC8AD89C2830}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dJSON_Type&quot;, &quot;{90335BD2-C233-43ab-8EE5-CA86B773E6A9}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot;dLocation&quot;, &quot;{4C3565C0-2529-4543-B7E1-9F049FC98449}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dLogicalAppComponent&quot;, &quot;{7893E7CD-BFE7-4ed4-ABA7-249C06C7BCEE}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dMeasurementArea&quot;, &quot;{BF67E988-4AAE-4439-9D65-3B53CD18BDBF}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dMeasurementCategory&quot;, &quot;{1475678A-AA92-4e02-8B50-6C3D747295DE}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dMeasurementGrouping&quot;, &quot;{AE8A0ADF-01B5-4bc1-863A-E5222637C3E8}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dMeasurementIndicator&quot;, &quot;{468F5F36-AA19-4a74-96EE-A49AC78F38E8}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dModelClass&quot;, &quot;{E2923A5D-8D74-43f9-B6E7-D3F5D04D6D50}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dNetwork&quot;, &quot;{C8057F85-3A22-4de3-A8F0-CDC9D61256A2}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dObject&quot;, &quot;{59E74D72-6E50-4efe-9941-1F87570577D7}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dObjective&quot;, &quot;{1526F58C-8207-4872-97A1-918F3C9FB56F}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dOnPremise&quot;, &quot;{6AC74886-B897-45bb-9516-883951A38F96}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dOpinion&quot;, &quot;{D0BB972D-28ED-498f-ABF8-4D468CFCBA10}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dOpinionInner&quot;, &quot;{AFC27792-1A22-4b0d-88BC-04FCAED6A17A}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dOrganizationUnit&quot;, &quot;{EE0438E8-49A9-4893-8673-F87A70193BBE}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dPhysicalService&quot;, &quot;{EE3CA6E2-BF2D-416d-8C94-BB88D5371070}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dPrinciple&quot;, &quot;{EA6108EE-A506-4b6a-895E-DA23D94B2412}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dProduct&quot;, &quot;{A04DE34C-E0DE-450e-83E4-C8A753109A3E}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dProgram&quot;, &quot;{E7C60807-7C2A-4726-8B0E-3C315021B12D}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dPublicCluster&quot;, &quot;{AD10E934-DAE6-4c77-8145-92DFFCABBE23}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dRegion&quot;, &quot;{81D7C531-591B-41f0-A584-C4D3594CCFC2}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dRequirement&quot;, &quot;{DEAB0217-D28D-470d-905F-0B57884DD18F}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dResource&quot;, &quot;{50992834-EC54-476d-A334-4E92040A45FD}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dRisk&quot;, &quot;{A755E7D0-A225-4704-A9C7-52FDB8745A66}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dRole&quot;, &quot;{FD3A51B5-EEBB-4ac0-A15B-60AC52D3DEEE}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dSecurityGroup&quot;, &quot;{DA95E22D-D49D-4be3-99D4-22ABD65AE151}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dSkill&quot;, &quot;{FACEB000-0664-40d5-BCFF-4EA3BB729BEB}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dStakeholder&quot;, &quot;{58E7139F-42A9-48f7-98DB-54509576AB93}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dSubNetwork&quot;, &quot;{A3B7114F-E98E-40cf-BA88-B5A5E93C75CA}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dSystem&quot;, &quot;{7D42AE1F-E8E7-4027-B1FB-E526560BA1D0}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dTable&quot;, &quot;{D0289F1F-EF8F-4d36-B351-EE50E7AAECD4}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dTest&quot;, &quot;{AE0437D8-0604-44cc-B045-A1FAEFFCC92A}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dUserStory&quot;, &quot;{4903E37D-000D-4191-82A7-76E97B772BAE}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dValue&quot;, &quot;{DB055B4B-2DEA-4987-9B69-08052135D922}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dValueRef&quot;, &quot;{DEE4818F-B434-46f0-86CD-8A4D435DD5D3}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dValueStream&quot;, &quot;{216D8888-846C-4af1-8CFE-4770DAB78F8D}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dView&quot;, &quot;{9EE2F219-B700-40df-9493-FBBF9D46F34B}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dVolume&quot;, &quot;{AED574EA-5278-45a7-BAD2-333A294436DE}&quot;, _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;dZone&quot;, &quot;{01A5B8E5-09E8-4e15-91FE-B42FAAB8E9EE}&quot; _&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;    ' Populate mapping&#xA;    For i = 0 To UBound(lines) Step 2&#xA;        map(lines(i)) = lines(i + 1)&#xA;    Next&#xA;&#x9;&#x9;Set LoadPromotionPackageMap = map&#xA;&#x9;&#xA;End Function&#xA;&#xA;OnProjectBrowserScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="565"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="566"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="567"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CC448285-739B-47a1-BDD6-54152D244C3A}"/>
			<Column name="ScriptAuthor" value="{63102034-B522-4ef1-BC21-85CEA9423DA6}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Connector -&amp;gt; hide All but Multiplicity&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;"/>
			<Column name="Script" value="// Script Name:     HideConnectorLabelsExceptMultiplicity&#xA;// Author:          Giu Platania&#xA;// Purpose:         Hide all connector labels in the current diagram EXCEPT end multiplicities (source &amp; target bottom labels).&#xA;// Date:            2025-08-13&#xA;// Version:         2.1 (fix regex escaping)&#xA;&#xA;!INC Local Scripts.EAConstants-JScript&#xA;&#xA;function log(msg) {&#xA;    var d = new Date();&#xA;    Session.Output((d.toISOString ? d.toISOString() : d.toString()) + &quot; - &quot; + msg);&#xA;}&#xA;function startLog() {&#xA;    Repository.CreateOutputTab(&quot;Script&quot;);&#xA;    Repository.ClearOutput(&quot;Script&quot;);&#xA;    Repository.EnsureOutputVisible(&quot;Script&quot;);&#xA;}&#xA;&#xA;function setLabelHiddenFlag(geom, section, hide) {&#xA;    var visibleFlag = hide ? &quot;1&quot; : &quot;0&quot;;&#xA;&#xA;    // Match with optional leading '$' that EA sometimes prepends&#xA;    // Note: in string form for RegExp, backslashes must be doubled.&#xA;var re = new RegExp(section + &quot;=([^;]*);&quot;, &quot;i&quot;);&#xA;&#x9;log(&quot;Regex used: &quot; + re);&#xA;    var m = re.exec(geom);&#xA;    if (m) {&#xA;        var before = m[0];&#xA;        var body = m[2] || &quot;&quot;;&#xA;        var hadHDN = /(^|:)HDN=[0-9]/.test(body);&#xA;        if (hadHDN) {&#xA;            // flip HDN value only for this section&#xA;            var bodyNew = body.replace(/HDN=[0-9]/, &quot;HDN=&quot; + visibleFlag);&#xA;            var replaced = (m[1] || &quot;&quot;) + section + &quot;=&quot; + bodyNew + &quot;;&quot;;&#xA;            geom = geom.replace(before, replaced);&#xA;        } else {&#xA;            var addColon = body.length &gt; 0 ? &quot;:&quot; : &quot;&quot;;&#xA;            var replaced2 = (m[1] || &quot;&quot;) + section + &quot;=&quot; + body + addColon + &quot;HDN=&quot; + visibleFlag + &quot;;&quot;;&#xA;            geom = geom.replace(before, replaced2);&#xA;        }&#xA;    } else {&#xA;        // Append new section at the end&#xA;        geom += section + &quot;=HDN=&quot; + visibleFlag + &quot;;&quot;;&#xA;    }&#xA;    return geom;&#xA;}&#xA;&#xA;function hideSections(geom, arr) {&#xA;    for (var i = 0; i &lt; arr.length; i++) geom = setLabelHiddenFlag(geom, arr[i], true);&#xA;    return geom;&#xA;}&#xA;function showSections(geom, arr) {&#xA;    for (var i = 0; i &lt; arr.length; i++) geom = setLabelHiddenFlag(geom, arr[i], false);&#xA;    return geom;&#xA;}&#xA;&#xA;startLog();&#xA;log(&quot;Starting: HideConnectorLabelsExceptMultiplicity v2.1&quot;);&#xA;&#xA;var dgm = Repository.GetCurrentDiagram();&#xA;if (!dgm) {&#xA;    log(&quot;No active diagram. Open a diagram and run again.&quot;);&#xA;} else {&#xA;    log(&quot;Diagram: '&quot; + dgm.Name + &quot;' (ID=&quot; + dgm.DiagramID + &quot;) links=&quot; + dgm.DiagramLinks.Count);&#xA;    Repository.SaveDiagram(dgm.DiagramID);&#xA;&#xA;    for (var i = 0; i &lt; dgm.DiagramLinks.Count; i++) {&#xA;        var dl = dgm.DiagramLinks.GetAt(i);&#xA;        var conn = null;&#xA;        try { conn = Repository.GetConnectorByID(dl.ConnectorID); } catch (e) {}&#xA;&#xA;        log(&quot;----&quot;);&#xA;        log(&quot;Link #&quot; + i + &quot; ConnectorID=&quot; + dl.ConnectorID + (conn ? &quot; Type=&quot; + conn.Type + &quot; Name='&quot; + conn.Name + &quot;'&quot; : &quot;&quot;));&#xA;        log(&quot;HiddenLabels flag (pre): &quot; + dl.HiddenLabels);&#xA;&#xA;        var g0 = dl.Geometry || &quot;&quot;;&#xA;        log(&quot;Geometry (before): &quot; + g0);&#xA;&#xA;        var g1 = g0;&#xA;        g1 = hideSections(g1, [&quot;LMT&quot;, &quot;LMB&quot;, &quot;LLT&quot;, &quot;LRT&quot;]);&#xA;        g1 = showSections(g1, [&quot;LLB&quot;, &quot;LRB&quot;]);&#xA;&#xA;        if (dl.HiddenLabels === true) {&#xA;            log(&quot;HiddenLabels is true -&gt; setting to false&quot;);&#xA;            dl.HiddenLabels = false;&#xA;        }&#xA;&#xA;        if (g1 !== g0) {&#xA;            dl.Geometry = g1;&#xA;            if (!dl.Update()) {&#xA;                log(&quot;Update FAILED: &quot; + dl.GetLastError());&#xA;            } else {&#xA;                log(&quot;Update OK. Geometry (after): &quot; + dl.Geometry);&#xA;            }&#xA;        } else {&#xA;            log(&quot;No geometry changes needed for this link.&quot;);&#xA;        }&#xA;    }&#xA;&#xA;    Repository.ReloadDiagram(dgm.DiagramID);&#xA;    log(&quot;Reloaded diagram. Done.&quot;);&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="568"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{783FB418-0D34-4e12-B2F4-5B3ECFA6A846}"/>
			<Column name="ScriptAuthor" value="{6A44EDEC-7AC1-4644-874B-48ACD76A90D4}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;generate DAF profile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="option explicit&#xA; '  DO NOT USE&#xA;' Script Name: UML profile configuration&#xA;' Author:  Giu Platania&#xA;' Purpose: Scripts to transform metamodel into UML Profile, create classes for toolboxes (elements and relationships&#xA;' generates the quicklink file and a list of packages named after the stereotypes to be used as &quot;TOGAF catalogs&quot;.&#xA;' generates toolboxes&#xA;' generate SQL queries ('' create a SQL script that check for required but missing relationships)&#xA;' generate CSV import&#xA;' generate tagged value query&#xA;' generate a list of packages GUID and associated stereotypes&#xA;' strip&#xA;' last review Date: 2025 / 01 / 21&#xA;' Version: 6.20250121&#xA; '&#xA; ' USAGE:&#xA; ' this is the companion script to the M3 MdG technology&#xA;'    Create a package called Metamodel or use the template&#xA;'    customize the the GUID of the Metamodel package, UML profile , Tolboxes classes and connectors in the script &quot;Configuration&quot;&#xA;'    create a M3 diagram or use the template&#xA;'&#x9; use the M3 toolbox to create *Concepts*&#xA;'    in alternative  add the tagged values 'Metaclass' and 'Redefines' to regular UML classes. The tagged values are case sensitive (!) &#xA;'    script will add a _metaype property automatically&#xA; '   script will add a _strictness property automatically. it defines the degree to which a stereotyped element can have more than one stereotype applied to it.&#xA; '   (if required) add the refines tag e.g. &quot;ArchiMate3::Archimate_BusinessProcess&quot; /&#xA; '   Create relationships using the *relationship* connector . You can also use an UML::association and add the tags the UML type is only cosmetic because is defined in the &quot;metaclass&quot; tagged value. &#xA; ' &#x9;Aggregation in the profile is always placed at the *source End* of the relationship / UML::association, ignoring the model. &#xA; '   Create a package called like your target language with the stereotype &quot;profile&quot; or use the template&#xA; '   customize the the GUId of the Metamodel package in the configuration script&#xA; '   inside the Stereotype package create a document called &quot;QuickLink&quot; or use the template&#xA; ' &#x9;Copy the provided M3 configuration script in a new script&#xA; '   Customize the target folder in the configuration script for the quicklink document output&#xA; '   Execute the script Generate UML profile&#xA; &#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC DAF MDG.Model Management Utilities&#xA;!INC DAF MDG.DAF M3 Conf&#xA;!INC Wrappers.Include&#xA;&#xA;const STREAM_FOR_READING = 1&#xA;const STREAM_FOR_WRITING = 2&#xA;const STREAM_FOR_APPENDING = 3&#xA;&#xA;dim profilePackage &#x9;&#x9;&#x9;as EA.Package&#xA;dim relationshipPackage&#x9;&#x9;as EA.Package&#xA;dim quickLinkFileStream&#x9;   'as Scripting.TextStream&#xA;dim CSVImportString &#x9;&#x9;' as place where to store packages GUIDs and stereotypes&#xA;dim toolboxClass &#x9;as EA.Element&#xA;dim toolboxConnector as EA.Element&#xA;&#xA;sub transformPackageGUID( metamodelPackageGUID, profilePackageGUID, fileName)&#xA;&#xA;&#x9;dim metamodelPackage &#x9;as EA.Package&#xA;&#x9;&#x9;Repository.EnableUIUpdates = false&#xA;&#x9;&#x9;quickLinkFileName = fileName&#xA;&#x9;&#x9;createQuickLinkFile&#x9;&#xA;&#x9;&#x9;' initialize  the import file variable&#xA;&#x9;&#x9;CSVImportString = &quot;stereotype, GUID&quot;&#xA;&#x9;&#x9;&#xA;&#x9;set profilePackage = Repository.GetPackageByGuid( profilePackageGUID)&#xA;&#x9;set metamodelPackage = Repository.GetPackageByGuid( metamodelPackageGUID)&#xA;&#x9;set relationshipPackage = Repository.GetPackageByGuid( relationshipPackageGUID)&#xA;&#x9;set toolboxClass = Repository.GetElementByGuid(ProfileToolboxClassGUID) &#xA;&#x9;set toolboxConnector = Repository.GetElementByGuid(ProfileToolboxConnectorGUID)&#xA;&#x9;clearProfileMetamodelTags profilePackage&#xA;&#x9;cleanToolboxesAttributes toolboxClass&#xA;&#x9;cleanToolboxConnectorAttributes  toolboxConnector&#xA;&#x9;transformPackage metamodelPackage&#xA;&#x9;quickLinkFileStream.Close&#xA;&#x9;updateQuickLinkDocument&#xA;&#x9;' write import string to file&#xA;&#x9;writeCSVImportFile(CSVImportString)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;Repository.RefreshModelView profilePackage.PackageID&#xA;&#x9;Repository.EnableUIUpdates = true&#xA;&#x9;Session.Output &quot;Done at &quot; &amp; Now() &#xA;end sub&#xA;&#xA;sub clearProfileMetamodelTags( profilePackage)&#xA;&#xA;&#x9;dim profileClass as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;Clearing profile metamodel tags...&quot;&#xA;&#x9;for each profileClass in profilePackage.Elements&#xA;&#x9;&#x9;if profileClass.MetaType = &quot;Stereotype&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;deleteTaggedValue profileClass, &quot;Metamodel GUID&quot;&#xA;&#x9;&#x9;&#x9;deleteTaggedValue profileClass, &quot;Profile Type&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' SQL script&#xA;''''''''''''''''''''''' TODO move to new file&#xA;'''''''''''''''''''''''&#xA;&#xA;'' SQL Query Element for validation&#xA;sub SQLQueryElement( SourceStereotype, TargetStereotype, connectortype)&#xA;&#x9;dim sqlGetString 'as string&#xA;&#x9;dim scriptFile&#xA;&#x9;sqlGetString = &quot;SELECT o1.ea_guid AS ItemGuid                                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; FROM ((((((t_object as o1                                                         &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN t_Package p ON p.Package_ID = o1.Package_ID)                           &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_Package Package_p1 ON Package_p1.Package_id = p.parent_id)            &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_Package Package_p2 ON Package_p2.Package_id = Package_p1.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_Package Package_p3 ON Package_p3.Package_id = Package_p2.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_Package Package_p4 ON Package_p4.Package_id = Package_p3.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_Package Package_p5 ON Package_p5.Package_id = Package_p4.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot;                                                                                   &quot; &amp; vbNewLine &amp; _&#xA;&quot; where o1.stereotype = '&quot;&amp; SourceStereotype &amp;&quot;' &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;&#xA;&#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot;  &amp; &quot;BasicQuery.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;saving  Basic Query script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;'' SQL Simple relationship&#xA;sub SQLSimpleRelationship( SourceStereotype, TargetStereotype, connectortype)&#xA;&#x9;dim sqlGetString 'as string&#xA;&#x9;dim scriptFile&#xA;&#x9;sqlGetString = &#x9;&#x9;&quot;-- Generated &quot;  &amp; now() &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;--  &quot; &amp; SourceStereotype &amp; &quot; (GroupName) connected with  &quot; &amp; TargetStereotype &amp; &quot; (series)&quot; &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;SELECT &quot; &amp; SourceStereotype &amp; &quot;.Name as &quot; &amp; SourceStereotype &amp; &quot;,  &quot; &amp; TargetStereotype &amp; &quot;.Name as  &quot; &amp; TargetStereotype  &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;FROM t_object AS &quot; &amp; TargetStereotype &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_connector as connector ON &quot; &amp; TargetStereotype &amp;&quot;.Object_ID = connector.Start_Object_ID&quot; &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_object AS &quot; &amp; SourceStereotype &amp; &quot; ON connector.End_Object_ID =  &quot; &amp; SourceStereotype &amp; &quot;.Object_ID&quot; &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;WHERE &quot; &amp; SourceStereotype &amp; &quot;.Stereotype='&quot; &amp; SourceStereotype  &amp;&quot;'&quot; &amp; vbNewLine &amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND  &quot; &amp; TargetStereotype &amp; &quot;.Stereotype='&quot; &amp; TargetStereotype  &amp; &quot;'&quot; &amp; vbNewLine &amp;_ &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;AND connector.Stereotype='&quot; &amp; ConnectorType &amp;&quot;'&quot;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot; &amp; connectortype  &amp; &quot;_&quot; &amp; TargetStereotype &amp; &quot;.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;saving script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;&#xA;'' create a SQL script that check for required but missing relationships&#xA;'' TODO: connectortype is really the stereotype&#xA;sub SQLmissingRelationship( SourceStereotype, TargetStereotype, connectortype)&#xA;&#x9;dim sqlGetString 'as string&#xA;&#x9;dim scriptFile&#xA;&#x9;sqlGetString = &#x9;&#x9;&quot;-- Generated &quot;  &amp; now() &amp; vbNewLine &amp;_&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;SELECT o.name AS ItemName,  o.ea_guid AS CLASSGUID  , o.Object_Type  AS [CLASSTYPE]            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM t_object AS o                                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE o.StereoType = '&quot; &amp; SourceStereotype &amp; &quot;'                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND o.ea_guid not  in                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; (                                                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;Select  o1.ea_guid                                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;from t_object as o1                                                                         &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;Inner join t_connector c on                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(o1.Object_ID = c.Start_Object_ID AND                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;c.Stereotype = '&quot; &amp; ConnectorType &amp;&quot;'   &#x9;&#x9;                &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;inner join t_object o2 on (c.End_object_ID = o2.Object_ID &#x9;AND o2.Stereotype = '&quot; &amp; TargetStereotype  &amp;&quot;')   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; &#x9;WHERE o1.Stereotype = '&quot; &amp; SourceStereotype &amp; &quot;'&#x9;                                        &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; )                                                                                             &quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot; &amp; connectortype  &amp; &quot;_&quot; &amp; TargetStereotype &amp; &quot;_Missing.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;saving missing Relationship script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;'' create a SQL script that check for presence of this element is a diagram&#xA;&#xA;sub SQLmissingDiagram( SourceStereotype, TargetStereotype, connectortype)&#xA;&#x9;dim sqlGetString 'as string&#xA;&#x9;dim scriptFile&#xA;&#x9;&#xA;&#x9;sqlGetString =  &quot;SELECT o.Name AS ItemName                                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , 'object' as ItemType                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , o.ea_guid AS ItemGuid                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , o.Object_Type AS ElementType                                                    &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , o.StereoType AS ElementStereotype                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , p.name AS PackageName                                                           &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , package_p1.name AS PackageParentLevel1                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , package_p2.name AS PackageParentLevel2                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , package_p3.name AS PackageParentLevel3                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , package_p4.name AS PackageParentLevel4                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; , package_p5.name AS PackageParentLevel5                                          &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; FROM ((((((t_object o                                                             &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; INNER JOIN t_package p ON p.Package_ID = o.Package_ID)                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_package package_p1 ON package_p1.package_id = p.parent_id)            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_package package_p2 ON package_p2.package_id = package_p1.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_package package_p3 ON package_p3.package_id = package_p2.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_package package_p4 on package_p4.package_id = package_p3.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; LEFT JOIN t_package package_p5 on package_p5.package_id = package_p4.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; WHERE o.ea_guid in (#ElementGuids#)                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; AND o.ea_guid NOT IN (                                                            &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Select o1.ea_GUID                                                                 &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; from t_object as o1                                                               &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Inner Join t_diagramobjects d on d.Object_ID = o1.Object_ID                       &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where o1.stereotype = '&quot;&amp; SourceStereotype &amp;&quot;'                                     &quot; &amp; vbNewLine &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; )&quot;    &#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot;  &amp; &quot;_MissingDiagram.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;saving missing Diagram script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;'' create a SQL script that checks for documentation (ea notes)&#xA;sub SQLmissingNotes( SourceStereotype, TargetStereotype, connectortype)&#xA;&#x9;dim sqlGetString 'as string&#xA;&#x9;dim scriptFile&#xA;&#x9;&#xA;&#x9;sqlGetString =  &quot;SELECT o.Name AS ItemName                                      &quot; &amp; vbNewLine &amp; _&#xA;&quot; , 'object' as ItemType                                                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; , o.ea_guid AS ItemGuid                                                           &quot; &amp; vbNewLine &amp; _&#xA;&quot; , o.Object_Type AS ElementType                                                    &quot; &amp; vbNewLine &amp; _&#xA;&quot; , o.StereoType AS ElementStereotype                                               &quot; &amp; vbNewLine &amp; _&#xA;&quot; , p.name AS PackageName                                                           &quot; &amp; vbNewLine &amp; _&#xA;&quot; , package_p1.name AS PackageParentLevel1                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; , package_p2.name AS PackageParentLevel2                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; , package_p3.name AS PackageParentLevel3                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; , package_p4.name AS PackageParentLevel4                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; , package_p5.name AS PackageParentLevel5                                          &quot; &amp; vbNewLine &amp; _&#xA;&quot; FROM ((((((t_object o                                                             &quot; &amp; vbNewLine &amp; _&#xA;&quot; INNER JOIN t_package p ON p.Package_ID = o.Package_ID)                            &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_package package_p1 ON package_p1.package_id = p.parent_id)            &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_package package_p2 ON package_p2.package_id = package_p1.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_package package_p3 ON package_p3.package_id = package_p2.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_package package_p4 on package_p4.package_id = package_p3.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; LEFT JOIN t_package package_p5 on package_p5.package_id = package_p4.parent_id)   &quot; &amp; vbNewLine &amp; _&#xA;&quot; WHERE o.ea_guid in (#ElementGuids#)                                               &quot; &amp; vbNewLine &amp; _&#xA;&quot; AND o.ea_guid in (                                                                &quot; &amp; vbNewLine &amp; _&#xA;&quot; Select o1.ea_guid from t_object as o1                                             &quot; &amp; vbNewLine &amp; _&#xA;&quot; where o1.Note IS NULL                                                             &quot; &amp; vbNewLine &amp; _&#xA;&quot; and o1.stereotype = '&quot;&amp; SourceStereotype &amp;&quot;' )                                      &quot;&#xA;  &#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlGetString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; SourceStereotype&amp; &quot;_&quot;  &amp; &quot;_MissingNotes.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;saving missing notes script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;''' generate a query with all tagged values&#xA;sub SQLQueryAllTaggedValues(metamodelClass)&#xA;&#x9;&#x9;dim scriptFile&#xA;&#x9;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#x9;&#xA;&#x9;&#x9;dim taggedValueQuery 'as string&#xA;&#x9;&#x9;dim sqlInitialString 'as string&#xA;&#x9;&#x9;dim SQLFrom&#xA;&#x9;&#x9;dim sqlFinalString&#xA;&#x9;&#x9;dim taggedValueselect ' as string&#xA;&#x9;&#x9;dim strippedattribute &#xA;&#x9;&#x9;&#x9;dim strippedAlias&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;strippedAlias = StripToAlphanumeric(metamodelClass.Alias )&#xA;&#x9;&#x9;sqlInitialString = &quot;SELECT &quot;  &amp; strippedAlias &amp;&quot;.Object_ID, &quot;  &amp; strippedAlias &amp;&quot;.ea_guid AS CLASSGUID , &quot;&amp; strippedAlias &amp;&quot;.Object_Type AS CLASSTYPE, &quot;&amp; strippedAlias &amp;&quot;.Name as &quot;  &amp; strippedAlias  &#xA;&#x9;&#x9;SQLFrom = vbNewLine &amp;&quot;FROM t_object as &quot;  &amp; strippedAlias&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;sqlFinalString = vbNewLine &amp; &quot; WHERE &quot;  &amp; strippedAlias &amp;&quot;.stereotype= '&quot;  &amp; metamodelClass.Name &amp;&quot;'&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each attribute in metamodelClass.Attributes&#xA;&#x9;&#x9;&#x9;' Check if the attribute name does not start with &quot;_&quot; and is not named &quot;icon&quot;&#xA;&#x9;&#x9;&#x9;if Not (Left(attribute.Name, 1) = &quot;_&quot; Or attribute.Name = &quot;icon&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;strippedattribute = StripToAlphanumeric(attribute.Name )&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot; tag value: &quot;  &amp; attribute.Name&#xA;&#x9;&#x9;&#x9;&#x9;taggedValueQuery = taggedValueQuery  &amp; vbNewLine &amp; _  &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&quot;INNER JOIN t_objectproperties AS &quot; &amp; strippedattribute &amp; &quot;  ON (&quot; &amp; strippedattribute &amp; &quot;.Object_ID =&quot; &amp; strippedAlias &amp; &quot;.Object_ID AND &quot; &amp; strippedattribute &amp; &quot;.Property = ('&quot; &amp; attribute.Name &amp; &quot;'))&quot;&#xA;&#x9;&#x9;&#x9;&#x9;taggedValueselect = taggedValueselect &amp; &quot;, &quot; &amp; strippedattribute &amp; &quot;.value AS '&quot; &amp; strippedattribute &amp; &quot;'&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = sqlInitialString  &amp;taggedValueselect &amp; SQLFrom &amp; taggedValueQuery &amp; sqlFinalString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = SQLPath &amp; strippedAlias&amp; &quot;_&quot;  &amp; &quot;_taggedValueQUery.sql&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;''Session.Output &quot;saving tagged values query: &quot; &amp; scriptFile.FullPath&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;end sub&#xA;&#xA;Function StripToAlphanumeric(inputString)&#xA;    Dim regEx, matches, match&#xA;    Set regEx = New RegExp&#xA;    regEx.Pattern = &quot;[^a-zA-Z0-9]&quot;&#xA;    regEx.Global = True&#xA;    StripToAlphanumeric = regEx.Replace(inputString, &quot;&quot;)&#xA;End Function&#xA;&#xA;&#xA;'''''''''' end of SQL&#xA;'''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''''''''&#xA;''''''''''''''''''''''  Transform package&#xA;'''''''''''''''''''''''&#xA;&#xA;sub transformPackage( metamodelPackage)&#xA;&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage &#x9;as EA.Package&#xA;&#x9;Session.Output &quot;Generating profile elements for '&quot; &amp; metamodelPackage.Name &amp; &quot;' package...&quot;&#xA;&#x9;for each element in metamodelPackage.Elements&#xA;&#x9;&#x9;select case element.Type&#xA;&#x9;&#x9;case &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;transformClass element&#xA;&#x9;&#x9;&#x9;''create the toolbox for elements&#xA;&#x9;&#x9;&#x9;addToolboxesAttributes element, toolboxClass&#xA;&#x9;&#x9;case &quot;Enumeration&quot;&#xA;&#x9;&#x9;&#x9;transformEnumeration element&#xA;&#x9;&#x9;end select&#xA;&#x9;next&#x9;&#xA;&#x9;for each subPackage in metamodelPackage.Packages&#xA;&#x9;&#x9;transformPackage subPackage&#xA;&#x9;next&#x9;&#xA;end sub&#xA;&#xA;sub transformEnumeration( metamodelEnum)&#xA;&#xA;&#x9;dim profileEnum as EA.Element&#xA;&#x9;dim enumName   'as String&#xA;&#x9;enumName = metamodelEnum.Name&#xA;&#x9;'Session.Output &quot;Generating enumeration for '&quot; &amp; enumName &amp; &quot;' ...&quot;&#xA;&#x9;set profileEnum = getProfileElement( enumName, profilePackage)&#xA;&#x9;if profileEnum is nothing then&#xA;&#x9;&#x9;set profileEnum = copyEnumeration( metamodelEnum, profilePackage)&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;deleteElement profileEnum&#xA;&#x9;&#x9;set profileEnum = copyEnumeration( metamodelEnum, profilePackage)&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;function copyEnumeration( enumeration, package)&#xA;&#xA;&#x9;dim newEnumeration&#x9;as EA.Element&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim newAttribute&#x9;as EA.Attribute&#xA;&#x9;set newEnumeration = package.Elements.AddNew( enumeration.Name, &quot;Enumeration&quot;)&#x9;&#xA;&#x9;newEnumeration.Update&#x9;&#xA;&#x9;for each attribute in enumeration.Attributes&#xA;&#x9;&#x9;set newAttribute = newEnumeration.Attributes.AddNew( attribute.Name, &quot;int&quot;)&#xA;&#x9;&#x9;newAttribute.Stereotype = &quot;enum&quot;&#xA;&#x9;&#x9;newAttribute.Update&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;newEnumeration.Attributes.Refresh&#xA;&#x9;setTaggedValueValue newEnumeration, &quot;Profile Type&quot;, &quot;Element&quot;&#xA;&#x9;setTaggedValueValue newEnumeration, &quot;Metamodel GUID&quot;, enumeration.ElementGUID&#xA;&#x9;profilePackage.Elements.Refresh&#xA;&#x9;set copyEnumeration = newEnumeration&#xA;end function&#xA;&#xA;sub transformClassGUID( classGUID, profilePackageGUID, fileName)&#xA;&#xA;&#x9;dim metamodelClass as EA.Element  &#x9;&#xA;&#x9;quickLinkFileName = fileName&#xA;&#x9;createQuickLinkFile&#xA;&#x9;set profilePackage = Repository.GetPackageByGuid( profilePackageGUID)&#xA;&#x9;set metamodelClass = Repository.GetElementByGuid( classGUID)&#xA;&#x9;transformClass metamodelClass&#xA;&#x9;quickLinkFileStream.Close&#xA;&#x9;Repository.RefreshModelView profilePackage.PackageID&#xA;end sub&#xA;&#xA;' Subroutine to transform a class element based on its metamodel definition&#xA;sub transformClass( metamodelClass)&#xA;&#x9;&#xA;&#x9;dim superClass&#x9;&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim redefinedStereotypeName&#x9;  ' as String&#xA;&#x9;dim metaclassName&#x9;&#x9;&#x9;  ' as String&#xA;&#x9;dim stereotypeName&#x9;&#x9; &#x9;  ' as String&#xA;&#x9;dim stereotypeClass&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim metaType&#x9;&#x9;&#x9;&#x9; ' As String&#xA;&#x9;metaType = &quot;&quot;&#xA;' Check if the provided class has the M3 stereotype of &quot;Concept&quot;&#xA;&#x9;if metamodelClass.Stereotype = &quot;Concept&quot; then&#x9;&#xA;&#x9;&#x9;set superClass = getRelatedSupplierElement2( metamodelClass, &quot;Generalization&quot;, &quot;&quot;, &quot;Class&quot;, &quot;&quot;)&#xA;&#x9;&#x9;metaclassName = getTaggedValueValue( metamodelClass, &quot;Metaclass&quot;)&#xA;&#x9;&#x9;redefinedStereotypeName = getTaggedValueValue( metamodelClass, &quot;Redefines&quot;)&#xA;&#xA;&#x9;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString or metaclassName &lt;&gt; vbNullString or not( superClass is nothing) then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Session.Output &quot;Generating stereotype for '&quot; &amp; metamodelClass.Name &amp; &quot;' class...&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeName = metamodelClass.Name&#xA;&#x9;&#x9;&#x9; ' Check if the stereotype already exists in the profile package&#xA;&#x9;&#x9;&#x9;set stereotypeClass = getProfileElement(stereotypeName, profilePackage)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if stereotypeClass is nothing then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set stereotypeClass = profilePackage.Elements.AddNew( stereotypeName, &quot;Class&quot;)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeClass.Stereotype = &quot;stereotype&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeClass.Update&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;'setup the catalog name&#xA;&#x9;&#x9;&#x9;if GenerateCatalogs = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if metamodelClass.Alias &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;metaType = metamodelClass.Alias&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' take off the prefix chars&#xA;&#x9;&#x9;&#x9;&#x9; 'metaType = MID (stereotypeName, 2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;metaType = metamodelClass.Name&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createCatalog metaType,&#x9;metamodelClass.Name&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setStereotypeProperties metamodelClass, stereotypeClass, metamodelClass.Name&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Profile Type&quot;, &quot;Element&quot;&#xA;&#x9;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Metamodel GUID&quot;, metamodelClass.ElementGUID&#xA;&#x9;&#x9;&#x9;if GenerateCSV = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;' generate a set of CSV files for import of the element type into EA&#xA;&#x9;&#x9;&#x9;&#x9;generateCSVImportFile stereotypeClass&#xA;&#x9;&#x9;&#x9;&#x9;' end generate a set of CSV files&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;setProfileRedefinedStereotype stereotypeClass, redefinedStereotypeName&#xA;&#x9;&#x9;&#x9;elseif superClass is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;setProfileMetaclass metamodelClass, stereotypeClass&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;setProfileSuperclass stereotypeClass, superClass&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'if redefinedStereotypeName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;'&#x9;setProfileRedefinedStereotype stereotypeClass, redefinedStereotypeName&#xA;&#x9;&#x9;&#x9;'end if&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;transformRelationships metamodelClass, stereotypeClass&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if  &#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' Catalogs&#xA;'''''''''''''''''''''''&#xA;&#xA;''generate a CSV file associating packages GUIDS with stereotype names&#xA;'' this is called at the end of the script&#xA;sub writeCSVImportFile(CSVImportString)&#xA;&#x9;&#x9;dim scriptFile&#xA;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = CSVImportString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = CSVPath &amp;  &quot;DAFCatalogs.csv&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;Session.Output &quot;saved  CSV with catalogs script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;'' this is called for each catalog&#xA;sub addlinetoCSVImportFile(metamodelClass, packageGUID)&#xA;&#x9;CSVImportString = CSVImportString &amp; vbCrLf &amp; metamodelClass  &amp; &quot;,&quot; &amp; packageGUID&#xA;end sub&#xA;&#xA;&#xA;sub createCatalog(stereotypeName, techname)&#xA;' create a list of packages wit the same name of the stereotypes&#xA;' this can be included in the technology to create a repository structure according to the metamodel&#xA;&#x9;&#x9;&#x9; On Error Resume Next&#xA;&#x9;&#x9;&#x9;dim subPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set subPackage = profilePackage.Packages.GetByName(stereotypeName)&#xA;&#x9;&#x9;&#x9;''if  subPackage is nothing then&#xA;&#x9;&#x9;&#x9;If Err.Number &lt;&gt; 0 Then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set subPackage = profilePackage.Packages.AddNew(stereotypeName,&quot;Package&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Generating catalog for &quot; &amp; stereotypeName&#xA;&#x9;&#x9;&#x9;&#x9;subPackage.Update&#xA;&#x9;&#x9;&#x9;&#x9;Err.Clear&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;addlinetoCSVImportFile  techname, subPackage.PackageGUID&#xA;end sub&#xA;&#xA;'' set the class that extend the UML type with a stereotype&#xA;function setProfileMetaclass( metamodelItem, stereotypeClass)&#xA;' add the metaclass to the stereotype&#xA;&#x9;dim metaclassName  ' as String&#xA;&#x9;dim profileMetaclass as EA.Element&#x9;&#xA;&#x9;metaclassName = metamodelItem.TaggedValues.GetByName( &quot;Metaclass&quot;).Value&#x9;&#xA;&#x9;set profileMetaclass = getRelatedSupplierElement( stereotypeClass, &quot;Extension&quot;, &quot;Metaclass&quot;)&#xA;&#x9;&#xA;&#x9;if profileMetaclass is nothing then&#xA;&#x9;&#x9;set profileMetaclass = addStereotypeMetaclass( stereotypeClass, metaclassName)&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;if profileMetaclass.Name &lt;&gt; metaclassName then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;deleteElement profileMetaclass&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set profileMetaclass = addStereotypeMetaclass( stereotypeClass, metaclassName)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;end if&#x9;&#xA;&#x9;' add the GUID&#xA;&#x9;setTaggedValueValue profileMetaClass, &quot;Metamodel GUID&quot;, stereotypeClass.ElementGUID&#x9;&#xA;&#x9;set setProfileMetaclass = profileMetaClass&#x9;&#xA;end function&#xA;&#xA;'' set the super class that extend the stereotype&#xA;sub setProfileSuperclass( stereotypeClass, metamodelSuperClass)&#xA;'' set a superclass for the stereotype&#xA;&#x9;dim stereotypeSuperClass&#x9;as EA.Element&#x9;&#xA;&#x9;set stereotypeSuperClass = getRelatedSupplierElement( stereotypeClass, &quot;Generalization&quot;, &quot;Stereotype&quot;)&#x9;&#xA;&#x9;if stereotypeSuperClass is nothing then&#x9;&#xA;&#x9;&#x9;set stereotypeSuperClass = getProfileElement( metamodelSuperClass.Name, profilePackage)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;if stereotypeSuperClass is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set stereotypeSuperClass = profilePackage.Elements.AddNew( metamodelSuperClass.Name, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;stereotypeSuperClass.Stereotype = &quot;stereotype&quot;&#xA;&#x9;&#x9;&#x9;stereotypeSuperClass.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;addConnector stereotypeClass, &quot;Generalization&quot;, &quot;&quot;, stereotypeSuperClass&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;&#xA;'' The setProfileRedefinedStereotype subroutine establishes a &quot;Generalization&quot; &#xA;'' relationship between a given stereotypeClass and a redefined stereotype &#xA;'' identified by redefinedStereotypeName. If the redefined stereotype does not exist, it creates one in the profilePackage.&#xA;sub setProfileRedefinedStereotype( stereotypeClass, redefinedStereotypeName)&#xA;&#xA;&#x9;dim redefinedStereotypeClass&#x9;as EA.Element&#x9;&#xA;&#x9;set redefinedStereotypeClass = getRelatedSupplierElement2( stereotypeClass, &quot;Generalization&quot;, &quot;redefines&quot;, &quot;Class&quot;, &quot;stereotype&quot;)&#x9;&#xA;&#x9;if redefinedStereotypeClass is nothing then&#x9;&#xA;&#x9;&#x9;set redefinedStereotypeClass = getProfileElement( redefinedStereotypeName, profilePackage)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;if redefinedStereotypeClass is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set redefinedStereotypeClass = profilePackage.Elements.AddNew( redefinedStereotypeName, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;redefinedStereotypeClass.Stereotype = &quot;stereotype&quot;&#xA;&#x9;&#x9;&#x9;redefinedStereotypeClass.Update&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;profilePackage.Elements.Refresh&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;addConnector stereotypeClass, &quot;Generalization&quot;, &quot;redefines&quot;, redefinedStereotypeClass&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' ATRIBUTES&#xA;'''''''''''''''''''''''&#xA;sub setStereotypeProperties( metamodelClass, stereotypeClass, stereotypeName)&#xA;&#x9;'set properties for elements and connectors&#xA;&#x9;dim imageAttribute &#x9;as  EA.Attribute&#xA;&#x9;setAttribute stereotypeClass, &quot;_metatype&quot;, metamodelClass.Alias&#x9;&#x9;&#xA;&#x9;setAttribute stereotypeClass, &quot;_strictness&quot;, &quot;profile&quot;&#x9;&#xA;&#x9;'' check if image exists&#xA;&#x9;'setAttribute stereotypeClass, &quot;_Image&quot;, &quot;&quot;&#x9;&#x9;&#xA;&#x9;setAttribute stereotypeClass, &quot;icon&quot;, IconPath + stereotypeName + &quot;.bmp&quot;&#xA;&#x9;deleteTaggedValueAttributes stereotypeClass&#x9;&#xA;&#x9;if metamodelClass.ObjectType = otElement then&#xA;&#x9;&#x9;addTaggedValueAttributes metamodelClass, stereotypeClass&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub deleteTaggedValueAttributes( stereotypeClass)&#xA;&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim attributeCount 'as Integer&#xA;&#x9;dim attributeIndex 'as Integer&#x9;&#xA;&#x9;attributeCount = stereotypeClass.Attributes.Count&#xA;&#x9;for attributeIndex = attributeCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set attribute = stereotypeClass.Attributes.GetAt( attributeIndex)&#x9;&#xA;&#x9;&#x9;if left( attribute.Name, 1) &lt;&gt; &quot;_&quot; and attribute.Name &lt;&gt; &quot;icon&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if attribute.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;stereotypeClass.Attributes.Delete attributeIndex&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;stereotypeClass.Attributes.Refresh&#xA;end sub&#xA;&#xA;sub addTaggedValueAttributes( metamodelClass, stereotypeClass)&#xA;&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#x9;&#xA;&#x9;for each attribute in metamodelClass.Attributes&#x9;&#xA;&#x9;&#x9;if not attribute.IsDerived then&#xA;&#x9;&#x9;&#x9;copyAttribute stereotypeClass, attribute&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;metamodelClass.Attributes.Refresh&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' CSV&#xA;'''''''''''''''''''''''&#xA;&#xA;''generate a CSV file for Import a metamodel  element&#xA;sub generateCSVImportFile(metamodelClass)&#xA;&#x9;&#x9;dim scriptFile&#xA;&#x9;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#x9;&#xA;&#x9;&#x9;dim CSVString '' AS string&#xA;&#x9;&#x9;CSVString = &quot;Name, Notes, Version, Status&quot;&#xA;&#x9;&#x9;set scriptFile = New TextFile&#xA;&#x9;&#x9;for each attribute in metamodelClass.Attributes&#xA;&#x9;&#x9;&#x9;' Check if the attribute name does not start with &quot;_&quot; and is not named &quot;icon&quot;&#xA;&#x9;&#x9;&#x9;if Not (Left(attribute.Name, 1) = &quot;_&quot; Or attribute.Name = &quot;icon&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot; CSV property: &quot;  &amp; attribute.Name&#xA;&#x9;&#x9;&#x9;&#x9;CSVString = CSVString &amp; &quot;,&quot; &amp; &quot;TagValue_&quot; &amp; ProfileName &amp; &quot;::&quot; &amp; attribute.Name&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;scriptfile.Contents = CSVString&#xA;&#x9;&#x9;&#x9;'save the script&#xA;&#x9;&#x9;&#x9;scriptFile.FullPath = CSVPath &amp; metamodelClass.Name &amp; &quot;_&quot;  &amp; &quot;import.csv&quot;&#xA;&#x9;&#x9;&#x9;scriptFile.Save&#xA;&#x9;&#x9;&#x9;'debug info&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;saving  CSV import script: &quot; &amp; scriptFile.FullPath&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' TOOLBOX&#xA;'''''''''''''''''''''''&#xA;sub cleanToolboxesAttributes(ToolboxClass)&#xA;' delete all the attrribute of the template ToolboxClass&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim attributeCount 'as Integer&#xA;&#x9;dim attributeIndex 'as Integer&#x9;&#xA;&#x9;Session.Output &quot;Cleaning Element toolbox ... &quot;&#xA;&#x9;attributeCount = ToolboxClass.Attributes.Count&#xA;&#x9;for attributeIndex = attributeCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set attribute = ToolboxClass.Attributes.GetAt( attributeIndex)&#x9;&#xA;&#x9;&#x9;if left( attribute.Name, 1) &lt;&gt; &quot;_&quot; and attribute.Name &lt;&gt; &quot;icon&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if attribute.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;ToolboxClass.Attributes.Delete attributeIndex&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;ToolboxClass.Attributes.Refresh&#xA;end sub&#xA;&#xA;sub cleanToolboxConnectorAttributes(ToolboxConnector)&#xA;' delete all the attrribute of the template ToolboxConnector&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#xA;&#x9;dim attributeCount 'as Integer&#xA;&#x9;dim attributeIndex 'as Integer&#x9;&#xA;&#x9;Session.Output &quot;Cleaning Connector toolbox ... &quot;&#xA;&#x9;attributeCount = ToolboxConnector.Attributes.Count&#xA;&#x9;for attributeIndex = attributeCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set attribute = ToolboxConnector.Attributes.GetAt( attributeIndex)&#x9;&#xA;&#x9;&#x9;if left( attribute.Name, 1) &lt;&gt; &quot;_&quot; and attribute.Name &lt;&gt; &quot;icon&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if attribute.Stereotype = vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;ToolboxConnector.Attributes.Delete attributeIndex&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;ToolboxConnector.Attributes.Refresh&#xA;end sub&#xA;&#xA;sub addToolboxesAttributes( metamodelClass, ToolboxClass)&#xA;' Add all the attrribute of the template ToolboxConnector&#xA;&#x9;&#x9;Session.Output &quot;adding toolbox for &quot; +  metamodelClass.Name + &quot; toolboxClass &quot; + ToolboxClass.Name&#xA;&#x9;dim attribute &#x9;&#x9;as EA.Attribute&#x9;&#xA;&#x9;dim toolboxAttribute as EA.Attribute&#xA;&#x9;set toolboxAttribute = ToolboxClass.Attributes.AddNew(ProfileName +&quot;::&quot;+metamodelClass.Name + &quot;(UML::&quot;+ metamodelClass.Type + &quot;)&quot;, &quot;&quot;)&#xA;&#x9;toolboxAttribute.Alias = metamodelClass.Alias&#xA;&#x9;toolboxAttribute.Default = metamodelClass.Alias&#xA;&#x9;toolboxAttribute.Update()&#xA;&#x9;ToolboxClass.Attributes.Refresh&#x9;&#xA;end sub&#xA;&#xA;sub createtoolboxConnector(connector)&#xA;'' create a set of connectors in a standard toolbox class defined in the configuration&#xA;&#x9;Session.Output &quot;adding toolbox for &quot; +  connector.Name + &quot; toolboxClass &quot; + ToolboxConnector.Name&#xA;&#x9;dim toolboxAttribute as EA.Attribute&#xA;&#x9;dim metaclassName ' as string&#xA;&#x9;metaclassName = getTaggedValueValue( connector, &quot;Metaclass&quot;)&#xA;&#x9;set toolboxAttribute = ToolboxConnector.Attributes.AddNew(ProfileName +&quot;::&quot;+connector.Name + &quot;(UML::&quot;+ metaclassName + &quot;)&quot;, &quot;&quot;)&#xA;&#x9;toolboxAttribute.Alias = connector.Alias&#xA;&#x9;toolboxAttribute.Default = connector.Alias&#xA;&#x9;toolboxAttribute.Update()&#xA;&#x9;ToolboxConnector.Attributes.Refresh&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' RELATIONSHIPS&#xA;'''''''''''''''''''''''&#xA;&#xA;sub transformRelationships( metamodelClass, stereotypeClass)&#xA;&#x9;dim connector as EA.Connector&#x9;&#xA;&#x9;for each connector in metamodelClass.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.ClientID = metamodelClass.ElementID then&#xA;&#x9;&#x9;&#x9;transformRelationship connector&#xA;&#x9;&#x9;&#x9;'' create toolbox relationships&#x9;&#xA;&#x9;&#x9;&#x9;createtoolboxConnector connector&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#xA;end sub&#xA;&#xA;' This subroutine transforms a metamodel relationship (connector) into a corresponding UML stereotype in Sparx EA&#xA;sub transformRelationship( metamodelConnector)&#xA;&#xA;&#x9;dim metaclassName&#x9;&#x9;&#x9;  ' as String&#xA;&#x9;dim metaclassAlias&#x9;&#x9;&#x9;&#x9;'as string&#xA;&#x9;dim redefinedStereotypeName&#x9;  ' as String&#xA;&#x9;dim stereotypeName&#x9;&#x9; &#x9;  ' as String&#xA;&#x9;dim stereotypeClass&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim profileMetaclass&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;metaclassName = getTaggedValueValue( metamodelConnector, &quot;Metaclass&quot;)&#xA;&#x9;metaclassAlias = metamodelConnector.alias&#xA;&#x9;redefinedStereotypeName = getTaggedValueValue( metamodelConnector, &quot;Redefines&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString or metaclassName &lt;&gt; vbNullString then&#x9;&#xA;&#x9;&#x9;Session.Output &quot;Generating stereotype for '&quot; &amp; metamodelConnector.Name &amp; &quot;' relationship...&quot;&#x9;&#x9;&#xA;&#x9;&#x9;'if metamodelConnector.Alias &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'&#x9;stereotypeName = metamodelConnector.Alias&#xA;&#x9;&#x9;'else&#xA;&#x9;&#x9;&#x9;stereotypeName = metamodelConnector.Name&#xA;&#x9;&#x9;'end if&#x9;&#x9;&#xA;&#x9;&#x9;set stereotypeClass = getProfileElement( stereotypeName, relationshipPackage)&#x9;&#x9;&#xA;&#x9;&#x9;if stereotypeClass is nothing then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set stereotypeClass = relationshipPackage.Elements.AddNew( stereotypeName, &quot;Class&quot;)&#xA;&#x9;&#x9;&#x9;stereotypeClass.Stereotype = &quot;stereotype&quot;&#x9;&#xA;&#x9;&#x9;&#x9;stereotypeClass.Update&#xA;&#x9;&#x9;&#x9;relationshipPackage.Elements.Refresh&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;setStereotypeProperties metamodelConnector, stereotypeClass, metamodelConnector.Name&#xA;&#x9;&#x9;set profileMetaclass = setProfileMetaclass( metamodelConnector, stereotypeClass)&#x9;&#x9;&#xA;&#x9;&#x9;if redefinedStereotypeName &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;setProfileRedefinedStereotype stereotypeClass, redefinedStereotypeName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'set tags and properties in the metaclass&#xA;&#x9;&#x9;setAttribute profileMetaclass, &quot;_MeaningForwards&quot;, metamodelConnector.SupplierEnd.Role&#xA;&#x9;&#x9;setAttribute profileMetaclass, &quot;_MeaningBackwards&quot;, metamodelConnector.ClientEnd.Role&#xA;&#x9;&#xA;&#x9;setTaggedValueValue profileMetaclass, &quot;Metamodel GUID&quot;, stereotypeClass.ElementGUID&#xA;&#xA;&#x9;&#x9;'setAttribute profileMetaclass, &quot;_lineStyle&quot;, &quot;orthogonalR&quot;&#xA;&#x9;&#x9;setAttribute profileMetaclass, &quot;_relatedTo&quot;, metaclassAlias&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;' set tags to link the connector to the original metamodel relationship&#xA;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Metamodel GUID&quot;,  metamodelConnector.ConnectorGUID&#xA;&#x9;&#x9;setTaggedValueValue stereotypeClass, &quot;Profile Type&quot;, &quot;Connector&quot;&#xA;&#x9;&#x9;updateQuickLink metamodelConnector&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;'''''''''''''''''''''''&#xA;'''''''''''''''''''''' QuickLink&#xA;'''''''''''''''''''''''&#xA;&#xA;sub createQuickLinkFile&#xA;&#xA;&#x9;dim fileSysObj 'as Scripting.FileSystemObject&#xA;&#x9;set fileSysObj = CreateObject( &quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;set quickLinkFileStream = fileSysObj.CreateTextFile( quickLinkFileName, STREAM_FOR_WRITING)&#xA;&#x9;quickLinkFileStream.WriteLine &quot;//Source Element Type,Source Stereotype Filter,Target Element Type,Target Stereotype Filter,Diagram Filter,New Element Type,New Element Stereotype,New Link Type,New Link Stereotype,New Link Direction,New Link Caption,New Link &amp; Element Caption,Create Link,Create Element,Disallow Self connector,No inherit from Metatype,Menu Group,Complexity Level,Target Must Be Parent,Embed element,Precedes Separator LEAF,Precedes Separator GROUP,Dummy Column&quot;&#xA;&#x9;quickLinkFileStream.WriteLine &quot;//generated:&quot; &amp; now()&#xA;end sub&#xA;&#xA;sub updateQuickLinkDocument&#xA;&#x9;dim quickLinkDoc&#x9;as EA.Element&#xA;&#x9;Session.Output &quot;Updating QuickLink document...&quot;&#x9;&#xA;&#x9;set quickLinkDoc = getProfileElement( &quot;QuickLink&quot;, profilePackage)&#xA;&#x9;quickLinkDoc.LoadLinkedDocument quickLinkFileName&#x9;&#xA;&#x9;quickLinkDoc.Update&#xA;end sub&#xA;&#xA;sub updateQuickLink( connector)&#xA;&#x9;dim connMetaclass      'as String&#xA;&#x9;dim connStereotype&#x9;   'as String&#xA;&#x9;dim toDirection&#x9;&#x9;   'as String&#xA;&#x9;dim fromDirection&#x9;   'as String&#xA;&#x9;dim sourceElement &#x9;&#x9;as EA.Element&#xA;&#x9;dim sourceMetaclass&#x9;   'as String&#xA;&#x9;dim sourceStereotype   'as String&#x9;&#xA;&#x9;dim targetElement &#x9;&#x9;as EA.Element&#xA;&#x9;dim targetMetaclass&#x9;   'as String&#xA;&#x9;dim targetStereotype   'as String&#xA;&#x9;dim row( 22)&#x9;&#x9;   'as String&#xA;&#x9;dim textRow&#x9;&#x9;&#x9;   'as String&#xA;&#xA;&#x9;connMetaclass = getTaggedValueValue( connector, &quot;Metaclass&quot;)&#xA;&#xA;&#x9;'if connector.Alias &lt;&gt; &quot;&quot; then&#xA;&#x9;&#x9;'connStereotype = connector.Alias&#xA;&#x9;'else&#xA;&#x9;&#x9;connStereotype = connector.Name&#xA;&#x9;'end if&#xA;&#x9;if connMetaclass = &quot;Composition&quot; or connMetaclass = &quot;Aggregation&quot; then&#xA;&#x9;&#x9;toDirection = &quot;from&quot;&#xA;&#x9;&#x9;fromDirection = &quot;to&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;toDirection = &quot;directed&quot;&#xA;&#x9;&#x9;fromDirection = &quot;from&quot;&#xA;&#x9;end if&#xA;&#x9;set sourceElement = Repository.GetElementByID( connector.ClientID)&#xA;&#x9;sourceMetaclass = getTaggedValueValue( sourceElement, &quot;Metaclass&quot;)&#xA;&#x9;sourceStereotype = sourceElement.Name&#x9;&#xA;&#x9;set targetElement = Repository.GetElementByID( connector.SupplierID)&#xA;&#x9;targetMetaclass = getTaggedValueValue( targetElement, &quot;Metaclass&quot;)&#x9;&#xA;&#x9;targetStereotype = targetElement.Name&#xA;&#x9;&#xA;&#x9;' create SQL queries&#xA;&#x9;if generateSLQ = 1 then&#xA;&#x9;&#x9; SQLSimpleRelationship sourceStereotype, targetStereotype, connStereotype&#xA;&#x9;&#x9; SQLmissingRelationship sourceStereotype, targetStereotype, connStereotype&#xA;&#x9;&#x9;'SQLmissingDiagram sourceStereotype, targetStereotype, connStereotype&#xA;&#x9;&#x9;SQLQueryElement sourceStereotype, targetStereotype, connStereotype&#xA;&#x9;&#x9;SQLmissingNotes sourceStereotype, targetStereotype, connStereotype&#xA;&#x9;&#x9;SQLQueryAllTaggedValues sourceElement&#xA;&#x9;&#x9;&#xA;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;' Create relationship group comment row&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine &quot;// &quot; &amp; sourceStereotype &amp; &quot; -&gt; &quot; &amp; connector.Name &amp; &quot; -&gt; &quot; &amp; targetStereotype&#xA;&#x9;&#xA;&#x9;' Create from-existing-source-to-existing-target row&#xA;&#x9;&#xA;&#x9;row(0)  = sourceMetaclass &#x9;' Source Element Type&#xA;&#x9;row(1)  = sourceStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(2)  = targetMetaclass&#x9;' Target Element Type&#xA;&#x9;row(3)  = targetStereotype&#x9;' Target Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = vbNullString&#x9;&#x9;' New Element Type&#xA;&#x9;row(6)  = vbNullString&#x9;&#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = toDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) = connector.SupplierEnd.Role ' New Link Caption INVERTED FOR DAF&#xA;&#x9;row(11) = vbNullString&#x9;&#x9;' New Link &amp; Element Caption&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = vbNullString&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName&#x9;&#x9;' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;&#x9;&#xA;&#x9;' Create from-existing-target-to-existing-source row&#xA;&#x9;&#xA;&#x9;row(0)  = targetMetaclass&#x9;' Target Element Type&#xA;&#x9;row(1)  = targetStereotype&#x9;' Target Stereotype Filter&#xA;&#x9;row(2)  = sourceMetaclass &#x9;' Source Element Type&#xA;&#x9;row(3)  = sourceStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = vbNullString&#x9;&#x9;' New Element Type&#xA;&#x9;row(6)  = vbNullString&#x9;&#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = fromDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) =  connector.ClientEnd.Role ' New Link Caption INVERTED FOR DAF&#xA;&#x9;row(11) = vbNullString&#x9;&#x9;' New Link &amp; Element Caption&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = vbNullString&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName&#x9;&#x9;' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;&#x9;&#xA;&#x9;' Create from-existing-source-to-new-target row&#xA;&#x9;&#xA;&#x9;row(0)  = sourceMetaclass &#x9;' Source Element Type&#xA;&#x9;row(1)  = sourceStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(2)  = vbNullString&#x9;&#x9;' Target Element Type&#xA;&#x9;row(3)  = vbNullString&#x9;&#x9;' Target Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = targetMetaclass&#x9;' New Element Type&#xA;&#x9;row(6)  = targetStereotype&#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = toDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) = vbNullString&#x9;&#x9;' New Link Caption&#xA;&#x9;row(11) =  connector.SupplierEnd.Role '' New Link &amp; Element Caption  INVERTED FOR DAF&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName ' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#xA;&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;&#xA;&#x9;' Create from-existing-target-to-new-source row&#xA;&#x9;&#xA;&#x9;row(0)  = targetMetaclass &#x9;' Source Element Type&#xA;&#x9;row(1)  = targetStereotype&#x9;' Source Stereotype Filter&#xA;&#x9;row(2)  = vbNullString&#x9;&#x9;' Target Element Type&#xA;&#x9;row(3)  = vbNullString&#x9;&#x9;' Target Stereotype Filter&#xA;&#x9;row(4)  = vbNullString&#x9;&#x9;' Diagram Filter&#xA;&#x9;row(5)  = sourceMetaclass&#x9;' New Element Type&#xA;&#x9;row(6)  = sourceStereotype &#x9;' New Element Stereotype&#xA;&#x9;row(7)  = connMetaclass&#x9;&#x9;' New Link Type&#xA;&#x9;row(8)  = connStereotype&#x9;' New Link Stereotype&#xA;&#x9;row(9)  = fromDirection&#x9;&#x9;' New Link Direction&#xA;&#x9;row(10) = vbNullString&#x9;&#x9;' New Link Caption&#xA;&#x9;row(11) = connector.ClientEnd.Role' New Link &amp; Element Caption  INVERTED FOR DAF&#xA;&#x9;row(12) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Link&#xA;&#x9;row(13) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Create Element&#xA;&#x9;row(14) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' Disallow Self connector&#xA;&#x9;row(15) = &quot;TRUE&quot;&#x9;&#x9;&#x9;' No inherit from Metatype&#xA;&#x9;row(16) = ProfileName&#x9;&#x9; ' Menu Group&#xA;&#x9;row(17) = &quot;0&quot; &#x9;&#x9;&#x9;&#x9;' Complexity Level&#xA;&#x9;row(18) = vbNullString&#x9;&#x9;' Target Must Be Parent&#xA;&#x9;row(19) = vbNullString&#x9;&#x9;' Embed element&#xA;&#x9;row(20) = vbNullString&#x9;&#x9;' Precedes Separator LEAF&#xA;&#x9;row(21) = vbNullString&#x9;&#x9;' Precedes Separator GROUP&#xA;&#x9;&#xA;&#x9;textRow = Join( row, &quot;,&quot;)&#x9;&#xA;&#x9;quickLinkFileStream.WriteLine textRow&#xA;end sub&#xA;&#xA;function getProfileElement1( profileElementName)&#xA;&#xA;&#x9;dim profileElement &#x9;as EA.Element&#xA;&#x9;dim element &#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;set profileElement = nothing&#x9;&#xA;&#x9;for each element in profilePackage.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if element.Name = profileElementName then&#xA;&#x9;&#x9;&#x9;set profileElement = element&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;    ' Return the found profile element&#xA;    set getProfileElement = profileElement&#xA;end function&#x9;&#xA;&#x9;&#x9;&#xA;&#xA;Function getProfileElement(profileElementName, relationshipPackage)&#xA;    ' Declare variables&#xA;    Dim profileElement ' As EA.Element&#xA;    Dim element ' As EA.Element&#xA;    Set profileElement = Nothing&#xA;&#xA;    ' Use the provided relationshipPackage if specified, otherwise default to profilePackage&#xA;    Dim targetPackage&#xA;    If IsObject(relationshipPackage) Then&#xA;        Set targetPackage = relationshipPackage ' Use the specified package&#xA;    Else&#xA;        Set targetPackage = profilePackage ' Default to global profilePackage&#xA;    End If&#xA;&#xA;    ' Search for the element in the selected package&#xA;    For Each element In targetPackage.Elements&#xA;        If element.Name = profileElementName Then&#xA;            Set profileElement = element&#xA;            Exit For ' Exit once the element is found&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Return the found profile element&#xA;    Set getProfileElement = profileElement&#xA;End Function&#xA;&#xA;&#xA;function addStereotypeMetaClass( stereotypeClass, metaclassName)&#xA;&#xA;&#x9;dim profileMetaclass as EA.Element&#xA;&#x9;set profileMetaclass = profilePackage.Elements.AddNew( metaclassName, &quot;Class&quot;)&#xA;&#x9;profileMetaclass.Stereotype = &quot;metaclass&quot;&#xA;&#x9;profileMetaclass.Update&#xA;&#x9;profilePackage.Elements.Refresh&#xA;&#x9;addConnector stereotypeClass, &quot;Extension&quot;, &quot;&quot;, profileMetaclass&#xA;&#x9;set addStereotypeMetaClass = profileMetaclass&#x9;&#xA;end function&#xA;&#xA;sub testTransformClassGUID&#xA;&#x9;dim classGUID&#x9;&#x9;   ' as String&#xA;&#x9;dim profilePackageGUID ' as String&#xA;&#x9;dim quickLinkFileName    ' as String&#xA;&#x9;&#xA;&#x9;'DEPRECATED:  USE THE CONFIGURATION SCRIPT&#xA;&#x9;'classGUID = &quot;&quot;'e.g &quot;{BD4895B5-CA1E-4420-8849-51B5C0C349F6}&quot;  Metamodel package&#xA;&#x9;'profilePackageGUID =  &quot;&quot;'e.g &quot;{A570D667-E328-470a-A8B4-482813E31493}&quot; Profile Package&#xA;&#x9;'quickLinkFileName = &quot;c:\tmp\QuickLink.csv&quot; ' location of the Quicklinker file&#xA;&#x9;&#xA;&#x9;if Not profilePackageGUID is nothing  then&#xA;&#x9;&#x9;transformClassGUID classGUID, profilePackageGUID&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Please configure the script .&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub testTransformPackageGUID&#xA;&#x9;&#x9;transformPackageGUID metamodelPackageGUID, profilePackageGUID, quickLinkFileName&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Done!&quot;&#x9;&#xA;end sub&#xA;&#xA;testTransformPackageGUID"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="569"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2D9E307F-31D2-41e0-B536-4B20A64EA51F}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;a transform class into schema&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     Transform Class Into Schema — TransferRelations (Dictionary-safe)&#xA;' Author:          Giu Platania&#xA;' Purpose:         Make TransferRelations accept output from getNavigableConnectors which returns a Scripting.Dictionary&#xA;'                  (GUID -&gt; Connector), normalize it to a GUID array, and proceed as before. Includes console clear.&#xA;' Date:            2025-08-25&#xA;' Version:         1.2&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Model Management Utilities&#xA;&#xA;' --- Output helpers ---&#xA;Sub EnsureOutput()&#xA;    On Error Resume Next&#xA;    Repository.EnsureOutputVisible &quot;Script&quot;&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;Sub LOG(msg)&#xA;    On Error Resume Next&#xA;    Session.Output CStr(Now) &amp; &quot;: &quot; &amp; msg&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;' =================== ENTRY ===================&#xA;Sub OnDiagramScript()&#xA;    ' Clear the console before starting&#xA;    Repository.ClearOutput &quot;Script&quot;&#xA;    Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#xA;    EnsureOutput&#xA;    LOG &quot;Starting OnDiagramScript&quot;&#xA;&#x9; ' Clear the console before starting&#xA;    Repository.ClearOutput &quot;Script&quot;&#xA;    Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#xA;    Dim currentDiagram As EA.Diagram&#xA;    Dim selectedObject As EA.DiagramObject&#xA;    Dim selectedElement As EA.Element&#xA;    Dim control As EA.Element&#xA;    Dim controlName&#xA;    Dim package As EA.Package&#xA;    Dim flag&#xA;    Dim jsonElement As EA.Element&#xA;&#xA;    flag = False&#xA;&#xA;    Set currentDiagram = Repository.GetCurrentDiagram()&#xA;    If currentDiagram Is Nothing Then&#xA;        Session.Prompt &quot;Open a diagram and select a single Class.&quot;, promptOK&#xA;        LOG &quot;No current diagram.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    Session.Output &quot;Diagram: &quot; &amp; currentDiagram.Name &amp; &quot; | SelectedObjects.Count=&quot; &amp; currentDiagram.SelectedObjects.Count&#xA;&#xA;    If currentDiagram.SelectedObjects.Count = 1 Then&#xA;        For Each selectedObject In currentDiagram.SelectedObjects&#xA;            Set selectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;            If selectedElement Is Nothing Then&#xA;                Session.Prompt &quot;Selected object is not an element&quot;, promptOK&#xA;                LOG &quot;Selected object has no element.&quot;&#xA;                Exit For&#xA;            End If&#xA;&#xA;            Session.Output &quot;Selected element: ID=&quot; &amp; selectedElement.ElementID &amp; &quot; Name=&quot; &amp; selectedElement.Name &amp; &quot; Type=&quot; &amp; selectedElement.Type&#xA;&#xA;            If selectedElement.Type = &quot;Class&quot; Then&#xA;                Session.Output &quot;Class found, starting conversion...&quot;&#xA;                Set package = Repository.GetPackageByID(selectedElement.PackageID)&#xA;                If package Is Nothing Then&#xA;                    Session.Prompt &quot;Owning package not found.&quot;, promptOK&#xA;                    LOG &quot;Owning package not found.&quot;&#xA;                    Exit For&#xA;                End If&#xA;&#xA;                ' If JSON already exists (same package, name without spaces)&#xA;                controlName = Replace(selectedElement.Name, &quot; &quot;, &quot;&quot;)&#xA;                For Each control In package.Elements&#xA;                    If control.Stereotype = &quot;TMF_JSON_Schema&quot; And control.Name = controlName Then&#xA;                        Session.Output &quot;This class already has a JSON element&quot;&#xA;                        Set jsonElement = control&#xA;                        flag = True&#xA;                        Exit For&#xA;                    End If&#xA;                Next&#xA;&#xA;                If flag = False Then&#xA;                    Set jsonElement = TransferClass(selectedElement, currentDiagram)&#xA;                    If jsonElement Is Nothing Then&#xA;                        LOG &quot;TransferClass failed to create JSON element.&quot;&#xA;                        Exit For&#xA;                    End If&#xA;                End If&#xA;&#xA;                ' Generalizations&#xA;                SearchForAggregation selectedElement, currentDiagram&#xA;&#xA;                ' Associations&#xA;                CreateAssociation selectedElement, jsonElement&#xA;&#xA;                Repository.ReloadDiagram currentDiagram.DiagramID&#xA;            Else&#xA;                Session.Prompt &quot;The diagram object must be a Class.&quot;, promptOK&#xA;                LOG &quot;Selected element is not a Class.&quot;&#xA;            End If&#xA;&#xA;            flag = False&#xA;        Next&#xA;    Else&#xA;        Session.Prompt &quot;This script requires exactly one object selected on a visible diagram.&quot;, promptOK&#xA;        LOG &quot;Selection count &lt;&gt; 1.&quot;&#xA;    End If&#xA;&#xA;    Session.Output &quot;done&quot;&#xA;    LOG &quot;Finished OnDiagramScript&quot;&#xA;End Sub&#xA;&#xA;' =================== CREATE JSON ELEMENT ===================&#xA;Function TransferClass (element, diagram)&#xA;    Dim jsonElement As EA.Element&#xA;    Dim package As EA.Package&#xA;&#xA;    Set package = Repository.GetPackageByID(element.PackageID)&#xA;    If package Is Nothing Then&#xA;        LOG &quot;TransferClass: package not found.&quot;&#xA;        Set TransferClass = Nothing&#xA;        Exit Function&#xA;    End If&#xA;&#xA;    ' Create a UML Class, then stereotype as JSON schema&#xA;    Set jsonElement = package.Elements.AddNew(element.Name, &quot;Class&quot;)&#xA;    Session.Output &quot;TransferClass: created new Class '&quot; &amp; element.Name &amp; &quot;'&quot;&#xA;&#xA;    jsonElement.StereotypeEx = &quot;TMF_JSON_Schema,dModelClass&quot;&#xA;    jsonElement.Name = Replace(element.Name, &quot; &quot;, &quot;&quot;)&#xA;    jsonElement.Notes = element.Notes&#xA;&#x9;jsonElement.Alias= element.Alias&#xA;&#x9;jsonElement.GenType = &quot;UML2&quot;&#xA;    jsonElement.Update&#xA;&#xA;    Session.Output &quot;JSONSchema Created: &quot; &amp; jsonElement.Name&#xA;&#xA;    CopyAttributes element, jsonElement&#xA;    Session.Output &quot;Attributes copied&quot;&#xA;&#xA;    CreateRealizationConn element, jsonElement&#xA;    Session.Output &quot;Realisation connector created&quot;&#xA;&#xA;    CreateDiagramObject jsonElement&#xA;    Session.Output &quot;Diagram object created&quot;&#xA;&#xA;    Set TransferClass = jsonElement&#xA;End Function&#xA;&#xA;Sub CopyAttributes (element, jsonElement)&#xA;    Dim i&#xA;    Dim newAttr As EA.Attribute&#xA;    Dim attrVal As EA.Attribute&#xA;&#xA;    Session.Output &quot;CopyAttributes: &quot; &amp; element.Attributes.Count &amp; &quot; from '&quot; &amp; element.Name &amp; &quot;' → '&quot; &amp; jsonElement.Name &amp; &quot;'&quot;&#xA;&#xA;    For i = 0 To element.Attributes.Count - 1&#xA;        Set attrVal = element.Attributes.GetAt(i)&#xA;        Set newAttr = jsonElement.Attributes.AddNew(attrVal.Name, attrVal.Type)&#xA;        newAttr.Name = Replace(newAttr.Name, &quot; &quot;, &quot;&quot;)&#xA;        newAttr.Stereotype = attrVal.Stereotype&#xA;        newAttr.Update&#xA;        jsonElement.Attributes.Refresh&#xA;        Session.Output &quot;  + &quot; &amp; newAttr.Name &amp; &quot; : &quot; &amp; newAttr.Type&#xA;    Next&#xA;End Sub&#xA;&#xA;Sub CreateRealizationConn (source, target)&#xA;    Dim newConnector As EA.Connector&#xA;    Session.Output &quot;CreateRealizationConn: source='&quot; &amp; source.Name &amp; &quot;' → target(JSON)='&quot; &amp; target.Name &amp; &quot;'&quot;&#xA;    Set newConnector = source.Connectors.AddNew(&quot;&quot;, &quot;Realization&quot;)&#xA;    newConnector.ClientID = target.ElementID&#xA;    newConnector.SupplierID = source.ElementID&#xA;    newConnector.Update&#xA;    source.Connectors.Refresh&#xA;    target.Connectors.Refresh&#xA;    Session.Output &quot;  Realization ConnectorID=&quot; &amp; newConnector.ConnectorID&#xA;End Sub&#xA;&#xA;Sub CreateDiagramObject (jsonElement)&#xA;    Dim dObject As EA.DiagramObject&#xA;    Dim diagram As EA.Diagram&#xA;&#xA;    Set diagram = Repository.GetCurrentDiagram&#xA;    If diagram Is Nothing Then Exit Sub&#xA;&#xA;    Set dObject = diagram.DiagramObjects.AddNew(&quot;&quot;, &quot;&quot;)&#xA;    dObject.ElementID = jsonElement.ElementID&#xA;&#xA;    dObject.Update&#xA;    diagram.Update&#xA;    diagram.DiagramObjects.Refresh&#xA;    Session.Output &quot;CreateDiagramObject: placed '&quot; &amp; jsonElement.Name &amp; &quot;' on diagram.&quot;&#xA;End Sub&#xA;&#xA;' =================== GENERALIZATION ===================&#xA;Sub SearchForAggregation (element, diagram)&#xA;    Dim generalization As EA.Connector&#xA;    Dim aggregator  As EA.Element&#xA;    Dim jsonControl As EA.Element&#xA;&#xA;    Session.Output &quot;SearchForAggregation: '&quot; &amp; element.Name &amp; &quot;' connectors=&quot; &amp; element.Connectors.Count&#xA;&#xA;    For Each generalization In element.Connectors&#xA;        Session.Output &quot;  inspect conn ID=&quot; &amp; generalization.ConnectorID &amp; &quot; Type=&quot; &amp; generalization.Type &amp; &quot; MetaType=&quot; &amp; generalization.MetaType&#xA;        If generalization.Type = &quot;Generalization&quot; Or generalization.MetaType = &quot;Generalization&quot; Then&#xA;            Session.Output &quot;Generalization found, transferring base element...&quot;&#xA;            Set aggregator = Repository.GetElementByID(generalization.SupplierID)&#xA;            If aggregator Is Nothing Then&#xA;                Session.Output &quot;  base class not found (SupplierID=&quot; &amp; generalization.SupplierID &amp; &quot;)&quot;&#xA;            Else&#xA;                Set jsonControl = findJsonElement(aggregator)&#xA;                If jsonControl Is Nothing Then&#xA;                    Session.Output &quot;  base class JSON not found → TransferClass&quot;&#xA;                    TransferClass aggregator, diagram&#xA;                Else&#xA;                    Session.Output &quot;  base class JSON already exists: &quot; &amp; jsonControl.Name&#xA;                End If&#xA;                CreateGeneralizationConn aggregator, element&#xA;            End If&#xA;        End If&#xA;    Next&#xA;End Sub&#xA;&#xA;Sub CreateGeneralizationConn (sourceClass, clientClass)&#xA;    Session.Output &quot;Creating Generalization connector&quot;&#xA;    Dim newConnector As EA.Connector&#xA;    Dim source As EA.Element&#xA;    Dim client As EA.Element&#xA;    Dim exists&#xA;    Dim c As EA.Connector&#xA;&#xA;    Set source = findJsonElement(sourceClass)&#xA;    Set client = findJsonElement(clientClass)&#xA;&#xA;    Session.Output &quot;  JSON(source)=&quot; &amp; IIfSafeName(source) &amp; &quot; | JSON(client)=&quot; &amp; IIfSafeName(client)&#xA;&#xA;    If source Is Nothing Or client Is Nothing Then&#xA;        Session.Output &quot;  ABORT: JSON schema element(s) missing for generalization.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    exists = False&#xA;    For Each c In source.Connectors&#xA;        If ( (c.Type = &quot;Generalization&quot; Or c.MetaType = &quot;Generalization&quot;) _&#xA;             And c.Stereotype = &quot;TMF_SchemaGeneralizesSchema&quot; _&#xA;             And c.ClientID = client.ElementID ) Then&#xA;            Session.Output &quot;  Generalization relationship already exists&quot;&#xA;            exists = True&#xA;            Exit For&#xA;        End If&#xA;    Next&#xA;&#xA;    If Not exists Then&#xA;        Set newConnector = source.Connectors.AddNew(&quot;&quot;, &quot;Generalization&quot;)&#xA;        newConnector.ClientID = client.ElementID&#xA;        newConnector.SupplierID = source.ElementID &#xA;        newConnector.Stereotype = &quot;TMF_SchemaGeneralizesSchema&quot;&#xA;        newConnector.Update&#xA;        Session.Output &quot;  created Schema Generalization: ConnectorID=&quot; &amp; newConnector.ConnectorID&#xA;    End If&#xA;End Sub&#xA;&#xA;' =================== ASSOCIATIONS ===================&#xA;&#xA;Sub CreateAssociation (sourceClass, sourceJsonElem)&#xA;    Dim c As EA.Connector&#xA;    Dim targetClass As EA.Element&#xA;    Dim targetJson As EA.Element&#xA;    Dim exists&#xA;    Dim jc As EA.Connector&#xA;    Dim assocName&#xA;&#xA;    Session.Output &quot;CreateAssociation: sourceClass='&quot; &amp; sourceClass.Name &amp; &quot;' | sourceJsonElem=&quot; &amp; IIfSafeName(sourceJsonElem)&#xA;&#xA;    If sourceJsonElem Is Nothing Then&#xA;        Session.Output &quot;  ABORT: sourceJsonElem is Nothing (JSON schema for source class does not exist).&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    Session.Output &quot;CreateAssociation: scanning &quot; &amp; sourceClass.Connectors.Count &amp; &quot; connectors on '&quot; &amp; sourceClass.Name &amp; &quot;'&quot;&#xA;&#xA;    For Each c In sourceClass.Connectors&#xA;        ' Mirror generalization approach: inspect connectors on the UML class itself&#xA;        If (c.Type = &quot;Association&quot; Or c.MetaType = &quot;Association&quot;) Then&#xA;            ' Determine the other end (target UML class)&#xA;            If c.ClientID = sourceClass.ElementID Then&#xA;                Set targetClass = Repository.GetElementByID(c.SupplierID)&#xA;            ElseIf c.SupplierID = sourceClass.ElementID Then&#xA;                Set targetClass = Repository.GetElementByID(c.ClientID)&#xA;            Else&#xA;                Set targetClass = Nothing&#xA;            End If&#xA;&#xA;            If targetClass Is Nothing Then&#xA;                Session.Output &quot;  Association skipped (no target).&quot;&#xA;            Else&#xA;                Session.Output &quot;  Association found to '&quot; &amp; targetClass.Name &amp; &quot;'&quot;&#xA;&#xA;                ' Ensure target JSON element exists (same as generalizations)&#xA;                Set targetJson = findJsonElement(targetClass)&#xA;                If targetJson Is Nothing Then&#xA;                    Session.Output &quot;    target JSON not found → creating via TransferClass&quot;&#xA;                    Set targetJson = TransferClass(targetClass, Repository.GetCurrentDiagram())&#xA;                Else&#xA;                    Session.Output &quot;    target JSON exists: &quot; &amp; targetJson.Name&#xA;                End If&#xA;&#xA;                If Not targetJson Is Nothing Then&#xA;                    ' Decide JSON connector name (use UML name or a default)&#xA;                    If c.Name = &quot;&quot; Then&#xA;                        assocName = sourceJsonElem.Name &amp; &quot;_Associates_&quot; &amp; targetJson.Name&#xA;                    Else&#xA;                        assocName = c.Name&#xA;                    End If&#xA;&#xA;                    ' Check if JSON→JSON association already exists (like generalization existence check)&#xA;                    exists = False&#xA;                    For Each jc In sourceJsonElem.Connectors&#xA;                        If (jc.Type = &quot;Association&quot; Or jc.MetaType = &quot;Association&quot;) _&#xA;                           And jc.Stereotype = &quot;TMF_Schema_Associates_Schema&quot; _&#xA;                           And jc.Name = assocName _&#xA;                           And ((jc.ClientID = sourceJsonElem.ElementID And jc.SupplierID = targetJson.ElementID) _&#xA;                                Or (jc.SupplierID = sourceJsonElem.ElementID And jc.ClientID = targetJson.ElementID)) Then&#xA;                            exists = True&#xA;                            Exit For&#xA;                        End If&#xA;                    Next&#xA;&#xA;                    If exists Then&#xA;                        Session.Output &quot;    JSON association already exists: &quot; &amp; assocName&#xA;                    Else&#xA;                        ' Create association between JSON elements (mirror generalization creation style)&#xA;                        Dim newAssoc As EA.Connector&#xA;                        Set newAssoc = sourceJsonElem.Connectors.AddNew(assocName, &quot;Association&quot;)&#xA;                        ' Keep a consistent direction: JSON(source) -&gt; JSON(target)&#xA;                        newAssoc.ClientID = sourceJsonElem.ElementID&#xA;                        newAssoc.SupplierID = targetJson.ElementID&#xA;                        newAssoc.Stereotype = &quot;TMF_Schema_Associates_Schema&quot;&#xA;                        newAssoc.Update&#xA;                        Session.Output &quot;    created JSON association: ConnectorID=&quot; &amp; newAssoc.ConnectorID &amp; &quot; Name='&quot; &amp; assocName &amp; &quot;'&quot;&#xA;                    End If&#xA;&#x9;&#x9;&#x9;&#x9;     ' --- Add a property on the source JSON if the forward end is Navigable ---&#xA;                    ' Determine if the forward end of the UML connector is marked as Navigable.&#xA;                    ' If it is, then add a new property in the source JSON element with the type of the target JSON element.&#xA;                    ' Example: if class A connects to class B with navigable=true, then property 'b' of type 'B' is added to A.&#xA;&#x9;&#x9;&#x9;&#x9; dim forwardNavigable&#xA;&#x9;&#x9;&#x9;&#x9;dim&#x9;  propName &#xA;&#x9;&#x9;&#x9;&#x9;dim a As EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;dim hasProp&#xA;                    If c.ClientID = sourceClass.ElementID Then&#xA;                        ' Forward direction is Client-&gt;Supplier; check SupplierEnd navigability&#xA;                        forwardNavigable = (LCase(c.SupplierEnd.Navigable) = &quot;navigable&quot;)&#xA;                    Else&#xA;                        ' Forward direction is Supplier-&gt;Client; check ClientEnd navigability&#xA;                        forwardNavigable = (LCase(c.ClientEnd.Navigable) = &quot;navigable&quot;)&#xA;                    End If&#xA;&#xA;                    If forwardNavigable Then&#xA;                        ' Build lowerCamelCase property name from target JSON element name (e.g., &quot;B&quot; -&gt; &quot;b&quot;)&#xA;                        If Len(targetJson.Name) &gt; 0 Then&#xA;                            propName = LCase(Left(targetJson.Name,1)) &amp; Mid(targetJson.Name,2)&#xA;                        Else&#xA;                            propName = &quot;related&quot;&#xA;                        End If&#xA;&#xA;                        ' Avoid duplicates on the source JSON element&#xA;                        hasProp = False&#xA;                        For Each a In sourceJsonElem.Attributes&#xA;                            If LCase(a.Name) = LCase(propName) Then&#xA;                                hasProp = True&#xA;                                Exit For&#xA;                            End If&#xA;                        Next&#xA;&#xA;                        If Not hasProp Then&#xA;                            Set a = sourceJsonElem.Attributes.AddNew(propName, targetJson.Name)&#xA;                            a.ClassifierID = targetJson.ElementID&#xA;                            a.Update&#xA;                            sourceJsonElem.Attributes.Refresh&#xA;                            Session.Output &quot;    navigable ⇒ added property '&quot; &amp; propName &amp; &quot;' : &quot; &amp; targetJson.Name&#xA;                        Else&#xA;                            Session.Output &quot;    navigable ⇒ property '&quot; &amp; propName &amp; &quot;' already exists; skipped&quot;&#xA;                        End If&#xA;                    Else&#xA;                        Session.Output &quot;    navigable ⇒ not set to 'Navigable'; no extra property created&quot;&#xA;                    End If&#xA;&#xA;                End If&#xA;            End If&#xA;        End If&#xA;    Next&#xA;End Sub&#xA;&#xA;&#xA;&#xA;' --- Helpers to normalize lists from getNavigableConnectors (Dictionary/String/Array -&gt; GUID array) ---&#xA;Function DictCount(d)&#xA;    On Error Resume Next&#xA;    If d Is Nothing Then&#xA;        DictCount = 0&#xA;    Else&#xA;        DictCount = d.Count&#xA;    End If&#xA;    If Err.Number &lt;&gt; 0 Then&#xA;        DictCount = 0&#xA;        Err.Clear&#xA;    End If&#xA;    On Error GoTo 0&#xA;End Function&#xA;&#xA;Function NormalizeGuidArray(listVar)&#xA;    Dim result()&#xA;    ReDim result(-1)&#xA;&#xA;    ' Case 1: already an array&#xA;    If IsArray(listVar) Then&#xA;        If (UBound(listVar) - LBound(listVar)) &gt;= 0 Then&#xA;            NormalizeGuidArray = listVar&#xA;            Exit Function&#xA;        End If&#xA;    End If&#xA;&#xA;    ' Case 2: comma-separated string&#xA;    If VarType(listVar) = vbString Then&#xA;        If Len(Trim(listVar)) &gt; 0 Then&#xA;            NormalizeGuidArray = Split(listVar, &quot;,&quot;)&#xA;            Exit Function&#xA;        End If&#xA;    End If&#xA;&#xA;    ' Case 3: Scripting.Dictionary&#xA;    On Error Resume Next&#xA;    If Not listVar Is Nothing Then&#xA;        Dim keys, lb, ub, i&#xA;        keys = listVar.Keys&#xA;        If Err.Number = 0 Then&#xA;            lb = LBound(keys)&#xA;            ub = UBound(keys)&#xA;            If Err.Number = 0 And ub &gt;= lb Then&#xA;                ReDim result(ub - lb)&#xA;                For i = lb To ub&#xA;                    result(i - lb) = CStr(keys(i))&#xA;                Next&#xA;                NormalizeGuidArray = result&#xA;                On Error GoTo 0&#xA;                Exit Function&#xA;            End If&#xA;        End If&#xA;        Err.Clear&#xA;    End If&#xA;    On Error GoTo 0&#xA;&#xA;    NormalizeGuidArray = result ' empty array&#xA;End Function&#xA;&#xA;' --- Safe name helper for logs ---&#xA;Function IIfSafeName(elem)&#xA;    If elem Is Nothing Then&#xA;        IIfSafeName = &quot;&lt;nothing&gt;&quot;&#xA;    Else&#xA;        IIfSafeName = elem.Name&#xA;    End If&#xA;End Function&#xA;&#xA;' --- not used: TransferRelations that accepts Dictionary-or-Array-or-String ---&#xA;Sub TransferRelations (guidList, sourceElement, SourceJsonElem, relType, relStereotype)&#xA;    Dim targetElem As EA.Element&#xA;    Dim targetJsonElem As EA.Element&#xA;    Dim connectorGuid&#xA;    Dim connector As EA.Connector&#xA;    Dim sourceConnector As EA.Connector&#xA;    Dim connectorAttribute As EA.Attribute&#xA;    Dim targetConnectorAttribute As EA.Attribute&#xA;    Dim isSupplier&#xA;    Dim searchConnector As EA.Connector&#xA;    Dim searchName&#xA;    Dim skipRest&#xA;    Dim guidArray&#xA;&#xA;&#xA;    Session.Output &quot;now transfer relationships&quot;&#xA;&#x9;Session.Output &quot;list is&quot; &amp; guidList.Count&#xA;    ' Normalize input to GUID array&#xA;    guidArray = NormalizeGuidArray(guidList)&#xA;    If Not IsArray(guidArray) Then&#xA;        Session.Output &quot;TransferRelations: ABORT — normalization did not return an array.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;    If (UBound(guidArray) - LBound(guidArray)) &lt; 0 Then&#xA;        Session.Output &quot;TransferRelations: ABORT — empty array after normalization.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    Session.Output &quot;TransferRelations: GUID count=&quot; &amp; (UBound(guidArray) - LBound(guidArray) + 1)&#xA;&#xA;    For Each connectorGuid In guidArray&#xA;        skipRest = False&#xA;        Set connector = Nothing&#xA;&#xA;        Set sourceConnector = Repository.GetConnectorByGuid(connectorGuid)&#xA;        If sourceConnector Is Nothing Then&#xA;            Session.Output &quot;  connector GUID=&quot; &amp; connectorGuid &amp; &quot; → &lt;not found&gt;&quot;&#xA;            skipRest = True&#xA;        Else&#xA;            Session.Output &quot;  connector GUID=&quot; &amp; connectorGuid &amp; &quot; → ID=&quot; &amp; sourceConnector.ConnectorID &amp; &quot; Type=&quot; &amp; sourceConnector.Type &amp; &quot; Name='&quot; &amp; sourceConnector.Name &amp; &quot;'&quot;&#xA;&#xA;            ' Determine direction relative to sourceElement&#xA;            If sourceConnector.ClientID = sourceElement.ElementID Then&#xA;                isSupplier = False&#xA;                Set targetElem = Repository.GetElementByID(sourceConnector.SupplierID)&#xA;            ElseIf sourceConnector.SupplierID = sourceElement.ElementID Then&#xA;                isSupplier = True&#xA;                Set targetElem = Repository.GetElementByID(sourceConnector.ClientID)&#xA;            Else&#xA;                Session.Output &quot;    skipped: connector does not involve sourceElement.&quot;&#xA;                skipRest = True&#xA;            End If&#xA;        End If&#xA;&#xA;        If Not skipRest Then&#xA;            Session.Output &quot;    isSupplier=&quot; &amp; CStr(isSupplier) &amp; &quot; | targetElem=&quot; &amp; IIfSafeName(targetElem)&#xA;&#xA;            ' Find or create target JSON element&#xA;            Set targetJsonElem = findJsonElement(targetElem)&#xA;            If targetJsonElem Is Nothing Then&#xA;                Set targetJsonElem = TransferClass(targetElem, Repository.GetCurrentDiagram())&#xA;                If targetJsonElem Is Nothing Then&#xA;                    Session.Output &quot;    ABORT: failed to create target JSON.&quot;&#xA;                    skipRest = True&#xA;                Else&#xA;                    Session.Output &quot;    created target JSON: &quot; &amp; targetJsonElem.Name&#xA;                End If&#xA;            Else&#xA;                Session.Output &quot;    target JSON found: &quot; &amp; targetJsonElem.Name&#xA;            End If&#xA;        End If&#xA;&#xA;        If Not skipRest Then&#xA;            If sourceConnector.Name = &quot;&quot; Then&#xA;                searchName = SourceJsonElem.Name &amp; &quot;_Associates_&quot; &amp; targetJsonElem.Name&#xA;            Else&#xA;                searchName = sourceConnector.Name&#xA;            End If&#xA;            Session.Output &quot;    desired connector name='&quot; &amp; searchName &amp; &quot;'&quot;&#xA;&#xA;            ' Check existing on target JSON&#xA;            For Each searchConnector In targetJsonElem.Connectors&#xA;                If searchConnector.Name = searchName Then&#xA;                    Set connector = searchConnector&#xA;                    Exit For&#xA;                End If&#xA;            Next&#xA;            If connector Is Nothing Then&#xA;                If Not isSupplier Then&#xA;                    Set connector = addConnector(SourceJsonElem, relType, relStereotype, targetJsonElem)&#xA;                Else&#xA;                    Set connector = addConnector(targetJsonElem, relType, relStereotype, SourceJsonElem) &#xA;                End If&#xA;                If connector Is Nothing Then&#xA;                    Session.Output &quot;    ABORT: addConnector returned &lt;nothing&gt;.&quot;&#xA;                    skipRest = True&#xA;                Else&#xA;                    Session.Output &quot;    addConnector OK: ConnectorID=&quot; &amp; connector.ConnectorID&#xA;                End If&#xA;            Else&#xA;                Session.Output &quot;    existing JSON connector reused: ConnectorID=&quot; &amp; connector.ConnectorID&#xA;            End If&#xA;        End If&#xA;&#xA;        If Not skipRest Then&#xA;            ' Copy connector properties&#xA;            copyConnector sourceConnector, connector&#xA;            copyConnectorEnd sourceConnector.ClientEnd, connector.ClientEnd&#xA;            copyConnectorEnd sourceConnector.SupplierEnd, connector.SupplierEnd&#xA;            connector.Name = searchName&#xA;            connector.Update&#xA;            Session.Output &quot;    updated JSON connector: ID=&quot; &amp; connector.ConnectorID &amp; &quot; Name='&quot; &amp; connector.Name &amp; &quot;'&quot;&#xA;&#xA;            ' Add attribute to source schema&#xA;            Set connectorAttribute = setAttribute(SourceJsonElem, connector.Name, &quot;&quot;)&#xA;            connectorAttribute.Type = targetJsonElem.Name&#xA;            connectorAttribute.ClassifierID = targetJsonElem.ElementID&#xA;            If isSupplier = False Then&#xA;                connectorAttribute.UpperBound = getConnectorEndUpperBound(connector.SupplierEnd)&#xA;                connectorAttribute.LowerBound = getConnectorEndLowerBound(connector.SupplierEnd)&#xA;            Else&#xA;                connectorAttribute.UpperBound = getConnectorEndUpperBound(connector.ClientEnd)&#xA;                connectorAttribute.LowerBound = getConnectorEndLowerBound(connector.ClientEnd)&#xA;            End If&#xA;            connectorAttribute.Update&#xA;            SourceJsonElem.Update&#xA;            Session.Output &quot;    source JSON attribute updated.&quot;&#xA;&#x9;&#x9;&#x9;' NEW: If forward end is explicitly &quot;Navigable&quot;, add a property to source of target type&#xA;            Dim forwardNavigable&#xA;&#x9;&#x9;&#x9;dim propName&#xA;&#x9;&#x9;&#x9;dim a As EA.Attribute&#xA;&#x9;&#x9;&#x9;dim hasProp&#xA;&#x9;&#x9;&#x9;' Determine if the forward end of the connector is marked as Navigable.&#xA;            ' If it is, then add a new property in the source JSON element with the type of the target JSON element.&#xA;            ' Example: if class A connects to class B with navigable=true, then property 'b' of type 'B' is added to A.&#xA;            Session.Output &quot;    navigable = &quot; &amp; sourceConnector.SupplierEnd.Navigable &#xA;&#x9;&#x9;&#x9;If isSupplier = False Then&#xA;                forwardNavigable = (LCase(sourceConnector.SupplierEnd.Navigable) = &quot;navigable&quot;)&#xA;            Else&#xA;                forwardNavigable = (LCase(sourceConnector.ClientEnd.Navigable) = &quot;navigable&quot;)&#xA;            End If&#xA;&#xA;            If forwardNavigable Then&#xA;                If Len(targetJsonElem.Name) &gt; 0 Then&#xA;                    propName = LCase(Left(targetJsonElem.Name,1)) &amp; Mid(targetJsonElem.Name,2)&#xA;                Else&#xA;                    propName = &quot;related&quot;&#xA;                End If&#xA;&#xA;                hasProp = False&#xA;                For Each a In SourceJsonElem.Attributes&#xA;                    If LCase(a.Name) = LCase(propName) Then&#xA;                        hasProp = True&#xA;                        Exit For&#xA;                    End If&#xA;                Next&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;  ' Verify if the property already exists in the source JSON element&#xA;                If Not hasProp Then&#xA;                    Set a = SourceJsonElem.Attributes.AddNew(propName, targetJsonElem.Name)&#xA;                    a.ClassifierID = targetJsonElem.ElementID&#xA;                    a.Update&#xA;                    SourceJsonElem.Attributes.Refresh&#xA;                    Session.Output &quot;    navigable ⇒ added property '&quot; &amp; propName &amp; &quot;' : &quot; &amp; targetJsonElem.Name&#xA;                Else&#xA;                    Session.Output &quot;    navigable ⇒ property '&quot; &amp; propName &amp; &quot;' already exists; skipped&quot;&#xA;                End If&#xA;            Else&#xA;                Session.Output &quot;    navigable ⇒ not set to 'Navigable' on forward end; no extra property created&quot;&#xA;            End If&#xA; ' end: If forward end is explicitly &quot;Navigable&quot;, add a property to source of target type&#xA;&#xA;            ' Optional reverse attribute on target schema if navigable&#xA;            If isSupplier = True Then&#xA;                If sourceConnector.SupplierEnd.Navigable &lt;&gt; &quot;Non-Navigable&quot; Then&#xA;                    Set targetConnectorAttribute = setAttribute(targetJsonElem, connector.Name, &quot;&quot;)&#xA;                    targetConnectorAttribute.Type = SourceJsonElem.Name&#xA;                    targetConnectorAttribute.ClassifierID = SourceJsonElem.ElementID&#xA;                    targetConnectorAttribute.UpperBound = getConnectorEndUpperBound(connector.SupplierEnd)&#xA;                    targetConnectorAttribute.LowerBound = getConnectorEndLowerBound(connector.SupplierEnd)&#xA;                    targetConnectorAttribute.Update&#xA;                    targetJsonElem.Update&#xA;                    Session.Output &quot;    reverse attribute on target JSON (supplier navigable) updated.&quot;&#xA;                End If&#xA;            Else&#xA;                If sourceConnector.ClientEnd.Navigable &lt;&gt; &quot;Non-Navigable&quot; Then&#xA;                    Set targetConnectorAttribute = setAttribute(targetJsonElem, connector.Name, &quot;&quot;)&#xA;                    targetConnectorAttribute.Type = SourceJsonElem.Name&#xA;                    targetConnectorAttribute.ClassifierID = SourceJsonElem.ElementID&#xA;                    targetConnectorAttribute.UpperBound = getConnectorEndUpperBound(connector.ClientEnd)&#xA;                    targetConnectorAttribute.LowerBound = getConnectorEndLowerBound(connector.ClientEnd)&#xA;                    targetConnectorAttribute.Update&#xA;                    targetJsonElem.Update&#xA;                    Session.Output &quot;    reverse attribute on target JSON (client navigable) updated.&quot;&#xA;                End If&#xA;            End If&#xA;&#xA;            connector.Update&#xA;        End If&#xA;    Next&#xA;&#xA;    Session.Output &quot;TransferRelations: end&quot;&#xA;End Sub&#xA;&#xA;&#xA;&#xA;' Find an existing JSON schema element for a given UML Class&#xA;Function findJsonElement(element)&#xA;    Dim name&#xA;    Dim jsonElem&#xA;    Dim connector As EA.Connector&#xA;    Dim candidateElem As EA.Element&#xA;    Dim condition&#xA;    Dim condition2&#xA;&#xA;    Set candidateElem = Nothing&#xA;    name = Replace(element.Name, &quot; &quot;, &quot;&quot;)&#xA;&#xA;    Set jsonElem = lookupElement(name, &quot;TMF_JSON_Schema&quot;, &quot;Class&quot;)&#xA;    If jsonElem Is Nothing Then&#xA;        Session.Output &quot;findJsonElement: lookup for '&quot; &amp; name &amp; &quot;' returned &lt;nothing&gt;&quot;&#xA;    Else&#xA;        Session.Output &quot;findJsonElement: lookup found '&quot; &amp; jsonElem.Name &amp; &quot;'&quot;&#xA;    End If&#xA;    Set findJsonElement = jsonElem&#xA;&#xA;    ' Also try via Realization (supplier = original Class → client = JSON Schema)&#xA;    For Each connector In element.Connectors&#xA;        condition = (connector.SupplierID = element.ElementID) And _&#xA;                    (connector.MetaType = &quot;Realisation&quot; Or connector.Type = &quot;Realization&quot;)&#xA;        If condition Then&#xA;            Set candidateElem = Repository.GetElementByID(connector.ClientID)&#xA;            If Not candidateElem Is Nothing Then&#xA;                condition2 = (candidateElem.Stereotype = &quot;TMF_JSON_Schema&quot;) And (candidateElem.Name = name)&#xA;                If condition2 Then&#xA;                    Set findJsonElement = candidateElem&#xA;                    Session.Output &quot;findJsonElement: found via Realization → &quot; &amp; candidateElem.Name&#xA;                    Exit For&#xA;                End If&#xA;            End If&#xA;        End If&#xA;    Next&#xA;&#xA;    If candidateElem Is Nothing And jsonElem Is Nothing Then&#xA;        Set findJsonElement = Nothing&#xA;        Session.Output &quot;findJsonElement: not found for '&quot; &amp; name &amp; &quot;'&quot;&#xA;    End If&#xA;End Function&#xA;&#xA;' Safe name for logging&#xA;Function IIfSafeName(elem)&#xA;    If elem Is Nothing Then&#xA;        IIfSafeName = &quot;&lt;nothing&gt;&quot;&#xA;    Else&#xA;        IIfSafeName = elem.Name&#xA;    End If&#xA;End Function&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="570"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="571"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="572"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="573"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A6718671-9404-456d-8209-CFA25DB7EC71}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Relationships -&amp;gt; switch type&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     Diagram: Retype &amp; Restereotype Relationships in Current Diagram&#xA;' Author:          Giu Platania&#xA;' Purpose:         Evaluate all elements on the current diagram, collect their relationships&#xA;'                  into a dictionary, then convert matching connectors from&#xA;'                  (TypeOrigin, StereotypeOrigin) → (TypeDestination, StereotypeDestination).&#xA;' Date:            2025-08-26&#xA;' Version:         1.0&#xA;'&#xA;' Notes:&#xA;' - Uses only Session.Output for logging.&#xA;' - Designed as a Diagram Script; entry point is OnDiagramScript.&#xA;' - Uses Scripting.Dictionary keyed by ConnectorGUID to avoid duplicates when multiple&#xA;'   selected elements share the same connector.&#xA;' - Changes both Connector.Type and Connector.Stereotype (also touches StereotypeEx to keep EA in sync).&#xA;' - Example mapping default below can be edited inline.&#xA;&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' ======================= USER CONFIG =======================&#xA;' Define the origin and destination mapping here. Edit as needed.&#xA;Dim TypeOrigin, StereotypeOrigin&#xA;Dim TypeDestination, StereotypeDestination&#xA;&#xA;TypeOrigin           = &quot;Generalization&quot;&#xA;StereotypeOrigin     = &quot;&quot;&#xA;TypeDestination      = &quot;Generalization&quot;&#xA;StereotypeDestination=  &quot;TMF_SchemaGeneralizesSchema&quot; &#xA;' ===========================================================&#xA;&#xA;' ---------------- Output helpers ----------------&#xA;Sub EnsureOutput()&#xA;    On Error Resume Next&#xA;    Repository.EnsureOutputVisible &quot;Script&quot;&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;Sub LOG(msg)&#xA;    On Error Resume Next&#xA;    Session.Output CStr(Now) &amp; &quot;: &quot; &amp; msg&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;' ---------------- Entry: Diagram Script ----------------&#xA;Sub OnDiagramScript()&#xA;    ' fresh console&#xA;    Repository.ClearOutput &quot;Script&quot;&#xA;    EnsureOutput&#xA;&#xA;    Dim d As EA.Diagram&#xA;    Set d = Repository.GetCurrentDiagram()&#xA;    If d Is Nothing Then&#xA;        Session.Prompt &quot;Open a diagram and run the script again.&quot;, promptOK&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    Session.Output &quot;Diagram: &quot; &amp; d.Name&#xA;&#xA;    ' build dictionary of connectors for all elements shown on the diagram&#xA;    Dim connDict&#xA;    Set connDict = BuildConnectorDictionary(d)&#xA;&#xA;    Session.Output &quot;Collected connectors: &quot; &amp; DictCount(connDict)&#xA;    If DictCount(connDict) = 0 Then&#xA;        Session.Output &quot;No connectors found. Nothing to do.&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    ' perform transformation&#xA;    TransformConnectors connDict, TypeOrigin, StereotypeOrigin, TypeDestination, StereotypeDestination&#xA;&#xA;    ' refresh diagram to reflect updates&#xA;    Repository.ReloadDiagram d.DiagramID&#xA;    Session.Output &quot;Done.&quot;&#xA;End Sub&#xA;&#xA;' ---------------- Build connector dictionary ----------------&#xA;Function BuildConnectorDictionary(d)&#xA;    Dim dict 'as dictionary&#xA;&#x9;Dim i &#xA;&#x9;dim dobj As EA.DiagramObject, &#xA;&#x9;dim el As EA.Element&#xA;&#x9;dim &#x9;c As EA.Connector&#xA;    Set dict = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#xA;    Session.Output &quot;Scanning diagram objects: &quot; &amp; d.DiagramObjects.Count&#xA;&#xA;    For i = 0 To d.DiagramObjects.Count - 1&#xA;        Set dobj = d.DiagramObjects.GetAt(i)&#xA;        Set el = Repository.GetElementByID(dobj.ElementID)&#xA;        If Not el Is Nothing Then&#xA;            Session.Output &quot; Element: &quot; &amp; el.Name &amp; &quot; (ID=&quot; &amp; el.ElementID &amp; &quot;) connectors=&quot; &amp; el.Connectors.Count&#xA;            For Each c In el.Connectors&#xA;                If Not dict.Exists(c.ConnectorGUID) Then&#xA;                    dict.Add c.ConnectorGUID, c&#xA;                End If&#xA;            Next&#xA;        End If&#xA;    Next&#xA;&#xA;    Set BuildConnectorDictionary = dict&#xA;End Function&#xA;&#xA;' ---------------- Transform connectors ----------------&#xA;Sub TransformConnectors(connDict, tOrigin, sOrigin, tDest, sDest)&#xA;    Dim keys&#xA;&#x9;Dim &#x9;lb&#xA;&#x9;dim&#x9;ub &#xA;&#x9;dim i&#xA;&#x9;dim guid &#xA;&#x9;dim c As EA.Connector&#xA;&#xA;    If connDict Is Nothing Then&#xA;        Session.Output &quot;TransformConnectors: connector dictionary is Nothing&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    On Error Resume Next&#xA;    keys = connDict.Keys&#xA;    If Err.Number &lt;&gt; 0 Then&#xA;        Session.Output &quot;TransformConnectors: failed to read keys from dictionary&quot;&#xA;        Err.Clear&#xA;        On Error GoTo 0&#xA;        Exit Sub&#xA;    End If&#xA;    On Error GoTo 0&#xA;&#xA;    lb = LBound(keys)&#xA;    ub = UBound(keys)&#xA;    If ub &lt; lb Then&#xA;        Session.Output &quot;TransformConnectors: dictionary has no keys&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    Session.Output &quot;Transforming connectors where Type='&quot; &amp; tOrigin &amp; &quot;' AND Stereotype='&quot; &amp; sOrigin &amp; &quot;'&quot;&#xA;    Session.Output &quot; → set Type='&quot; &amp; tDest &amp; &quot;', Stereotype='&quot; &amp; sDest &amp; &quot;'&quot;&#xA;&#xA;    Dim changedCount: changedCount = 0&#xA;    Dim skippedCount: skippedCount = 0&#xA;&#xA;    For i = lb To ub&#xA;        guid = CStr(keys(i))&#xA;        Set c = connDict.Item(guid)&#xA;        If c Is Nothing Then&#xA;            skippedCount = skippedCount + 1&#xA;        Else&#xA;            Dim matchType, matchStereo&#xA;            matchType   = (StrComp(c.Type, tOrigin, vbTextCompare) = 0)&#xA;            ' Prefer StereotypeEx if present, else Stereotype&#xA;            Dim currentStereo&#xA;            currentStereo = c.Stereotype&#xA;            If Len(c.StereotypeEx) &gt; 0 Then currentStereo = c.StereotypeEx&#xA;            matchStereo = (InStr(1, &quot;,&quot; &amp; LCase(currentStereo) &amp; &quot;,&quot;, &quot;,&quot; &amp; LCase(sOrigin) &amp; &quot;,&quot;, vbTextCompare) &gt; 0) Or _&#xA;                          (StrComp(currentStereo, sOrigin, vbTextCompare) = 0)&#xA;&#xA;            If matchType And matchStereo Then&#xA;                Session.Output &quot; * Match: GUID=&quot; &amp; c.ConnectorGUID &amp; &quot; | Type=&quot; &amp; c.Type &amp; &quot; | Stereo=&quot; &amp; currentStereo&#xA;                c.Type = tDest&#xA;                c.Stereotype = sDest&#xA;                c.StereotypeEx = sDest&#xA;                If c.Update() Then&#xA;                    changedCount = changedCount + 1&#xA;                    Session.Output &quot;   → Updated to Type='&quot; &amp; c.Type &amp; &quot;', Stereo='&quot; &amp; c.Stereotype &amp; &quot;'&quot;&#xA;                Else&#xA;                    Session.Output &quot;   → Update FAILED: &quot; &amp; c.GetLastError()&#xA;                End If&#xA;            Else&#xA;                skippedCount = skippedCount + 1&#xA;            End If&#xA;        End If&#xA;    Next&#xA;&#xA;    Session.Output &quot;Summary: changed=&quot; &amp; changedCount &amp; &quot;, skipped=&quot; &amp; skippedCount&#xA;End Sub&#xA;&#xA;' ---------------- Utility: dictionary count ----------------&#xA;Function DictCount(d)&#xA;    On Error Resume Next&#xA;    If d Is Nothing Then&#xA;        DictCount = 0&#xA;    Else&#xA;        DictCount = d.Count&#xA;    End If&#xA;    If Err.Number &lt;&gt; 0 Then&#xA;        DictCount = 0&#xA;        Err.Clear&#xA;    End If&#xA;    On Error GoTo 0&#xA;End Function&#xA;&#xA;' ------------- Run as Diagram Script -------------&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="574"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{74343A08-61C4-44b9-A930-30EEAE9A571B}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Relationships -&amp;gt; add information&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;"/>
			<Column name="Script" value="' Script Name:     Normalize Diagram Associations&#xA;' Author:          Giu Platania&#xA;' Purpose:         Iterate all connectors shown on the current diagram and, for those matching a&#xA;'                  configurable Type &amp; Stereotype, force end properties as configured:&#xA;'                  - Source (Client end): multiplicity + navigability&#xA;'                  - Target (Supplier end): multiplicity + navigability&#xA;'                  This script only touches connectors visible on the active diagram, and logs every change.&#xA;' Date:            2025-08-28&#xA;' Version:         1.0&#xA;'&#xA;Option Explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' ------------------------------&#xA;' Configuration (edit here)&#xA;' ------------------------------&#xA;' Diagram Output tab name&#xA;Const OUT_TAB = &quot;Normalize Diagram Associations&quot;&#xA;&#xA;' Connector filter&#xA;Const CFG_CONNECTOR_TYPE          = &quot;Association&quot;&#xA;Const CFG_CONNECTOR_STEREOTYPE    = &quot;TMF_Schema_Associates_Schema&quot;  ' e.g. &quot;TMF_TMF_Schema_Associates_Schema&quot;&#xA;&#xA;' End settings to apply when a connector matches the filter&#xA;Const CFG_SOURCE_MULTIPLICITY     = &quot;1&quot;       ' Client end multiplicity&#xA;Const CFG_TARGET_MULTIPLICITY     = &quot;0..*&quot;   ' Supplier end multiplicity&#xA;Const CFG_SOURCE_NAVIGABILITY     = &quot;Non-Navigable&quot; ' Client end navigability: &quot;Navigable&quot; | &quot;Non-Navigable&quot; | &quot;Unspecified&quot;&#xA;Const CFG_TARGET_NAVIGABILITY     = &quot;Navigable&quot;     ' Supplier end navigability&#xA;&#xA;&#xA;&#xA;' ---------------------------------&#xA;' Utility: output and safe formatting&#xA;' ---------------------------------&#xA;Private Sub EnsureOutput()&#xA;    On Error Resume Next&#xA;    Repository.CreateOutputTab OUT_TAB&#xA;    Repository.ClearOutput OUT_TAB&#xA;    Repository.EnsureOutputVisible OUT_TAB&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;Private Sub LOG(msg)&#xA;    On Error Resume Next&#xA;    Repository.WriteOutput OUT_TAB, CStr(Now()) &amp; &quot;: &quot; &amp; msg, 0&#xA;    On Error GoTo 0&#xA;End Sub&#xA;&#xA;Private Function NameOfElement(elem)&#xA;    If elem Is Nothing Then&#xA;        NameOfElement = &quot;&lt;none&gt;&quot;&#xA;    Else&#xA;        NameOfElement = elem.Name &amp; &quot; (#&quot; &amp; elem.ElementID &amp; &quot;)&quot;&#xA;    End If&#xA;End Function&#xA;&#xA;' ------------------------------&#xA;' Entry point&#xA;' ------------------------------&#xA;Sub NormalizeAssociationsOnDiagram()&#xA;    Dim diag As EA.Diagram&#xA;    Dim dlink As EA.DiagramLink&#xA;    Dim conn As EA.Connector&#xA;    Dim clientElem As EA.Element&#xA;    Dim supplierElem As EA.Element&#xA;    Dim touchedCount, skippedCount&#xA;&#xA;    EnsureOutput&#xA;    LOG &quot;Start — applying settings to connectors on current diagram&quot;&#xA;&#xA;    Set diag = Repository.GetCurrentDiagram()&#xA;    If diag Is Nothing Then&#xA;        MsgBox &quot;Open a diagram before running this script.&quot;, vbExclamation, &quot;Normalize Diagram Associations&quot;&#xA;        LOG &quot;Abort: no active diagram&quot;&#xA;        Exit Sub&#xA;    End If&#xA;&#xA;    LOG &quot;Diagram: '&quot; &amp; diag.Name &amp; &quot;' (ID=&quot; &amp; diag.DiagramID &amp; &quot;) | Links=&quot; &amp; diag.DiagramLinks.Count&#xA;&#xA;    touchedCount = 0&#xA;    skippedCount = 0&#xA;&#xA;    ' Iterate only connectors that are actually displayed on this diagram&#xA;    Dim i&#xA;    For i = 0 To diag.DiagramLinks.Count - 1&#xA;        Set dlink = diag.DiagramLinks.GetAt(i)&#xA;        Set conn = Repository.GetConnectorByID(dlink.ConnectorID)&#xA;        If conn Is Nothing Then&#xA;            skippedCount = skippedCount + 1&#xA;            LOG &quot;Skip: DiagramLink #&quot; &amp; i &amp; &quot; → connector not found (ID=&quot; &amp; dlink.ConnectorID &amp; &quot;)&quot;&#xA;        Else&#xA;            ' Filter by Type &amp; Stereotype&#xA;            If LCase(conn.Type) = LCase(CFG_CONNECTOR_TYPE) _&#xA;               And LCase(conn.Stereotype) = LCase(CFG_CONNECTOR_STEREOTYPE) Then&#xA;&#xA;                Set clientElem = Repository.GetElementByID(conn.ClientID)&#xA;                Set supplierElem = Repository.GetElementByID(conn.SupplierID)&#xA;&#xA;                LOG &quot;Match: &quot; &amp; conn.Type &amp; &quot;:&quot; &amp; conn.Stereotype &amp; _&#xA;                    &quot; | &quot; &amp; NameOfElement(clientElem) &amp; &quot; —&gt; &quot; &amp; NameOfElement(supplierElem) &amp; _&#xA;                    &quot; | ConnID=&quot; &amp; conn.ConnectorID&#xA;&#xA;                ' Apply settings to the ends&#xA;                conn.ClientEnd.Cardinality = CFG_SOURCE_MULTIPLICITY&#xA;                conn.SupplierEnd.Cardinality = CFG_TARGET_MULTIPLICITY&#xA;                conn.ClientEnd.Navigable = CFG_SOURCE_NAVIGABILITY&#xA;                conn.SupplierEnd.Navigable = CFG_TARGET_NAVIGABILITY&#xA;&#xA;                If conn.Update() Then&#xA;                    touchedCount = touchedCount + 1&#xA;                    LOG &quot;  Updated: ClientEnd(Mult='&quot; &amp; conn.ClientEnd.Cardinality &amp; &quot;', Nav='&quot; &amp; conn.ClientEnd.Navigable &amp; _&#xA;                        &quot;') | SupplierEnd(Mult='&quot; &amp; conn.SupplierEnd.Cardinality &amp; &quot;', Nav='&quot; &amp; conn.SupplierEnd.Navigable &amp; &quot;')&quot;&#xA;                Else&#xA;                    skippedCount = skippedCount + 1&#xA;                    LOG &quot;  ERROR: Update failed → &quot; &amp; conn.GetLastError()&#xA;                End If&#xA;            Else&#xA;                skippedCount = skippedCount + 1&#xA;                LOG &quot;Skip: ConnID=&quot; &amp; conn.ConnectorID &amp; &quot; Type='&quot; &amp; conn.Type &amp; &quot;' Stereo='&quot; &amp; conn.Stereotype &amp; &quot;'&quot;&#xA;            End If&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Refresh UI&#xA;    Repository.ReloadDiagram diag.DiagramID&#xA;&#xA;    LOG &quot;Done — updated=&quot; &amp; touchedCount &amp; &quot;, skipped=&quot; &amp; skippedCount&#xA;End Sub&#xA;&#xA;' Convenience: allow run by name&#xA;NormalizeAssociationsOnDiagram()&#xA;"/>
		</DataRow>
	</DataSet>
</RefData>