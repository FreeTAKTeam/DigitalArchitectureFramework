<?xml version="1.0" encoding="utf-8"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="3" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{9E7922EB-FF2A-4df6-8A5C-A534B200C746}" />
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="util" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="4" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{7E49DCA9-5DBB-4f46-8AA5-2942EEFE6BEB}" />
			<Column name="ScriptAuthor" value="{9E7922EB-FF2A-4df6-8A5C-A534B200C746}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Model Management Utilities&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="&#xA;&#xA;'******************************************&#xA;'CONNECTORS&#xA;'******************************************&#xA;&#xA;' returns the first related element on a list&#xA;function getRelatedSupplierElement( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement = nothing&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' returns the first related element on a list by element, connector.MetaType, connector.Stereotype, relatedElement.MetaType, related.ElementStereotype&#xA;function getRelatedSupplierElement2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;' returns a list of related elements&#xA;function getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;' returns a list of related elements by by element, connector.MetaType, connector.Stereotype, relatedElement.MetaType, related.ElementStereotype&#xA;function getRelatedSupplierElementList2( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;if connector.Type = connectorType then&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList2 = relatedElementList&#x9;&#xA;end function&#xA;&#xA;function getRelatedElement( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;' returns a list of elements sorted by name&#xA;function getSortedRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;System.Collections.SortedList&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.Name, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSortedRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;&#xA;&#xA;'add a connector of connType, connStereotype to 2 elements&#xA;function addConnector( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#x9;&#xA;&#x9;'Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#x9;&#xA;&#x9;newConnector.Stereotype = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#x9;&#xA;&#x9;newConnector.Update&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#x9;set addConnector = newConnector&#x9;&#xA;end function&#xA;&#xA;'******************************************&#xA;'Elements&#xA;'******************************************&#xA;&#xA;' Search for an object by name, stereotype and Type and returns the first in the list&#xA;function lookupElement(lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#xA;&#x9;sqlString = &quot;SELECT ea_guid FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_object.Name = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;end function&#xA;&#xA;' Delete an element&#xA;sub deleteElement( elementToDelete)&#xA;&#x9;dim packageID&#x9;  ' as Integer&#xA;&#x9;dim package &#x9;&#x9;as EA.Package&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementIndex  ' as Integer&#xA;&#xA;&#x9;packageID = elementToDelete.PackageID&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;elementIndex = 0&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.ElementID = elementToDelete.ElementID then&#xA;&#x9;&#x9;&#x9;package.Elements.Delete(elementIndex)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;elementIndex = elementIndex + 1&#xA;&#x9;next&#xA;&#x9;package.Elements.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;'******************************************&#xA;' Attributes&#xA;'******************************************&#xA;' Add an attribute to an element, including the initial value&#xA;sub setAttribute( element, attributeName, defaultValue)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#x9;&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = attributeName then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( attributeName, &quot;&quot;)&#x9;&#x9;&#xA;&#x9;&#x9;element.Attributes.Refresh&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;attribute.Default = defaultValue&#xA;&#x9;attribute.Update&#xA;end sub&#xA;&#xA;'' add to the Elelment element the Attribute sourceAttribute&#xA;sub copyAttribute( element, sourceAttribute)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = sourceAttribute.Name then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( sourceAttribute.Name, &quot;&quot;)&#xA;&#x9;&#x9;element.Attributes.Refresh&#xA;&#x9;end if&#x9;&#xA;&#x9;attribute.Default = sourceAttribute.Default&#xA;&#x9;attribute.Type = sourceAttribute.Type&#xA;&#x9;attribute.ClassifierID = sourceAttribute.ClassifierID&#xA;&#x9;attribute.Notes = sourceAttribute.Notes&#x9;&#xA;&#x9;attribute.Update&#xA;end sub&#xA;&#xA;sub setElementPDATA(element, pdataIndex, pdataValue)&#xA;'PDATA1 &#xA;' For Package elements: primary key of the package&#xA;' For Elements: Same as the Status column&#xA;' For Parts/Instances: GUID of the classifier&#xA;' For UseCase: #EXP#=&lt;ep&gt;; semi-colon separated list of Extension Points &lt;ep&gt;&#xA;' For Notes: linked element feature name&#xA;' For Text displaying as hyperlink: t_diagram.Diagram_ID&#xA;' For Requirements: Status property&#xA;' For UMLDiagram: Diagram_ID of the underlying diagram;&#xA;' If Object_Type is one of Activity, Artifact, Class, Interaction, Requirement, State,&#xA;'StateMachine, UseCase (and probably some more) and NType is 8 and PDATA1 has a number&#xA;'greater then zero then PDATA1 corresponds to t_diagram.Diagram_ID of the composite&#xA;'diagram.&#xA;'if   NType is 82 diagram hyperlink; PDATA1 == t_diagram.Diagram_ID&#xA;'&#xA;' PDATA2 &#xA;' For Elements: Same as the Priority column&#xA;' For Notes: Object_ID of the linked feature element&#xA;' For Requirements: Priority property&#xA;&#xA;' PDATA3 &#xA;' For Elements: Same as the Difficulty column&#xA;' For Notes: Reference name into the linked feature element&#xA;' For Ports in classified Parts: the GUID of the corresponding Port in the Classifier.&#xA;' For State: t_diagram.Diagram_ID of the composite diagram&#xA;' For Requirements: Difficulty property&#xA;&#xA;' PDATA4 &#xA;' For Note elements: Yes if the note is linked to an element feature and idref=&lt;val&gt;; list where &lt;val&gt; is the primary key of the connector(s) to which the note is linked&#xA;' For elements: If &gt; 0 this is the primary key of the connector for which this element is defines as association class&#xA;&#xA;' PDATA5 Keywords property&#xA;&#xA;&#x9;Dim sqlString 'As String&#xA;&#x9;Dim pdataColumnName 'As String&#xA;&#x9;pdataColumnName = &quot;PDATA&quot; &amp; pdataIndex&#xA;&#x9;sqlString = &quot;UPDATE t_object SET &quot; &amp; pdataColumnName &amp; &quot;='&quot; &amp; pdataValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;Repository.Execute( sqlString)&#xA;&#x9;element.Refresh&#xA;End Sub&#xA;&#xA;&#xA;&#xA;'******************************************&#xA;'  TaggedValue&#xA;'******************************************&#xA;' get the value of a tagged value, inside an element by taggedValue.Name&#xA;function getTaggedValueValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue &#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueValue   'as String&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;taggedValueValue = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;taggedValueValue = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;getTaggedValueValue = taggedValueValue&#x9;&#xA;end function&#xA;&#xA;'' set the value of a tagged value, inside an element by taggedValue.Name&#xA;sub setTaggedValueValue( eaItem, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;on error resume next&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 or taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.AddNew( taggedValueName, &quot;&quot;)&#xA;&#x9;&#x9;err.Clear&#xA;&#x9;end if&#x9;&#xA;&#x9;on error goto 0&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;eaItem.TaggedValues.Refresh&#xA;end sub&#xA;&#xA;'' Delete a tagged value, inside an element by taggedValue.Name&#xA;sub deleteTaggedValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue&#x9;&#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueCount   'as Integer&#xA;&#x9;dim taggedValueIndex   'as Integer&#xA;&#x9;dim deleted&#x9;&#x9;&#x9;   'as Boolean&#xA;&#x9;&#xA;&#x9;deleted = false&#x9;&#xA;&#x9;taggedValueCount = eaItem.TaggedValues.Count&#xA;&#x9;&#xA;&#x9;for taggedValueIndex = taggedValueCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.GetAt( taggedValueIndex)&#x9;&#xA;&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;&#x9;&#x9;&#x9;eaItem.TaggedValues.Delete taggedValueIndex&#xA;&#x9;&#x9;&#x9;deleted = true&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if deleted then&#xA;&#x9;&#x9;eaItem.TaggedValues.Refresh&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;'' Search an element with a certain Tagged value having a specific value&#xA;function lookupElementTaggedValue(taggedValueName, lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#x9;dim lookupElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;sqlString = &quot;SELECT t_object.ea_guid&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_objectproperties ON t_object.Object_ID = t_objectproperties.Object_ID&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_objectproperties.Property = '&quot; &amp; taggedValueName &amp; &quot;'&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_objectproperties.Value = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;&#x9;set lookupElementTaggedValue =  lookupElement&#xA;end function&#xA;&#xA;&#xA;'******************************************&#xA;'  ConnectorTaggedValue&#xA;'******************************************&#xA;&#xA;function getConnectorTaggedValueValue( connector, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#x9;&#xA;&#x9;getConnectorTaggedValueValue = taggedValue.Value&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setConnectorTaggedValueValue( connector, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = connector.TaggedValues.AddNew( taggedValueName, vbNullString)&#xA;&#x9;end if&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;end sub&#x9;&#xA;&#xA;'******************************************&#xA;'  Ownedship&#xA;'******************************************&#xA;'  Ownedship by element and expected metatype&#xA;function getOwnedElementNameList( element, ownedMetatypeList)&#xA;&#xA;&#x9;dim ownedElement &#x9;as EA.Element&#xA;&#x9;dim nameList&#x9;   'as String&#xA;&#x9;dim typeID&#x9;&#x9;   'as Integer&#xA;&#x9;dim typeElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementName&#x9;   'as String&#xA;&#x9;dim objectState&#x9;   'as String&#xA;&#x9;&#xA;&#x9;nameList = vbNullString&#x9;&#xA;&#x9;if ownedMetatypeList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;ownedMetatypeList = ownedMetatypeList &amp; &quot;,&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each ownedElement in element.EmbeddedElements&#x9;&#x9;&#xA;&#x9;&#x9;if InStr( ownedMetatypeList, ownedElement.MetaType &amp; &quot;,&quot;) then&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;typeID = ownedElement.PropertyType&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;typeID = ownedElement.ClassfierID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;elementName = ownedElement.Name&#xA;&#x9;&#x9;&#x9;else&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set typeElement = Repository.GetElementByID( typeID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementName = typeElement.Name&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if nameList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; vbCRLF&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;nameList = nameList &amp; elementName&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectState = getCustomPropertyValue( ownedElement, &quot;objectState&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectState &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; &quot; [&quot; &amp; objectState &amp; &quot;]&quot;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getOwnedElementNameList = nameList&#xA;end function&#xA;&#xA;' returns a list of children of a certain stereotype&#xA;function getChildElementList( parentElement, childStereotype)&#xA;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;for each childElement in parentElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = childStereotype then&#xA;&#x9;&#x9;&#x9;childElementList.Add childElement.ElementGUID, childElement&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildElementList = childElementList&#x9;&#xA;end function&#xA;&#xA;function getCustomPropertyValue( ownedElement, propertyName)&#xA;&#xA;&#x9;dim customProperty as EA._CustomProperty&#xA;&#x9;dim propertyValue 'as String&#x9;&#xA;&#x9;propertyValue = vbNullString&#xA;&#x9;&#xA;&#x9;for each customProperty in ownedElement.CustomProperties&#x9;&#xA;&#x9;&#x9;if customProperty.Name = propertyName then&#xA;&#x9;&#x9;&#x9;propertyValue = customProperty.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getCustomPropertyValue = propertyValue&#xA;&#x9;&#xA;end function&#xA;&#xA;'******************************************&#xA;'  Package&#xA;'******************************************&#xA;function getAncestorPackage( element, ancestorPackageLevel)&#xA;&#xA;&#x9;dim packageLevel&#x9;   'as Integer&#xA;&#x9;dim packageID&#x9;&#x9;   'as Integer&#xA;&#x9;dim package&#x9;&#x9;&#x9;&#x9;as EA.Package&#xA;&#xA;&#x9;packageID = element.PackageID&#x9;&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#x9;&#xA;&#x9;for packageLevel = 2 to ancestorPackageLevel&#x9;&#xA;&#x9;&#x9;packageID = package.ParentID&#x9;&#x9;&#xA;&#x9;&#x9;if packageID = 0 then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;set package = Repository.GetPackageByID( packageID)&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getAncestorPackage = package&#xA;&#x9;&#xA;end function&#xA;'******************************************&#xA;'  Diagram&#xA;'******************************************&#xA;' found a diagram inside an element by name&#xA;function getChildDiagram( parentElement, childDiagramName)&#xA;&#xA;&#x9;dim childDiagram &#x9;as EA.Diagram&#xA;&#x9;dim foundDiagram&#x9;as EA.Diagram&#xA;&#x9;&#xA;&#x9;set foundDiagram = nothing&#xA;&#x9;&#xA;&#x9;for each childDiagram in parentElement.Diagrams&#x9;&#xA;&#x9;&#x9;if childDiagram.Name = childDiagramName then&#xA;&#x9;&#x9;&#x9;set foundDiagram = childDiagram&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildDiagram = foundDiagram&#xA;&#x9;&#xA;end function" />
		</DataRow></DataSet>
</RefData>
