<?xml version="1.0" encoding="utf-8" standalone="no"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="907" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{63102034-B522-4ef1-BC21-85CEA9423DA6}" />
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="TM Forum Diagram Scripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="908" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{DDA8586D-3E5F-43b7-B990-1B937BBE4DEA}" />
			<Column name="ScriptAuthor" value="{63102034-B522-4ef1-BC21-85CEA9423DA6}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Elements &amp;gt; Create API Operations&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Wrappers.Include&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;&#xA;' Script Name: Elements -&gt; create API Operations&#xA;' Author: Natha Paquette&#xA;' Purpose: create appropriate Operations for API elements based on connection to JSON Schema&#xA;' Date: 26/03/2024&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim currentDiagram &#x9;as EA.Diagram&#xA;&#x9;dim diagramObject &#x9;as EA.DiagramObject&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim jsonList&#x9;&#x9;'as List&#xA;&#x9;dim listElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim jsonElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;if currentDiagram.SelectedObjects.Count = 1 then&#xA;&#x9;&#x9;for each diagramObject in currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID (diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if element.Metatype = &quot;Open API&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;session.output &quot;API &quot;&amp; element.Name &amp; &quot; selected&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set jsonList = getRelatedElementList (element, &quot;Aggregation&quot;, &quot;TMF_APIAggregatesSchema&quot;, &quot;Class&quot;, &quot;TMF_JSON_Schema&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each listElement in jsonList&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set jsonElement = Repository.GetElementByGuid (listElement)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateOperation element, jsonElement, &quot;TMF_APIOperation&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Operations created for &quot; &amp; jsonElement.Name &amp; &quot;, API &quot; &amp; element.name &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;next&#x9;&#xA;&#x9; else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires an element to be selected in a diagram to function&quot;, promptOK&#xA;&#x9;End if&#xA;&#xA;end sub&#xA;&#xA;&#xA;OnDiagramScript&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="923" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{86EC8BF3-09C0-451b-844D-9C971D8A07D7}" />
			<Column name="ScriptAuthor" value="{63102034-B522-4ef1-BC21-85CEA9423DA6}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Elements -&amp;gt; Transform Class Into Schema&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'&#xA;' This code has been included from the default Diagram Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.&#xA;'&#xA;' Script Name: Transform Class Into Schema&#xA;' Author:&#xA;' Purpose: Transforms a selected class in a diagram into a JSON schema, including all connectors and properties.&#xA;' Date: 10/04/2024&#xA;&#xA;&#x9;&#xA;sub OnDiagramScript()&#xA;&#xA;&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;dim selectedElement as EA.Element&#xA;&#x9;dim control&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim controlName&#x9;&#x9;'as string&#xA;&#x9;dim package&#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim flag &#x9;&#x9;&#x9;' as boolean&#xA;&#x9;flag = false&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;if currentDiagram.SelectedObjects.Count = 1 then&#xA;&#x9;&#x9;for each selectedObject in currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#x9;set selectedElement = Repository.GetElementByID(selectedObject.ElementID) &#xA;&#x9;&#x9;&#x9;&#x9;if selectedElement.Type = &quot;Class&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;Class found, starting conversion.....&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set package = Repository.GetPackageByID(selectedElement.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each control in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;controlName = selectedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;controlName = Replace (controlName, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if control.Stereotype = &quot;TMF_JSON_Schema&quot; and control.Name = controlName then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;This class already has a JSON element&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;flag = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if flag = false then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;TransferClass selectedElement, currentDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;SearchForAggregation selectedElement, currentDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; Repository.ReloadDiagram(currentDiagram.diagramID)&#xA;&#x9;&#x9;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;The diagram object must be a class&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires an object to be selected in a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;sub TransferClass (element, diagram)&#xA;dim jsonElement as EA.Element&#xA;dim package&#xA;&#xA;set package = Repository.GetPackageByID (element.PackageID)&#xA;set jsonElement = Package.Elements.AddNew (Element.Name, &quot;TMF_JSON_Schema&quot;)&#xA;jsonElement.Stereotype = &quot;TMF_JSON_Schema&quot;&#xA;jsonElement.Name = Element.Name&#xA;jsonElement.Name = replace(jsonElement.Name, &quot; &quot;, &quot;&quot;)&#xA;jsonElement.Notes = Element.Notes&#xA;jsonElement.Gentype = &quot;UML2&quot;&#xA;jsonElement.Update&#xA;&#x9;Session.Output &quot;JSONSchema Created&quot;&#xA;&#x9;CopyAttributes element, jsonElement&#xA;&#x9;Session.Output &quot;Attributes copied&quot;&#xA;&#x9;CreateRealizationConn element, jsonElement&#xA;&#x9;Session.Output &quot;Realisation connector created&quot;&#xA;&#x9;CreateDiagramObject jsonElement&#xA;&#x9;Session.Output &quot;Diagram object created&quot;&#xA;end sub&#xA;&#xA;sub CopyAttributes (element, jsonElement)&#xA;dim i  ' as index&#xA;dim newAttr as EA.Attribute&#xA;dim attrVal as EA.Attribute&#xA;&#xA;for i = 0 to element.Attributes.Count - 1&#xA;&#x9;&#x9;set attrVal = element.Attributes.GetAt(i)&#xA;&#x9;&#x9;set newAttr = jsonElement.Attributes.AddNew (attrVal.Name, attrVal.Type)&#xA;&#x9;&#x9;newAttr.Name = replace (newAttr.Name, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;newAttr.Stereotype = attrVal.Stereotype&#xA;if attrVal.Type = &quot;string&quot; then&#xA;&#x9;newAttr.Type = &quot;String&quot;&#xA;end if&#xA;if attrVal.Type = &quot;int&quot; then&#xA;&#x9;newAttr.Type = &quot;Int64&quot;&#xA;end if&#xA;if attrVal.Type = &quot;Date&quot; then&#xA;&#x9;newAttr.Type = &quot;DateTime&quot;&#xA;end if&#xA;if attrVal.Type = &quot;float&quot; then&#xA;&#x9;newAttr.Type = &quot;Float&quot;&#xA;end if&#xA;if attrVal.Type = &quot;bool&quot; then&#xA;&#x9;newAttr.Type = &quot;Boolean&quot;&#xA;end if&#xA;&#x9;&#xA;&#x9;&#x9;newAttr.Update&#xA;&#x9;&#x9;jsonElement.Attributes.Refresh&#xA;next&#xA;&#xA;end sub&#xA;&#xA;sub CreateRealizationConn (source, target)&#xA;&#xA;dim newConnector as EA.Connector&#xA;set newConnector = source.Connectors.AddNew (&quot;Realization&quot;, &quot;Realization&quot;)&#xA;newConnector.ClientID = target.ElementID&#xA;newConnector.SupplierID = source.ElementID&#xA;newConnector.Update&#xA;source.Connectors.Refresh&#xA;target.Connectors.Refresh&#xA;end sub&#xA;&#xA;sub CreateDiagramObject (jsonElement)&#xA;&#xA;dim dObject as EA.DiagramObject&#xA;dim diagram as EA.Diagram&#xA;&#xA;set diagram = Repository.GetCurrentDiagram&#xA;set dObject = diagram.DiagramObjects.AddNew (&quot;&quot;, &quot;&quot;)&#xA;dObject.ElementID = jsonElement.ElementID&#xA;&#xA;dObject.Update()&#xA;diagram.Update()&#xA;diagram.DiagramObjects.Refresh()&#xA;end sub&#xA;&#xA;&#xA;sub SearchForAggregation (element, diagram)&#xA;dim i ' as index&#xA;dim generalization as EA.Connector&#xA;dim aggregator&#x9;as EA.Element&#xA;dim package &#x9;as EA.Package&#xA;dim control&#x9;&#x9;as EA.Element&#xA;dim controlName 'as string&#xA;dim flag &#x9;&#x9;'as boolean&#xA;&#xA;for each generalization in element.Connectors&#xA;&#x9;if generalization.MetaType = &quot;Generalization&quot; then&#xA;&#x9;Session.Output &quot;Generalization found, transferring aggregator element.....&quot;&#xA;&#x9;&#x9;set aggregator = Repository.GetElementByID(generalization.SupplierID)&#xA;&#x9;set package = Repository.GetPackageByID(element.PackageID)&#xA;&#x9;for each control in package.Elements&#xA;&#x9;&#x9;controlName = aggregator.Name&#xA;&#x9;&#x9;controlName = Replace (controlName, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;if control.Stereotype = &quot;TMF_JSON_Schema&quot; and control.Name = controlName then&#xA;&#x9;&#x9;Session.Output &quot;This class already has a JSON element&quot;&#xA;&#x9;&#x9;flag = true&#xA;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;if flag = false then&#xA;&#x9;&#x9;TransferClass aggregator, diagram&#xA;&#x9;end if&#xA;&#x9;&#x9;CreateGeneralizationConn aggregator, element&#xA;&#x9;end if&#xA;next&#xA;&#xA;end sub&#xA;&#xA;sub CreateGeneralizationConn (sourceClass, clientClass)&#xA;Session.Output &quot;Creating Generalization connector&quot;&#xA;&#x9;dim newConnector as EA.Connector&#xA;&#x9;dim source&#x9;&#x9; as EA.Element&#xA;&#x9;dim client&#x9;&#x9; as EA.Element&#xA;&#x9;dim flag &#x9;&#x9; 'as boolean&#xA;&#x9;dim control&#x9;&#x9; as EA.Element&#xA;&#x9;dim connector&#x9; as EA.Connector&#xA;&#x9;dim package &#x9; as EA.Package&#xA;&#x9;dim controlName&#x9; 'as string&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByID(clientClass.PackageID)&#xA;&#xA;for each control in package.Elements&#xA;&#x9;&#x9;controlName = sourceClass.Name&#xA;&#x9;&#x9;controlName = Replace (controlName, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;if control.Stereotype = &quot;TMF_JSON_Schema&quot; and control.Name = controlName then&#xA;&#x9;&#x9;set source = Repository.GetElementByID (control.ElementID)&#xA;&#x9;&#x9;end if&#xA;next&#xA;&#xA;for each control in package.Elements&#xA;&#x9;&#x9;controlName = clientClass.Name&#xA;&#x9;&#x9;controlName = Replace (controlName, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;if control.Stereotype = &quot;TMF_JSON_Schema&quot; and control.Name = controlName then&#xA;&#x9;&#x9;set client = Repository.GetElementByID (control.ElementID)&#xA;&#x9;&#x9;end if&#xA;next&#xA;&#xA;&#xA;for each connector in source.Connectors&#xA;&#x9;if connector.MetaType = &quot;Schema Generalization&quot; and connector.ClientID = Client.ElementID then&#xA;&#x9;Session.Output &quot;Generalization relationship already exists&quot;&#xA;&#x9;Flag = true&#xA;&#x9;exit for&#xA;&#x9;end if&#xA;next&#xA;&#xA;if flag = false then&#xA;set newConnector = Source.Connectors.AddNew (&quot;&quot;, &quot;Generalization&quot; )&#xA;&#x9;newConnector.ClientID = Client.ElementID&#xA;&#x9;newConnector.SupplierID = Source.ElementID &#xA;&#x9;newConnector.Stereotype = &quot;TMF_SchemaGeneralizesSchema&quot;&#xA;&#x9;newConnector.Update&#xA;end if&#xA;&#xA;end sub&#xA;&#xA; OnDiagramScript&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="909" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}" />
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="Wrappers" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="910" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{41CC735E-AC5F-4f31-9306-5D3945721F31}" />
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;'option explicit&#xA;&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'for some reason all scripts in the database have this value in the column scriptCategory&#xA;Const scriptCategory = &quot;605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F&quot;&#xA;&#xA;Class Script &#xA;&#x9;Private m_Name&#xA;&#x9;Private m_Code&#xA;&#x9;Private m_Group&#xA;&#x9;Private m_Id&#xA;&#x9;Private m_GUID&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  m_Name = &quot;&quot;&#xA;&#x9;  m_Code = &quot;&quot;&#xA;&#x9;  m_Id = &quot;&quot;&#xA;&#x9;  set m_Group = Nothing&#xA;&#x9;End Sub&#xA;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' Code property.&#xA;&#x9;Public Property Get Code&#xA;&#x9;  Code = m_Code&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Code(value)&#xA;&#x9;  m_Code = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Id property.&#xA;&#x9;Public Property Get Id&#xA;&#x9;  Id = m_Id&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Id(value)&#xA;&#x9;  m_Id = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' GUID property.&#xA;&#x9;Public Property Get GUID&#xA;&#x9;  GUID = m_GUID&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GUID(value)&#xA;&#x9;  m_GUID = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Path property.&#xA;&#x9;Public Property Get Path&#xA;&#x9;  Path = getPathFromCode&#xA;&#x9;  if len(Path) &lt; 1 then&#xA;&#x9;&#x9;Path = &quot;\&quot; &amp; me.Group.Name&#xA;&#x9;  end if&#xA;&#x9;End Property&#xA;&#xA;&#x9;' Group property.&#xA;&#x9;Public Property Get Group&#xA;&#x9;  set Group = m_Group&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Group(value)&#xA;&#x9;  set m_Group = value&#xA;&#x9;  'add the script to the group&#xA;&#x9;   m_Group.Scripts.Add me&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' GroupNameInCode property&#xA;&#x9;Public Property Get GroupInNameCode&#xA;&#x9;  GroupInNameCode = getGroupFromCode()&#xA;&#x9;End Property&#xA;&#xA;&#x9;&#xA;&#x9;' Gets all scripts stored in the model&#xA;&#x9;Public function getAllScripts(allGroups)&#xA;&#x9;&#x9;dim resultArray, scriptGroup,row,queryResult&#xA;&#x9;&#x9;set scriptGroup = new scriptGroup&#xA;&#x9;&#x9;set allGroups = scriptGroup.getAllGroups()&#xA;&#x9;&#x9;dim allScripts&#xA;&#x9;&#x9;set allScripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;dim sqlGet&#xA;&#x9;&#x9;sqlGet = &quot;select s.ScriptID, s.Notes, s.Script,ps.Script as SCRIPTGROUP, ps.Notes as GROUPNOTES, ps.ScriptID as GroupID, ps.ScriptName as GroupGUID, s.ScriptName as ScriptGUID &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; from t_script s &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; inner join t_script ps on s.ScriptAuthor = ps.ScriptName &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &quot; where s.notes like '&lt;Script Name=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;        queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim id, notes, code, group, name, groupNotes, groupID, groupGUID, scriptGUID&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray)&#xA;&#x9;&#x9;&#x9;id = resultArray(i,0)&#xA;&#x9;&#x9;&#x9;notes = resultArray(i,1)&#xA;&#x9;&#x9;&#x9;code = resultArray(i,2) &#xA;&#x9;&#x9;&#x9;group = resultArray(i,3)&#xA;&#x9;&#x9;&#x9;groupNotes = resultArray(i,4)&#xA;&#x9;&#x9;&#x9;groupID = resultArray(i,5)&#xA;&#x9;&#x9;&#x9;groupGUID = resultArray(i,6)&#xA;&#x9;&#x9;&#x9;scriptGUID = resultArray(i,7)&#xA;&#x9;&#x9;&#x9;if len(notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'first get or create the group&#xA;&#x9;&#x9;&#x9;&#x9;if allGroups.Exists(groupID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = allGroups(groupID)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Name = group&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Id = groupID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.GUID = groupGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.setGroupTypeFromNotes groupNotes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;allGroups.Add groupID, scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'then make the script&#xA;&#x9;&#x9;&#x9;&#x9;name = getNameFromNotes(notes)&#xA;&#x9;&#x9;&#x9;&#x9;dim script&#xA;&#x9;&#x9;&#x9;&#x9;set script = New Script&#xA;&#x9;&#x9;&#x9;&#x9;script.Id = id&#xA;&#x9;&#x9;&#x9;&#x9;script.Name = name&#xA;&#x9;&#x9;&#x9;&#x9;script.Code = code&#xA;&#x9;&#x9;&#x9;&#x9;script.GUID = scriptGUID&#xA;&#x9;&#x9;&#x9;&#x9;'add the group to the script&#xA;&#x9;&#x9;&#x9;&#x9;script.Group = scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;'add the script to the list&#xA;&#x9;&#x9;&#x9;&#x9;allScripts.Add script&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set getAllScripts = allScripts&#xA;&#x9;End function&#xA;&#x9;&#xA;&#x9;'the notes contain= &lt;Script Name=&quot;MyScriptName&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;&#x9;'so the name is the second part when splitted by double quotes&#xA;&#x9;private function getNameFromNotes(notes)&#xA;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;getNameFromNotes = parts(1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the path is defined in the code as '[path=\directory\subdirectory]&#xA;&#x9;private function getPathFromCode()&#xA;&#x9;&#x9;getPathFromCode = getKeyValue(&quot;path&quot;)&#xA;&#x9;end function&#xA;&#x9;'the Group is defined in the code as '[group=NameOfTheGroup]&#xA;&#x9;public function getGroupFromCode()&#xA;&#x9;&#x9;getGroupFromCode = getKeyValue(&quot;group&quot;)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'the key-value pair is defined in the code as '[keyName=value]&#xA;&#x9;public function getKeyValue(keyName)&#xA;&#x9;&#x9;dim returnValue&#xA;&#x9;&#x9;returnValue = &quot;&quot; 'initialise emtpy&#xA;&#x9;&#x9;dim keyIndicator, startKey, endKey, tempValue&#xA;&#x9;&#x9;keyIndicator = &quot;[&quot; &amp; keyName &amp; &quot;=&quot; &#xA;&#x9;&#x9;startKey = instr(me.Code, keyIndicator) + len(keyIndicator)&#xA;&#x9;&#x9;if startKey &gt; len(keyIndicator) then&#xA;&#x9;&#x9;&#x9;endKey = instr(startKey, me.Code, &quot;]&quot;)&#xA;&#x9;&#x9;&#x9;if endKey &gt; startKey then&#xA;&#x9;&#x9;&#x9;&#x9;tempValue = mid(me.code,startKey, endKey - startKey)&#xA;&#x9;&#x9;&#x9;&#x9;'filter out newline in case someone forgot to add the closing &quot;]&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if instr(tempValue,vbNewLine) = 0 and instr(tempValue,vbLF) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnValue = tempValue&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;getKeyValue = returnValue&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function addGroupToCode()&#xA;&#x9;&#x9;dim groupFromCode&#xA;&#x9;&#x9;groupFromCode = me.getGroupFromCode()&#xA;&#x9;&#x9;if not len(groupFromCode) &gt; 0 then&#xA;&#x9;&#x9;&#x9;'add the group indicator&#xA;&#x9;&#x9;&#x9;me.Code = &quot;'[group=&quot; &amp; me.Group.Name &amp; &quot;]&quot; &amp; vbNewLine &amp; me.Code&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'Insert the script in the database&#xA;&#x9;public sub Create&#xA;&#x9;&#x9;dim sqlInsert&#xA;&#x9;&#x9;sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName, ScriptAuthor, Notes, Script) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Values ('&quot; &amp; scriptCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&quot; &amp; me.Group.GUID &amp; &quot;','&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;','&quot; &amp; escapeSQLString(me.Code) &amp; &quot;')&quot;&#xA;&#x9;&#x9;Repository.Execute sqlInsert&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'update the script in the database&#xA;&#x9;public sub Update&#xA;&#x9;&#x9;dim sqlUpdate&#xA;&#x9;&#x9;sqlUpdate = &quot;update t_script set script = '&quot; &amp; escapeSQLString(me.Code) &amp; &quot;', ScriptAuthor = '&quot; &amp; me.Group.GUID &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;', Notes = '&lt;Script Name=&quot;&quot;&quot; &amp; me.Name &amp; &quot;&quot;&quot; Type=&quot;&quot;Internal&quot;&quot; Language=&quot;&quot;VBScript&quot;&quot;/&gt;' where ScriptName = '&quot; &amp; me.GUID &amp; &quot;'&quot;&#xA;&#x9;&#x9;Session.Output sqlUpdate&#xA;&#x9;&#x9;Repository.Execute sqlUpdate&#xA;&#x9;end sub&#xA;&#x9;&#xA;end Class" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="911" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{D4328F95-DD46-493d-A629-B1A2E2BCF7A9}" />
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Wrappers]&#xA;'[group=Wrappers]&#xA;&#xA;'include all individual scripts in this group&#xA;!INC Wrappers.Script&#xA;!INC Wrappers.ScriptGroup&#xA;'!INC Wrappers.TaggedValue&#xA;'include the util group&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="912" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{C7667985-9405-4a84-B7A0-478D2C7DB659}" />
			<Column name="ScriptAuthor" value="{2FFBDF88-CB18-4bd0-AF39-9090EADFDA14}" />
			<Column name="Notes" value="&lt;Script Name=&quot;ScriptGroup&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Wrappers\Scripting]&#xA;'[group=Wrappers]&#xA;&#xA;&#xA;!INC Utils.Include&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;'constants for group type in database&#xA;Const gtNormal = &quot;NORMAL&quot;, gtProjectBrowser = &quot;PROJBROWSER&quot;, gtDiagram = &quot;DIAGRAM&quot;, gtWorkflow = &quot;WORKFLOW&quot;, _&#xA;  gtSearch = &quot;SEARCH&quot;, gtModelSearch = &quot;MODELSEARCH&quot;, gtContextElement = &quot;CONTEXTELEMENT&quot;, _&#xA;  gtContextPackage = &quot;CONTEXTPACKAGE&quot;, gtContextDiagram = &quot;CONTEXTDIAGRAM&quot;, gtContextLink = &quot;CONTEXTLINK&quot;&#xA;&#xA;'for some reason all groups have this value in column scriptCategory&#xA;Const scriptGroupCategory = &quot;3955A83E-9E54-4810-8053-FACC68CD4782&quot;&#xA;&#xA;Class ScriptGroup &#xA;&#x9;Private m_Id&#xA;&#x9;Private m_GUID&#xA;&#x9;Private m_Name&#xA;&#x9;Private m_GroupType&#xA;&#x9;Private m_Scripts&#xA;&#x9;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  m_Id = &quot;&quot;&#xA;&#x9;  m_Name = &quot;&quot;&#xA;&#x9;  m_GroupType = &quot;&quot;&#xA;&#x9;  set m_Scripts = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' Id property.&#xA;&#x9;Public Property Get Id&#xA;&#x9;  Id = m_Id&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Id(value)&#xA;&#x9;  m_Id = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' GUID property.&#xA;&#x9;Public Property Get GUID&#xA;&#x9;  GUID = m_GUID&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GUID(value)&#xA;&#x9;  m_GUID = value&#xA;&#x9;End Property&#x9;&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#xA;&#x9;' GroupType property.&#xA;&#x9;Public Property Get GroupType&#xA;&#x9;  GroupType = m_GroupType&#xA;&#x9;End Property&#xA;&#x9;Public Property Let GroupType(value)&#xA;&#x9;  m_GroupType = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Scripts property.&#xA;&#x9;Public Property Get Scripts&#xA;&#x9;  set Scripts = m_Scripts&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'the notes contain something like &lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;&#x9;'so the group type is the second part when splitted by double quotes&#xA;&#x9;private function getGroupTypeFromNotes(notes)&#xA;&#x9;&#x9;dim parts&#xA;&#x9;&#x9;parts = split(notes,&quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;getGroupTypeFromNotes = parts(1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'sets the GroupType based on the given notes&#xA;&#x9;public sub setGroupTypeFromNotes(notes)&#xA;&#x9;&#x9;GroupType = getGroupTypeFromNotes(notes)&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;'gets a dictionary of all groups without the scripts&#xA;&#x9;public function getAllGroups()&#xA;&#x9;&#x9;dim allGroups, sqlGet&#xA;&#x9;&#x9;dim queryResult&#xA;&#x9;&#x9;dim resultArray&#xA;&#x9;&#x9;set allGroups = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;sqlGet = &quot;select s.[ScriptID], s.[ScriptName] AS GroupGUID, s.[Notes], s.[Script] as GroupName &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; from t_script s &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&quot; where s.Notes like '&lt;Group Type=&quot; &amp; getWC() &amp; &quot;'&quot;&#xA;&#x9;&#x9;queryResult = Repository.SQLQuery(sqlGet)&#xA;&#x9;&#x9;resultArray = convertQueryResultToArray(queryResult)&#xA;&#x9;&#x9;dim groupId, groupGUID, groupName, notes, scriptGroup&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;For i = LBound(resultArray) To UBound(resultArray)&#xA;&#x9;&#x9;&#x9;groupId = resultArray(i,0)&#xA;&#x9;&#x9;&#x9;groupGUID = resultArray(i,1)&#xA;&#x9;&#x9;&#x9;notes = resultArray(i,2) &#xA;&#x9;&#x9;&#x9;groupName = resultArray(i,3)&#xA;&#x9;&#x9;&#x9;if len(notes) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'first get or create the group&#xA;&#x9;&#x9;&#x9;&#x9;if not allGroups.Exists(groupID) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set scriptGroup = new ScriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Name = groupName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.Id = groupId&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.GUID = groupGUID&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;scriptGroup.setGroupTypeFromNotes notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add the group to the dictionary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;allGroups.Add groupID, scriptGroup&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;set getAllGroups = allGroups&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;'Insert the group in the database&#xA;&#x9;public sub Create&#xA;&#x9;&#x9;dim sqlInsert&#xA;&#x9;&#x9;sqlInsert = &quot;insert into t_script (ScriptCategory, ScriptName,Notes, Script) &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; Values ('&quot; &amp; scriptGroupCategory &amp; &quot;','&quot; &amp; me.GUID &amp; &quot;','&lt;Group Type=&quot;&quot;&quot; &amp; me.GroupType &amp; &quot;&quot;&quot; Notes=&quot;&quot;&quot;&quot;/&gt;','&quot; &amp; me.Name &amp; &quot;')&quot;&#xA;&#x9;&#x9;Repository.Execute sqlInsert&#xA;&#x9;end sub&#xA;&#xA;end Class" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="913" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="Utils" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="914" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{24B8717D-8829-4db3-8403-CC1D276631BC}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;TextFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;!INC Utils.Include&#xA;&#xA;&#xA;Class TextFile&#xA;&#x9;Private m_FullPath&#xA;&#x9;Private m_Contents&#xA;&#x9;Private m_Folder&#xA;&#x9;Private m_FileName&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;  set m_Folder = Nothing&#xA;&#x9;  m_FileName = &quot;&quot;&#xA;&#x9;  m_Contents = &quot;&quot;&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = me.Folder.FullPath &amp; &quot;\&quot; &amp; me.FileName&#xA;&#x9;End Property&#xA;&#x9;public Property Let FullPath(value)&#xA;&#x9;  dim startBackslash&#xA;&#x9;  startBackslash = InstrRev(value, &quot;\&quot;, -1, 1)&#xA;&#x9;  me.Folder.FullPath = left(value, startBackslash -1) 'get everything before the last &quot;\&quot;&#xA;&#x9;  me.FileName = mid(value, startBackslash + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;end Property&#xA;&#x9;&#x9;&#xA;&#x9;' Contents property.&#xA;&#x9;Public Property Get Contents&#xA;&#x9;  Contents = m_Contents&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Contents(value)&#xA;&#x9;  m_Contents = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;' FileNameWithoutExtension property.&#xA;&#x9;Public Property Get FileNameWithoutExtension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  FileNameWithoutExtension = left(me.FileName, startExtension -1) 'get everything before the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;' Extension property.&#xA;&#x9;Public Property Get Extension&#xA;&#x9;  dim startExtension&#xA;&#x9;  startExtension = InstrRev(me.FileName, &quot;.&quot;, -1, 1)&#xA;&#x9;  Extension = mid(me.FileName, startExtension + 1) 'get everything after the last &quot;.&quot;&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' Folder property.&#xA;&#x9;Public Property Get Folder&#xA;&#x9;  if m_Folder is nothing then&#xA;&#x9;&#x9;set m_Folder = new FileSystemFolder&#xA;&#x9;  end if&#xA;&#x9;  set Folder = m_Folder&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Folder(value)&#xA;&#x9;  set m_Folder = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#xA;&#x9;sub Save&#xA;&#x9;&#x9;Dim fso, MyFile&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;'first make sure the directory exists&#xA;&#x9;&#x9;me.Folder.Save&#xA;&#x9;&#x9;'then create file&#xA;&#x9;&#x9;Set MyFile = fso.CreateTextFile(me.FullPath, True)&#xA;&#x9;&#x9;MyFile.Write(Contents)&#xA;&#x9;&#x9;MyFile.close&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;end class&#xA;&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="915" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{6EE713A9-211C-4236-9415-A782E0C4D688}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;XML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="916" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{7186BAAA-A64A-4d3b-A9E1-B5007952E559}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Include&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;!INC Utils.XML&#xA;!INC Utils.SQL&#xA;!INC Utils.FileSystemFolder&#xA;!INC Utils.TextFile&#xA;!INC Utils.ExcelFile&#xA;!INC Utils.Util&#xA;!INC Utils.Model Management Utilities&#xA;'Author: Giu platania&#xA;'Date: 2023-06-15" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="917" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{7496696C-1068-48ea-8095-D2D980702A21}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;SQL&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;'returns the SQL wildcard depending on the type of repository&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'escapes a literal string so it can be inserted using sql&#xA;function escapeSQLString(inputString)&#xA;&#x9;'replace the single quotes with two single quotes for all db types&#xA;&#x9;inputString = replace(inputString, &quot;'&quot;,&quot;''&quot;)&#xA;&#x9;'dbspecifics&#xA;&#x9;select case Repository.RepositoryType&#xA;&#x9;&#x9;case &quot;POSTGRES&quot;&#xA;&#x9;&#x9;&#x9;' replace backslash &quot;\&quot; by double backslash &quot;\\&quot;&#xA;&#x9;&#x9;&#x9;inputString = replace(inputString,&quot;\&quot;,&quot;\\&quot;)&#xA;&#x9;&#x9;case &quot;JET&quot;&#xA;&#x9;&#x9;&#x9;'replace pipe character | by '&amp; chr(124) &amp;'&#xA;&#x9;&#x9;&#x9;inputString = replace(inputString,&quot;|&quot;, &quot;'&amp; chr(124) &amp;'&quot;)&#xA;&#x9;end select&#xA;&#x9;escapeSQLString = inputString&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="918" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{B9D0310B-6ADB-4e32-BC6A-6157EAD659C4}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;FileSystemFolder&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Author: Geert Bellekens&#xA;'Date: 2015-12-07&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Utils.Include&#xA;&#xA;Const ForReading = 1, ForWriting = 2, ForAppending = 8&#xA;Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0&#xA;&#xA;Class FileSystemFolder&#xA;&#x9;Private m_ParentPath&#xA;&#x9;Private m_Name&#xA;&#x9;&#xA;&#x9;' Name property.&#xA;&#x9;Public Property Get Name&#xA;&#x9;  Name = m_Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let Name(value)&#xA;&#x9;  m_Name = value&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' FullPath property.&#xA;&#x9;Public Property Get FullPath&#xA;&#x9;  FullPath = m_ParentPath &amp; &quot;\&quot; &amp; Name&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FullPath(value)&#xA;&#x9;  dim nameStart&#xA;&#x9;  nameStart = InstrRev(value, &quot;\&quot;, -1, 0) &#xA;&#x9;  m_ParentPath = left(value,nameStart -1)&#xA;&#x9;  m_Name = mid(value,NameStart +1)&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'parentFolder&#xA;&#x9;Public Property Get ParentFolder&#xA;&#x9;&#x9;set ParentFolder = nothing&#xA;&#x9;&#x9;if len(m_ParentPath) &gt; 0 and right(m_ParentPath,2) &lt;&gt; &quot;:\&quot; then&#xA;&#x9;&#x9;&#x9;set ParentFolder = new FileSystemFolder&#xA;&#x9;&#x9;&#x9;ParentFolder.FullPath = m_ParentPath&#xA;&#x9;&#x9;end if&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;' TextFiles property&#xA;&#x9;Public Property Get TextFiles&#xA;&#x9;&#x9;dim fso, fsoFolder, files, file, result, v_textFile, ts&#xA;&#x9;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FolderExists(me.FullPath) then&#xA;&#x9;&#x9;&#x9;Set fsoFolder = fso.GetFolder(me.FullPath)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Set files = fsoFolder.Files&#xA;&#x9;&#x9;&#x9;For Each file in files&#xA;&#x9;&#x9;&#x9;&#x9;set v_textFile = new TextFile&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.Folder = me&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.FileName = file.Name&#xA;&#x9;&#x9;&#x9;&#x9;set ts = file.OpenAsTextStream(ForReading, TristateUseDefault)&#xA;&#x9;&#x9;&#x9;&#x9;v_textFile.Contents = ts.ReadAll&#xA;&#x9;&#x9;&#x9;&#x9;ts.Close&#xA;&#x9;&#x9;&#x9;&#x9;result.add v_textFile&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;set TextFiles = result&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;'SubFolders property&#xA;&#x9;public property Get SubFolders&#xA;&#x9;&#x9;Dim fso, result, folders, tempfolder, subfolder&#xA;&#x9;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;Set tempfolder = fso.GetFolder(me.FullPath)&#xA;&#x9;&#x9;Set folders = tempfolder.SubFolders&#xA;&#x9;&#x9;For Each folder in folders&#xA;&#x9;&#x9;&#x9;set subfolder = new FileSystemFolder&#xA;&#x9;&#x9;&#x9;subFolder.FullPath = folder.Path&#xA;&#x9;&#x9;&#x9;result.Add subFolder&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;set SubFolders = result&#xA;&#x9;End Property&#xA;&#x9;&#xA;&#x9;public function getUserSelectedFolder(startPath)&#xA;&#x9;&#x9;dim folder, shell&#xA;&#x9;&#x9;Set shell  = CreateObject( &quot;Shell.Application&quot; )&#xA;&#x9;&#x9;if len(startPath) &gt; O then&#xA;&#x9;&#x9;&#x9;Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0,startPath)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Set folder = shell.BrowseForFolder( 0, &quot;Select Folder&quot;, 0)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not folder is nothing then&#xA;&#x9;&#x9;&#x9;set getUserSelectedFolder = New FileSystemFolder&#xA;&#x9;&#x9;&#x9;getUserSelectedFolder.FullPath = folder.Self.Path &#xA;&#x9;&#x9;&#x9;Session.Output &quot;folder.Self.Path: &quot; &amp; folder.Self.Path&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;set getUserSelectedFolder = Nothing&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public sub Save()&#xA;&#x9;&#x9;Dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;'first check if the path doesn't exist yet&#xA;&#x9;&#x9;if not fso.FolderExists(me.FullPath) and len(me.FullPath) &gt; 1 then&#xA;&#x9;&#x9;&#x9;if not me.ParentFolder is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;me.ParentFolder.Save&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;fso.CreateFolder me.FullPath&#xA;&#x9;&#x9;end if&#xA;&#x9;end sub&#xA;End Class&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="919" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{8836BD08-6166-4f38-A3A9-D32A2C2F97AF}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;ExcelFile&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;&#xA;'Name: ExcelFile&#xA;'Author: Geert Bellekens&#xA;'Purpose: Wrapper script class for Excel files&#xA;'Date: 2017-03-20&#xA;&#xA;!INC Utils.Include&#xA;&#xA;Class ExcelFile&#xA;&#x9;'private variables&#xA;&#x9;Private m_ExcelApp&#xA;&#x9;Private m_FileName&#xA;&#x9;Private m_WorkBook&#xA;&#xA;&#x9;Private Sub Class_Initialize&#xA;&#x9;&#x9;m_FileName = &quot;&quot;&#xA;&#x9;&#x9;set m_ExcelApp = CreateObject(&quot;Excel.Application&quot;)&#xA;&#x9;&#x9;set m_WorkBook = nothing&#xA;&#x9;End Sub&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;' FileName property.&#xA;&#x9;Public Property Get FileName&#xA;&#x9;  FileName = m_FileName&#xA;&#x9;End Property&#xA;&#x9;Public Property Let FileName(value)&#xA;&#x9;  m_FileName = value&#xA;&#x9;End Property&#xA;&#x9;public Property Get worksheets&#xA;&#x9;&#x9;set worksheets = m_WorkBook.Sheets&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;'public operations&#xA;&#x9;'create a tab with the given name. The contents should parameter should be a two dimensional array&#xA;&#x9;public Function createTab(tabName, contents,formatAsTable, tableStyle)&#xA;&#x9;&#x9;'check if the workbook has been created already&#xA;&#x9;&#x9;if m_WorkBook is nothing then&#xA;&#x9;&#x9;&#x9;set m_WorkBook = m_ExcelApp.Workbooks.Add()&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'create the tab at the end&#xA;&#x9;&#x9;Dim ws&#xA;&#x9;&#x9;Set ws = m_WorkBook.Sheets.Add()&#xA;&#x9;&#x9;ws.Name = tabName&#xA;&#x9;&#x9;'fill the contents&#xA;&#x9;&#x9;dim targetRange&#xA;&#x9;&#x9;set targetRange = ws.Range(ws.Cells(1,1), ws.Cells(Ubound(contents,1), Ubound(Contents,2)))&#xA;&#x9;&#x9;targetRange.Value2 = contents&#xA;&#x9;&#x9;'format as table if needed&#xA;&#x9;&#x9;if formatAsTable then&#xA;&#x9;&#x9;&#x9;formatSheetAsTable ws, targetRange, tableStyle&#xA;&#x9;&#x9;end if&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function formatSheetAsTable(worksheet, targetRange, tableStyle)&#xA;&#x9;&#x9;dim table&#xA;&#x9;&#x9;Set table = worksheet.ListObjects.Add(1, targetRange, 1, 1)&#xA;&#x9;&#x9;table.TableStyle = tableStyle&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function getUserSelectedFileName()&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;dim project&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;me.FileName = project.GetFileNameDialog (&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 2 ,&quot;&quot;, 1) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function openUserSelectedFile()&#xA;&#x9;&#x9;dim selectedFileName&#xA;&#x9;&#x9;dim project&#xA;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;me.FileName = project.GetFileNameDialog (&quot;&quot;, &quot;Excel Files|*.xls;*.xlsx;*.xlsm&quot;, 1, 0 ,&quot;&quot;, 0) 'save as with overwrite prompt: OFN_OVERWRITEPROMPT&#xA;&#x9;&#x9;me.Open me.FileName&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function Open(filePath)&#xA;&#x9;&#x9;me.FileName = filePath&#xA;&#x9;&#x9;set m_WorkBook = m_ExcelApp.Workbooks.Open(me.FileName)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getContents(sheet)&#xA;&#x9;&#x9;getContents = sheet.UsedRange.Value2&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public Function save()&#xA;&#x9;&#x9;'make sure we have a filename&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;getUserSelectedFileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'if the file name is still empty then exit&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'Delete the existing file if it exists&#xA;&#x9;&#x9;dim fso&#xA;&#x9;&#x9;Set fso = CreateObject(&quot;Scripting.FileSystemObject&quot;)&#xA;&#x9;&#x9;if fso.FileExists(me.FileName) then&#xA;&#x9;&#x9;&#x9;fso.DeleteFile me.FileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'save the workbook at the given filename&#xA;&#x9;&#x9;m_WorkBook.Saveas me.FileName&#xA;&#x9;&#x9;'make excel visible&#xA;&#x9;&#x9;'m_ExcelApp.visible = True&#xA;&#x9;&#x9;'m_ExcelApp.WindowState = -4137 'xlMaximized&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;Public Function close()&#xA;&#x9;&#x9;If Not m_WorkBook Is Nothing Then&#xA;&#x9;&#x9;&#x9;m_WorkBook.Close False ' Close workbook without saving changes&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;If Not m_ExcelApp Is Nothing Then&#xA;&#x9;&#x9;&#x9;m_ExcelApp.Quit ' Quit Excel application&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;Set m_WorkBook = Nothing&#xA;&#x9;&#x9;Set m_ExcelApp = Nothing&#xA;&#x9;End Function&#xA;&#x9;&#xA;&#x9;&#x9;public Function saveTab()&#xA;&#x9;&#x9;'make sure we have a filename&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;getUserSelectedFileName&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'if the file name is still empty then exit&#xA;&#x9;&#x9;if len(me.FileName) = 0 then&#xA;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'save the workbook at the given filename&#xA;&#x9;&#x9;m_WorkBook.Saveas me.FileName&#xA;&#x9;&#x9;'make excel visible&#xA;&#x9;&#x9;'m_ExcelApp.visible = True&#xA;&#x9;&#x9;'m_ExcelApp.WindowState = -4137 'xlMaximized&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;&#xA;end Class" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="920" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{3B13C1B4-5CF3-4954-9375-31826ACC3A2A}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Util&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="!INC Local Scripts.EAConstants-VBScript&#xA;'[path=\Framework\Utils]&#xA;'[group=Utils]&#xA;'&#xA;' Script Name: Util&#xA;' Author: Geert Bellekens&#xA;' Purpose: serves as library for other scripts&#xA;' Date: 28/09/2015&#xA;'&#xA;' Synchronises the names of the selected objects or BPMN Activities with their classifier/called activity ref.&#xA;' Will also set the composite diagram to that of the classifier/ActivityRef in order to facilitate click-through&#xA;function synchronizeElement (element)&#xA;&#x9;'first check if this is an object or an action&#xA;&#x9;if not element is Nothing then&#xA;&#x9;&#x9;if (element.Type = &quot;Object&quot; OR element.Type = &quot;Action&quot;) _&#xA;&#x9;&#x9;AND element.ClassifierID &gt; 0 then&#xA;&#x9;&#x9;&#x9;dim classifier&#xA;&#x9;&#x9;&#x9;set classifier = Repository.GetElementByID(element.ClassifierID)&#xA;&#x9;&#x9;&#x9;if not classifier is nothing AND classifier.name &lt;&gt; element.name then&#xA;&#x9;&#x9;&#x9;&#x9;element.Name = classifier.Name&#xA;&#x9;&#x9;&#x9;&#x9;element.Stereotype = classifier.Stereotype&#xA;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange(element.ElementID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'elements of type object should also point to the composite diagram of the classifier&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;dim compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;set compositeDiagram = classifier.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;if not compositeDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, compositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; AND element.Stereotype = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'BPMN activities that call another BPMN activity need to get the same name and same composite diagram&#xA;&#x9;&#x9;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set calledActivityTV = element.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;&#x9;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;&#x9;&#x9;set referenceActivityTV = element.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;&#x9;&#x9;if not calledActivityTV is nothing and not referenceActivityTV is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'only do something when the Activity is types a CalledActivity&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;calledActivityTV.Value : &quot; &amp; calledActivityTV.Value &#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;referenceActivityTV.Value :&quot; &amp; referenceActivityTV.Value&#xA;&#x9;&#x9;&#x9;&#x9;if calledActivityTV.Value = &quot;true&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim calledActivity as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set calledActivity = Repository.GetElementByGuid(referenceActivityTV.Value)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not calledActivity is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set name to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Name = calledActivity.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Set composite diagram to that of the called activity&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setCompositeDiagram element, calledActivity.CompositeDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;&#xA;'set the given diagram as composite diagram for this element&#xA;function setCompositeDiagram (element, diagram)&#xA;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;'Tell EA this element is composite&#xA;&#x9;&#x9;dim objectQuery&#xA;&#x9;&#x9;objectQuery = &quot;update t_object set NType = 8 where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;Repository.Execute objectQuery&#xA;&#x9;&#x9;if element.Type = &quot;Object&quot; then&#xA;&#x9;&#x9;&#x9;'Tell EA which diagram is the composite diagram&#xA;&#x9;&#x9;&#x9;dim xrefQuery&#xA;&#x9;&#x9;&#x9;xrefquery = &quot;insert into t_xref (XrefID, Name, Type, Visibility, Partition, Client, Supplier) values ('&quot;&amp;CreateGuid&amp;&quot;', 'DefaultDiagram', 'element property', 'Public', '0', '&quot;&amp; element.ElementGUID &amp; &quot;', '&quot;&amp; diagram.DiagramGUID &amp;&quot;')&quot;&#xA;&#x9;&#x9;&#x9;Repository.Execute xrefquery&#xA;&#x9;&#x9;elseif element.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;'for activities we need to update PDATA1 with the diagramID&#xA;&#x9;&#x9;&#x9;dim updatequery&#xA;&#x9;&#x9;&#x9;updatequery = &quot;update t_object set PDATA1 = &quot;&amp; diagram.DiagramID &amp; &quot; where Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;&#x9;&#x9;Repository.Execute updatequery&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' Returns a unique Guid on every call. Removes any cruft.&#xA;Function CreateGuid()&#xA;    CreateGuid = Left(CreateObject(&quot;Scriptlet.TypeLib&quot;).Guid,38)&#xA;End Function&#xA;&#xA;&#xA;'make an action into a calling activity&#xA;function makeCallingActivity(action, activity)&#xA;&#x9;action.Type = &quot;Activity&quot;&#xA;&#x9;action.ClassfierID = 0&#xA;&#x9;action.Stereotype = &quot;Activity&quot;&#xA;&#x9;action.Update&#xA;&#x9;action.SynchTaggedValues &quot;BPMN2.0&quot;,&quot;Activity&quot;&#xA;&#x9;action.TaggedValues.Refresh&#xA;&#x9;'first copy the tagged values values&#xA;&#x9;copyTaggedValuesValues activity, action&#xA;&#x9;'set tagged values correctly&#xA;&#x9;dim calledActivityTV as EA.TaggedValue&#xA;&#x9;set calledActivityTV = action.TaggedValues.GetByName(&quot;isACalledActivity&quot;)&#xA;&#x9;calledActivityTV.Value = &quot;true&quot;&#xA;&#x9;calledActivityTV.Update&#xA;&#x9;dim referenceActivityTV as EA.TaggedValue&#xA;&#x9;set referenceActivityTV = action.TaggedValues.GetByName(&quot;calledActivityRef&quot;)&#xA;&#x9;referenceActivityTV.Value = activity.ElementGUID&#xA;&#x9;referenceActivityTV.Update&#xA;&#x9;action.TaggedValues.Refresh()&#xA;end function&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function setFontOnDiagramObject(diagramObject, font, size )&#xA;&#x9;dim styleParts&#xA;&#x9;styleParts = Split (diagramObject.Style , &quot;;&quot;) &#xA;&#x9;dim i&#xA;&#x9;dim stylepart&#xA;&#x9;dim fontpart &#xA;&#x9;fontpart = &quot;font=&quot; &amp; font&#xA;&#x9;dim fontSet&#xA;&#x9;fontSet = false&#xA;&#x9;dim sizePart&#xA;&#x9;sizePart = &quot;fontsz=&quot; &amp; size * 10&#xA;&#x9;dim sizeSet&#xA;&#x9;sizeSet = false&#xA;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#x9;&#x9;if Instr(stylepart,&quot;font=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = fontpart&#xA;&#x9;&#x9;&#x9;fontSet = true&#xA;&#x9;&#x9;elseif Instr(stylepart,&quot;fontsz=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;styleParts(i) = sizePart&#xA;&#x9;&#x9;&#x9;sizeSet = true&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;diagramObject.Style = join(styleParts,&quot;;&quot;)&#xA;&#x9;if not fontSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; fontpart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;&#x9;if not sizeSet then&#xA;&#x9;&#x9;diagramObject.Style =  diagramObject.Style &amp; sizePart &amp; &quot;;&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin to the ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;'returns a dictionary of all elements in the query with their name as key, and the element as value.&#xA;'for elements with the same name only one will be returned&#xA;function getElementDictionaryFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if not result.Exists(element.Name) then&#xA;&#x9;&#x9;result.Add element.Name, element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getElementDictionaryFromQuery = result&#xA;end function&#xA;&#xA;'get the package id string of the currently selected package tree&#xA;function getCurrentPackageTreeIDString()&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getCurrentPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;'get selected package&#xA;&#x9;set currentPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;if not currentPackage is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(currentPackage)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getCurrentPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'get the package id string of the given package tree&#xA;function getPackageTreeIDString(package)&#xA;&#x9;'initialize at &quot;0&quot;&#xA;&#x9;getPackageTreeIDString = &quot;0&quot;&#xA;&#x9;dim packageTree&#xA;&#x9;dim currentPackage as EA.Package&#xA;&#x9;if not package is nothing then&#xA;&#x9;&#x9;'get the whole tree of the selected package&#xA;&#x9;&#x9;set packageTree = getPackageTree(package)&#xA;&#x9;&#x9;' get the id string of the tree&#xA;&#x9;&#x9;getPackageTreeIDString = makePackageIDString(packageTree)&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'returns an ArrayList of the given package and all its subpackages recursively&#xA;function getPackageTree(package)&#xA;&#x9;dim packageList&#xA;&#x9;set packageList = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;addPackagesToList package, packageList&#xA;&#x9;set getPackageTree = packageList&#xA;end function&#xA;&#xA;'add the given package and all subPackges to the list (recursively&#xA;function addPackagesToList(package, packageList)&#xA;&#x9;dim subPackage as EA.Package&#xA;&#x9;'add the package itself&#xA;&#x9;packageList.Add package&#xA;&#x9;'add subpackages&#xA;&#x9;for each subPackage in package.Packages&#xA;&#x9;&#x9;addPackagesToList subPackage, packageList&#xA;&#x9;next&#xA;end function&#xA;&#xA;'make an id string out of the package ID of the given packages&#xA;function makePackageIDString(packages)&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each package in packages&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; package.PackageID&#xA;&#x9;next &#xA;&#x9;'if there are no packages then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makePackageIDString = idString&#xA;end function&#xA;&#xA;'make an id string out of the ID's of the given elements&#xA;function makeIDString(elements)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim idString&#xA;&#x9;idString = &quot;&quot;&#xA;&#x9;dim addComma &#xA;&#x9;addComma = false&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;if addComma then&#xA;&#x9;&#x9;&#x9;idString = idString &amp; &quot;,&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;addComma = true&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;idString = idString &amp; element.ElementID&#xA;&#x9;next &#xA;&#x9;'if there are no elements then we return &quot;0&quot;&#xA;&#x9;if idString = &quot;&quot; then&#xA;&#x9;&#x9;idString = &quot;0&quot;&#xA;&#x9;end if&#xA;&#x9;'return idString&#xA;&#x9;makeIDString = idString&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;function getElementsFromDiagram(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagram = selectedElements&#xA;end function&#xA;&#xA;'returns the diagram objects in an ArrayList for elements of the given type from the given diagram&#xA;function getDiagramObjects(diagram, elementType)&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;selectedElements.Add diagramObject&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getDiagramObjects = selectedElements&#xA;end function&#xA;&#xA;'returns the elements in an ArrayList of the given type from the given diagram&#xA;'the boundary element should be passed as a DiagramObject&#xA;function getElementsFromDiagramInBoundary(diagram, elementType,boundary)&#xA;&#x9;'dim boundary as EA.DiagramObject&#xA;&#x9;dim selectedElements&#xA;&#x9;set selectedElements = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;if (diagramObject.left &gt;= boundary.left and _&#xA;&#x9;&#x9;&#x9;diagramObject.left =&lt; boundary.right and _&#xA;&#x9;&#x9;&#x9;diagramObject.top =&lt; boundary.top and _&#xA;&#x9;&#x9;&#x9;diagramObject.top &gt;= boundary.bottom) then&#xA;&#x9;&#x9;&#x9;'get the element and check the type&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;&#x9;if element.Type = elementType then&#xA;&#x9;&#x9;&#x9;&#x9;selectedElements.Add element&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return selected Elements&#xA;&#x9;set getElementsFromDiagramInBoundary = selectedElements&#xA;end function&#xA;&#xA;function getWC()&#xA;&#x9;if Repository.RepositoryType = &quot;JET&quot; then&#xA;&#x9;&#x9;getWC = &quot;*&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;getWC = &quot;%&quot;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim positionString&#xA;&#x9;'determine height and width&#xA;&#x9;dim width &#xA;&#x9;dim height&#xA;&#x9;dim elementType&#xA;&#x9;dim setVPartition &#xA;&#x9;setVPartition = false&#xA;&#x9;elementType = element.Type&#xA;&#x9;select case elementType       &#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#x9;&#x9;case &quot;Package&quot;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 90&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;'default width and height&#x9;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#x9;end select&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#x9;x = x - width/2&#xA;&#x9;'set the position of the diagramObject&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#x9;Session.Output &quot;positionString voor element &quot;&amp; element.Name &amp; &quot; : &quot; &amp;  positionString&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;if setVPartition then&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;end function&#xA;&#xA;'gets the content of the linked document in the given format (TXT, RTF or EA)&#xA;function getLinkedDocumentContent(element, format)&#xA;&#x9;dim linkedDocumentRTF&#xA;&#x9;dim linkedDocumentEA&#xA;&#x9;dim linkedDocumentPlainText&#xA;&#x9;linkedDocumentRTF = element.GetLinkedDocument()&#xA;&#x9;if format = &quot;RTF&quot; then&#xA;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentRTF&#xA;&#x9;else&#xA;&#x9;&#x9;linkedDocumentEA = Repository.GetFieldFromFormat(&quot;RTF&quot;,linkedDocumentRTF)&#xA;&#x9;&#x9;if format = &quot;EA&quot; then&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentEA&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;linkedDocumentPlainText = Repository.GetFormatFromField(&quot;TXT&quot;,linkedDocumentEA)&#xA;&#x9;&#x9;&#x9;getLinkedDocumentContent = linkedDocumentPlainText&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;'returns the currently logged in user&#xA;'if security is not enabled then the logged in user is defaulted to me&#xA;function getUserLogin()&#xA;&#x9;'get the currently logged in user&#xA;&#x9;Dim userLogin&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;userLogin = Repository.GetCurrentLoginUser(false)&#xA;&#x9;else&#xA;&#x9;&#x9;userLogin = &quot;SYSTEMAT-TCC\BellekensG&quot;&#xA;&#x9;end if&#xA;&#x9;getUserLogin = userLogin&#xA;end function&#x9;&#xA;&#xA;&#xA;' This function takes an SQL query as input and returns the result as an array&#xA;function getArrayFromQuery(sqlQuery)&#xA;    dim xmlResult ' Declare a variable to store the result of the SQL query&#xA;    &#xA;    ' Execute the SQL query using the Sparx EA repository object and store the result in xmlResult&#xA;    xmlResult = Repository.SQLQuery(sqlQuery)&#xA;    Repository.WriteOutput &quot;Export eTOM&quot;, xmlResult, 1&#xA;    ' Convert the XML result to an array using the convertQueryResultToArray function&#xA;    ' The convertQueryResultToArray function is assumed to be defined elsewhere in the script&#xA;&#x9;&#xA;    ' It parses the XML result and returns an array containing the query result&#xA;    getArrayFromQuery = convertQueryResultToArray(xmlResult)&#xA;end function&#xA;&#xA;'converts the query results from Repository.SQLQuery from xml format to a two dimensional array of strings&#xA;Public Function convertQueryResultToArray(xmlQueryResult)&#xA;    Dim arrayCreated&#xA;    Dim i &#xA;    i = 0&#xA;    Dim j &#xA;    j = 0&#xA;    Dim result()&#xA;    Dim xDoc &#xA;    Set xDoc = CreateObject( &quot;MSXML2.DOMDocument&quot; )&#xA;    'load the resultset in the xml document&#xA;    If xDoc.LoadXML(xmlQueryResult) Then        &#xA;&#x9;&#x9;'select the rows&#xA;&#x9;&#x9;Dim rowList&#xA;&#x9;&#x9;Set rowList = xDoc.SelectNodes(&quot;//Row&quot;)&#xA;&#xA;&#x9;&#x9;Dim rowNode &#xA;&#x9;&#x9;Dim fieldNode&#xA;&#x9;&#x9;arrayCreated = False&#xA;&#x9;&#x9;'loop rows and find fields&#xA;&#x9;&#x9;For Each rowNode In rowList&#xA;&#x9;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;&#x9;If (rowNode.HasChildNodes) Then&#xA;&#x9;&#x9;&#x9;&#x9;'redim array (only once)&#xA;&#x9;&#x9;&#x9;&#x9;If Not arrayCreated Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReDim result(rowList.Length, rowNode.ChildNodes.Length)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrayCreated = True&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;For Each fieldNode In rowNode.ChildNodes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'write f&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result(i, j) = fieldNode.Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;i = i + 1&#xA;&#x9;&#x9;Next&#xA;&#x9;&#x9;'make sure the array has a dimension even is we don't have any results&#xA;&#x9;&#x9;if not arrayCreated then&#xA;&#x9;&#x9;&#x9;ReDim result(0, 0)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;    convertQueryResultToArray = result&#xA;End Function&#xA;&#xA;' add item to array&#xA;Function AddItem(arr, val)&#xA;    ReDim Preserve arr(UBound(arr) + 1)&#xA;    arr(UBound(arr)) = val&#xA;    AddItem = arr&#xA;End Function&#xA;&#xA;' add a row to the begining of a bi-dim array&#xA;Function AddRowToArray(twoDimArray, appendArray)&#xA;    Dim newHeight, newWidth, i, j, result&#xA;    &#xA;    newHeight = UBound(twoDimArray, 1) + 1&#xA;    newWidth = UBound(twoDimArray, 2)&#xA;    &#xA;    ReDim result(newHeight, newWidth)&#xA;    ' temp change for testing&#xA;    For i = 1 To UBound(twoDimArray, 1)&#xA;        For j = 0 To UBound(twoDimArray, 2)&#xA;&#x9;&#x9;&#x9;' result(i, j) = twoDimArray(i, j)&#xA;            result(i, j) = twoDimArray(i-1, j)&#xA;        Next&#xA;    Next&#xA;    &#xA;    For j = 0 To UBound(appendArray)&#xA;        result(0, j) = appendArray(j)&#xA;    Next&#xA;    &#xA;    AddRowToArray = result&#xA;End Function&#xA;&#xA;'let the user select a package&#xA;function selectPackage()&#xA;&#x9;'start from the selected package in the project browser&#xA;&#x9;dim constructpickerString&#xA;&#x9;constructpickerString = &quot;IncludedTypes=Package&quot;&#xA;&#x9;dim treeselectedPackage as EA.Package&#xA;&#x9;set treeselectedPackage = Repository.GetTreeSelectedPackage()&#xA;&#x9;if not treeselectedPackage is nothing then&#xA;&#x9;&#x9;constructpickerString = constructpickerString &amp;&#x9;&quot;;Selection=&quot; &amp; treeselectedPackage.PackageGUID&#xA;&#x9;end if&#xA;&#x9;dim packageElementID &#x9;&#x9;&#xA;&#x9;packageElementID = Repository.InvokeConstructPicker(constructpickerString) &#xA;&#x9;if packageElementID &gt; 0 then&#xA;&#x9;&#x9;dim packageElement as EA.Element&#xA;&#x9;&#x9;set packageElement = Repository.GetElementByID(packageElementID)&#xA;&#x9;&#x9;dim package as EA.Package&#xA;&#x9;&#x9;set package = Repository.GetPackageByGuid(packageElement.ElementGUID)&#xA;&#x9;else&#xA;&#x9;&#x9;set package = nothing&#xA;&#x9;end if &#xA;&#x9;set selectPackage = package&#xA;end function&#xA;&#xA;function getConnectorsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim connectorIDs&#xA;&#x9;connectorIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim connectors &#xA;&#x9;set connectors = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim connectorID&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;for each connectorID in connectorIDs&#xA;&#x9;&#x9;if connectorID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(connectorID)&#xA;&#x9;&#x9;&#x9;if not connector is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;connectors.Add(connector)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getConnectorsFromQuery = connectors&#xA;end function&#xA;&#xA;function getDiagramsFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim diagramIDs&#xA;&#x9;diagramIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim diagrams &#xA;&#x9;set diagrams = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim diagramID&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;for each diagramID in diagramIDs&#xA;&#x9;&#x9;if diagramID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set diagram = Repository.GetdiagramByID(diagramID)&#xA;&#x9;&#x9;&#x9;if not diagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;diagrams.Add(diagram)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getDiagramsFromQuery = diagrams&#xA;end function&#xA;&#xA;function getattributesFromQuery(sqlQuery)&#xA;&#x9;dim xmlResult&#xA;&#x9;xmlResult = Repository.SQLQuery(sqlQuery)&#xA;&#x9;dim attributeIDs&#xA;&#x9;attributeIDs = convertQueryResultToArray(xmlResult)&#xA;&#x9;dim attributes &#xA;&#x9;set attributes = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim attributeID&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;for each attributeID in attributeIDs&#xA;&#x9;&#x9;if attributeID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set attribute = Repository.GetAttributeByID(attributeID)&#xA;&#x9;&#x9;&#x9;if not attribute is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;attributes.Add(attribute)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;set getattributesFromQuery = attributes&#xA;end function&#xA;&#xA;'get the description from the given notes &#xA;'that is the text between &lt;NL&gt; and &lt;/NL&gt; or &lt;FR&gt; and &lt;/FR&gt;&#xA;function getTagContent(notes, tag)&#xA;&#x9;if tag = &quot;&quot; then&#xA;&#x9;&#x9;getTagContent = notes&#xA;&#x9;else&#xA;&#x9;&#x9;getTagContent = &quot;&quot;&#xA;&#x9;&#x9;dim startTagPosition&#xA;&#x9;&#x9;dim endTagPosition&#xA;&#x9;&#x9;startTagPosition = InStr(notes,&quot;&amp;lt;&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;endTagPosition = InStr(notes,&quot;&amp;lt;/&quot; &amp; tag &amp; &quot;&amp;gt;&quot;)&#xA;&#x9;&#x9;'Session.Output &quot;notes: &quot; &amp; notes &amp; &quot; startTagPosition: &quot; &amp; startTagPosition &amp; &quot; endTagPosition: &quot; &amp;endTagPosition&#xA;&#x9;&#x9;if startTagPosition &gt; 0 and endTagPosition &gt; startTagPosition then&#xA;&#x9;&#x9;&#x9;dim startContent&#xA;&#x9;&#x9;&#x9;startContent = startTagPosition + len(tag) + 8&#xA;&#x9;&#x9;&#x9;dim length &#xA;&#x9;&#x9;&#x9;length = endTagPosition - startContent&#xA;&#x9;&#x9;&#x9;getTagContent = mid(notes, startContent, length)&#xA;&#x9;&#x9;end if&#xA;&#x9;end if &#xA;end function&#xA;&#xA;'Returns the value of the tagged value with the given name (case insensitive)&#xA;'If there is no tagged value with the given name, an empty string is returned&#xA;'This function can be used with anything that can have tagged values&#xA;function getTaggedValueValue(owner, taggedValueName)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;getTaggedValueValue = &quot;&quot;&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if lcase(taggedValueName) = lcase(taggedValue.Name) then&#xA;&#x9;&#x9;&#x9;getTaggedValueValue = taggedValue.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim returnTag as EA.TaggedValue&#xA;&#x9;set returnTag = nothing&#xA;&#x9;'check if a tag with that name alrady exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = tagName then&#xA;&#x9;&#x9;&#x9;set returnTag = taggedValue&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create new one if not found&#xA;&#x9;if returnTag is nothing then&#xA;&#x9;&#x9;set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;function isRequireUserLockEnabled()&#xA;&#x9;dim reqUserLockToEdit&#xA;&#x9;'default is false&#xA;&#x9;reqUserLockToEdit = false&#xA;&#x9;'check if security is enabled&#xA;&#x9;if Repository.IsSecurityEnabled then&#xA;&#x9;&#x9;dim getReqUserLockSQL&#xA;&#x9;&#x9;getReqUserLockSQL =&#x9;&quot;select sc.Value from t_secpolicies sc &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;where sc.Property = 'RequireLock' &quot;&#xA;&#x9;&#x9;dim xmlQueryResult&#xA;&#x9;&#x9;xmlQueryResult = Repository.SQLQuery(getReqUserLockSQL)&#xA;&#x9;&#x9;dim reqUserLockResults&#xA;&#x9;&#x9;reqUserLockResults = convertQueryResultToArray(xmlQueryResult)&#xA;&#x9;&#x9;if Ubound(reqUserLockResults) &gt; 0 then&#xA;&#x9;&#x9;&#x9;if reqUserLockResults(0,0) = &quot;1&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;reqUserLockToEdit = true&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;isRequireUserLockEnabled = reqUserLockToEdit&#xA;end function&#xA;&#xA;function copyDiagram(diagram, targetOwner)&#xA;&#x9;dim copiedDiagram as EA.Diagram&#xA;&#x9;'initialize at nothing&#xA;&#x9;set copiedDiagram = nothing&#xA;&#x9;'get the owner package&#xA;&#x9;dim ownerPackage as EA.Package&#xA;&#x9;set ownerPackage = Repository.GetPackageByID(diagram.PackageID)&#xA;&#x9;'check if we need to lock the package to clone it&#xA;&#x9;if isRequireUserLockEnabled() then&#xA;&#x9;&#x9;dim ownerOfOwnerPackage as EA.Package&#xA;&#x9;&#x9;if ownerPackage.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;set ownerOfOwnerPackage = Repository.GetPackageByID(ownerPackage.ParentID)&#xA;&#x9;&#x9;&#x9;if not ownerOfOwnerPackage.ApplyUserLock() then&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we couldn't do it and then exit the function&#xA;&#x9;&#x9;&#x9;&#x9;msgbox &quot;Could not lock package &quot; &amp;  ownerPackage.Name &amp; &quot; in order to copy the diagram &quot; &amp; diagram.Name,vbError,&quot;Could not lock Package&quot;&#xA;&#x9;&#x9;&#x9;&#x9;exit function&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;'then actually clone the owner package&#xA;&#x9;dim clonedPackage as EA.Package&#xA;&#x9;set clonedPackage = ownerPackage.Clone()&#xA;'&#x9;if isRequireUserLockEnabled() then&#xA;'&#x9;&#x9;clonedPackage.ApplyUserLockRecursive true,true,true&#xA;'&#x9;end if&#xA;&#x9;'then get the diagram corresponding to the diagram to copy&#xA;&#x9;set copiedDiagram = getCorrespondingDiagram(clonedPackage,diagram)&#xA;&#x9;'set the owner of the copied diagram&#xA;&#x9;if targetOwner.ObjectType = otElement then&#xA;&#x9;&#x9;copiedDiagram.ParentID = targetOwner.ElementID&#xA;&#x9;else&#xA;&#x9;&#x9;copiedDiagram.PackageID = targetOwner.PackageID&#xA;&#x9;end if&#xA;&#x9;'save the update to the owner&#xA;&#x9;copiedDiagram.Update&#xA;&#x9;'delete the cloned package&#xA;&#x9;deletePackage(clonedPackage)&#xA;&#x9;'return the copied diagram&#xA;&#x9;set copyDiagram = copiedDiagram&#xA;end function&#xA;&#xA;function deletePackage(package)&#xA;&#x9;if package.ParentID &gt; 0 then&#xA;&#x9;&#x9;'get parent package&#xA;&#x9;&#x9;dim parentPackage as EA.Package&#xA;&#x9;&#x9;set parentPackage = Repository.GetPackageByID(package.ParentID )&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;'delete the pacakge&#xA;&#x9;&#x9;for i = parentPackage.Packages.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set currentPackage = parentPackage.Packages(i)&#xA;&#x9;&#x9;&#x9;if currentPackage.PackageID = package.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;parentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getCorrespondingDiagram(clonedPackage,diagram)&#xA;&#x9;dim correspondingDiagram as EA.Diagram&#xA;&#x9;dim candidateDiagrams&#xA;&#x9;dim getCandidateDiagramsSQL&#xA;&#x9;dim packageIDs&#xA;&#x9;packageIDs = getPackageTreeIDString(clonedPackage)&#xA;&#x9;getCandidateDiagramsSQL = &#x9;&quot;select d.Diagram_ID from t_diagram d &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; where d.name = '&quot; &amp; diagram.Name &amp; &quot;' &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; and d.Package_ID in (&quot; &amp; packageIDs&amp; &quot;) &quot;&#xA;&#x9;set candidateDiagrams = getDiagramsFromQuery(getCandidateDiagramsSQL)&#xA;&#x9;'if there is only one candidate then that is the one we take&#xA;&#x9;if candidateDiagrams.Count = 1 then&#xA;&#x9;&#x9;set correspondingDiagram = candidateDiagrams(0)&#xA;&#x9;end if&#xA;&#x9;'if there are multiple candidates then we have to filter them&#xA;&#x9;'first create a dictionary with the diagrams and their owner&#xA;&#x9;dim candidateDiagramsDictionary&#xA;&#x9;set candidateDiagramsDictionary = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;dim currentDiagram&#xA;&#x9;for each currentDiagram in candidateDiagrams&#xA;&#x9;&#x9;'add the diagram and its owner to the dictionary&#xA;&#x9;&#x9;candidateDiagramsDictionary.Add currentDiagram, getOwner(diagram)&#xA;&#x9;next&#xA;&#x9;dim currentowner&#xA;&#x9;set currentOwner = nothing&#xA;&#x9;'filter the diagrams until we have only one diagram left&#xA;&#x9;set correspondingDiagram = filterDiagrams(candidateDiagramsDictionary,diagram, clonedPackage, currentOwner)&#xA;&#x9;'return the diagram&#xA;&#x9;set getCorrespondingDiagram = correspondingDiagram&#xA;end function&#xA;&#xA;function filterDiagrams(candidateDiagramsDictionary,diagram, clonedPackage, currentOwner)&#xA;&#x9;dim filteredDiagrams&#xA;&#x9;dim filteredDiagram as EA.Diagram&#xA;&#x9;'initialize at nothing&#xA;&#x9;set filteredDiagram = nothing&#xA;&#x9;set filteredDiagrams = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;if currentOwner is nothing then&#xA;&#x9;&#x9;set currentOwner = getOwner(diagram)&#xA;&#x9;end if&#xA;&#x9;'compare the diagrams and their owner with the current owner&#xA;&#x9;dim candidateDiagram as EA.Diagram&#xA;&#x9;dim candidateOwner&#xA;&#x9;for each candidateDiagram in candidateDiagramsDictionary.Keys&#xA;&#x9;&#x9;set candidateOwner = candidateDiagramsDictionary(candidateDiagram)&#xA;&#x9;&#x9;if candidateOwner.Name = currentOwner.Name then&#xA;&#x9;&#x9;&#x9;'add the diagram to the new list &#xA;&#x9;&#x9;&#x9;filteredDiagrams.Add candidateDiagram, getOwner(candidateOwner)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'check the number if we have reached he level of the cloned package, or if there is only one diagram left&#xA;&#x9;if filteredDiagrams.Count = 1 _&#xA;&#x9;OR currentOwner.ObjectType = otPackage AND currentOwner.ParentID = clonedPackage.PackageID then&#xA;&#x9;&#x9;'return the first one&#xA;&#x9;&#x9;set filteredDiagram = filteredDiagrams.Keys()(0)&#xA;&#x9;else&#xA;&#x9;&#x9;'go one level deeper to filter the diagrams&#xA;&#x9;&#x9;set currentOwner = getOwner(currentOwner)&#xA;&#x9;&#x9;set filteredDiagram = filterDiagrams(filteredDiagrams,diagram, clonedPackage, currentOwner)&#xA;&#x9;end if&#xA;&#x9;'return filtered diagram&#xA;&#x9;set filterDiagrams = filteredDiagram&#xA;end function&#xA;&#xA;function getOwner(item)&#xA;&#x9;dim owner&#xA;&#x9;select case item.ObjectType&#xA;&#x9;&#x9;case otElement,otDiagram,otPackage&#xA;&#x9;&#x9;&#x9;'if it has an element as owner then we return the element&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if item.ObjectType &lt;&gt; otPackage then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else we return the package (not for packages because then we have a root package that doesn't have an owner)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;'TODO: add other cases such as attributes and operations&#xA;&#x9;end select&#xA;&#x9;'return owner&#xA;&#x9;set getOwner = owner&#xA;end function&#xA;&#xA;Function lpad(strInput, length, character)&#xA;  lpad = Right(String(length, character) &amp; strInput, length)&#xA;end function&#xA;&#xA;function makeArrayFromArrayLists(arrayLists)&#xA;&#x9;dim returnArray()&#xA;&#x9;'get the dimensions&#xA;&#x9;dim x&#xA;&#x9;dim y&#xA;&#x9;x = arrayLists.Count&#xA;&#x9;y = arrayLists(0).Count&#xA;&#x9;'redim the array to the correct dimensions&#xA;&#x9;redim returnArray(x,y)&#xA;&#x9;dim i,j&#xA;&#x9;i = 0&#xA;&#x9;dim row&#xA;&#x9;dim field&#xA;&#x9;for each row in arrayLists&#xA;&#x9;&#x9;'reset j&#xA;&#x9;&#x9;j = 0&#xA;&#x9;&#x9;for each field in row&#xA;&#x9;&#x9;&#x9;if IsObject(field) then&#xA;&#x9;&#x9;&#x9;&#x9;set returnArray(i,j) = field&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;returnArray(i,j) = field&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;j = j + 1&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;i = i + 1&#xA;&#x9;next&#xA;&#x9;'return the array&#xA;&#x9;makeArrayFromArrayLists = returnArray&#xA;end function&#xA;&#xA;'EA uses a lot of key=value pairs in different types of fields (such as StyleEx etc.)&#xA;' each of them separated by a &quot;;&quot;&#xA;' this function will search for the value of the key and return the value if it is present in the given search string&#xA;function getValueForkey(searchString, key)&#xA;&#x9;dim returnValue&#xA;&#x9;returnValue = &quot;&quot;&#xA;&#x9;'first split int keyvalue pairs using &quot;;&quot;&#xA;&#x9;dim keyValuePairs&#xA;&#x9;keyValuePairs = split(searchString,&quot;;&quot;)&#xA;&#x9;'then loop the key value pairs&#xA;&#x9;dim keyValuePairString&#xA;&#x9;for each keyValuePairString in keyValuePairs&#xA;&#x9;&#x9;'and split them usign &quot;=&quot; as delimiter&#xA;&#x9;&#x9;dim keyValuePair&#xA;&#x9;&#x9;if instr(keyValuePairString,&quot;=&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;keyValuePair = split(keyValuePairString,&quot;=&quot;)&#xA;&#x9;&#x9;&#x9;if UBound(keyValuePair) = 2 then&#xA;&#x9;&#x9;&#x9;&#x9;if keyValuePair(1) = key then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnValue = keyValuePair(1)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'return the value&#xA;&#x9;getValueForkey = returnValue&#xA;end function&#xA;&#xA;function copyDiagram(diagram, targetOwner)&#xA;&#x9;if targetOwner.Objecttype = otPackage then&#xA;&#x9;&#x9;'create the new diagram&#xA;&#x9;&#x9;dim copiedDiagram as EA.Diagram&#xA;&#x9;&#x9;set copiedDiagram = targetOwner.Diagrams.AddNew(diagram.Name, diagram.Type)&#xA;&#x9;&#x9;copiedDiagram.Stereotype = diagram.Stereotype&#xA;&#x9;&#x9;copiedDiagram.StyleEx = diagram.StyleEx&#xA;&#x9;&#x9;copiedDiagram.Notes = diagram.Notes&#xA;&#x9;&#x9;copiedDiagram.ExtendedStyle = diagram.ExtendedStyle&#xA;&#x9;&#x9;copiedDiagram.ShowDetails = diagram.ShowDetails&#xA;&#x9;&#x9;copiedDiagram.ShowPackageContents = diagram.ShowPackageContents&#xA;&#x9;&#x9;copiedDiagram.Version = diagram.Version&#xA;&#x9;&#x9;copiedDiagram.Update 'hopefully this is enough&#xA;&#x9;&#x9;'recreate all diagramObjects&#xA;&#x9;&#x9;copyDiagramObjects copiedDiagram, diagram&#xA;&#x9;&#x9;'recreate all diagramLinks&#xA;&#x9;&#x9;copyDiagramLinks copiedDiagram, diagram&#xA;&#x9;else&#xA;&#x9;&#x9;msgbox &quot;copy diagram currently only supported for copying to packages&quot;&#xA;&#x9;end if&#xA;&#x9;'do we need to save the diagram here?&#xA;&#x9;'diagram.Update&#xA;&#x9;'return diagram&#xA;&#x9;set copyDiagram = copiedDiagram&#xA;end function &#xA;&#xA;function copyDiagramObjects(copiedDiagram, diagram)&#xA;&#x9;dim currentElement as EA.Element&#xA;&#x9;dim currentDiagramObject as EA.DiagramObject&#xA;&#x9;dim targetPackage as EA.Element&#xA;&#x9;set targetPackage = Repository.GetPackageByID(copiedDiagram.PackageID)&#xA;&#x9;for each currentDiagramObject in diagram.DiagramObjects&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentDiagramObject.ElementID)&#xA;&#x9;&#x9;'in case of diagram owned objects we need to copy them as well&#xA;&#x9;&#x9;select case currentElement.Type&#xA;&#x9;&#x9;&#x9;case &quot;Note&quot;,&quot;Boundary&quot;,&quot;Text&quot;&#xA;&#x9;&#x9;&#x9;set currentElement = copyOwnedElement(currentElement,targetPackage)&#xA;&#x9;&#x9;end select&#xA;&#x9;&#x9;'copy the diagram object&#xA;&#x9;&#x9;dim newDiagramObject as EA.DiagramObject&#xA;&#x9;&#x9;set newDiagramObject = copiedDiagram.DiagramObjects.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;newDiagramObject.ElementID = currentDiagramObject.ElementID&#xA;&#x9;&#x9;newDiagramObject.top = currentDiagramObject.top&#xA;&#x9;&#x9;newDiagramObject.bottom = currentDiagramObject.bottom&#xA;&#x9;&#x9;newDiagramObject.left = currentDiagramObject.left&#xA;&#x9;&#x9;newDiagramObject.right = currentDiagramObject.right&#xA;&#x9;&#x9;newDiagramObject.fontSize = currentDiagramObject.fontSize&#xA;&#x9;&#x9;newDiagramObject.fontName = currentDiagramObject.fontName&#xA;&#x9;&#x9;newDiagramObject.FontBold = currentDiagramObject.FontBold&#xA;&#x9;&#x9;newDiagramObject.FontColor = currentDiagramObject.FontColor&#xA;&#x9;&#x9;newDiagramObject.FontItalic = currentDiagramObject.FontItalic&#xA;&#x9;&#x9;newDiagramObject.FontUnderline = currentDiagramObject.FontUnderline&#xA;&#x9;&#x9;newDiagramObject.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function copyDiagramLinks(copiedDiagram, diagram)&#xA;&#x9;dim currentDiagramLink as EA.DiagramLink&#xA;&#x9;for each currentDiagramLink in diagram.DiagramLinks&#xA;&#x9;&#x9;'copy each diagram link&#xA;&#x9;&#x9;dim newDiagramLink as EA.DiagramLink&#xA;&#x9;&#x9;set newDiagramLink = copiedDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;newDiagramLink.ConnectorID = currentDiagramLink.ConnectorID&#xA;&#x9;&#x9;newDiagramLink.Geometry = currentDiagramLink.Geometry&#xA;&#x9;&#x9;newDiagramLink.IsHidden = currentDiagramLink.IsHidden&#xA;&#x9;&#x9;newDiagramLink.LineStyle = currentDiagramLink.LineStyle&#xA;&#x9;&#x9;newDiagramLink.LineColor = currentDiagramLink.LineColor&#xA;&#x9;&#x9;newDiagramLink.LineWidth = currentDiagramLink.LineWidth&#xA;&#x9;&#x9;newDiagramLink.Path = currentDiagramLink.Path&#xA;&#x9;&#x9;newDiagramLink.HiddenLabels = currentDiagramLink.HiddenLabels&#xA;&#x9;&#x9;newDiagramLink.Update&#xA;&#x9;next&#xA;end function&#xA;&#xA;function copyOwnedElement(currentElement, targetPackage)&#xA;&#x9;dim newOwnedElement as EA.Element&#xA;&#x9;set newOwnedElement = targetPackage.Elements.AddNew(currentElement.Name,currentElement.Type)&#xA;&#x9;newOwnedElement.Notes = currentElement.Notes&#xA;&#x9;newOwnedElement.Subtype = currentElement.Subtype&#xA;&#x9;newOwnedElement.StyleEx = currentElement.StyleEx&#xA;&#x9;newOwnedElement.Alias = currentElement.Alias&#xA;&#x9;newOwnedElement.Update 'hopefully this is enough&#xA;&#x9;'return the object&#xA;&#x9;set copyOwnedElement = newOwnedElement&#xA;end function&#xA;&#xA;function deletePackage(package)&#xA;&#x9;if package.ParentID &gt; 0 then&#xA;&#x9;&#x9;'get parent package&#xA;&#x9;&#x9;dim parentPackage as EA.Package&#xA;&#x9;&#x9;set parentPackage = Repository.GetPackageByID(package.ParentID )&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;'delete the pacakge&#xA;&#x9;&#x9;for i = parentPackage.Packages.Count -1 to 0 step -1&#xA;&#x9;&#x9;&#x9;dim currentPackage as EA.Package&#xA;&#x9;&#x9;&#x9;set currentPackage = parentPackage.Packages(i)&#xA;&#x9;&#x9;&#x9;if currentPackage.PackageID = package.PackageID then&#xA;&#x9;&#x9;&#x9;&#x9;parentPackage.Packages.DeleteAt i,false&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function getOwner(item)&#xA;&#x9;dim owner&#xA;&#x9;select case item.ObjectType&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;case otElement,otDiagram&#xA;&#x9;&#x9;&#x9;'if it has an element as owner then we return the element&#xA;&#x9;&#x9;&#x9;if item.ParentID &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetElementByID(item.ParentID)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if item.ObjectType &lt;&gt; otPackage then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'else we return the package (not for packages because then we have a root package that doesn't have an owner)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set owner = Repository.GetPackageByID(item.PackageID)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;'TODO: add other cases such as attributes and operations&#xA;&#x9;end select&#xA;&#x9;'return owner&#xA;&#x9;set getOwner = owner&#xA;end function&#xA;&#xA;&#xA;'put the given value onto the clipboard&#xA;function putOnClipBoard(stringValue)&#xA;&#x9;dim WshShell&#xA;&#x9;Set WshShell = CreateObject(&quot;WScript.Shell&quot;)&#xA;&#x9;WshShell.Run &quot;cmd.exe /c echo &quot; &amp; stringValue &amp; &quot; | clip&quot;, 0, TRUE&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="924" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{7E49DCA9-5DBB-4f46-8AA5-2942EEFE6BEB}" />
			<Column name="ScriptAuthor" value="{4A545AC7-2602-4ec4-AE91-4F387CFEF31A}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Model Management Utilities&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;" />
			<Column name="Script" value="' Original Model Management Utility&#xA;' Purpose: General manipolation of model elements&#xA;' Last Update: 2023-06-26&#xA;&#xA;'******************************************&#xA;'CONNECTORS&#xA;'******************************************&#xA;&#xA;' returns the first related element on a list&#xA;function getRelatedSupplierElement( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement = nothing&#xA;&#x9;end if&#xA;end function&#xA;&#xA;' returns the first related element on a list by element, connector.MetaType, connector.Stereotype, relatedElement.MetaType, related.ElementStereotype&#xA;function getRelatedSupplierElement2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedSupplierElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedSupplierElement2 = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;' returns a list of related elements&#xA;function getRelatedSupplierElementList( element, connectorMetaType, relatedElementMetaType)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#xA;&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;'Session.Output element.Name &amp; &quot; element.Connectors.Count = &quot; &amp; element.Connectors.Count&#xA;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;'Session.Output &quot;connector.Type = &quot; &amp; connector.Type&#xA;&#x9;&#x9;'Session.Output &quot;connector.MetaType = &quot; &amp; connector.MetaType&#xA;&#x9;&#xA;&#x9;&#x9;if connector.MetaType = connectorMetaType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElementID        = &quot; &amp; relatedElementID&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.Name     = &quot; &amp; relatedElement.Name&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;relatedElement.MetaType = &quot; &amp; relatedElement.MetaType&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.MetaType = relatedElementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList = relatedElementList&#xA;&#x9;&#xA;end function&#xA;&#xA;' returns a list of related elements by by element, connector.MetaType, connector.Stereotype, relatedElement.MetaType, related.ElementStereotype&#xA;function getRelatedSupplierElementList2( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;if connector.Type = connectorType then&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedSupplierElementList2 = relatedElementList&#x9;&#xA;end function&#xA;&#xA;&#xA;''getRelatedElement, aims to retrieve a specific related element from a given element &#xA;'' based on a certain relationship defined by connector type and stereotype, &#xA;'' and the meta-type and stereotype of the related element&#xA;function getRelatedElement( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#xA;&#xA;&#x9;dim relatedElementList  ' as Scripting.Dictionary&#xA;&#x9;dim relatedElementArray ' as Element()&#x9;&#xA;&#x9;set relatedElementList = getRelatedElementList2( element, connectorMetaType, connectorStereotype, relatedElementMetaType, relatedElementStereotype)&#x9;&#xA;&#x9;if relatedElementList.Count &gt; 0 then&#xA;&#x9;&#x9;relatedElementArray = relatedElementList.Items&#xA;&#x9;&#x9;set getRelatedElement = relatedElementArray(0)&#xA;&#x9;else&#xA;&#x9;&#x9;set getRelatedElement = nothing&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;function getRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.ElementGUID, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;' returns a list of elements sorted by name&#xA;function getSortedRelatedElementList( element, connectorType, connectorStereotype, relatedElementType, relatedElementStereotype)&#xA;&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim relatedElementList &#xA;&#x9;dim relatedElementID&#xA;&#x9;dim relatedElement as EA.Element&#x9;&#xA;&#x9;set relatedElementList = CreateObject( &quot;System.Collections.SortedList&quot;)&#xA;&#x9;&#xA;&#x9;for each connector in element.Connectors&#x9;&#xA;&#x9;&#x9;if connector.Type = connectorType then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if IsNull(connectorStereotype) or connector.Stereotype = connectorStereotype then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if connector.ClientID = element.ElementID then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.SupplierID&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementID = connector.ClientID&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set relatedElement = Repository.GetElementByID(relatedElementID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if relatedElement.Type = relatedElementType then&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if IsNull( relatedElementStereotype) or relatedElement.Stereotype = relatedElementStereotype then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;relatedElementList.Add relatedElement.Name, relatedElement&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#x9;&#xA;&#x9;set getSortedRelatedElementList = relatedElementList&#x9;&#xA;end function&#xA;&#xA;&#xA;'add a connector of connType, connStereotype to 2 elements&#xA;' use addConnectorMDG fpr stereotyped connectors part of a MDG&#xA;function addConnector( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#x9;&#xA;&#x9;Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#x9;&#xA;&#x9;newConnector.Stereotype = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#x9;&#xA;&#x9;newConnector.Update&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#x9;set addConnector = newConnector&#x9;&#xA;end function&#xA;&#xA;'add a MDG stereotyped connector , connStereotype to 2 elements&#xA;function addConnectorMDG( fromElement, connType, connStereotype, toElement)&#xA;&#xA;&#x9;dim newConnector as EA.Connector&#x9;&#xA;&#x9;Session.Output &quot;- Creating new &quot; &amp; connStereotype &amp; &quot; &quot; &amp; connType &amp; &quot; relationship from &quot; &amp; fromElement.Name &amp; &quot; to &quot; &amp; toElement.Name &amp; &quot;...&quot;&#x9;&#xA;&#x9;set newConnector = fromElement.Connectors.AddNew(&quot;&quot;, connType)&#x9;&#xA;&#x9;newConnector.StereotypeEx  = connStereotype&#xA;&#x9;newConnector.SupplierID = toElement.ElementID&#x9;&#xA;&#x9;newConnector.Update&#x9;&#xA;&#x9;fromElement.Connectors.Refresh&#xA;&#x9;set addConnectorMDG = newConnector&#x9;&#xA;end function&#xA;&#xA;'******************************************&#xA;'Elements&#xA;'******************************************&#xA;&#xA;' Search for an object by name, stereotype and Type and returns the first in the list&#xA;function lookupElement(lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#xA;&#x9;sqlString = &quot;SELECT ea_guid FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_object.Name = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;end function&#xA;&#xA;'returns an ArrayList with the elements accordin tot he ObjectID's in the given query&#xA;function getElementsFromQuery(sqlQuery)&#xA;&#x9;dim elements &#xA;&#x9;set elements = Repository.GetElementSet(sqlQuery,2)&#xA;&#x9;dim result&#xA;&#x9;set result = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;dim element&#xA;&#x9;for each element in elements&#xA;&#x9;&#x9;result.Add Element&#xA;&#x9;next&#xA;&#x9;set getElementsFromQuery = result&#xA;end function&#xA;&#xA;' Delete an element&#xA;sub deleteElement( elementToDelete)&#xA;&#x9;dim packageID&#x9;  ' as Integer&#xA;&#x9;dim package &#x9;&#x9;as EA.Package&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementIndex  ' as Integer&#xA;&#xA;&#x9;packageID = elementToDelete.PackageID&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#xA;&#x9;elementIndex = 0&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.ElementID = elementToDelete.ElementID then&#xA;&#x9;&#x9;&#x9;package.Elements.Delete(elementIndex)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;elementIndex = elementIndex + 1&#xA;&#x9;next&#xA;&#x9;package.Elements.Refresh&#xA;&#x9;&#xA;end sub&#xA;&#xA;'******************************************&#xA;' Method&#xA;'******************************************&#xA;&#xA;' Method&#xA;&#xA;function CreateOperation (element, methodName, methodStereotype)&#xA;dim i&#x9;&#x9;&#x9;'as string&#xA;&#xA;dim listOp &#x9;&#x9;as EA.Method&#xA;'dim listParam&#x9;as EA.Parameter&#xA;dim retreiveOp&#x9;as EA.Method&#xA;dim retreiveParam as EA.Parameter&#xA;dim createOp&#x9;as EA.Method&#xA;dim createParam&#x9;as EA.Parameter&#xA;dim patchOp&#x9;&#x9;as EA.Method&#xA;dim patchParam&#x9;as EA.Parameter&#xA;dim deleteOp &#x9;as EA.Method&#xA;dim deleteParam&#x9;as EA.Parameter&#xA;&#xA;' check if operation already exists&#xA;for each listOp in element.Methods&#xA;if listOp.Name = &quot;List&quot; &amp; methodName.name then&#xA;&#x9; i = 1&#xA;&#x9;Session.Output &quot;Duplicate found (List Operation)&quot;&#xA;end if &#xA;next &#xA;if i = 0 then&#xA;' create List Operation with name, and stereotype&#xA; set listOp = element.Methods.AddNew (&quot;List&quot; &amp; methodName.name, methodName.name)&#xA; listOp.StereotypeEx = methodStereotype&#xA; listOp.Name = &quot;List&quot; &amp; methodName.name&#xA; listOp.ClassifierID = methodName.ElementID&#xA; ' update method&#xA; listOp.Update&#xA; ' set Tagged Value&#xA;setTaggedValueValue2 listOp, &quot;hTTPMethod&quot;, &quot;get&quot;&#xA;setTaggedValueValue2 listOp, &quot;tags&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 listOp, &quot;summary&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 listOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;'' set Parameters&#xA;' set listParam = listOp.Parameters.AddNew (methodName.name, methodName.name)&#xA;' listParam.ClassifierID = methodName.ElementID&#xA;' listParam.Update&#xA;' listOp.Parameters.Refresh&#xA;end if&#xA;i = 0&#xA;&#xA;' check if operation already exists&#xA;for each retreiveOp in element.Methods&#xA;if retreiveOp.Name = &quot;Retreive&quot; &amp; methodName.name then&#xA;&#x9; i = 1&#xA;&#x9;Session.Output &quot;Duplicate found (Retreive Operation)&quot;&#xA;end if &#xA;next &#xA;if i = 0 then&#xA;' create Retreive Operation with name, and stereotype&#xA;set retreiveOp = element.Methods.AddNew (&quot;Retreive&quot; &amp; methodName.name, methodName.name)&#xA; retreiveOp.StereotypeEx = methodStereotype&#xA; retreiveOp.Name = &quot;Retreive&quot; &amp; methodName.name&#xA;  retreiveOp.ClassifierID = methodName.ElementID&#xA; ' update method&#xA; retreiveOp.Update&#xA; ' set tagged value&#xA; setTaggedValueValue2 retreiveOp, &quot;hTTPMethod&quot;, &quot;get&quot;&#xA;setTaggedValueValue2 retreiveOp, &quot;tags&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 retreiveOp, &quot;summary&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 retreiveOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA; ' set parameter&#xA; set retreiveParam = retreiveOp.Parameters.AddNew (&quot;ID&quot;, &quot;string&quot;)&#xA; retreiveParam.Update&#xA; retreiveOp.Parameters.Refresh&#xA;end if&#xA;i = 0 &#xA;&#xA;' check if operation already exists&#xA;for each createOp in element.Methods&#xA;if createOp.Name = &quot;Create&quot; &amp; methodName.name then&#xA;&#x9; i = 1&#xA;&#x9;Session.Output &quot;Duplicate found (Create Operation)&quot;&#xA;end if &#xA;next &#xA;if i = 0 then&#xA;' create Create Operation with name, and stereotype&#xA; &#x9;set createOp = element.Methods.AddNew (&quot;Create&quot; &amp; methodName.name, methodName.name)&#xA; createOp.StereotypeEx = methodStereotype &#xA; createOp.Name = &quot;Create&quot; &amp; methodName.name&#xA; createOp.ClassifierID = methodName.ElementID&#xA; ' update method&#xA; createOp.Update&#xA; ' set Tagged Value&#xA; setTaggedValueValue2 createOp, &quot;hTTPMethod&quot;, &quot;post&quot;&#xA;setTaggedValueValue2 createOp, &quot;tags&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 createOp, &quot;summary&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 createOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA; ' set parameter&#xA; set createParam = createOp.Parameters.AddNew (methodName.name, methodName.name)&#xA; createParam.ClassifierID = methodName.ElementID&#xA; createParam.update&#xA; createOp.Parameters.Refresh&#xA;&#xA;end if&#xA;i = 0&#xA;&#xA;' check if operation already exists&#xA;for each patchOp in element.Methods&#xA;if patchOp.Name = &quot;Patch&quot; &amp; methodName.name then&#xA;&#x9; i = 1&#xA;&#x9;Session.Output &quot;Duplicate found (Patch Operation)&quot;&#xA;end if &#xA;next &#xA;if i = 0 then&#xA;' create Patch Operation with name, and stereotype&#xA; set patchOp = element.Methods.AddNew (&quot;Patch&quot; &amp; methodName.name, methodName.name)&#xA; patchOp.StereotypeEx = methodStereotype&#xA; patchOp.Name = &quot;Patch&quot; &amp; methodName.name&#xA; patchOp.ClassifierID = methodName.ElementID&#xA; ' update method&#xA; patchOp.Update&#xA; ' set Tagged Value  &#xA;setTaggedValueValue2 patchOp, &quot;hTTPMethod&quot;, &quot;patch&quot;&#xA;setTaggedValueValue2 patchOp, &quot;tags&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 patchOp, &quot;summary&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 patchOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA; ' set parameter&#xA; set patchParam = patchOp.Parameters.AddNew (methodName.name, methodName.name)&#xA; patchParam.ClassifierID = methodName.ElementID&#xA; patchParam.Update&#xA; patchOp.Parameters.Refresh&#xA;end if&#xA;i = 0&#xA;&#xA;' check if operation already exists&#xA;for each deleteOp in element.Methods&#xA;if deleteOp.Name = &quot;Delete&quot; &amp; methodName.name then&#xA;&#x9; i = 1&#xA;&#x9;Session.Output &quot;Duplicate found (Delete Operation)&quot;&#xA;end if &#xA;next &#xA;if i = 0 then&#xA;' create Delete Operation with name, and stereotype&#xA;  set deleteOp = element.Methods.AddNew (&quot;Delete&quot; &amp; methodName.name, &quot;string&quot;)&#xA; deleteOp.StereotypeEx = methodStereotype&#xA; deleteOp.Name = &quot;Delete&quot; &amp; methodName.name&#xA; 'update method&#xA; deleteOp.Update&#xA; ' set tagged value&#xA;setTaggedValueValue2 deleteOp, &quot;hTTPMethod&quot;, &quot;delete&quot;&#xA;setTaggedValueValue2 deleteOp, &quot;tags&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 deleteOp, &quot;summary&quot;, &quot;TODO&quot;&#xA;setTaggedValueValue2 deleteOp, &quot;relativePath&quot;, &quot;/&quot; &amp; methodName.Name&#xA;' set parameter&#xA;set deleteParam = deleteOp.Parameters.AddNew (&quot;ID&quot;, &quot;string&quot;)&#xA; deleteParam.Update&#xA; deleteOp.Parameters.Refresh&#xA;end if&#xA;i = 0&#xA;&#xA;' refresh element&#xA; element.Methods.Refresh&#xA; element.Update&#xA; element.Refresh&#xA;&#xA;end Function&#xA;&#xA;'******************************************&#xA;' Method Parameters &#xA;' &#xA;' This function GetParameterNames iterates through the parameters of the provided EA.Method aMethod, &#xA;' concatenates their names into a string variable paramNames, and separates them by commas. &#xA; ' Finally, it returns the concatenated string containing the parameter names. &#xA; ' You can use this function by passing the method object and storing the returned string variable for further processing or output.&#xA;'******************************************&#xA;Function GetParameterNames(aMethod)&#xA;    Dim parameters&#xA;    Set parameters = aMethod.Parameters&#xA;&#xA;    Dim paramNames&#xA;    paramNames = &quot;&quot;&#xA;&#xA;    Dim i&#xA;    For i = 0 To parameters.Count - 1&#xA;        Dim currentParameter&#xA;        Set currentParameter = parameters.GetAt(i)&#xA;        &#xA;        ' Append parameter name to the string variable&#xA;        paramNames = paramNames &amp; currentParameter.Type&#xA;        &#xA;        ' Add comma if it's not the last parameter&#xA;        If i &lt; parameters.Count - 1 Then&#xA;            paramNames = paramNames &amp; &quot;, &quot;&#xA;        End If&#xA;    Next&#xA;&#xA;    ' Return the parameter names as a string&#xA;    GetParameterNames = paramNames&#xA;End Function&#xA;&#xA;&#xA;'******************************************&#xA;' Attributes&#xA;'******************************************&#xA;' Add an attribute to an element, including the initial value&#xA;sub setAttribute( element, attributeName, defaultValue)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#x9;&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = attributeName then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( attributeName, &quot;&quot;)&#x9;&#x9;&#xA;&#x9;&#x9;element.Attributes.Refresh&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;attribute.Default = defaultValue&#xA;&#x9;attribute.Update&#xA;end sub&#xA;&#xA;'' add to the Elelment element the Attribute sourceAttribute&#xA;sub copyAttribute( element, sourceAttribute)&#xA;&#xA;&#x9;dim attribute as EA.Attribute&#xA;&#x9;dim attributeExists 'as Boolean&#xA;&#x9;attributeExists = false&#xA;&#x9;&#xA;&#x9;for each attribute in element.Attributes&#xA;&#x9;&#x9;if attribute.Name = sourceAttribute.Name then&#xA;&#x9;&#x9;&#x9;attributeExists = true&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if not attributeExists then&#x9;&#xA;&#x9;&#x9;set attribute = element.Attributes.AddNew( sourceAttribute.Name, &quot;&quot;)&#xA;&#x9;&#x9;element.Attributes.Refresh&#xA;&#x9;end if&#x9;&#xA;&#x9;attribute.Default = sourceAttribute.Default&#xA;&#x9;attribute.Type = sourceAttribute.Type&#xA;&#x9;attribute.ClassifierID = sourceAttribute.ClassifierID&#xA;&#x9;attribute.Notes = sourceAttribute.Notes&#x9;&#xA;&#x9;attribute.Update&#xA;end sub&#xA;&#xA;sub setElementPDATA(element, pdataIndex, pdataValue)&#xA;'PDATA1 &#xA;' For Package elements: primary key of the package&#xA;' For Elements: Same as the Status column&#xA;' For Parts/Instances: GUID of the classifier&#xA;' For UseCase: #EXP#=&lt;ep&gt;; semi-colon separated list of Extension Points &lt;ep&gt;&#xA;' For Notes: linked element feature name&#xA;' For Text displaying as hyperlink: t_diagram.Diagram_ID&#xA;' For Requirements: Status property&#xA;' For UMLDiagram: Diagram_ID of the underlying diagram;&#xA;' If Object_Type is one of Activity, Artifact, Class, Interaction, Requirement, State,&#xA;'StateMachine, UseCase (and probably some more) and NType is 8 and PDATA1 has a number&#xA;'greater then zero then PDATA1 corresponds to t_diagram.Diagram_ID of the composite&#xA;'diagram.&#xA;'if   NType is 82 diagram hyperlink; PDATA1 == t_diagram.Diagram_ID&#xA;'&#xA;' PDATA2 &#xA;' For Elements: Same as the Priority column&#xA;' For Notes: Object_ID of the linked feature element&#xA;' For Requirements: Priority property&#xA;&#xA;' PDATA3 &#xA;' For Elements: Same as the Difficulty column&#xA;' For Notes: Reference name into the linked feature element&#xA;' For Ports in classified Parts: the GUID of the corresponding Port in the Classifier.&#xA;' For State: t_diagram.Diagram_ID of the composite diagram&#xA;' For Requirements: Difficulty property&#xA;&#xA;' PDATA4 &#xA;' For Note elements: Yes if the note is linked to an element feature and idref=&lt;val&gt;; list where &lt;val&gt; is the primary key of the connector(s) to which the note is linked&#xA;' For elements: If &gt; 0 this is the primary key of the connector for which this element is defines as association class&#xA;&#xA;' PDATA5 Keywords property&#xA;&#xA;&#x9;Dim sqlString 'As String&#xA;&#x9;Dim pdataColumnName 'As String&#xA;&#x9;pdataColumnName = &quot;PDATA&quot; &amp; pdataIndex&#xA;&#x9;sqlString = &quot;UPDATE t_object SET &quot; &amp; pdataColumnName &amp; &quot;='&quot; &amp; pdataValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#x9;Repository.Execute( sqlString)&#xA;&#x9;element.Refresh&#xA;End Sub&#xA;&#xA;&#xA;&#xA;'******************************************&#xA;'  TaggedValue&#xA;'******************************************&#xA;' get the value of a tagged value, inside an element by taggedValue.Name&#xA;function getTaggedValueValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue &#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueValue   'as String&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;taggedValueValue = &quot;&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;taggedValueValue = taggedValue.Value&#xA;&#x9;end if&#xA;&#x9;getTaggedValueValue = taggedValueValue&#x9;&#xA;end function&#xA;&#xA;'' set the value of a tagged value, inside an element by taggedValue.Name&#xA;function setTaggedValueValue( eaItem, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;on error resume next&#xA;&#x9;set taggedValue = eaItem.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 or taggedValue is nothing then&#xA;&#x9;&#x9;session.output &quot;error on tagValue&quot;&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.AddNew( taggedValueName, &quot;&quot;)&#xA;&#x9;&#x9;err.Clear&#xA;&#x9;end if&#x9;&#xA;&#x9;on error goto 0&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;eaItem.TaggedValues.Refresh&#xA;end function&#xA;&#xA;function setTaggedValueValue2( eaItem, taggedValueName, taggedValueValue)&#xA;dim taggedValue as EA.TaggedValue&#xA;dim i &#x9;&#x9;&#x9;'as index&#xA;&#xA;for i = 0 to eaItem.TaggedValues.Count - 1&#xA;&#x9;eaItem.TaggedValues.GetAt(i)&#xA;&#x9;if eaItem.TaggedValues.GetAt(i).Name = taggedValueName then&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.GetAt(i)&#xA;&#x9;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;&#x9;taggedValue.Update&#xA;&#x9;&#x9;eaItem.TaggedValues.Refresh&#xA;&#x9;end if&#xA;next&#xA;&#xA;end function&#xA;'' set the value of a tagged value, inside an Package by taggedValue.Name&#xA;sub setTaggedValuePackageValue( eaPackage, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;on error resume next&#xA;&#x9;set taggedValue = eaPackage.element.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;&#xA;&#x9;if err.Number &lt;&gt; 0 or taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = eaPackage.element.TaggedValues.AddNew( taggedValueName, &quot;&quot;)&#xA;&#x9;&#x9;err.Clear&#xA;&#x9;end if&#x9;&#xA;&#x9;on error goto 0&#xA;&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;&#x9;eaPackage.element.TaggedValues.Refresh&#xA;end sub&#xA;&#xA;&#xA;'check if a tag with that name already exists, create new one if not found&#xA;function getExistingOrNewTaggedValue(owner, tagname)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;dim returnTag as EA.TaggedValue&#xA;&#x9;set returnTag = nothing&#xA;&#x9;'check if a tag with that name alrady exists&#xA;&#x9;for each taggedValue in owner.TaggedValues&#xA;&#x9;&#x9;if taggedValue.Name = tagName then&#xA;&#x9;&#x9;&#x9;set returnTag = taggedValue&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'create new one if not found&#xA;&#x9;if returnTag is nothing then&#xA;&#x9;&#x9;set returnTag = owner.TaggedValues.AddNew(tagname,&quot;&quot;)&#xA;&#x9;end if&#xA;&#x9;'return&#xA;&#x9;set getExistingOrNewTaggedValue = returnTag&#xA;end function&#xA;&#xA;&#xA;'' Delete a tagged value, inside an element by taggedValue.Name&#xA;sub deleteTaggedValue( eaItem, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue&#x9;&#x9;&#x9;as EA.TaggedValue&#xA;&#x9;dim taggedValueCount   'as Integer&#xA;&#x9;dim taggedValueIndex   'as Integer&#xA;&#x9;dim deleted&#x9;&#x9;&#x9;   'as Boolean&#xA;&#x9;&#xA;&#x9;deleted = false&#x9;&#xA;&#x9;taggedValueCount = eaItem.TaggedValues.Count&#xA;&#x9;&#xA;&#x9;for taggedValueIndex = taggedValueCount - 1 to 0 step -1&#x9;&#xA;&#x9;&#x9;set taggedValue = eaItem.TaggedValues.GetAt( taggedValueIndex)&#x9;&#xA;&#x9;&#x9;if taggedValue.Name = taggedValueName then&#xA;&#x9;&#x9;&#x9;eaItem.TaggedValues.Delete taggedValueIndex&#xA;&#x9;&#x9;&#x9;deleted = true&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;if deleted then&#xA;&#x9;&#x9;eaItem.TaggedValues.Refresh&#xA;&#x9;end if&#x9;&#xA;end sub&#xA;&#xA;'' Search an element with a certain Tagged value having a specific value&#xA;function lookupElementTaggedValue(taggedValueName, lookupValue, lookupStereotype, lookupElementType)&#xA;&#xA;&#x9;dim sqlString ' As String&#xA;&#x9;dim elementList_XML ' As String&#xA;&#x9;dim elementList_XMLDoc ' As Xml.XmlDocument&#xA;&#x9;dim element_XMLNodeList ' As Xml.XmlNodeList&#xA;&#x9;dim element_XMLNode ' As Xml.XmlNode&#xA;&#x9;dim elementGUID ' As String&#xA;&#x9;dim lookupColumnName ' As String&#xA;&#x9;dim lookupElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;sqlString = &quot;SELECT t_object.ea_guid&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; FROM t_object&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; INNER JOIN t_objectproperties ON t_object.Object_ID = t_objectproperties.Object_ID&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; WHERE t_objectproperties.Property = '&quot; &amp; taggedValueName &amp; &quot;'&quot;&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_objectproperties.Value = '&quot; &amp; lookupValue &amp; &quot;'&quot;&#xA;&#xA;&#x9;If lookupStereotype = vbNullString Then&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype Is Null&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Stereotype = '&quot; &amp; lookupStereotype &amp; &quot;'&quot;&#xA;&#x9;End If&#xA;&#x9;sqlString = sqlString &amp; &quot; AND t_object.Object_Type = '&quot; &amp; lookupElementType &amp; &quot;'&quot;&#xA;&#x9;elementList_XML = Repository.SQLQuery(sqlString)&#x9;&#xA;&#x9;set elementList_XMLDoc = CreateObject(&quot;Microsoft.XMLDOM&quot;)&#xA;&#x9;elementList_XMLDoc.LoadXml(elementList_XML)&#xA;&#x9;set element_XMLNodeList = elementList_XMLDoc.SelectNodes(&quot;/EADATA/Dataset_0/Data/Row&quot;)&#xA;&#x9;If element_XMLNodeList.Length &gt; 0 Then&#xA;&#x9;&#x9;set element_XMLNode = element_XMLNodeList.Item(0)&#xA;&#x9;&#x9;elementGUID = element_XMLNode.FirstChild.Text&#xA;&#x9;&#x9;set lookupElement = Repository.GetElementByGuid(elementGUID)&#xA;&#x9;Else&#xA;&#x9;&#x9;set lookupElement = Nothing&#xA;&#x9;End If&#xA;&#x9;set lookupElementTaggedValue =  lookupElement&#xA;end function&#xA;&#xA;&#xA;'copies values of the tagged values of the source to the values of the corresponding tagged values at the target&#xA;function copyTaggedValuesValues (source, target)&#xA;&#x9;dim taggedValue as EA.TaggedValue&#xA;&#x9;for each taggedValue in source.TaggedValues&#xA;&#x9;&#x9;dim targetTaggedValue as EA.TaggedValue&#xA;&#x9;&#x9;set targetTaggedValue = target.TaggedValues.GetByName(taggedValue.Name)&#xA;&#x9;&#x9;if not targetTaggedValue is nothing then&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Value = taggedValue.Value&#xA;&#x9;&#x9;&#x9;targetTaggedValue.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Notes = sourceTag.Notes&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;'copies the tagged values from the source to the target&#xA;function copyAllTaggedValues(source, target)&#xA;&#x9;dim sourceTag as EA.TaggedValue&#xA;&#x9;dim targetTag as EA.TaggedValue&#xA;&#x9;for each sourceTag in source.TaggedValues&#xA;&#x9;&#x9;set targetTag = nothing&#xA;&#x9;&#x9;'first try to find target tag, only use if empty&#xA;&#x9;&#x9;dim tag as EA.TaggedValue&#xA;&#x9;&#x9;for each tag in target.TaggedValues&#xA;&#x9;&#x9;&#x9;if tag.Name = sourceTag.Name _&#xA;&#x9;&#x9;&#x9; AND len(tag.Value) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set targetTag = tag&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;'if not found then create new&#xA;&#x9;&#x9;if targetTag is nothing then&#xA;&#x9;&#x9;&#x9;set targetTag = target.TaggedValues.AddNew(sourceTag.Name,&quot;TaggedValue&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set value&#xA;&#x9;&#x9;if not targetTag is nothing then&#xA;&#x9;&#x9;&#x9;targetTag.Value = sourceTag.Value&#xA;&#x9;&#x9;&#x9;targetTag.Notes = sourceTag.Notes&#xA;&#x9;&#x9;&#x9;targetTag.Update&#xA;&#x9;&#x9;&#x9;target.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end function&#xA;&#xA;&#xA;'******************************************&#xA;'  ConnectorTaggedValue&#xA;'******************************************&#xA;&#xA;function getConnectorTaggedValueValue( connector, taggedValueName)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#x9;&#xA;&#x9;getConnectorTaggedValueValue = taggedValue.Value&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setConnectorTaggedValueValue( connector, taggedValueName, taggedValueValue)&#xA;&#xA;&#x9;dim taggedValue as EA.ConnectorTag&#x9;&#xA;&#x9;set taggedValue = connector.TaggedValues.GetByName( taggedValueName)&#xA;&#x9;if taggedValue is nothing then&#xA;&#x9;&#x9;set taggedValue = connector.TaggedValues.AddNew( taggedValueName, vbNullString)&#xA;&#x9;end if&#x9;&#xA;&#x9;taggedValue.Value = taggedValueValue&#xA;&#x9;taggedValue.Update&#xA;end sub&#x9;&#xA;&#xA;'******************************************&#xA;'  Ownership&#xA;'******************************************&#xA;'  Ownedship by element and expected metatype' -----------------------------------------------------------------------------&#xA;' Function: getOwnedElementNameList&#xA;' Purpose:  This function returns a list of names of elements owned by the &#xA;'           provided 'element' that match any type within the 'ownedMetatypeList'.&#xA;'           The function also includes the 'objectState' property value of the owned elements, if it exists.&#xA;'&#xA;' Inputs:&#xA;'   - element: The EA.Element for which the owned elements' names are retrieved.&#xA;'   - ownedMetatypeList: A string containing a comma-separated list of metatypes to filter owned elements.&#xA;'&#xA;' Outputs: &#xA;'   - A string list of names of the owned elements matching the types in 'ownedMetatypeList', &#xA;'     each name is followed by the element's 'objectState' if it exists.&#xA;'     Names are separated by a newline character (vbCRLF).&#xA;' -----------------------------------------------------------------------------&#xA;function getOwnedElementNameList( element, ownedMetatypeList)&#xA;&#xA;&#x9;dim ownedElement &#x9;as EA.Element&#xA;&#x9;dim nameList&#x9;   'as String&#xA;&#x9;dim typeID&#x9;&#x9;   'as Integer&#xA;&#x9;dim typeElement&#x9;&#x9;as EA.Element&#xA;&#x9;dim elementName&#x9;   'as String&#xA;&#x9;dim objectState&#x9;   'as String&#xA;&#x9;&#xA;&#x9;nameList = vbNullString&#x9;&#xA;&#x9;if ownedMetatypeList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;ownedMetatypeList = ownedMetatypeList &amp; &quot;,&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for each ownedElement in element.EmbeddedElements&#x9;&#x9;&#xA;&#x9;&#x9;if InStr( ownedMetatypeList, ownedElement.MetaType &amp; &quot;,&quot;) then&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;typeID = ownedElement.PropertyType&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;typeID = ownedElement.ClassfierID&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if typeID = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;elementName = ownedElement.Name&#xA;&#x9;&#x9;&#x9;else&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set typeElement = Repository.GetElementByID( typeID)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;elementName = typeElement.Name&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if nameList &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; vbCRLF&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;nameList = nameList &amp; elementName&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectState = getCustomPropertyValue( ownedElement, &quot;objectState&quot;)&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectState &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;&#x9;nameList = nameList &amp; &quot; [&quot; &amp; objectState &amp; &quot;]&quot;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getOwnedElementNameList = nameList&#xA;end function&#xA;&#xA;&#xA;' -----------------------------------------------------------------------------&#xA;' Function: getChildElementList&#xA;' Purpose:  ' returns a list of children of a certain stereotype.This function retrieves a list of child elements of a specified parent &#xA;'           element that have a specific stereotype.&#xA;'&#xA;' Inputs:&#xA;'   - parentElement: The parent EA.Element object for which the child elements &#xA;'                    are to be retrieved.&#xA;'   - childStereotype: The stereotype of the child elements to retrieve.&#xA;'&#xA;' Outputs: &#xA;'   - A Scripting.Dictionary object where the keys are the GUIDs of the child elements and &#xA;'     the values are the EA.Element objects corresponding to the child elements with &#xA;'     the provided stereotype.&#xA;' ----------------------------------------------------------------------------- &#xA;&#xA;function getChildElementList( parentElement, childStereotype)&#xA;&#xA;&#x9;dim childElement &#x9;as EA.Element&#xA;&#x9;dim childElementList&#x9;'as Scripting.Dictionary&#x9;&#xA;&#x9;set childElementList = CreateObject(&quot;Scripting.Dictionary&quot;)&#x9;&#xA;&#x9;for each childElement in parentElement.Elements&#x9;&#xA;&#x9;&#x9;if childElement.Stereotype = childStereotype then&#xA;&#x9;&#x9;&#x9;childElementList.Add childElement.ElementGUID, childElement&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildElementList = childElementList&#x9;&#xA;end function&#xA;&#xA;function getCustomPropertyValue( ownedElement, propertyName)&#xA;&#xA;&#x9;dim customProperty as EA._CustomProperty&#xA;&#x9;dim propertyValue 'as String&#x9;&#xA;&#x9;propertyValue = vbNullString&#xA;&#x9;&#xA;&#x9;for each customProperty in ownedElement.CustomProperties&#x9;&#xA;&#x9;&#x9;if customProperty.Name = propertyName then&#xA;&#x9;&#x9;&#x9;propertyValue = customProperty.Value&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;getCustomPropertyValue = propertyValue&#xA;&#x9;&#xA;end function&#xA;&#xA;'******************************************&#xA;'  Package&#xA;'******************************************&#xA;function getAncestorPackage( element, ancestorPackageLevel)&#xA;&#xA;&#x9;dim packageLevel&#x9;   'as Integer&#xA;&#x9;dim packageID&#x9;&#x9;   'as Integer&#xA;&#x9;dim package&#x9;&#x9;&#x9;&#x9;as EA.Package&#xA;&#xA;&#x9;packageID = element.PackageID&#x9;&#xA;&#x9;set package = Repository.GetPackageByID( packageID)&#x9;&#xA;&#x9;for packageLevel = 2 to ancestorPackageLevel&#x9;&#xA;&#x9;&#x9;packageID = package.ParentID&#x9;&#x9;&#xA;&#x9;&#x9;if packageID = 0 then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;set package = Repository.GetPackageByID( packageID)&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getAncestorPackage = package&#xA;&#x9;&#xA;end function&#xA;'******************************************&#xA;'  Diagram&#xA;'******************************************&#xA;' found a diagram inside an element by name&#xA;function getChildDiagram( parentElement, childDiagramName)&#xA;&#xA;&#x9;dim childDiagram &#x9;as EA.Diagram&#xA;&#x9;dim foundDiagram&#x9;as EA.Diagram&#xA;&#x9;&#xA;&#x9;set foundDiagram = nothing&#xA;&#x9;&#xA;&#x9;for each childDiagram in parentElement.Diagrams&#x9;&#xA;&#x9;&#x9;if childDiagram.Name = childDiagramName then&#xA;&#x9;&#x9;&#x9;set foundDiagram = childDiagram&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#x9;&#xA;&#x9;set getChildDiagram = foundDiagram&#xA;&#x9;&#xA;end function" />
		</DataRow></DataSet>
</RefData>