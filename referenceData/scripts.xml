<?xml version="1.0" encoding="utf-8"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
	<DataRow>
			<Column name="ScriptID" value="6" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{FFC73BD6-465D-4017-9146-38060E4842FC}" />
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="BIZBOK Browser Scripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="8" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{40416E36-7C16-4b5e-86AA-4685EE697315}" />
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="BIZBOK Diagram Utility Scripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="9" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{9A8485DC-1605-4bc4-974E-6A960AF05B9C}" />
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create Nested Hierarchy Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="&#xA;' v1.5: 20220610: 1. Updated to allow for different metatypes at different levels (with new HierarchyLevel.elementMetatype property).&#xA;'&#x9;&#x9;&#x9;&#x9;  2. Updated to allow specifying object dimenisions at different levels (with new HierarchyLevel properties).&#xA;'                 3. Added new base parameter to specify diagram type (instead of always defaulting to &quot;Package&quot;).&#xA;'&#x9;&#x9;&#x9;&#x9;  4. Added new base parameter to sepcify whether diagram should be open while building. Diagrams are created&#xA;'                    more quickly if they are not opened.&#xA;'                 5. Updated so diagrams that are children of elements are marked as the composite diagram.&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Set Diagram Styles&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;const HIERARCHY_TAB = &quot;Nested Hierarchy Diagram&quot;&#xA;&#xA;const TOP_DOWN_FLOW_DIRECTION = 1 &#x9;' as Integer&#xA;const LEFT_RIGHT_FLOW_DIRECTION = 2&#x9;' as Integer&#xA;&#xA;const ELEMENT_SUBTYPE_COMPOSITE = 8&#xA;&#xA;const XREF_NAME_DEFAULT_DIAGRAM = &quot;DefaultDiagram&quot;&#xA;const XREF_TYPE_ELEMENT = &quot;element property&quot;&#xA;const XREF_VISIBILITY_PUBLIC = &quot;public&quot;&#xA;&#xA;class HierarchyDiagram&#xA;&#xA;&#x9;public objectHeight&#x9;&#x9;' as Integer&#xA;&#x9;public objectWidth&#x9;&#x9;' as Integer&#xA;&#x9;public horizOffset&#x9;&#x9;' as Integer&#xA;&#x9;public horizSpace&#x9;&#x9;' as Integer&#xA;&#x9;public vertOffset&#x9;&#x9;' as Integer&#xA;&#x9;public vertSpace&#x9;&#x9;' as Integer&#xA;&#x9;public seqIndex&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public levelList&#x9;&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;public childObjectList&#x9;' as Scripting.Dictionary(Of HierarchyObject)&#xA;&#x9;public parentItem&#x9;&#x9;' as EA.Package/Element&#xA;&#x9;public diagram &#x9;&#x9;&#x9;' as EA.Diagram&#xA;&#x9;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;seqIndex = 9999&#xA;&#x9;&#x9;set levelList = nothing&#xA;&#x9;&#x9;set childObjectList = nothing&#xA;&#x9;&#x9;set parentItem = nothing&#xA;&#x9;&#x9;set diagram = nothing&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub createDiagram( diagramType)&#xA;&#x9;&#xA;&#x9;&#x9;dim diagramName&#x9;'as String&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagramName = parentItem.Name&#xA;&#x9;&#xA;&#x9;&#x9;set diagram = parentItem.Diagrams.AddNew( diagramName, diagramType)&#xA;&#x9;&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;&#x9;setDiagramStyle diagram, &quot;HideEStereo=1&quot;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;setParentElement&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub loadRootObjectList&#xA;&#x9;&#xA;&#x9;&#x9;dim rootObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim rootLevel&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim elementMetatype ' as String&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set rootLevel = levelList.Item(1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;elementMetatype = rootLevel.elementMetatype&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childObjectList = createParentHierarchyObjectList( Me, parentItem, elementMetatype)&#xA;&#xA;&#x9;&#x9;for each rootObject in childObjectList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set rootObject.diagram = Me&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;--&gt; Loading Root Element '&quot; &amp; rootObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if levelList.Count &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;rootObject.LoadChildObjectList&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub drawRootObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim rootObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;drawObjectList Me, childObjectList, 1&#xA;&#xA;&#x9;&#x9;for each rootObject in childObjectList.Items&#xA;&#x9;&#x9;&#x9;rootObject.drawChildObjects&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub hideConnectors&#xA;&#x9;&#xA;&#x9;&#x9;dim link&#x9; &#x9;' as EA.DiagramLink&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each link in diagram.DiagramLinks&#xA;&#x9;&#x9;&#x9;link.IsHidden = true&#xA;&#x9;&#x9;&#x9;link.Update&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;diagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub addObject( anObject)&#xA;&#x9;&#xA;&#x9;&#x9;dim nextSeqIndex&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set anObject.diagram = Me&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set anObject.diagramObject = Me.diagram.DiagramObjects.AddNew(&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;anObject.diagramObject.ElementID = anObject.element.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;nextSeqIndex = Me.SeqIndex - 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;anObject.diagramObject.sequence = nextSeqIndex&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Me.seqIndex = nextSeqIndex&#xA;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;private sub setParentElement()&#xA;&#xA;&#x9;&#x9;if parentItem.ObjectType = otElement then&#xA;&#xA;            diagram.ParentID = parentItem.ElementID&#xA;            diagram.PackageID = parentItem.PackageID&#xA;            diagram.Update()&#xA;&#xA;            parentItem.Subtype = ELEMENT_SUBTYPE_COMPOSITE&#xA;            parentItem.Update()&#xA;&#xA;            setElementPDATA parentItem, 1, diagram.DiagramID&#xA;&#xA;            insertXrefRow XREF_NAME_DEFAULT_DIAGRAM, XREF_TYPE_ELEMENT, XREF_VISIBILITY_PUBLIC, vbNullString, &quot;0&quot;, vbNullString, parentItem.ElementGUID, diagram.DiagramGUID&#xA;&#xA;        End If&#xA;&#xA;    End Sub&#xA;&#x9;&#xA;end Class&#xA;&#xA;private sub setElementPDATA(element, PDATAIndex, PDATAValue)&#xA;&#xA;&#x9;dim SQLString 'As String&#xA;&#x9;dim PDATAColumnName 'As String&#xA;&#xA;&#x9;PDATAColumnName = &quot;PDATA&quot; &amp; PDATAIndex&#xA;&#xA;&#x9;SQLString = &quot;UPDATE t_object SET &quot; &amp; PDATAColumnName &amp; &quot;='&quot; &amp; PDATAValue &amp; &quot;' WHERE Object_ID = &quot; &amp; element.ElementID&#xA;&#xA;&#x9;Repository.Execute(SQLString)&#xA;&#xA;&#x9;element.Refresh()&#xA;&#xA;end sub&#xA;&#xA;private sub insertXrefRow(name, xrefType, visibility, behavior, partition, description, client, supplier)&#xA;&#xA;&#x9;dim typeLib ' as TypeLib&#xA;&#x9;Dim SQLString 'as String&#xA;&#x9;Dim xrefGUID 'as String&#xA;&#xA;&#x9;set typeLib = CreateObject(&quot;Scriptlet.TypeLib&quot;)&#xA;&#x9;&#xA;&#x9;xrefGUID = typeLib.Guid&#xA;&#x9;xrefGUID= Left( xrefGUID, Len( xrefGUID) - 2)&#xA;&#xA;&#x9;SQLString = &quot;INSERT INTO t_xref (XrefID, Name, Type, Visibility, Behavior, Partition, Description, Client, Supplier) VALUES (&quot;&#xA;&#x9;SQLString = SQLString &amp; &quot;'&quot; &amp; xrefGUID &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp; &quot;'&quot; &amp; name &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; xrefType &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; visibility &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; behavior &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; partition &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; description &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; client &amp; &quot;', &quot;&#xA;&#x9;SQLString = SQLString &amp;  &quot;'&quot; &amp; supplier &amp; &quot;')&quot;&#xA;&#xA;&#x9;Repository.Execute(SQLString)&#xA;&#xA;end sub&#xA;&#xA;class HierarchyLevel&#xA;&#xA;&#x9;public levelNumber&#x9;&#x9;' as Integer&#xA;&#x9;public numObjects&#x9;&#x9;' as Integer = numRows when flowDirection = TOP_DOWN; = numColumns when flowDirection = LEFT_RIGHT&#xA;&#x9;public flowDirection&#x9;' as Integer&#xA;&#x9;public objectStyle&#x9;&#x9;' as ObjectStyle&#xA;&#x9;public elementMetatype  ' as String&#xA;&#x9;public objectHeight&#x9;&#x9;' as Integer&#xA;&#x9;public objectWidth&#x9;&#x9;' as Integer&#xA;&#x9;public horizOffset&#x9;&#x9;' as Integer&#xA;&#x9;public horizSpace&#x9;&#x9;' as Integer&#xA;&#x9;public vertOffset&#x9;&#x9;' as Integer&#xA;&#x9;public vertSpace&#x9;&#x9;' as Integer&#xA;&#x9;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;set objectStyle = new HierarchyObjectStyle&#xA;&#x9;&#x9;objectHeight = -1&#xA;&#x9;&#x9;objectWidth = -1&#xA;&#x9;&#x9;horizOffset = -1&#xA;&#x9;&#x9;horizSpace = -1&#xA;&#x9;&#x9;vertOffset = -1&#xA;&#x9;&#x9;vertSpace = -1&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#xA;End Class&#xA;&#xA;class HierarchyObjectStyle&#xA;&#xA;&#x9;public fillColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public lineWidth&#x9;&#x9;' as Integer&#xA;&#x9;public lineColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public fontName&#x9;&#x9;&#x9;' as String&#xA;&#x9;public fontSize&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public fontColor&#x9;&#x9;' as RGB/Integer&#xA;&#x9;public fontBold&#x9;&#x9;&#x9;' as Boolean&#xA;&#x9;public fontItalic&#x9;&#x9;' as Boolean&#xA;&#x9;public fontUnderline&#x9;' as Boolean&#xA;&#x9;&#xA;End Class&#xA;&#xA;class HierarchyObject&#xA;&#xA;&#x9;public levelNumber&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public row&#x9;&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public column&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;public parentObject&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;public childObjectList&#x9;&#x9;' as Scripting.Dictionary(Of HierarchyObject)&#xA;&#x9;public diagram&#x9;&#x9;&#x9;&#x9;' as HierarchyDiagram&#xA;&#x9;public element&#x9;&#x9;&#x9;&#x9;' as EA.Element&#xA;&#x9;public diagramObject &#x9;&#x9;' as EA.DiagramObject&#xA;&#xA;&#x9;private sub Class_Initialize&#xA;&#x9;&#xA;&#x9;&#x9;set parentObject = nothing&#xA;&#x9;&#x9;set childObjectList = nothing&#xA;&#x9;&#x9;set diagram = nothing&#xA;&#x9;&#x9;set diagramObject = nothing&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#xA;&#x9;public sub loadChildObjectList&#xA;&#x9;&#xA;&#x9;&#x9;dim eaElement &#x9;&#x9;' as EA.Element&#xA;&#x9;&#x9;dim childObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim childLevel&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim childMetatype   ' as String&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childLevel = diagram.levelList.Item(levelNumber + 1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;childMetatype = childLevel.elementMetatype&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set childObjectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each eaElement in element.Elements&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if eaElement.MetaType = childMetatype then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set childObject = New HierarchyObject&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.element = eaElement&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.parentObject = Me&#xA;&#x9;&#x9;&#x9;&#x9;set childObject.diagram = diagram&#xA;&#x9;&#x9;&#x9;&#x9;childObject.levelNumber = levelNumber + 1&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;childObjectList.Add childObject.element.ElementGUID, childObject&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(childObject.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Loading Child Element '&quot; &amp; childObject.element.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if childObject.levelNumber = diagram.levelList.Count then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set childObject.childObjectList = Nothing&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;childObject.loadChildObjectList&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub drawChildObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim childObject &#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if not childObjectList is Nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;drawObjectList diagram, childObjectList, levelNumber + 1&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each childObject in childObjectList.Items&#xA;&#x9;&#x9;&#x9;&#x9;childObject.drawChildObjects&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub resize( childObject)&#xA;&#x9;&#xA;&#x9;&#x9;dim objectCurrRight&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim objectCurrBottom&#x9;' as Integer&#xA;&#x9;&#x9;dim objectNewRight&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim objectNewBottom&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim vertSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim horizSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.vertSpace = -1 then&#xA;&#x9;&#x9;&#x9;vertSpace = diagram.vertSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;vertSpace = level.vertSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.horizSpace = -1 then&#xA;&#x9;&#x9;&#x9;horizSpace = diagram.horizSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;horizSpace = level.horizSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;objectCurrRight = diagramObject.right&#xA;&#x9;&#x9;objectCurrBottom = diagramObject.bottom&#xA;&#x9;&#xA;&#x9;&#x9;objectNewRight = childObject.diagramObject.right + horizSpace&#xA;&#x9;&#x9;objectNewBottom = childObject.diagramObject.bottom - vertSpace&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if objectCurrRight &lt;&gt; objectNewRight or objectCurrBottom &lt;&gt; objectNewBottom then&#xA;&#xA;&#x9;&#x9;&#x9;if objectNewRight &gt; objectCurrRight then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.right = objectNewRight&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if objectNewBottom &lt; objectCurrBottom then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = objectNewBottom&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** RESIZED object '&quot; &amp; element.name &amp; &quot;' to (&quot; &amp; diagramObject.left &amp; &quot;,&quot; &amp; diagramObject.top &amp; &quot;) x ( &quot; &amp; diagramObject.right &amp; &quot;,&quot; &amp; diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;moveNeighborObjects&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if Not parentObject is nothing then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public sub moveNeighborObjects&#xA;&#x9;&#xA;&#x9;&#x9;dim rightObject&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim rightObjectWidth&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectCurrLeft&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectNewLeft&#x9;' as Integer&#xA;&#x9;&#x9;dim rightObjectMoved&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim bottomObjectHeight&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectCurrTop&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectNewTop&#x9;' as Integer&#xA;&#x9;&#x9;dim bottomObjectMoved&#x9;' as Integer&#xA;&#x9;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#x9;dim vertSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;dim horizSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.vertSpace = -1 then&#xA;&#x9;&#x9;&#x9;vertSpace = diagram.vertSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;vertSpace = level.vertSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.horizSpace = -1 then&#xA;&#x9;&#x9;&#x9;horizSpace = diagram.horizSpace&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;horizSpace = level.horizSpace&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set rightObject = getRightObject&#xA;&#x9;&#x9;set bottomObject = getBottomObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;rightObjectMoved = false&#xA;&#x9;&#x9;bottomObjectMoved = false&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if rightObject is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectWidth = rightObject.width&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectCurrLeft = rightObject.diagramObject.left &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;rightObjectNewLeft = diagramObject.right + horizSpace&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if rightObjectNewLeft &lt;&gt; rightObjectCurrLeft then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.left = rightObjectNewLeft&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.right = rightObjectNewLeft + rightObjectWidth&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** Moved RIGHT object '&quot; &amp; rightObject.element.name &amp; &quot;' to (&quot; &amp; rightObject.diagramObject.left &amp; &quot;,&quot; &amp; rightObject.diagramObject.top &amp; &quot;) x ( &quot; &amp; rightObject.diagramObject.right &amp; &quot;,&quot; &amp; rightObject.diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;rightObject.diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;rightObjectMoved = true&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if bottomObject is nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObject.resize Me&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectHeight = bottomObject.Height&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectCurrTop = bottomObject.diagramObject.top&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;bottomObjectNewTop = diagramObject.bottom - vertSpace&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if bottomObjectNewTop &lt;&gt; bottomObjectCurrTop then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.top = bottomObjectNewTop&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.bottom = bottomObjectNewTop - bottomObjectHeight &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;*** Moved BOTTOM object '&quot; &amp; bottomObject.element.name &amp; &quot;' to (&quot; &amp; bottomObject.diagramObject.left &amp; &quot;,&quot; &amp; bottomObject.diagramObject.top &amp; &quot;) x ( &quot; &amp; bottomObject.diagramObject.right &amp; &quot;,&quot; &amp; bottomObject.diagramObject.bottom &amp; &quot;)&quot;, 0&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObject.diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;bottomObjectMoved = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;if rightObjectMoved then&#xA;&#x9;&#x9;&#x9;rightObject.moveNeighborObjects&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;if bottomObjectMoved then&#xA;&#x9;&#x9;&#x9;bottomObject.moveNeighborObjects&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;end sub&#xA;&#x9;&#xA;&#x9;public property get height&#xA;&#x9;&#x9;height = diagramObject.top - diagramObject.bottom&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property get width&#xA;&#x9;&#x9;width = diagramObject.right - diagramObject.left&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public function getRightObject&#xA;&#x9;&#x9;set getRightObject = getGridObject(column + 1, row)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getBottomObject&#xA;&#x9;&#x9;set getBottomObject = getGridObject(column, row + 1)&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public function getGridObject( getColumn, getRow)&#xA;&#x9;&#xA;&#x9;&#x9;dim peerObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;dim foundObject&#x9;&#x9;' as HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set foundObject = nothing&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for each peerObject in parentObject.childObjectList.Items&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if peerObject.column = getColumn and peerObject.row = getRow then&#xA;&#x9;&#x9;&#x9;&#x9;set foundObject = peerObject&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set getGridObject = foundObject&#xA;&#x9;&#xA;&#x9;end function&#xA;&#x9;&#xA;&#x9;public property let fillColor( value)&#xA;&#x9;&#x9;if value &lt;&gt; vbNullString then&#xA;&#x9;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;BCol=&quot; &amp; value&#xA;&#x9;&#x9;end if&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let lineWidth( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;LWth=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let lineColor( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;LCol=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontName( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;font=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontSize( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;fontsz=&quot; &amp; value * 10&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontColor( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;BFol=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontBold( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;bold=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;&#x9;public property let fontItalic( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;italic=&quot; &amp; value&#xA;&#x9;end property&#xA;&#x9;&#xA;&#x9;public property let fontUnderline( value)&#xA;&#x9;&#x9;SetDiagramObjectStyle Me.diagramObject, &quot;ul=&quot; &amp; value&#xA;&#x9;end property&#xA;&#xA;End Class&#xA;&#xA;public sub drawObjectList( diagram, objectList, levelNumber)&#xA;&#xA;&#x9;dim level&#x9;&#x9;&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim objectIndex&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim coord1&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim coord2&#x9;&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim object&#x9;&#x9;&#x9;&#x9;' as HierarchyObject&#xA;&#x9;dim parentObjectLeft&#x9;' as Integer&#xA;&#x9;dim parentObjectTop&#x9;&#x9;' as Integer&#xA;&#x9;dim objectWidth&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim objectHeight&#x9;&#x9;' as Integer&#xA;&#x9;dim vertOffset&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim vertSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim horizOffset&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;dim horizSpace&#x9;&#x9;&#x9;' as Integer&#xA;&#x9;&#xA;&#x9;set level = diagram.levelList.Item(levelNumber)&#xA;&#x9;&#xA;&#x9;if level.objectWidth = -1 then&#xA;&#x9;&#x9;objectWidth = diagram.objectWidth&#xA;&#x9;else&#xA;&#x9;&#x9;objectWidth = level.objectWidth&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.objectHeight = -1 then&#xA;&#x9;&#x9;objectHeight = diagram.objectHeight&#xA;&#x9;else&#xA;&#x9;&#x9;objectHeight = level.objectHeight&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.vertOffset = -1 then&#xA;&#x9;&#x9;vertOffset = diagram.vertOffset&#xA;&#x9;else&#xA;&#x9;&#x9;vertOffset = level.vertOffset&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.vertSpace = -1 then&#xA;&#x9;&#x9;vertSpace = diagram.vertSpace&#xA;&#x9;else&#xA;&#x9;&#x9;vertSpace = level.vertSpace&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.horizOffset = -1 then&#xA;&#x9;&#x9;horizOffset = diagram.horizOffset&#xA;&#x9;else&#xA;&#x9;&#x9;horizOffset = level.horizOffset&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if level.horizSpace = -1 then&#xA;&#x9;&#x9;horizSpace = diagram.horizSpace&#xA;&#x9;else&#xA;&#x9;&#x9;horizSpace = level.horizSpace&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;objectIndex = 1&#xA;&#x9;&#xA;&#x9;for each object in objectList.Items&#xA;&#xA;&#x9;&#x9;diagram.addObject object&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;coord1 = Int( ( objectIndex - 1 ) / level.numObjects ) + 1&#xA;&#x9;&#x9;coord2 = objectIndex - ( coord1 - 1 ) * level.numObjects&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if level.flowDirection = LEFT_RIGHT_FLOW_DIRECTION then&#xA;&#x9;&#x9;&#x9;object.row = coord1&#xA;&#x9;&#x9;&#x9;object.column = coord2&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;object.row = coord2&#xA;&#x9;&#x9;&#x9;object.column = coord1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(object.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; Adding diagram object for Element '&quot; &amp; object.element.Name &amp; &quot;' #&quot; &amp; objectIndex &amp; &quot; ( &quot; &amp; object.column &amp; &quot;, &quot; &amp; object.row &amp; &quot; )&quot;, 0&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if object.parentObject is nothing then&#xA;&#x9;&#x9;&#x9;parentObjectLeft = 0&#xA;&#x9;&#x9;&#x9;parentObjectTop = 0&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(object.ParentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectLeft = object.parentObject.diagramObject.left&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectTop = object.parentObject.diagramObject.top&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectLeft = 0&#xA;&#x9;&#x9;&#x9;&#x9;parentObjectTop = 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.diagramObject.left = parentObjectLeft + ( object.column - 1 ) * ( objectWidth + horizSpace ) + horizOffset&#xA;&#x9;&#x9;object.diagramObject.top = parentObjectTop - ( ( object.row  - 1 ) * ( objectHeight + vertSpace ) + vertOffset )&#xA;&#x9;&#x9;object.diagramObject.right = object.diagramObject.left + objectWidth&#xA;&#x9;&#x9;object.diagramObject.bottom = object.diagramObject.top - objectHeight&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.fillColor &#x9;&#x9;= level.objectStyle.fillColor&#xA;&#x9;&#x9;object.lineWidth &#x9;&#x9;= level.objectStyle.lineWidth&#xA;&#x9;&#x9;object.lineColor &#x9;&#x9;= level.objectStyle.lineColor&#xA;&#x9;&#x9;object.fontName &#x9;&#x9;= level.objectStyle.fontName&#xA;&#x9;&#x9;object.fontSize &#x9;&#x9;= level.objectStyle.fontSize&#xA;&#x9;&#x9;object.fontColor &#x9;&#x9;= level.objectStyle.fontColor&#xA;&#x9;&#x9;object.fontBold &#x9;&#x9;= level.objectStyle.fontBold&#xA;&#x9;&#x9;object.fontItalic &#x9;&#x9;= level.objectStyle.fontItalic&#xA;&#x9;&#x9;object.fontUnderline &#x9;= level.objectStyle.fontUnderline&#xA;&#xA;&#x9;&#x9;Repository.WriteOutput HIERARCHY_TAB, String(object.levelNumber * 2, &quot;-&quot;) &amp; &quot;&gt; LeftTop: ( &quot; &amp; object.diagramObject.left &amp; &quot;, &quot; &amp; object.diagramObject.top &amp; &quot; ) RightBottom: ( &quot; &amp; object.diagramObject.right &amp; &quot;, &quot; &amp; object.diagramObject.bottom &amp; &quot; )&quot;, 0&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;object.diagramObject.Update&#xA;&#xA;&#x9;&#x9;Repository.ReloadDiagram(object.diagram.diagram.DiagramID)&#xA;&#x9;&#xA;&#x9;&#x9;if Not object.parentObject is Nothing then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if TypeName(object.parentObject) = &quot;HierarchyObject&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;object.parentObject.resize object&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;objectIndex = objectIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub createNestedHierarchyDiagram( parentItem, levelList, diagramType, openDiagram)&#xA;&#xA;&#x9;dim diagram &#x9;&#x9;' as HierarchyDiagram&#xA;&#xA;&#x9;Repository.CreateOutputTab HIERARCHY_TAB&#xA;&#x9;Repository.EnsureOutputVisible HIERARCHY_TAB&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Creating nested hierarchy diagram for Element '&quot; &amp; parentItem.Name &amp; &quot;'...&quot;, 0&#xA;&#xA;&#x9;set diagram = New HierarchyDiagram&#xA;&#x9;&#xA;&#x9;'diagram.elementMetaType = elementMetatype&#xA;&#x9;diagram.horizOffset = 10&#xA;&#x9;diagram.horizSpace = 10&#xA;&#x9;diagram.vertOffset = 50&#xA;&#x9;diagram.vertSpace = 10&#xA;&#x9;diagram.objectHeight = 50&#xA;&#x9;diagram.objectWidth = 150&#xA;&#x9;set diagram.parentItem = parentItem&#xA;&#xA;&#x9;diagram.createDiagram diagramType&#xA;&#xA;&#x9;if openDiagram then&#xA;&#x9;&#x9;Repository.OpenDiagram(diagram.diagram.DiagramID)&#xA;&#x9;end if&#xA;&#xA;&#x9;set diagram.levelList = levelList&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;diagram.levelList.Count = &quot; &amp; diagram.levelList.count, 0&#xA;&#x9;&#xA;&#x9;diagram.loadRootObjectList&#xA;&#x9;&#xA;&#x9;diagram.drawRootObjects&#xA;&#x9;&#xA;&#x9;diagram.hideConnectors&#xA;&#x9;&#x9;&#xA;&#x9;Repository.SaveDiagram(diagram.diagram.diagramID)&#xA;&#xA;&#x9;if openDiagram then&#xA;&#x9;&#x9;Repository.ReloadDiagram(diagram.diagram.DiagramID)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;Repository.WriteOutput HIERARCHY_TAB, &quot;Finished!&quot;, 0&#xA;&#xA;end sub&#xA;&#xA;function createParentHierarchyObjectList( diagram, parentItem, elementMetatype)&#xA;&#xA;&#x9;dim objectList&#xA;&#x9;dim eaElement as EA.Element&#xA;&#x9;dim object&#xA;&#x9;&#xA;&#x9;set objectList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;for each eaElement in parentItem.Elements&#xA;&#x9;&#xA;&#x9;&#x9;if eaElement.MetaType = elementMetatype then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set object = New HierarchyObject&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set object.Element = eaElement&#xA;&#x9;&#x9;&#x9;set object.ParentObject = diagram&#xA;&#x9;&#x9;&#x9;object.levelNumber = 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;objectList.Add object.element.ElementGUID, object&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;set createParentHierarchyObjectList = objectList&#xA;&#xA;end function&#xA;&#xA;sub Test( packageGUID)&#xA;&#xA;&#x9;dim packageID&#x9;' as String&#xA;&#x9;dim parentItem  ' as EA.Package/Element&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarcyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 1&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level1.objectHeight&#x9;= 90&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorPaleGreen&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorRed&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 9&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level2.objectHeight&#x9;= 50&#xA;&#x9;level2.objectWidth = 100&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;'level2.objectstyle.linewidth = 3&#xA;&#x9;'level2.objectstyle.linecolor = colormediumorchid&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;'level2.objectstyle.fontcolor = colorred&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;'&#x9;set level3 = New HierarchyLevel&#xA;'&#x9;&#xA;'&#x9;level3.numObjects = 3&#xA;'&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;'&#x9;&#xA;'&#x9;levelList.Add 3, level3&#xA;&#xA;&#x9;'set parentItem = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;set parentItem = Repository.GetElementByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;createNestedHierarchyDiagram parentItem, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#xA;end sub&#xA;&#xA;'Test &quot;{5AEBAAC2-16D2-4e7f-8201-F110C4B7C6BD}&quot;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="10" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{61E8CA6B-AB59-4a0c-801C-3660F1AED70B}" />
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Color Constants&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="&#xA;&#xA;' If needed, get more color constants from http://cloford.com/resources/colours/500col.htm&#xA;&#xA;const colorBlack &#x9;&#x9;&#x9;= 0&#xA;const colorRed &#x9;&#x9;&#x9;&#x9;= 255&#xA;const colorGreen &#x9;&#x9;&#x9;= 32768&#xA;const colorDarkOrange&#x9;&#x9;= 36095&#xA;const colorGold&#x9;&#x9;&#x9;&#x9;= 55295&#xA;const colorLightCoral &#x9;&#x9;= 8421616&#xA;const colorPaleGreen&#x9;&#x9;= 10025880&#xA;const colorMediumOrchid&#x9;&#x9;= 13850042&#xA;const colorLightSkyBlue&#x9;&#x9;= 16436871&#xA;const colorBlue &#x9;&#x9;&#x9;= 16711680&#xA;const colorDeepSkyBlue&#x9;&#x9;= 16760576&#xA;const colorWhite &#x9;&#x9;&#x9;= 16777215&#xA;const colorOrchid&#x9;&#x9;&#x9;= 8996747&#xA;const colorLightSteelBlue1&#x9;= 16769482&#xA;const colorAzure2&#x9;&#x9;&#x9;= 15658720" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="11" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{F3615FF8-CABB-416a-BEA2-EF443CB88847}" />
			<Column name="ScriptAuthor" value="{40416E36-7C16-4b5e-86AA-4685EE697315}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Set Diagram Styles&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value=" ' Scripts to update styles diagram objects.&#xA; '&#xA;&#xA; &#xA;const STYLE_DELIMITER = &quot;;&quot;&#xA;const STYLE_ASSIGNMENT = &quot;=&quot;&#xA;&#xA;sub SetCurrentDiagramObjectsStyle(elementMetaType, updateStyleList)&#xA;&#xA;&#x9;dim theDiagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set theDiagram  = Repository.GetCurrentDiagram&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#x9;&#xA;&#x9;SetDiagramObjectsStyle theDiagram, elementMetaType, updateStyleList&#xA;&#x9;&#xA;&#x9;theDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectsStyle( theDiagram, elementMetaType, updateStyleList)&#xA;&#x9;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim diagramElement as EA.Element&#xA;&#x9;dim elementID&#xA;&#x9;dim updateStyleArray&#xA;&#x9;dim updateStyle&#xA;&#x9;&#xA;&#x9;updateStyleArray = Split(updateStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;for each diagramObject in theDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;&#x9;elementID = diagramObject.ElementID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;set diagramElement = Repository.GetElementByID(elementID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if diagramElement.metaType = elementMetaType then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each updateStyle in updateStyleArray&#xA;&#x9;&#x9;&#x9;&#x9;SetDiagramObjectStyle diagramObject, updateStyle&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;Repository.ReloadDiagram theDiagram.DiagramID&#xA;&#xA;end sub&#xA;&#xA;sub SetDiagramObjectStyle( diagramObject, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagramObject.Style&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagramObject.Style = lineStyleList&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub SetDiagramStyle( diagram, updateStyle)&#xA;&#xA;&#x9;dim updateStylePartArray&#xA;&#x9;dim updateStyleName&#xA;&#x9;dim lineStyleList&#xA;&#x9;dim lineStyleArray&#xA;&#x9;dim lineStyleIndex&#xA;&#x9;dim lineStyle&#xA;&#x9;dim styleFound&#xA;&#x9;&#xA;&#x9;updateStylePartArray = Split(updateStyle, STYLE_ASSIGNMENT)&#xA;&#x9;&#xA;&#x9;updateStyleName = updateStylePartArray(0)&#xA;&#xA;&#x9;lineStyleList = diagram.ExtendedStyle&#xA;&#x9;&#x9;&#xA;&#x9;lineStyleArray = Split(lineStyleList, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;lineStyleIndex = 0&#xA;&#x9;styleFound = false&#xA;&#x9;&#xA;&#x9;for each lineStyle in lineStyleArray&#xA;&#x9;&#xA;&#x9;&#x9;if InStr( lineStyle, updateStyleName &amp; STYLE_ASSIGNMENT) then&#xA;&#xA;&#x9;&#x9;&#x9;lineStyle = updateStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lineStyleArray(lineStyleIndex) = lineStyle&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;styleFound = true&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;lineStyleIndex = lineStyleIndex + 1&#xA;&#x9;&#x9;&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;lineStyleList = Join(lineStyleArray, STYLE_DELIMITER)&#xA;&#x9;&#xA;&#x9;if not( styleFound) then&#xA;&#x9;&#x9;lineStyleList = lineStyleList &amp; updateStyle &amp; STYLE_DELIMITER&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;diagram.ExtendedStyle = lineStyleList&#xA;&#x9;&#xA;end sub" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="28" />
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782" />
			<Column name="ScriptName" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;&#xA;" />
			<Column name="Script" value="TM Forum Browser Scripts" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="29" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{924F8CD3-A240-410d-A071-2F0E51A21C09}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create ABE Dia (4x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;'&#x9;&#x9;&#x9;for each element in thePackage.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage,  levelList, &quot;ABE&quot;, false&#x9;&#x9;'''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;ABE&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level1.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 345&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;'level1.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 18&#xA;&#x9;'level1.objectStyle.fontColor = colorGold&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 2&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#xA;&#x9;level2.horizSpace = 5&#xA;&#x9;level2.vertOffset = 60&#xA;&#x9;level2.vertSpace = 5&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorDeepSkyBlue&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 10&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'level3.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 2&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level4.objectHeight&#x9;= 60&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 1&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 1&#xA;&#x9;'level4.objectStyle.fillColor = colorLightSkyBlue&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="57" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{D15DC005-76D8-4f62-8256-08D816371E6B}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create ABE Diagrams&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;ABE&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Vertical&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 9&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;ABE&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;ABE&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="94" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{2DD644A0-7DF1-45ee-AE56-D061696618D0}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create Diagram Metric flat &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram, all the metrics are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;custom&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;'next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;Metric&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 4&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level2.objectHeight&#x9;= 50&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillColor = colorWhite&#xA;&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="101" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{E59E40E5-C27D-4e28-9DF3-ACA10615A5FF}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;setstereotype&quot; Type=&quot;Internal&quot; Language=&quot;JScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="!INC Local Scripts.EAConstants-JScript&#xA;// Replace the file below with another element list to reuse this script.&#xA;//!INC Conversion Scripts.ConversionTable&#xA;&#xA;function TypeConversion(sourceObject,sourceStereotype,targetObject, targetStereotype)&#xA;{&#xA;    this.sourceObject = sourceObject;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetObject = targetObject;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var Conversions = new Array();&#xA;&#xA;//Convert standards to MDG standard&#xA;Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;ModelFlowConfig&quot;);&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;&quot;, &quot;Class&quot;, &quot;TMF_BusinessEntity&quot;);//&#xA;//Conversions[0] = new TypeConversion(&quot;Class&quot;, &quot;TMF_Domain&quot;, &quot;Class&quot;, &quot;TMF_AF&quot;);&#xA;// =================================================================================&#xA;// Name: Element Conversion&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// Converts elements type and stereotype as defined in the element conversation table.&#xA;// The table is included as a file so it may be changed for other mappings&#xA;// Navigates from selected package and recursively modifies each element&#xA;// NOTE: Requires a package to be selected in the Project Browser&#xA;//&#xA;// Related APIs&#xA;// =================================================================================&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/element2.html&#xA;// Repository API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/repository3.html&#xA;// Tagged Value API http://www.sparxsystems.com/enterprise_architect_user_guide/10/automation_and_scripting/taggedvalue.html&#xA;&#xA;function StartWithSelectedPackage()&#xA;{&#xA;    // Show the script output window&#xA;    Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;    Session.Output( &quot;JScript Type Converstion&quot; );&#xA;    Session.Output( &quot;===========================&quot; );&#xA;&#xA;    var thePackage as EA.Package;&#xA;    thePackage = Repository.GetTreeSelectedPackage();&#xA;   &#xA;    if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;    {&#xA;        NavigatePackage( &quot;&quot;, thePackage );&#xA;    }&#xA;    else&#xA;    {&#xA;        Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;            &quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;    }&#xA;   &#xA;    Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child&#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function NavigatePackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Add the current package's name to the list&#xA;    Session.Output( indent + currentPackage.Name + &quot; (PackageID=&quot; +&#xA;        currentPackage.PackageID + &quot;)&quot; );&#xA;   &#xA;    // Convert the elements this package contains&#xA;    ConvertElementsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;   &#xA;    // Recursively process any child packages&#xA;    var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;    while ( !childPackageEnumerator.atEnd() )&#xA;    {&#xA;        var childPackage as EA.Package;&#xA;        childPackage = childPackageEnumerator.item();&#xA;        NavigatePackage( indent + &quot;    &quot;, childPackage );&#xA;       &#xA;        childPackageEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertElementsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;   &#xA;    // Iterate through all elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertElements( indent, theElement )&#xA;{&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    currentElement.ObjectType&#xA;    ConvertElement(indent+&quot;    &quot;,currentElement );&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentElement.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the element from BSIF to&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertElement( indent, theElement )&#xA;{&#xA;// Debug Comment out when run for real&#xA;    //Session.Output( indent + &quot;CALLED: ConvertElement with &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; Conversions.length ; i++ )&#xA;    {&#xA;        // If want to limit to stereotype that matches source list then convert&#xA; //       if ( (theElement.Stereotype == Conversions[i].sourceStereotype) &amp;&amp; (theElement.Type == Conversions[i].sourceObject ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED: &quot; + theElement.Name + &quot; (&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+Conversions[i].targetObject+&quot;,&quot;+Conversions[i].targetStereotype+&quot;)&quot; );&#xA;             theElement.Type = Conversions[i].targetObject;&#xA;            //Overright the stereotype list to have only one stereotype&#xA;            theElement.StereotypeEx = Conversions[i].targetStereotype;&#xA;            theElement.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;StartWithSelectedPackage();" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="112" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{909000A2-E08F-4ad4-86D0-4FE2047D7A9C}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;SetPackageAuthor&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name:&#xA;' Author: DBC&#xA;' Purpose: ' Script to set Author property of package and its elements and diagrams.&#xA;' Date: 2022 - 04 -15&#xA;&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;'&#x9;&#x9;case otElement&#xA;'&#x9;&#x9;&#x9;' Code for when an element is selected&#xA;'&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;'&#x9;&#x9;&#x9;set theElement = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;'&#x9;&#x9;&#x9;' Code for when a package is selected&#xA;&#x9;&#x9;&#x9;dim thePackage as EA.Package&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;setpackageElementsAuthor thePackage.PackageGUID, &quot;TMF&quot;&#xA;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otDiagram&#xA;'&#x9;&#x9;&#x9;' Code for when a diagram is selected&#xA;'&#x9;&#x9;&#x9;dim theDiagram as EA.Diagram&#xA;'&#x9;&#x9;&#x9;set theDiagram = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otAttribute&#xA;'&#x9;&#x9;&#x9;' Code for when an attribute is selected&#xA;'&#x9;&#x9;&#x9;dim theAttribute as EA.Attribute&#xA;'&#x9;&#x9;&#x9;set theAttribute = Repository.GetTreeSelectedObject()&#xA;'&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;case otMethod&#xA;'&#x9;&#x9;&#x9;' Code for when a method is selected&#xA;'&#x9;&#x9;&#x9;dim theMethod as EA.Method&#xA;'&#x9;&#x9;&#x9;set theMethod = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;' Error message&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub setpackageElementsAuthor( packageGUID, author)&#xA;&#xA;&#x9;dim package as EA.Package&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim subElement as EA.Element&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid( packageGUID)&#xA;&#x9;&#xA;&#x9;Session.Output &quot;Updating Author property for '&quot; &amp; package.Name &amp; &quot;' package...&quot;&#xA;&#x9;&#xA;&#x9;package.Element.Author = author&#xA;&#x9;package.Element.Update&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;- Element '&quot; &amp; element.Name &amp; &quot;' &quot; &amp; element.ObjectType&#xA;&#xA;&#x9;&#x9;element.Author = author&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;- Element '&quot; &amp; subElement.Name &amp; &quot;' &quot; &amp; subElement.ObjectType&#xA;&#x9;&#x9;&#x9;&#x9;subElement.Author = author&#xA;&#x9;&#x9;&#x9;&#x9;subElement.Update&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;for each diagram in package.Diagrams&#xA;&#x9;&#xA;&#x9;&#x9;Session.Output &quot;- Diagram '&quot; &amp; diagram.Name &amp; &quot;'&quot;&#xA;&#xA;&#x9;&#x9;diagram.Author = author&#xA;&#x9;&#x9;diagram.Update&#xA;&#x9;&#xA;&#x9;next&#xA;Session.Output &quot;done'&quot;&#xA;end sub&#xA;&#xA;&#xA;&#xA;OnProjectBrowserScript&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="113" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{4019A307-103A-4896-9C55-F33640BECF14}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create  Diagram Metrics group&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram&#xA;' Date: 20220614&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subPackage  &#x9;&#x9;as EA.Package&#xA;&#x9;dim subElement  &#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Metric&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 5&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Metric&quot;&#xA;&#x9;level1.objectHeight&#x9;= 60&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 10&#xA;&#x9;'level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;'level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;Metric&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 10&#xA;&#xA;'&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{DAB1B626-9DBE-4411-A684-DCE4B78118B5}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;if element.MetaType = &quot;Metric&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;next&#xA;&#x9;end sub" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="132" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{74C82D85-15B8-4cab-B0AB-A51EB0478FA5}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create Metric group (4x4)&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;'&#x9;&#x9;&#x9;for each element in thePackage.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;ABE&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram thePackage,  levelList, &quot;ABE&quot;, false&#x9;&#x9;'''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;ABE&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level1.elementMetatype = &quot;Metric Group&quot;&#xA;&#x9;level1.objectHeight&#x9;= 120&#xA;&#x9;level1.objectWidth = 345&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fillColor = colorOrchid&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 18&#xA;&#x9;level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 3&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Metric Group&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#xA;&#x9;level2.horizSpace = 5&#xA;&#x9;level2.vertOffset = 30&#xA;&#x9;level2.vertSpace = 5&#xA;&#x9;&#xA;&#x9;'level2.objectStyle.fillColor = colorOrchid&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Metric Group&quot;&#xA;&#x9;level3.objectHeight&#x9;= 60&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 10&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 30&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorLightSteelBlue1&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Metric Group&quot;&#xA;&#x9;level4.objectHeight&#x9;= 60&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 30&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorAzure2&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="133" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{482CEC2A-42A8-40ca-BB52-9BBBDDF5488B}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;create Process Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;eTOM Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Process&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 4&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="139" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{8C98D1EE-0DFB-4d90-96E4-6878C05DC998}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;create process diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram, all the metrics are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Process diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;eTOM&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;eTOM&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="159" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{9590A1CD-A780-4581-89DE-A1F1AB1E9692}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create TAM Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Application&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Application&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Application&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 3&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Application&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 9&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Application&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 10&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;ABE&quot;&#xA;&#x9;level2.objectstyle.fontsize = 9&#xA;&#xA;&#x9;levellist.add 2, level2&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="160" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{A7434D38-0C76-41c0-B055-4B3B96B02DAE}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create TAM diagram Flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram, all the metrics are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Process diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;TAM&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;TAM&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 6&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Application&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="161" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{055C09A3-C086-43a9-980D-D8714C8ED629}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;create function diagram flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram, all the metrics are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;Function&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;Function&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;Function&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="174" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{92597CD5-552E-4b30-AC5C-C185A2613884}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create ODA Diagram Flat&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;' Script Name: Create Metric Diagram&#xA;' Author: gplatania@tmforum.org&#xA;' Purpose: create a flat metric diagram, all the metrics are in a single package&#xA;' Date: 2022-06025&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;Create Function diagram....starting...&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;&#x9;for each element in package.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;if subElement.MetaType = &quot;TMF DMM Dimension&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram package, levelList, &quot;ODA Components&quot;, false ''params: parentItem, levelList, diagramType, openDiagram&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;'&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;Session.Output &quot;Done!&quot;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;'test &quot;{66A70E55-2B99-4e54-8893-B0D7224818DD}&quot;&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#xA;&#x9;dim subElement  as EA.Element&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subElement, levelList, &quot;ODA Components&quot;, false&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;ODA Components&quot;&#xA;&#x9;level1.objectHeight&#x9;= 50&#xA;&#x9;level1.objectWidth = 150&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 9&#xA;&#x9;level1.objectStyle.fontBold = &quot;0&quot; ' true&#xA;&#x9;level1.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;'&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;'&#x9;level2.numobjects = 4&#xA;'&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;'&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;'&#x9;level2.objectHeight&#x9;= 50&#xA;'&#x9;level2.objectWidth = 150&#x9;&#x9;&#xA;'&#x9;level2.horizOffset = 10&#x9;&#xA;'&#x9;level2.horizSpace = 10&#xA;'&#x9;level2.vertOffset = 30&#xA;'&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;'&#x9;level2.objectstyle.fillColor = colorWhite&#xA;'&#x9;level2.objectstyle.fontName = &quot;Calibri&quot;&#xA;'&#x9;level2.objectstyle.fontSize = 8&#xA;&#xA;'&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="177" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{028C3DE2-5C8B-4607-AE9E-747FF439BC62}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create Domain Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim thePackage &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;as EA.Element&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;set thePackage = Repository.GetTreeSelectedObject()&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;&#x9;&#x9;for each element in thePackage.Elements&#xA;'&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;Domain&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CreateNestedHierarchyDiagram element,levelList, &quot;Domain&quot;, false&#x9;&#x9;'''params: parentItem, levelList, diagramType, openDiagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#x9;&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;&#xA;sub Test(packageGUID)&#xA;&#xA;&#x9;dim aPackage &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;set aPackage = Repository.GetPackageByGuid(packageGUID)&#xA;&#x9;set levelList = getDiagramLevelList&#xA;&#x9;CreateNestedHierarchyDiagram aPackage, &quot;Domain&quot;, levelList &#xA;&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 4&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level1.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level1.objectHeight&#x9;= 192&#xA;&#x9;level1.objectWidth = 212&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 10&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 10&#xA;&#x9;&#xA;&#x9;''level1.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level1.objectStyle.lineWidth = 2&#xA;&#x9;'level1.objectStyle.lineColor = colorBlack&#xA;&#x9;level1.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level1.objectStyle.fontSize = 16&#xA;&#x9;level1.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** SECOND LEVEL ***&#xA;&#xA;&#x9;set level2 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level2.numObjects = 3&#xA;&#x9;level2.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level2.objectWidth = 142&#x9;&#x9;&#xA;&#x9;level2.objectHeight = 72&#xA;&#x9;level2.horizOffset = 40&#xA;&#x9;level2.horizSpace = 5&#xA;&#x9;level2.vertOffset = 100&#xA;&#x9;level2.vertSpace = 5&#xA;&#x9;&#xA;&#x9;level2.objectStyle.fillColor = colorLightCoral&#xA;&#x9;'level2.objectStyle.lineWidth = 1&#xA;&#x9;'level2.objectStyle.lineColor = colorBlack&#xA;&#x9;level2.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level2.objectStyle.fontSize = 10&#xA;&#x9;'level2.objectStyle.fontColor = colorWhite&#xA;&#x9;&#xA;&#x9;levelList.Add 2, level2&#xA;&#x9;&#xA;&#x9;' *** THIRD LEVEL ***&#xA;&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level3.objectHeight&#x9;= 21&#xA;&#x9;level3.objectWidth = 120&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 30&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;'level3.vertOffset = 100&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;Domain&quot;&#xA;&#x9;level4.objectHeight&#x9;= 21&#xA;&#x9;level4.objectWidth = 120&#x9;&#xA;&#x9;level4.horizOffset = 10&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 30&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="179" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{84A075F1-A8A3-4660-A20F-4807AB196DE6}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create APi from Component &quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateComponentFunctionfromDiagram.vbs&#xA;' &#xA;Dim componentElementCount, componentControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;componentElementCount = 0&#xA;componentControllerClassCreated = 0&#xA; dim CompStereo &#xA; dim APIStereo &#xA; CompStereo = &quot;TMF_ODAComponents&quot;&#xA; APIStereo = &quot;TMF_API&quot;&#xA; &#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;Session.Output( &quot;ok itss a poackage&quot;)&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkComponentElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root component element&#xA;&#x9;&#x9;&#x9;dim componentElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The controller class created for the component element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set componentElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkComponentElement(componentElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if componentElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;Function created for &quot; &amp; componentControllerClassCreated &amp;  &quot; out of &quot; &amp;  componentElementCount &amp; &quot; Components.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;Function can ONLY be created for elements of type&quot; &amp; CompStereo, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkComponentElement(componentElement) &#xA;&#x9;'The controller class created for the component element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be dFeature. When any other element is selected it will throw an error message to user. &#xA;&#x9;Session.Output( &quot;component stereotype is &quot; + componentElement.Stereotype)&#x9;&#xA;&#x9;&#xA;&#x9;if (componentElement.Stereotype = CompStereo)  then&#xA;&#x9;&#x9;'When the Use Case already exist for feature. Throw an error. &#xA;&#x9;&#x9;Session.Output( &quot;ok its a component&quot;)&#x9;&#xA;&#x9;&#x9;if(checkComponentControllerClass(componentElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;API  already exist for component &quot; + componentElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = componentElement.Name + &quot;_API&quot;&#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = componentElement.Elements.AddNew(className, APIStereo)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = CompStereo&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = componentElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector componentElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the component as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(componentElement, controllerClass) &#xA;&#x9;&#x9;&#x9;componentControllerClassCreated = componentControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;componentElementCount = componentElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type TMF_ODAComponents (2).&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the component element if it has an controller element with name component name + Controller&#xA;Function checkcomponentControllerClass(componentElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = componentElement.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(componentElement.Name + &quot; &quot;, &quot;_API&quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = componentElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = APIStereo) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkcomponentControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkcomponentControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under component to controller as methods. &#xA;Function addMethods(componentElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( componentElement, controllerClass)&#xA;' create a connector between the feature and the use case&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Dependency&quot;&#xA;&#x9;set source = Repository.GetElementByID( componentElement.ElementId)&#xA;&#x9;set target = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;TMF::TMF_DependentAPI&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="183" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{AA154C5D-1BAB-4198-A849-A385D5372929}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create IIC from ISC&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Script Name: CreateUsecaseUserStoryfromDiagram.vbs&#xA;' Version : 4.1&#xA;' Author: Giu &#xA;' Purpose: This method creates a Implementation Independent Component (IIC) from a package, and connect the new ISC with the using a Realization. &#xA;' in the project browser, right click on a package containing Use Cases, &#xA;'  select &quot;Create User Story from Use Case&quot; &#xA;'  Move the created user stories in the proper package&#xA;' Date: 15-Oct-2022&#xA;' Project Browser Script main function&#xA;'&#xA;Dim usecaseElementCount, usecaseControllerClassCreated 'Used to check if there are any use case element are available and throw an error when no use case element is present. &#xA;usecaseElementCount = 0&#xA;usecaseControllerClassCreated = 0&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#xA;&#x9;' Get the type of element selected in the Project Browser&#xA;&#x9;dim treeSelectedType&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;&#xA;&#x9;' Handling Code: Uncomment any types you wish this script to support&#xA;&#x9;' NOTE: You can toggle comments on multiple lines that are currently&#xA;&#x9;' selected with [CTRL]+[SHIFT]+[C].&#xA;&#x9;select case treeSelectedType&#xA;&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;dim basePackageElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packagesubElement as EA.Element&#xA;&#x9;&#x9;&#x9;dim packageElementIndex, packageElementCount &#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;packageElementCount = basePackageElement.Elements.Count - 1&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;set basePackageElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for packageElementIndex = 0 to packageElementCount&#xA;&#x9;&#x9;&#x9;&#x9;set packagesubElement = basePackageElement.Elements.GetAt(packageElementIndex)&#xA;&#x9;&#x9;&#x9;&#x9;checkUsecaseElement(packagesubElement)&#xA;&#x9;&#x9;&#x9;next 'packageElementIndex&#xA;&#x9;&#xA;&#x9;&#x9;case otElement&#xA;&#x9;&#x9;&#x9;'The root usecase element&#xA;&#x9;&#x9;&#x9;dim usecaseElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The ISC class created for the ISC element. &#xA;&#x9;&#x9;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;&#x9;&#x9;dim className &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Temporary variable and not used. &#xA;&#x9;&#x9;&#x9;dim retVal &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'Getting the use case element. &#xA;&#x9;&#x9;&#x9;set usecaseElement = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;checkUsecaseElement(usecaseElement)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;if usecaseElementCount &gt; 0 then&#xA;&#x9;&#x9;Session.Prompt &quot;IIC created for &quot; &amp; usecaseControllerClassCreated &amp;  &quot; out of &quot; &amp;  usecaseElementCount &amp; &quot; IIC.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;IIC can ONLY be created for elements of type ISC .&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;&#xA;Function checkUsecaseElement(usecaseElement) &#xA;&#x9;'The controller class created for the usecase element. &#xA;&#x9;dim controllerClass as EA.Element&#xA;&#x9;&#xA;&#x9;'The name for the controller class. This will be use case name + Controller. All the spaces are removed. &#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;'Temporary value&#xA;&#x9;dim retVal&#xA;&#x9;'The elements should be dFeature. When any other element is selected it will throw an error message to user. &#xA;&#x9;if (usecaseElement.Stereotype = &quot;TMF_ISC&quot;)  then&#xA;&#x9;&#x9;'When the Use Case already exist for feature. Throw an error. &#xA;&#x9;&#x9;if(checkUseCaseControllerClass(usecaseElement)) = 1 then&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;TMF_IIC  already exist for ISC &quot; + usecaseElement.Name, promptOK&#x9;&#x9;&#xA;&#x9;&#x9;'When the controller class is NOT available, then create the class. &#xA;&#x9;&#x9;else &#xA;&#x9;&#x9;&#x9;className = usecaseElement.Name &#xA;&#x9;&#x9;&#x9;className = Replace(className, &quot; &quot;, &quot;&quot;) &#xA;&#x9;&#x9;&#x9;set controllerClass = usecaseElement.Elements.AddNew(className, &quot;TMF_IIC&quot;)&#xA;&#x9;&#x9;&#x9;controllerClass.stereotype = &quot;TMF_ISC&quot;&#xA;&#x9;&#x9;&#x9;controllerClass.Notes = usecaseElement.Notes&#xA;&#x9;&#x9;&#x9;CreateConnector usecaseElement, controllerClass&#xA;&#x9;&#x9;&#x9;controllerClass.Update&#xA;&#x9;&#x9;&#x9;'Call the add Methods method which will add all the activity under the usecase as methods to the Controller class. &#xA;&#x9;&#x9;&#x9;retVal = addMethods(usecaseElement, controllerClass) &#xA;&#x9;&#x9;&#x9;usecaseControllerClassCreated = usecaseControllerClassCreated + 1&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;usecaseElementCount = usecaseElementCount + 1&#xA;&#x9;'else &#xA;&#x9;'&#x9;Session.Prompt &quot;Controllers can ONLY be created for elements of type dBusinessUseCase or dBusinessUseCaseCore.&quot;, promptOK&#x9;&#x9;&#xA;&#x9;end if&#xA;end function&#xA;&#xA;&#xA;'Function to check if the ISC element if it has an IICelement with same name already&#xA;Function checkUseCaseControllerClass(usecaseElement)&#xA;&#x9;dim elementCount, elementIndex&#xA;&#x9;dim controllerClassElement as EA.Element&#xA;&#x9;dim className &#xA;&#x9;&#xA;&#x9;elementCount = usecaseElement.Elements.Count - 1&#xA;&#x9;if elementCount &gt; 0 then &#xA;&#x9;&#x9;for elementIndex = 0 to elementCount&#xA;&#x9;&#x9;&#x9;className = replace(usecaseElement.Name, &quot; &quot;, &quot;&quot;)&#xA;&#x9;&#x9;&#x9;set controllerClassElement = usecaseElement.Elements.GetAt(elementIndex)&#xA;&#x9;&#x9;&#x9;if (controllerClassElement.stereotype = &quot;TMF_IIC&quot;) and (controllerClassElement.Name = className) then&#xA;&#x9;&#x9;&#x9;&#x9;checkUseCaseControllerClass = 1&#xA;&#x9;&#x9;&#x9;&#x9;Exit For&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next 'elementCount&#xA;&#x9;else &#xA;&#x9;&#x9;checkUseCaseControllerClass = 0&#xA;&#x9;end if&#xA;end Function&#xA;&#xA;'Function to add the activities under usecase to controller as methods. &#xA;Function addMethods(usecaseElement, controllerClass) &#xA;&#xA;end Function&#xA;&#xA;&#xA;Function CreateConnector( usecaseElement, controllerClass)&#xA;' create a connector between the feature and the use case&#xA;&#xA;&#x9;dim connMetaclass&#x9;&#x9;&#xA;&#x9;dim source as EA.Element&#xA;&#x9;dim target as EA.Element&#xA;&#x9;dim con as EA.Connector&#xA;&#xA;&#x9;connMetaclass = &quot;Realization&quot;&#xA;&#x9;set  target= Repository.GetElementByID( usecaseElement.ElementId)&#xA;&#x9;set source = Repository.GetElementByID( controllerClass.ElementId)&#xA;&#xA;&#x9;set con = target.Connectors.AddNew (connMetaclass, connMetaclass )&#xA;&#x9;con.Stereotype=&quot;TMF::TMF_RealizesComponent&quot;&#xA;&#x9;con.SupplierID = source.ElementID&#xA;&#x9;con.Update&#xA;&#x9;source.Connectors.Refresh&#xA;&#x9;target.Connectors.Refresh&#xA;&#x9;&#xA;end Function&#xA;&#xA;OnProjectBrowserScript&#xA;" />
		</DataRow><DataRow>
			<Column name="ScriptID" value="187" />
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F" />
			<Column name="ScriptName" value="{3D1B7496-0DED-4f1d-8D49-97333B1C49AB}" />
			<Column name="ScriptAuthor" value="{E457733A-18AC-4ff6-8AC0-25CDA10A7CC5}" />
			<Column name="Notes" value="&lt;Script Name=&quot;Create Process Diagram Lev 5-7&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;" />
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC BIZBOK Diagram Utility Scripts.Create Nested Hierarchy Diagram&#xA;!INC BIZBOK Diagram Utility Scripts.Color Constants&#xA;&#xA;sub OnProjectBrowserScript()&#xA;&#x9;&#xA;&#x9;dim treeSelectedType&#xA;&#x9;dim package &#x9;&#x9;&#x9;as EA.Package&#xA;&#x9;dim levelList &#x9;&#x9;&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;&#x9;&#x9;as EA.Element ' lev 1&#xA;&#x9;dim subElement &#x9;&#x9;&#x9;as EA.Element ' lev 2&#xA;&#x9;dim subsubElement&#x9;&#x9;as EA.Element ' lev 3&#xA;&#x9;dim subsubsubElement&#x9;&#x9;as EA.Element ' lev 4&#xA;&#x9;dim startElement&#x9;&#x9;as EA.Element&#xA;&#xA;&#x9;treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;select case treeSelectedType&#x9;&#xA;&#x9;&#x9;case otPackage&#xA;&#x9;&#x9;&#x9;Session.Output &quot;package selected&quot;&#xA;&#x9;&#x9;&#x9;set package = Repository.GetTreeSelectedObject()&#xA;&#x9;&#x9;&#x9;set levelList = getDiagramLevelList&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each subElement in element.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for each subsubElement in subElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'for each subsubsubElement in subsubElement.Elements&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output &quot;element type &quot; + element.MetaType + &quot; found!&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element.MetaType = &quot;eTOM Process&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;createNestedHierarchyDiagram subsubElement, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'createNestedHierarchyDiagram subsubsubElement, levelList, &quot;custom&quot;, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;next&#x9;&#x9;&#xA;&#x9;&#x9;case else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#x9;&#x9;&#x9;&#xA;&#x9;end select&#xA;&#x9;&#x9;Session.Output &quot;done&quot;&#xA;end sub&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;OnProjectBrowserScript&#xA;'test(&quot;{B8FDEF86-54B6-4964-B33D-2A7783432493}&quot;)&#xA;&#xA;&#xA;sub Test(packageGUID)&#xA;&#x9;dim package &#x9;As EA.Package&#xA;&#x9;dim levelList&#x9;' as Dictionary(Of HierarchyLevel)&#xA;&#x9;dim element&#x9;&#x9;as EA.Element&#x9;&#xA;&#x9;Session.Output &quot;starting&quot;&#xA;&#x9;set package = Repository.GetPackageByGuid(packageGUID)&#x9;&#xA;&#x9;set levelList = getDiagramLevelList&#x9;&#xA;&#x9;Session.Output &quot;found &quot; + cstr(package.Elements.Count) + &quot; elements!&quot;&#xA;&#x9;for each element in package.Elements&#xA;&#x9;&#x9;if element.MetaType = &quot;Process&quot; then&#xA;&#x9;&#x9;&#x9;createNestedHierarchyDiagram element, levelList, &quot;Custom&quot;, false&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;end sub&#xA;&#xA;function getDiagramLevelList&#xA;&#xA;&#x9;dim levelList&#x9;' as Scripting.Dictionary(Of HierarchyLevel)&#xA;&#x9;dim level1&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level2&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level3&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;dim level4&#x9;&#x9;' as HierarchyLevel&#xA;&#x9;&#xA;&#x9;set levelList = CreateObject(&quot;Scripting.Dictionary&quot;)&#xA;&#x9;&#xA;&#x9;' *** FIRST LEVEL ***&#xA;&#x9;&#xA;&#x9;set level1 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level1.numObjects = 2&#xA;&#x9;level1.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level1.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level1.objectHeight&#x9;= 100&#xA;&#x9;level1.objectWidth = 200&#x9;&#x9;&#xA;&#x9;level1.horizOffset = 10&#x9;&#xA;&#x9;level1.horizSpace = 20&#xA;&#x9;level1.vertOffset = 10&#xA;&#x9;level1.vertSpace = 20&#xA;&#x9;&#xA;&#x9;level1.objectStyle.fontName = &quot;Calibri&quot;&#xA;&#x9;level1.objectStyle.fontSize = 12&#xA;&#x9;level1.objectStyle.fontBold = &quot;1&quot; ' true&#xA;&#x9;&#xA;&#x9;levelList.Add 1, level1&#xA;&#x9;&#xA;&#x9;' *** 2nd LEVEL ***&#xA;&#x9;&#xA;&#x9;set level2 = new hierarchylevel&#xA;&#x9;&#xA;&#x9;level2.numobjects = 3&#xA;&#x9;level2.flowdirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;level2.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level2.objectHeight&#x9;= 60&#xA;&#x9;level2.objectWidth = 180&#x9;&#x9;&#xA;&#x9;level2.horizOffset = 20&#x9;&#xA;&#x9;level2.horizSpace = 10&#xA;&#x9;level2.vertOffset = 50&#xA;&#x9;level2.vertSpace = 10&#xA;&#x9;&#xA;&#x9;level2.objectstyle.fillcolor = colorWhite&#xA;&#x9;level2.objectstyle.fontname = &quot;Calibri&quot;&#xA;&#x9;level2.objectstyle.fontsize = 10&#xA;&#x9;levellist.add 2, level2&#x9;&#xA;&#x9;&#xA;&#x9;' *** 3rd LEVEL ***&#xA;&#x9;set level3 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level3.numObjects = 3&#xA;&#x9;level3.flowDirection = TOP_DOWN_FLOW_DIRECTION&#xA;&#xA;&#x9;level3.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level3.objectHeight&#x9;= 50&#xA;&#x9;level3.objectWidth = 160&#x9;&#x9;&#xA;&#x9;level3.horizOffset = 20&#xA;&#x9;level3.horizSpace = 3&#xA;&#x9;level3.vertOffset = 50&#xA;&#x9;level3.vertSpace = 3&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;level3.objectStyle.fillColor = colorWhite&#xA;&#x9;'level3.objectStyle.lineWidth = 1&#xA;&#x9;'level3.objectStyle.lineColor = colorBlack&#xA;&#x9;level3.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level3.objectStyle.fontSize = 8&#xA;&#x9;'level3.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 3, level3&#xA;&#x9;&#xA;&#x9;' *** FOURTH LEVEL ***&#xA;&#xA;&#x9;set level4 = New HierarchyLevel&#xA;&#x9;&#xA;&#x9;level4.numObjects = 3&#xA;&#x9;level4.flowDirection = LEFT_RIGHT_FLOW_DIRECTION&#xA;&#x9;&#xA;&#x9;level4.elementMetatype = &quot;eTOM Process&quot;&#xA;&#x9;level4.objectHeight&#x9;= 40&#xA;&#x9;level4.objectWidth = 140&#x9;&#xA;&#x9;level4.horizOffset = 20&#xA;&#x9;level4.horizSpace = 3&#xA;&#x9;level4.vertOffset = 50&#xA;&#x9;level4.vertSpace = 3&#xA;&#x9;level4.objectStyle.fillColor = colorWhite&#xA;&#x9;'level4.objectStyle.lineWidth = 1&#xA;&#x9;'level4.objectStyle.lineColor = colorBlack&#xA;&#x9;level4.objectStyle.fontName = &quot;Arial&quot;&#xA;&#x9;level4.objectStyle.fontSize = 8&#xA;&#x9;'level4.objectStyle.fontColor = colorBlack&#xA;&#x9;&#xA;&#x9;levelList.Add 4, level4&#xA;&#x9;set getDiagramLevelList = levelList&#xA;&#x9;&#x9;&#xA;end function" />
		</DataRow></DataSet>
</RefData>
