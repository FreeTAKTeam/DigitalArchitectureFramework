<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Diagram Scripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{57478F50-1F14-4930-8D81-41A0169B743B}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Common.Print-Array&#xA;!INC Common.Sort-Array&#xA;!INC Common.color-picker&#xA;!INC EAScriptLib.VBScript-Logging&#xA;!INC PlantUML.Create-Activity-PlantUML&#xA;!INC PlantUML.Create-Class-PlantUML&#xA;!INC PlantUML.Create-Component-PlantUML&#xA;!INC PlantUML.Create-Deployment-PlantUML&#xA;!INC PlantUML.Create-Sequence-PlantUML&#xA;!INC PlantUML.Create-UseCase-PlantUML&#xA;!INC PlantUML.Create-C4-PlantUML&#xA;&#xA;'LOGLEVEL=LOGLEVEL_ERROR&#xA;'LOGLEVEL=LOGLEVEL_INFO&#xA;'LOGLEVEL=LOGLEVEL_WARNING&#xA;'LOGLEVEL=LOGLEVEL_DEBUG&#xA;LOGLEVEL=LOGLEVEL_TRACE&#xA;&#xA;'&#xA;' Script Name: Create PlantUML Script&#xA;' Author: David Anderson&#xA;' Purpose: Wrapper script to appear in the Diagram Scripting group  &#xA;' &#x9;&#x9;   responsible for directing to the relevant script by diagram type.  &#xA;' Date: 11-March-2019&#xA;'&#xA;' Change Log:&#xA;' 18-Sept-2022:&#x9;&#x9;Add C4 Diagram support&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;Dim selectedObject as EA.DiagramObject&#xA;Dim theSelectedElement as EA.Element&#xA;&#xA;dim element_array (99,12)&#xA;dim relationship_array (99,4)&#xA;dim e&#x9;&#x9;&#x9;&#x9;'index for element_array&#xA;dim r&#x9;&#x9;&#x9;&#x9;'index for relationship_array&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Generate PlantUML script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;if not theSelectedElement is nothing _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;select case currentDiagram.Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Activity&quot;&#x9;&#x9;call CreateActivityPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Logical&quot;&#x9;&#x9;call CreateClassPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Component&quot;&#x9;call CreateComponentPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Deployment&quot;&#x9;call CreateDeploymentPlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;call CreateSequencePlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Use Case&quot;&#x9;&#x9;call CreateUseCasePlantUML ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;call LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Done&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Common"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{897C0B38-2C75-4b72-A88C-E14611BCE05C}"/>
			<Column name="ScriptAuthor" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Sort-Array&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Sort_Array&#xA;' Author: David Anderson&#xA;' Purpose: Sort a multi dimensional array&#xA;' Date: 3-Feb-2019&#xA;'&#xA;'==-----------------------------------------------------------==&#xA;'== This entire piece of code was shamelessly stolen from     ==&#xA;'==  the 4 Guys From Rolla WebWeekly newsletter, translated   ==&#xA;'==  to VBScript and changed into server-side ASP code.       ==&#xA;'== Every effort has been made to keep comments intact.       ==&#xA;'==                                                           ==&#xA;'== This version sorts 2-dimensional arrays on a single field ==&#xA;'==-----------------------------------------------------------==&#xA;&#xA;&#xA;Sub SwapRows(ary,row1,row2)&#xA;  '== This proc swaps two rows of an array &#xA;  Dim x,tempvar&#xA;  For x = 0 to Ubound(ary,2)&#xA;    tempvar = ary(row1,x)    &#xA;    ary(row1,x) = ary(row2,x)&#xA;    ary(row2,x) = tempvar&#xA;  Next&#xA;End Sub  'SwapRows&#xA;&#xA;Sub QuickSort(vec,loBound,hiBound,SortField)&#xA;&#xA;  '==--------------------------------------------------------==&#xA;  '== Sort a 2 dimensional array on SortField                ==&#xA;  '==                                                        ==&#xA;  '== This procedure is adapted from the algorithm given in: ==&#xA;  '==    ~ Data Abstractions &amp; Structures using C++ by ~     ==&#xA;  '==    ~ Mark Headington and David Riley, pg. 586    ~     ==&#xA;  '== Quicksort is the fastest array sorting routine for     ==&#xA;  '== unordered arrays.  Its big O is  n log n               ==&#xA;  '==                                                        ==&#xA;  '== Parameters:                                            ==&#xA;  '== vec       - array to be sorted                         ==&#xA;  '== SortField - The field to sort on (2nd dimension value) ==&#xA;  '== loBound and hiBound are simply the upper and lower     ==&#xA;  '==   bounds of the array's 1st dimension.  It's probably  ==&#xA;  '==   easiest to use the LBound and UBound functions to    ==&#xA;  '==   set these.                                           ==&#xA;  '==--------------------------------------------------------==&#xA;&#xA;  Dim pivot(),loSwap,hiSwap,temp,counter&#xA;  Redim pivot (Ubound(vec,2))&#xA;&#xA;  '== Two items to sort&#xA;  if hiBound - loBound = 1 then&#xA;    if vec(loBound,SortField) &gt; vec(hiBound,SortField) then Call SwapRows(vec,hiBound,loBound)&#xA;  End If&#xA;&#xA;  '== Three or more items to sort&#xA;  &#xA;  For counter = 0 to Ubound(vec,2)&#xA;    pivot(counter) = vec(int((loBound + hiBound) / 2),counter)&#xA;    vec(int((loBound + hiBound) / 2),counter) = vec(loBound,counter)&#xA;    vec(loBound,counter) = pivot(counter)&#xA;  Next&#xA;&#xA;  loSwap = loBound + 1&#xA;  hiSwap = hiBound&#xA;  &#xA;  do&#xA;    '== Find the right loSwap&#xA;    while loSwap &lt; hiSwap and vec(loSwap,SortField) &lt;= pivot(SortField)&#xA;      loSwap = loSwap + 1&#xA;    wend&#xA;    '== Find the right hiSwap&#xA;    while vec(hiSwap,SortField) &gt; pivot(SortField)&#xA;      hiSwap = hiSwap - 1&#xA;    wend&#xA;    '== Swap values if loSwap is less then hiSwap&#xA;    if loSwap &lt; hiSwap then Call SwapRows(vec,loSwap,hiSwap)&#xA;&#xA;&#xA;  loop while loSwap &lt; hiSwap&#xA;  &#xA;  For counter = 0 to Ubound(vec,2)&#xA;    vec(loBound,counter) = vec(hiSwap,counter)&#xA;    vec(hiSwap,counter) = pivot(counter)&#xA;  Next&#xA;    &#xA;  '== Recursively call function .. the beauty of Quicksort&#xA;    '== 2 or more items in first section&#xA;    if loBound &lt; (hiSwap - 1) then Call QuickSort(vec,loBound,hiSwap-1,SortField)&#xA;    '== 2 or more items in second section&#xA;    if hiSwap + 1 &lt; hibound then Call QuickSort(vec,hiSwap+1,hiBound,SortField)&#xA;&#xA;End Sub  'QuickSort"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="7"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5BBA00A6-61B2-4631-8B2A-0FA6D96D6146}"/>
			<Column name="ScriptAuthor" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Print-Array&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Sub PrintArray(vec,lo,hi)&#xA;  '==-----------------------------------------==&#xA;  '== Print out an array from the lo bound    ==&#xA;  '==  to the hi bound.  Highlight the column ==&#xA;  '==  whose number matches parm mark         ==&#xA;  '==-----------------------------------------==&#xA;&#xA;  Dim i,j,row&#xA;  call LOGTrace( &quot;PrintArray: lo(&quot; &amp;  lo &amp; &quot;),hi(&quot; &amp; hi &amp; &quot;)&quot;)&#xA;&#xA;  For i = lo to hi&#xA;&#x9;row=&quot;&quot;&#xA;&#x9;For j = 0 to Ubound(vec,2)&#xA;&#x9;&#x9;if j=0 then&#xA;&#x9;&#x9;&#x9;row = vec(i,j) &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;row = row &amp; &quot;:&quot; &amp; vec(i,j) &#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;    'call Session.Output(row)&#xA;&#x9;call LOGDebug (row)&#xA;&#xA;  Next&#xA;  call LOGDebug( &quot;end of array&quot;)&#xA;  &#xA;End Sub  'PrintArray"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{02C2D9C8-9352-4e62-9600-AA52858DB3F5}"/>
			<Column name="ScriptAuthor" value="{1C68123F-E67B-450d-AC1E-6F7BFC916F8C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create Sequence Diagram via PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Common.Print-Array&#xA;!INC Common.color-picker&#xA;!INC EAScriptLib.VBScript-Logging&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;LOGLEVEL=1&#x9;&#x9;'INFO&#xA;'LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: GenerateSequenceDiagramViaPlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Import PlantUML Script into an EA diagram  &#xA;' Date: 11-Feb-2019&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;dim timeline_array (99,7)&#x9;&#x9;&#x9;'store timeline elements &#xA;dim sequence_array (99,7)&#x9;&#x9;&#x9;'store interations&#xA;dim layout_array (99, 7)&#x9;&#x9;&#x9;'store coridinates of all sequences and fragments that needs to be positioned&#xA;&#xA;dim left&#xA;dim t&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'timeline array index&#xA;dim s&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'sequence array index&#xA;dim f&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'fragment array index&#xA;dim l&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'layout array index&#xA;&#xA;dim fragment_level&#x9;&#x9;&#x9;&#x9;&#x9;'fragment level indicator&#xA;dim partition_level&#x9;&#x9;&#x9;&#x9;&#x9;'partition level within a fragment&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Create Sequence Diagram via PlantUML------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim PlantUML&#xA;&#x9;dim word&#xA;&#x9;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;'check..'&#xA;&#x9;&#x9;if currentDiagram.Type = &quot;Sequence&quot; then&#xA;&#x9;&#x9;&#x9;' Get a reference to any selected objects&#xA;&#x9;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;&#x9;'dim diagramObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;'dim element as EA.Element&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;&#x9;&#x9;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if not theSelectedElement is nothing and theSelectedElement.ObjectType = otElement and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'split note..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;PlantUML&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;left=30&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set initial &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;fragment_level=0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PlantUML = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for i = 0 to Ubound(PlantUML)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Processing: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not PlantUML(i) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not Asc(PlantUML(i)) = 39  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;word=split(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case ucase(word(0))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;PARTICIPANT&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTROL&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ENTITY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COLLECTIONS&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DATABASE&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;END&quot; &#x9;&#x9;&#x9;resize_diagramObject(PlantUML(i))&#x9;&#x9;&#x9;'box or a partition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTIVATE&quot; &#x9;'Session.Output( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DEACTIVATE&quot; &#x9;'Session.Output( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ALT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;OPT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BREAK&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LOOP&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CRITICAL&quot; &#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9; &#x9;'add fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ELSE&quot; &#x9;&#x9;add_partition(PlantUML(i) ) &#x9;&#x9;&#x9;&#x9;'add partition to fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;create_sequence(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'replace with a regex expression to make sure sctipt line si indeed a sequence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGTrace( &quot;**Timeline Array**&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Call PrintArray (timeline_array,0,t-1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call layout_objects&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set relative coordinates of seqeunces &amp; fragments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGTrace( &quot;**Layout Array**&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Done&quot; , promptOK&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot; , promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;&#xA;sub create_timeline(PlantUML)&#xA;dim i&#xA;dim word&#xA;dim sql&#xA;dim elementName&#xA;dim elementType&#xA;dim elementStereotype&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim width&#xA;dim diagramObjectName&#xA;&#x9;call LOGTrace(&quot;create_timeline(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;word=split(PlantUML)&#xA;&#x9;select case Ucase(word(0))&#xA;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;elementType = &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;elementType = &quot;Actor&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;DATABASE&quot; &#x9;elementType = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;database&quot;&#xA;&#x9;&#x9;case &quot;BOUNDARY&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;boundary&quot;&#xA;&#x9;&#x9;case &quot;CONTROL&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;control&quot;&#xA;&#x9;&#x9;case &quot;ENTITY&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;entity&quot;&#xA;&#x9;&#x9;case &quot;COLLECTIONS&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;collections&quot;&#xA;&#x9;&#x9;case else&#x9;&#x9;&#x9;elementType = &quot;Sequence&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;if Asc(word(1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;elementName = mid(word(1),2)&#xA;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;for i = 2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;elementName = word(1)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;sql =&quot;SELECT Object_ID FROM t_object WHERE t_object.Name =&quot; &amp; chr(34) &amp; elementName &amp; chr(34) &amp; &quot; and t_object.Object_Type = &quot; &amp; chr(34) &amp; elementType &amp; chr(34)&#xA;&#x9;call LOGDebug ( &quot;sql: &quot; &amp; sql)&#xA;&#xA;&#x9;set elements=Repository.GetElementSet(sql,2)&#xA;&#x9;call LOGDebug (&quot;elements returned: &quot; &amp; elements.Count)&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;'add element&#xA;&#x9;&#x9;set elements = currentPackage.Elements&#xA;&#x9;&#x9;set element = elements.AddNew( elementName, elementType )&#xA;&#x9;&#x9;element.Stereotype = elementStereotype&#xA;&#x9;&#x9;if instr(Ucase(PlantUML),&quot; AS &quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;element.Alias = elementAlias(PlantUML)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;dim borderStyle&#xA;&#x9;&#x9;&#x9;set borderStyle = element.Properties(&quot;BorderStyle&quot;)&#xA;&#x9;&#x9;&#x9;borderStyle.value = &quot;Solid&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;currentPackage.elements.Refresh&#xA;&#x9;&#x9;call LOGInfo( &quot;Added Element: &quot; &amp; element.Name &amp; &quot; (ID=&quot; &amp; element.ElementID &amp; &quot;) in package &quot; &amp; currentPackage.Name )&#xA;&#x9;else&#xA;&#x9;&#x9;set element = Repository.GetElementByID(elements.GetAt(0).ElementID)&#xA;&#x9;end if&#xA;&#xA;&#x9;&#xA;&#x9;if elementType=&quot;Boundary&quot; then&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=28;b=-278&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=50;b=-250&quot;&#xA;&#x9;end if &#xA;&#x9;left=left+width+45&#xA;&#x9;set DiagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, elementType)&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;'default color&#xA;&#x9;if instr(PlantUML,&quot;#&quot;) &gt; 0 then&#xA;&#x9;&#x9;diagramObject.BackgroundColor = color(PlantUML)&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagramObjects.Refresh&#xA;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#xA;'add to tineline_array&#xA;&#x9;timeline_array (t,0) = element.ElementID&#xA;&#x9;timeline_array (t,1) = diagramObject.InstanceID&#xA;&#x9;timeline_array (t,2) = element.Name&#xA;&#x9;timeline_array (t,3) = element.Alias&#xA;&#x9;timeline_array (t,4) = Ucase(word(0)) 'PlantUML participant&#xA;&#x9;timeline_array (t,5) = diagramObject.left&#xA;&#x9;timeline_array (t,6) = diagramObject.right&#xA;&#x9;t=t+1&#xA;&#x9;call LOGTrace(&quot;create_timeline&quot;)&#xA;end sub&#xA;&#xA;sub resize_diagramObject(script)&#xA;dim i&#xA;dim diagramObject as EA.DiagramObject&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;if ucase(script) = &quot;END BOX&quot; then&#xA;&#x9;&#x9;'find box in the timeline_array&#xA;&#x9;&#x9;for i = t to 0 step -1&#xA;&#x9;&#x9;&#x9;if timeline_array (i,4) = &quot;BOX&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.right = left&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left=left+15&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add fragment end to layout array&#xA;&#x9;&#x9;layout_array (l,0) = fragment_level&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;layout_array (l,1) = &quot;End&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;&#x9;'layout_array (l,2) = &quot;&quot;&#x9;&#x9;&#x9;'id of the connector&#xA;&#x9;&#x9;l=l+1&#xA;&#x9;&#x9;fragment_level = fragment_level-1&#xA;&#x9;end if&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject&quot;)&#xA;&#xA;end sub&#xA;&#xA;sub create_sequence(script)&#xA;dim word&#xA;dim i&#xA;dim element as EA.Element &#xA;dim connector as EA.Connector&#xA;&#xA;&#x9;call LOGTrace( &quot;create sequence(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;word=split(script)&#xA;&#x9;&#xA;&#x9;'add to sequence array&#xA;&#x9;'Session.Output( &quot;word count(&quot; &amp; ubound(word)+1 &amp; &quot;)&quot;)&#xA;&#x9;sequence_array (s,0) = timelineElementID(word(0))&#x9;'source elementID&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;sequence_array (s,1) = word(1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'interaction type&#xA;&#x9;sequence_array (s,2) = timelineElementID(word(2))&#x9;'target elementID&#xA;&#xA;&#x9;'create connector&#xA;&#x9;set element = Repository.GetElementByID (sequence_array (s,0))&#xA;&#x9;set connector = element.Connectors.AddNew(&quot;&quot;,&quot;Sequence&quot;)&#xA;&#x9;connector.SupplierID = sequence_array (s,2)&#xA;&#x9;connector.SequenceNo = (s+1)*10&#xA;&#x9;connector.Name = connectorName(script)&#xA;&#x9;connector.DiagramID = currentDiagram.DiagramID&#xA;&#xA;&#x9;sequence_array (s,3) = connector.Name&#xA;&#x9;sequence_array (s,4) = synch(word(1))&#xA;&#x9;sequence_array (s,5) = signature(script)&#xA;&#x9;sequence_array (s,6) = isReturn(word(1))&#xA;&#x9;sequence_array (s,7) = connector.ConnectorID&#xA;&#x9;&#xA;&#x9;connector.Update&#xA;&#x9;element.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;dim sql&#xA;&#x9;sql =&quot;UPDATE t_connector SET PData1 = '&quot; &amp; sequence_array (s,4) &amp; &quot;', PData2 = '&quot; &amp; sequence_array (s,5)  &amp; &quot;', PData4 = '&quot; &amp; sequence_array (s,6) &amp; &quot;' WHERE Connector_Id = &quot; &amp; connector.ConnectorID &amp; &quot;;&quot;&#xA;&#x9;call LOGDebug ( &quot;SQL: &quot; &amp; sql)&#xA;&#x9;&#xA;&#x9;Repository.Execute(sql)&#xA;&#x9;set connector = Repository.GetConnectorByID(connector.ConnectorID)&#x9;&#xA;&#x9;element.Update&#xA;&#x9;call LOGDebug (&quot;+created connector (&quot; &amp; connector.ConnectorID &amp; &quot;)&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;vbtab &amp; vbtab &amp; vbtab &amp; &quot; synch: &quot; &amp; connector.MiscData(0) )&#xA;&#x9;'Session.Output( &quot; signature: &quot; &amp; connector.MiscData(1))&#xA;&#x9;'Session.Output( &quot; isReturn: &quot; &amp; connector.MiscData(3))&#xA;&#x9;'Session.Output( &quot; startpoint x: &quot; &amp; connector.StartPointX )&#xA;&#x9;'Session.Output( &quot; startpoint y: &quot; &amp; connector.StartPointY )&#xA;&#x9;'Session.Output( &quot; endpoint x: &quot; &amp; connector.EndPointX )&#xA;&#x9;'Session.Output( &quot; endpoint y: &quot; &amp; connector.EndPointY )&#xA;&#x9;'Session.Output( &quot; name: &quot; &amp; connector.Name )&#xA;&#x9;'Session.Output( &quot; type: &quot; &amp; connector.Type )&#xA;&#x9;'Session.Output( &quot; objecttype: &quot; &amp; connector.ObjectType)&#xA;&#x9;'Session.Output( &quot; styleEx: &quot; &amp; connector.StyleEx )&#xA;&#x9;&#xA;&#x9;'add sequence to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#xA;&#x9;if connector.ClientID = connector.SupplierID then&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence2Self&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;end if&#xA;&#x9;layout_array (l,2) = connector.ConnectorID&#x9;'id of the connector&#xA;&#x9;l=l+1&#xA;&#x9;s=s+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub create_fragment(script)&#xA;&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramObjectName&#xA;dim i&#xA;dim fragmentName&#xA;&#xA;&#x9;'create element&#xA;&#x9;i = instr(script, &quot; &quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;fragmentName = mid(script, i+1)&#xA;&#x9;end if&#xA;&#x9;set elements = currentPackage.Elements&#xA;&#x9;set element = elements.AddNew( fragmentName, &quot;InteractionFragment&quot; )&#xA;&#x9;element.Subtype = fragment_type(mid(script,1, i-1))&#xA;&#x9;element.Update&#xA;&#x9;elements.Refresh&#xA;&#x9;call LOGInfo( &quot;added fragment: &quot; &amp; fragmentName &amp; &quot; (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#xA;&#x9;fragment_level=fragment_level+1&#x9;&#xA;&#xA;&#x9;'add fragment to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;InteractionFragment&quot;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub add_partition(script)&#xA;dim element as EA.Element&#xA;dim elementId&#xA;dim diagramObject as EA.DiagramObject&#xA;dim partitions as EA.Collection&#xA;dim partition as EA._Partition&#xA;dim partitionName&#xA;dim i&#xA;&#x9;i = instr(script, &quot; &quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;partitionName = mid(script, i+1)&#xA;&#x9;end if&#xA;&#xA;&#x9;'get fragment element using the id stored in the layout array&#xA;&#x9;for i = l to 0 step-1&#xA;&#x9;&#x9;if layout_array (i,1) = &quot;InteractionFragment&quot; then&#xA;&#x9;&#x9;&#x9;elementId = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'&#xA;&#x9;set element = Repository.GetElementByID(elementId)&#xA;&#x9;set partitions = element.Partitions&#xA;&#x9;set partition = partitions.AddNew(partitionName,&quot;Partition&quot;)&#xA;&#x9;partition.Size=40&#x9;&#x9;'default&#xA;&#x9;element.Update&#xA;&#x9;currentPackage.elements.Refresh&#xA;&#x9;call LOGInfo( &quot;add partition: &quot; &amp; partitionName &amp; &quot; to Fragment (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#xA;&#x9;'add partition to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;Partition&quot;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;function timelineElementID(word)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineElementID(&quot; &amp; word &amp; &quot;)&quot;)&#xA;&#x9;if right(word,1) = &quot;:&quot; then&#xA;&#x9;&#x9;word = mid(word, 1, len(word)-1)&#x9;&#x9;&#x9;&#x9;'remove trailing :&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;for i = 0 to ubound(timeline_array)&#xA;&#x9;&#x9;if word = timeline_array(i,3) then&#x9;&#x9;&#x9;&#x9;'check using alias&#xA;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if word = timeline_array(i,2) then&#x9;&#x9;&#x9;'check using name&#xA;&#x9;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;call LOGTrace(&quot;timelineElementID=&quot; &amp; timelineElementID )&#xA;&#x9;&#xA;end function&#xA;&#xA;function color(script)&#xA;'color is delimited by #&#xA;'the color value can be either&#xA;'&#x9;- a Hex version of RGB &#xA;'&#x9;- or a standard color name (refer to color-picker script)&#xA;'if a color name is provided, call color-picker to return hex value of RGB&#xA;'if not.. look up get the hex vales by color name&#xA;'return a decimal value of the RGB&#xA;'&#xA;dim word&#xA;dim hexRGB&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;color(&quot; &amp; script &amp; &quot;)&quot; )&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if Asc(word(i)) = 35 then&#x9;&#x9;'check for hash&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;word=&quot; &amp; word(i))&#xA;&#x9;&#x9;&#x9;if ishex(mid(word(i),2,len(word(i))-1)) then&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(word(i),2,6)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(ColorHexByName(Ucase(word(i))),2,6)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;hexRGB=&quot; &amp; hexRGB)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not hexRGB = &quot;&quot; then&#xA;&#x9;&#x9;color=clng(&quot;&amp;h&quot; &amp; mid(hexRGB,5,2) &amp; mid(hexRGB,3,2) &amp; mid(hexRGB,1,2))&#xA;&#x9;&#x9;call LOGDebug( &quot;color decimal=&quot; &amp; color)&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;color=&quot; &amp; color )&#xA;&#x9;&#xA;end function&#xA;&#xA;function ishex(word)&#xA;&#x9;ishex= isnumeric(&quot;&amp;h&quot; &amp; word)&#xA;end function&#xA;&#xA;function elementAlias(script)&#xA;dim i&#xA;dim word&#xA;&#x9;elementAlias=&quot;&quot;&#xA;&#x9;&#xA;&#x9;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;' find  as &#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if ucase(word(i)) = &quot;AS&quot; then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if Asc(word(i+1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;elementAlias = mid(word(i+1),2)&#xA;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;for i = i+2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;elementAlias = word(i+1)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function connectorName(script)&#x9;&#xA;'start with :&#xA;'end with (&#xA;dim x&#xA;dim y&#xA;&#xA;&#x9;x = inStr(script, &quot;:&quot;)&#xA;&#x9;y = inStr(script, &quot;(&quot;)&#xA;&#x9;if x &gt; 0 then&#xA;&#x9;&#x9;if y &gt; x then&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1, y-x-1))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1))&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function synch(arrow)&#xA;&#x9;call LOGTrace(&quot;synch(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;-&amp;gt;&amp;gt;&quot; or _&#x9;&#x9;&#xA;&#x9;&#x9;arrow = &quot;-&gt;&gt;&quot; then&#xA;&#x9;&#x9;synch = &quot;Asynchronous&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;synch = &quot;Synchronous&quot;&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;synch=&quot; &amp; synch)&#xA;end function&#xA;&#xA;function signature(script)&#xA;dim i&#xA;dim j&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#x9;signature=&quot;&quot;&#xA;&#x9;&#xA;&#x9;i = inStr(script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'find first :&#xA;&#x9;j= inStr(i+1,script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;'find second : denoting retrun value&#xA;&#x9;if j &gt; 0 then&#xA;&#x9;&#x9;signature = &quot;retval=&quot; &amp; trim(mid(script,j+1))&#xA;&#x9;else&#xA;&#x9;&#x9;signature = &quot;retval=void&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;i = inStr(script, &quot;()&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'indicates there are no params&#xA;&#x9;if i = 0 then&#xA;&#x9;&#x9;i = inStr(script, &quot;(&quot;)&#xA;&#x9;&#x9;if i &gt; 0 then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add parms&#xA;&#x9;&#x9;&#x9;j = inStr(script, &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;signature = signature &amp; &quot;;params=;paramsDlg=&quot; &amp; trim(mid(script, i+1, j-i-1)) &amp; &quot;;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; signature &amp; &quot;)&quot;)&#xA;&#x9;&#xA;end function&#xA;&#xA;function isReturn(arrow)&#xA;&#x9;call LOGTrace(&quot;isReturn(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;--&amp;gt;&amp;gt;&quot; or _ &#xA;&#x9;&#x9;arrow = &quot;--&gt;&gt;&quot;then&#xA;&#x9;&#x9;isReturn = 1&#xA;&#x9;else&#xA;&#x9;&#x9;isReturn = 0&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;isReturn=&quot; &amp; isReturn)&#xA;&#x9;&#xA;end function&#xA;&#xA;function fragment_type(script)&#xA;&#xA;&#x9;select case script&#xA;&#x9;&#x9;case &quot;alt&quot; &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;&#x9;case &quot;opt&quot; &#x9;&#x9;&#x9;fragment_type = 1&#xA;&#x9;&#x9;case &quot;break&quot; &#x9;&#x9;fragment_type = 2&#xA;&#x9;&#x9;case &quot;par&quot; &#x9;&#x9;&#x9;fragment_type = 3&#xA;&#x9;&#x9;case &quot;loop&quot; &#x9;&#x9;fragment_type = 4&#xA;&#x9;&#x9;case &quot;critical&quot;&#x9;&#x9;fragment_type = 5&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;end select&#xA;end function&#xA;&#xA;sub layout_objects()&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim element as EA.Element&#xA;dim diagramObjectName&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramLink as EA.DiagramLink&#xA;&#xA;dim partition as EA._Partition&#xA;dim top&#xA;dim bottom&#xA;dim LOGLEVEL_SAVE&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;&#xA;&#x9;'LOGDebug (&quot;layout array count l-1=&quot; &amp; l-1 &amp; &quot; Ubound(layout_array)=&quot; &amp; Ubound(layout_array))&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;'call calculate fragment heights (reursively) &#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; then &#xA;&#x9;&#x9;&#x9;layout_array (i,3) =  fragmentHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;Partition&quot; then &#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) = partitionHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'layout_array (i,3) = layout_array (i,3) + height(layout_array (i,1))&#xA;&#x9;&#x9;&#x9;&#x9;'j = sequenceIndex(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;&#x9;'if sequence_array(j,0) = sequence_array(j,2) then&#xA;&#x9;&#x9;&#x9;&#x9;'&#x9;layout_array (i,3) = layout_array (i,3) + 10&#x9;&#x9;'adjust hieght&#xA;&#x9;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'set cordinates of each object&#xA;&#x9;top = -130&#xA;&#xA;&#x9;for i = 0 to l-1&#x9;&#xA;&#x9;&#x9;'set top as an accumulation of object&#xA;&#x9;&#x9;layout_array (i,4) = top &#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; then &#xA;&#x9;&#x9;&#x9;layout_array (i,4) = top + 20&#xA;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4) - layout_array (i,3)&#x9;'bottom&#xA;&#x9;&#x9;&#x9;'set left and right coordinates based on the timelines&#x9;&#xA;&#x9;&#x9;&#x9;call setLeftRightCoordinates(layout_array (i,0),i)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;layout_array (i,4) = top &#xA;&#x9;&#x9;&#x9;top = top - height(layout_array (i,1))&#xA;&#x9;&#x9;&#x9;'self message height&#xA;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;set diagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then &#xA;&#x9;&#x9;&#x9;'get connector &amp; update connector Y coordinates&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'set element = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;'&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;*move sequence(&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; from &quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY &amp; &quot; to &quot; &amp; layout_array (i,4))&#xA;&#x9;&#x9;&#x9;'connector.StartPointX = 1&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.StartPointY = layout_array (i,4)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.EndPointX = 2&#xA;&#x9;&#x9;&#x9;'connector.EndPointY = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;'connector.Update&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'element.Update&#xA;&#x9;&#x9;&#x9;'currentPackage.elements.Refresh&#xA;&#x9;&#x9;&#x9;'create diagramlink&#xA;&#x9;&#x9;&#x9;'set diagramLink = currentDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;'diagramLink.ConnectorID=connector.ConnectorID&#x9;&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot; geometry: &quot; &amp; diagramLink.Geometry )&#xA;&#x9;&#x9;&#x9;'diagramLink.Update&#xA;&#x9;&#x9;&#x9;'currentDiagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#x9;'currentDiagram.Update&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'call LOGInfo( &quot;connector (&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; startX:Y=&quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; then &#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing InteractionFragment &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;'add diagramobject&#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Partition&quot; then&#xA;&#x9;&#x9;&#x9;'update partition size&#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing partition for &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;dim pcount&#xA;&#x9;&#x9;&#x9;pcount=0&#xA;&#x9;&#x9;&#x9;for j = i-1 to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;LOGDebug (&quot;j=&quot; &amp; j)&#xA;&#x9;&#x9;&#x9;&#x9;if layout_array (i,2) = layout_array (j,2) then 'resolve which partition by counting the partitions with the same element id..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pcount=pcount+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;LOGDebug (&quot;increment pcount to &quot; &amp; pcount)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;for each partition in element.Partitions&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Partitition for &quot; &amp; element.ElementID &amp; &quot; &quot; &amp; &quot;name=&quot; &amp; partition.Name &amp; &quot; object type=&quot; &amp; partition.ObjectType &amp; &quot; size=&quot; &amp; partition.size)&#x9;&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;Update partition number &quot; &amp; pcount-1 &amp; &quot; of &quot; &amp; element.Partitions.Count &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;set partition = element.Partitions.GetAt(pcount-1) &#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;partition size to be updated from &quot; &amp; partition.Size &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;partition.Size = layout_array (i,3)&#xA;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;'resize any timline boxes &#xA;&#x9;bottom = 0&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array (i,5) &lt; bottom then&#xA;&#x9;&#x9;&#x9;bottom = layout_array (i,5)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;'&#x9;call LOGDebug( &quot;*resize timeline boxes to &quot; &amp; bottom)&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timeline_array (i,4) = &quot;BOX&quot; then&#xA;'&#x9;&#x9;&#x9;call LOGDebug( &quot;*Box (&quot; &amp; timeline_array(i,0) &amp; &quot;) to be resized&quot;)&#xA;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = bottom - 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currentDiagram.Update&#xA;&#x9;Repository.SaveDiagram(currentDiagram.DiagramID)&#xA;&#x9;'Repository.ReloadPackage(currentPackage.PackageID)&#xA;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;'LOGLEVEL=3&#xA;&#x9;call LOGTrace( &quot;**Layout Array - updated**&quot; )&#xA;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#xA;'LOGLEVEL=2&#xA;&#xA;end sub&#xA;&#xA;function height(thing)&#xA;&#x9;call LOGTrace(&quot;height(&quot; &amp; thing &amp; &quot;)&quot;)&#xA;&#x9;select case thing&#xA;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;&#x9;&#x9;height = 35&#xA;&#x9;&#x9;case &quot;Sequence2Self&quot;&#x9;&#x9;height = 45&#xA;&#x9;&#x9;case &quot;InteractionFragment&quot; &#x9;height = 0&#x9;&#x9;'alt, loop etc&#xA;&#x9;&#x9;case &quot;Partition&quot;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;'else&#xA;&#x9;&#x9;case &quot;End&quot;&#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#xA;&#x9;end select&#xA;&#x9;call LOGTrace(&quot;height=&quot; &amp; height)&#xA;end function&#xA;&#xA;function fragmentHeight(level, start)&#xA;dim i&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;fragmentHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;fragmentHeight=0&#xA;'&#x9;for i = start to Ubound(layout_array) &#xA;&#x9;for i = start to l-1 &#xA;'&#x9;&#x9;if layout_array(i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;exit for&#xA;'&#x9;&#x9;end if&#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;fragmentHeight = fragmentHeight + height(layout_array (i,1))&#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;fragmentHeight=&quot; &amp; fragmentHeight )&#xA;&#xA;end function&#xA;&#xA;function partitionHeight(level, start)&#xA;dim i&#xA;dim LOGLEVEL_SAVE&#xA;&#x9;&#xA;&#x9;LOGLEVEL_SAVE = LOGLEVEL &#xA;'&#x9;LOGLEVEL=4&#x9;&#x9;&#x9;'activate debugging for the sub&#xA;&#xA;&#x9;call LOGTrace( &quot;partitionHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;partitionHeight=height(layout_array (start,1))&#xA;&#x9;for i = start+1 to Ubound(layout_array)&#xA;&#x9;&#x9;'end of partition is not specifically declared..  &#xA;&#x9;&#x9;if layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Partition&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'is dependant upon nuumber of sequences&#xA;&#x9;&#x9;partitionHeight = partitionHeight + height(layout_array (i,1))&#xA;&#x9;&#x9;'end of partition is identified when the level indicator is less than what was passed to it &#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;partitionHeight=&quot; &amp; partitionHeight )&#xA;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setLeftRightCoordinates(level,start)&#xA;'loop thru list of timelines in scope of this level and retrun the lowest value&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim tLeft&#xA;dim tRight&#xA;'LOGLEVEL=3&#x9;&#x9;&#x9;'&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot;)&#xA;&#xA;&#x9;layout_array(start,6) = 400&#xA;&#x9;layout_array(start,7) = 0&#xA;&#xA;&#x9;for i = start to l-1&#xA;&#x9;&#x9;'need some way to identify nested fragments and whether the left and right values need adjusting&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; or _&#xA;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Sequence2Self&quot; then &#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(layout_array(i,2))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;j=timelineIndex(connector.ClientID)&#xA;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft - 25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;'&#x9;&#x9;call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight +25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndex(connector.SupplierID)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft -25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;&#x9;'&#x9;&#x9;call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight + 25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if layout_array(start,6) &lt; 5 then&#x9;&#x9;&#x9;'left coordinate cannot be less than zero&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6)=5&#xA;&#x9;&#x9;&#x9;end if &#xA;&#xA;&#x9;&#x9;&#x9;'check if margins need to adjusted becuase the fragment is nested&#xA;&#x9;&#x9;&#x9;if level &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;for j = start to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(j,0) = level -1 and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(j,1) = &quot;InteractionFragment&quot; then&#x9;&#x9;'scan layout arrary to find previous level fragmant&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,4) = layout_array(j,4) then&#x9;'if top value are the same subtract 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,4) = layout_array(start,4) - 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,5) = layout_array(j,5) then&#x9;'if bottom values are the same add 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,5) = layout_array(start,5) + 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,6) = layout_array(j,6) then&#x9;'if left value are the same add 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = layout_array(start,6) + 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,7) = layout_array(j,7) then&#x9;'if right values are the same subtract 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = layout_array(start,7) - 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates: Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;'LOGLEVEL=2&#x9;&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;function timelineIndex(timelineId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineIndex(&quot; &amp; timelineId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;t=&quot; &amp; t)&#xA;&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timelineId = timeline_array(i,0) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;timelineIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;timelineIndex=&quot; &amp; timelineIndex)&#xA;&#xA;end function&#xA;&#xA;function sequenceIndex(sequenceId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;sequenceIndex(&quot; &amp; sequenceId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;s=&quot; &amp; s)&#xA;&#xA;&#x9;for i = 0 to s-1&#xA;&#x9;&#x9;if sequenceId = sequence_array(i,7) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;sequenceIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;sequenceIndex=&quot; &amp; sequenceIndex)&#xA;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{08B025D4-AA64-43d4-96F8-A7CBC2781AB9}"/>
			<Column name="ScriptAuthor" value="{C8A1D2C2-3FFE-4b41-AE05-6E528E76CC44}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;color-picker&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: color-picker&#xA;' Author: David Anderson&#xA;' Purpose: utilise standard html color name and the corresponding hex values&#xA;' Date: 14-Feb_2019&#xA;'&#xA;dim color_array (154,2)&#xA;'loadup color_array&#xA;color_array(0,0)=&quot;#BLACK&quot;&#xA;color_array(0,1)=&quot;#000000&quot;&#xA;color_array(1,0)=&quot;#NAVY&quot;&#xA;color_array(1,1)=&quot;#000080&quot;&#xA;color_array(2,0)=&quot;#DARKBLUE&quot;&#xA;color_array(2,1)=&quot;#00008B&quot;&#xA;color_array(3,0)=&quot;#MEDIUMBLUE&quot;&#xA;color_array(3,1)=&quot;#0000CD&quot;&#xA;color_array(4,0)=&quot;#BLUE&quot;&#xA;color_array(4,1)=&quot;#0000FF&quot;&#xA;color_array(5,0)=&quot;#DARKGREEN&quot;&#xA;color_array(5,1)=&quot;#006400&quot;&#xA;color_array(6,0)=&quot;#GREEN&quot;&#xA;color_array(6,1)=&quot;#008000&quot;&#xA;color_array(7,0)=&quot;#TEAL&quot;&#xA;color_array(7,1)=&quot;#008080&quot;&#xA;color_array(8,0)=&quot;#DARKCYAN&quot;&#xA;color_array(8,1)=&quot;#008B8B&quot;&#xA;color_array(9,0)=&quot;#DEEPSKYBLUE&quot;&#xA;color_array(9,1)=&quot;#00BFFF&quot;&#xA;color_array(10,0)=&quot;#DARKTURQUOISE&quot;&#xA;color_array(10,1)=&quot;#00CED1&quot;&#xA;color_array(11,0)=&quot;#MEDIUMSPRINGGREEN&quot;&#xA;color_array(11,1)=&quot;#00FA9A&quot;&#xA;color_array(12,0)=&quot;#LIME&quot;&#xA;color_array(12,1)=&quot;#00FF00&quot;&#xA;color_array(13,0)=&quot;#SPRINGGREEN&quot;&#xA;color_array(13,1)=&quot;#00FF7F&quot;&#xA;color_array(14,0)=&quot;#AQUA&quot;&#xA;color_array(14,1)=&quot;#00FFFF&quot;&#xA;color_array(15,0)=&quot;#CYAN&quot;&#xA;color_array(15,1)=&quot;#00FFFF&quot;&#xA;color_array(16,0)=&quot;#MIDNIGHTBLUE&quot;&#xA;color_array(16,1)=&quot;#191970&quot;&#xA;color_array(17,0)=&quot;#DODGERBLUE&quot;&#xA;color_array(17,1)=&quot;#1E90FF&quot;&#xA;color_array(18,0)=&quot;#LIGHTSEAGREEN&quot;&#xA;color_array(18,1)=&quot;#20B2AA&quot;&#xA;color_array(19,0)=&quot;#FORESTGREEN&quot;&#xA;color_array(19,1)=&quot;#228B22&quot;&#xA;color_array(20,0)=&quot;#SEAGREEN&quot;&#xA;color_array(20,1)=&quot;#2E8B57&quot;&#xA;color_array(21,0)=&quot;#DARKSLATEGREY&quot;&#xA;color_array(21,1)=&quot;#2F4F4F&quot;&#xA;color_array(22,0)=&quot;#LIMEGREEN&quot;&#xA;color_array(22,1)=&quot;#32CD32&quot;&#xA;color_array(23,0)=&quot;#MEDIUMSEAGREEN&quot;&#xA;color_array(23,1)=&quot;#3CB371&quot;&#xA;color_array(24,0)=&quot;#TURQUOISE&quot;&#xA;color_array(24,1)=&quot;#40E0D0&quot;&#xA;color_array(25,0)=&quot;#ROYALBLUE&quot;&#xA;color_array(25,1)=&quot;#4169E1&quot;&#xA;color_array(26,0)=&quot;#STEELBLUE&quot;&#xA;color_array(26,1)=&quot;#4682B4&quot;&#xA;color_array(27,0)=&quot;#DARKSLATEBLUE&quot;&#xA;color_array(27,1)=&quot;#483D8B&quot;&#xA;color_array(28,0)=&quot;#MEDIUMTURQUOISE&quot;&#xA;color_array(28,1)=&quot;#48D1CC&quot;&#xA;color_array(29,0)=&quot;#INDIGO&quot;&#xA;color_array(29,1)=&quot;#4B0082&quot;&#xA;color_array(30,0)=&quot;#DARKOLIVEGREEN&quot;&#xA;color_array(30,1)=&quot;#556B2F&quot;&#xA;color_array(31,0)=&quot;#CADETBLUE&quot;&#xA;color_array(31,1)=&quot;#5F9EA0&quot;&#xA;color_array(32,0)=&quot;#CORNFLOWERBLUE&quot;&#xA;color_array(32,1)=&quot;#6495ED&quot;&#xA;color_array(33,0)=&quot;#REBECCAPURPLE&quot;&#xA;color_array(33,1)=&quot;#663399&quot;&#xA;color_array(34,0)=&quot;#MEDIUMAQUAMARINE&quot;&#xA;color_array(34,1)=&quot;#66CDAA&quot;&#xA;color_array(35,0)=&quot;#DIMGREY&quot;&#xA;color_array(35,1)=&quot;#696969&quot;&#xA;color_array(36,0)=&quot;#SLATEBLUE&quot;&#xA;color_array(36,1)=&quot;#6A5ACD&quot;&#xA;color_array(37,0)=&quot;#OLIVEDRAB&quot;&#xA;color_array(37,1)=&quot;#6B8E23&quot;&#xA;color_array(38,0)=&quot;#SLATEGREY&quot;&#xA;color_array(38,1)=&quot;#708090&quot;&#xA;color_array(39,0)=&quot;#LIGHTSLATEGREY&quot;&#xA;color_array(39,1)=&quot;#778899&quot;&#xA;color_array(40,0)=&quot;#MEDIUMSLATEBLUE&quot;&#xA;color_array(40,1)=&quot;#7B68EE&quot;&#xA;color_array(41,0)=&quot;#LAWNGREEN&quot;&#xA;color_array(41,1)=&quot;#7CFC00&quot;&#xA;color_array(42,0)=&quot;#CHARTREUSE&quot;&#xA;color_array(42,1)=&quot;#7FFF00&quot;&#xA;color_array(43,0)=&quot;#AQUAMARINE&quot;&#xA;color_array(43,1)=&quot;#7FFFD4&quot;&#xA;color_array(44,0)=&quot;#MAROON&quot;&#xA;color_array(44,1)=&quot;#800000&quot;&#xA;color_array(45,0)=&quot;#PURPLE&quot;&#xA;color_array(45,1)=&quot;#800080&quot;&#xA;color_array(46,0)=&quot;#OLIVE&quot;&#xA;color_array(46,1)=&quot;#808000&quot;&#xA;color_array(47,0)=&quot;#GREY&quot;&#xA;color_array(47,1)=&quot;#808080&quot;&#xA;color_array(48,0)=&quot;#SKYBLUE&quot;&#xA;color_array(48,1)=&quot;#87CEEB&quot;&#xA;color_array(49,0)=&quot;#LIGHTSKYBLUE&quot;&#xA;color_array(49,1)=&quot;#87CEFA&quot;&#xA;color_array(50,0)=&quot;#BLUEVIOLET&quot;&#xA;color_array(50,1)=&quot;#8A2BE2&quot;&#xA;color_array(51,0)=&quot;#DARKRED&quot;&#xA;color_array(51,1)=&quot;#8B0000&quot;&#xA;color_array(52,0)=&quot;#DARKMAGENTA&quot;&#xA;color_array(52,1)=&quot;#8B008B&quot;&#xA;color_array(53,0)=&quot;#SADDLEBROWN&quot;&#xA;color_array(53,1)=&quot;#8B4513&quot;&#xA;color_array(54,0)=&quot;#DARKSEAGREEN&quot;&#xA;color_array(54,1)=&quot;#8FBC8F&quot;&#xA;color_array(55,0)=&quot;#LIGHTGREEN&quot;&#xA;color_array(55,1)=&quot;#90EE90&quot;&#xA;color_array(56,0)=&quot;#MEDIUMPURPLE&quot;&#xA;color_array(56,1)=&quot;#9370DB&quot;&#xA;color_array(57,0)=&quot;#DARKVIOLET&quot;&#xA;color_array(57,1)=&quot;#9400D3&quot;&#xA;color_array(58,0)=&quot;#PALEGREEN&quot;&#xA;color_array(58,1)=&quot;#98FB98&quot;&#xA;color_array(59,0)=&quot;#DARKORCHID&quot;&#xA;color_array(59,1)=&quot;#9932CC&quot;&#xA;color_array(60,0)=&quot;#YELLOWGREEN&quot;&#xA;color_array(60,1)=&quot;#9ACD32&quot;&#xA;color_array(61,0)=&quot;#SIENNA&quot;&#xA;color_array(61,1)=&quot;#A0522D&quot;&#xA;color_array(62,0)=&quot;#BROWN&quot;&#xA;color_array(62,1)=&quot;#A52A2A&quot;&#xA;color_array(63,0)=&quot;#DARKGREY&quot;&#xA;color_array(63,1)=&quot;#A9A9A9&quot;&#xA;color_array(64,0)=&quot;#LIGHTBLUE&quot;&#xA;color_array(64,1)=&quot;#ADD8E6&quot;&#xA;color_array(65,0)=&quot;#GREENYELLOW&quot;&#xA;color_array(65,1)=&quot;#ADFF2F&quot;&#xA;color_array(66,0)=&quot;#PALETURQUOISE&quot;&#xA;color_array(66,1)=&quot;#AFEEEE&quot;&#xA;color_array(67,0)=&quot;#LIGHTSTEELBLUE&quot;&#xA;color_array(67,1)=&quot;#B0C4DE&quot;&#xA;color_array(68,0)=&quot;#POWDERBLUE&quot;&#xA;color_array(68,1)=&quot;#B0E0E6&quot;&#xA;color_array(69,0)=&quot;#FIREBRICK&quot;&#xA;color_array(69,1)=&quot;#B22222&quot;&#xA;color_array(70,0)=&quot;#DARKGOLDENROD&quot;&#xA;color_array(70,1)=&quot;#B8860B&quot;&#xA;color_array(71,0)=&quot;#MEDIUMORCHID&quot;&#xA;color_array(71,1)=&quot;#BA55D3&quot;&#xA;color_array(72,0)=&quot;#ROSYBROWN&quot;&#xA;color_array(72,1)=&quot;#BC8F8F&quot;&#xA;color_array(73,0)=&quot;#DARKKHAKI&quot;&#xA;color_array(73,1)=&quot;#BDB76B&quot;&#xA;color_array(74,0)=&quot;#SILVER&quot;&#xA;color_array(74,1)=&quot;#C0C0C0&quot;&#xA;color_array(75,0)=&quot;#MEDIUMVIOLETRED&quot;&#xA;color_array(75,1)=&quot;#C71585&quot;&#xA;color_array(76,0)=&quot;#INDIANRED &quot;&#xA;color_array(76,1)=&quot;#CD5C5C&quot;&#xA;color_array(77,0)=&quot;#PERU&quot;&#xA;color_array(77,1)=&quot;#CD853F&quot;&#xA;color_array(78,0)=&quot;#CHOCOLATE&quot;&#xA;color_array(78,1)=&quot;#D2691E&quot;&#xA;color_array(79,0)=&quot;#TAN&quot;&#xA;color_array(79,1)=&quot;#D2B48C&quot;&#xA;color_array(80,0)=&quot;#LIGHTGREY&quot;&#xA;color_array(80,1)=&quot;#D3D3D3&quot;&#xA;color_array(81,0)=&quot;#THISTLE&quot;&#xA;color_array(81,1)=&quot;#D8BFD8&quot;&#xA;color_array(82,0)=&quot;#ORCHID&quot;&#xA;color_array(82,1)=&quot;#DA70D6&quot;&#xA;color_array(83,0)=&quot;#GOLDENROD&quot;&#xA;color_array(83,1)=&quot;#DAA520&quot;&#xA;color_array(84,0)=&quot;#PALEVIOLETRED&quot;&#xA;color_array(84,1)=&quot;#DB7093&quot;&#xA;color_array(85,0)=&quot;#CRIMSON&quot;&#xA;color_array(85,1)=&quot;#DC143C&quot;&#xA;color_array(86,0)=&quot;#GAINSBORO&quot;&#xA;color_array(86,1)=&quot;#DCDCDC&quot;&#xA;color_array(87,0)=&quot;#PLUM&quot;&#xA;color_array(87,1)=&quot;#DDA0DD&quot;&#xA;color_array(88,0)=&quot;#BURLYWOOD&quot;&#xA;color_array(88,1)=&quot;#DEB887&quot;&#xA;color_array(89,0)=&quot;#LIGHTCYAN&quot;&#xA;color_array(89,1)=&quot;#E0FFFF&quot;&#xA;color_array(90,0)=&quot;#LAVENDER&quot;&#xA;color_array(90,1)=&quot;#E6E6FA&quot;&#xA;color_array(91,0)=&quot;#DARKSALMON&quot;&#xA;color_array(91,1)=&quot;#E9967A&quot;&#xA;color_array(92,0)=&quot;#VIOLET&quot;&#xA;color_array(92,1)=&quot;#EE82EE&quot;&#xA;color_array(93,0)=&quot;#PALEGOLDENROD&quot;&#xA;color_array(93,1)=&quot;#EEE8AA&quot;&#xA;color_array(94,0)=&quot;#LIGHTCORAL&quot;&#xA;color_array(94,1)=&quot;#F08080&quot;&#xA;color_array(95,0)=&quot;#KHAKI&quot;&#xA;color_array(95,1)=&quot;#F0E68C&quot;&#xA;color_array(96,0)=&quot;#ALICEBLUE&quot;&#xA;color_array(96,1)=&quot;#F0F8FF&quot;&#xA;color_array(97,0)=&quot;#HONEYDEW&quot;&#xA;color_array(97,1)=&quot;#F0FFF0&quot;&#xA;color_array(98,0)=&quot;#AZURE&quot;&#xA;color_array(98,1)=&quot;#F0FFFF&quot;&#xA;color_array(99,0)=&quot;#SANDYBROWN&quot;&#xA;color_array(99,1)=&quot;#F4A460&quot;&#xA;color_array(100,0)=&quot;#WHEAT&quot;&#xA;color_array(100,1)=&quot;#F5DEB3&quot;&#xA;color_array(101,0)=&quot;#BEIGE&quot;&#xA;color_array(101,1)=&quot;#F5F5DC&quot;&#xA;color_array(102,0)=&quot;#WHITESMOKE&quot;&#xA;color_array(102,1)=&quot;#F5F5F5&quot;&#xA;color_array(103,0)=&quot;#MINTCREAM&quot;&#xA;color_array(103,1)=&quot;#F5FFFA&quot;&#xA;color_array(104,0)=&quot;#GHOSTWHITE&quot;&#xA;color_array(104,1)=&quot;#F8F8FF&quot;&#xA;color_array(105,0)=&quot;#SALMON&quot;&#xA;color_array(105,1)=&quot;#FA8072&quot;&#xA;color_array(106,0)=&quot;#ANTIQUEWHITE&quot;&#xA;color_array(106,1)=&quot;#FAEBD7&quot;&#xA;color_array(107,0)=&quot;#LINEN&quot;&#xA;color_array(107,1)=&quot;#FAF0E6&quot;&#xA;color_array(108,0)=&quot;#LIGHTGOLDENRODYELLOW&quot;&#xA;color_array(108,1)=&quot;#FAFAD2&quot;&#xA;color_array(109,0)=&quot;#OLDLACE&quot;&#xA;color_array(109,1)=&quot;#FDF5E6&quot;&#xA;color_array(110,0)=&quot;#RED&quot;&#xA;color_array(110,1)=&quot;#FF0000&quot;&#xA;color_array(111,0)=&quot;#FUCHSIA&quot;&#xA;color_array(111,1)=&quot;#FF00FF&quot;&#xA;color_array(112,0)=&quot;#MAGENTA&quot;&#xA;color_array(112,1)=&quot;#FF00FF&quot;&#xA;color_array(113,0)=&quot;#DEEPPINK&quot;&#xA;color_array(113,1)=&quot;#FF1493&quot;&#xA;color_array(114,0)=&quot;#ORANGERED&quot;&#xA;color_array(114,1)=&quot;#FF4500&quot;&#xA;color_array(115,0)=&quot;#TOMATO&quot;&#xA;color_array(115,1)=&quot;#FF6347&quot;&#xA;color_array(116,0)=&quot;#HOTPINK&quot;&#xA;color_array(116,1)=&quot;#FF69B4&quot;&#xA;color_array(117,0)=&quot;#CORAL&quot;&#xA;color_array(117,1)=&quot;#FF7F50&quot;&#xA;color_array(118,0)=&quot;#DARKORANGE&quot;&#xA;color_array(118,1)=&quot;#FF8C00&quot;&#xA;color_array(119,0)=&quot;#LIGHTSALMON&quot;&#xA;color_array(119,1)=&quot;#FFA07A&quot;&#xA;color_array(120,0)=&quot;#ORANGE&quot;&#xA;color_array(120,1)=&quot;#FFA500&quot;&#xA;color_array(121,0)=&quot;#LIGHTPINK&quot;&#xA;color_array(121,1)=&quot;#FFB6C1&quot;&#xA;color_array(122,0)=&quot;#PINK&quot;&#xA;color_array(122,1)=&quot;#FFC0CB&quot;&#xA;color_array(123,0)=&quot;#GOLD&quot;&#xA;color_array(123,1)=&quot;#FFD700&quot;&#xA;color_array(124,0)=&quot;#PEACHPUFF&quot;&#xA;color_array(124,1)=&quot;#FFDAB9&quot;&#xA;color_array(125,0)=&quot;#NAVAJOWHITE&quot;&#xA;color_array(125,1)=&quot;#FFDEAD&quot;&#xA;color_array(126,0)=&quot;#MOCCASIN&quot;&#xA;color_array(126,1)=&quot;#FFE4B5&quot;&#xA;color_array(127,0)=&quot;#BISQUE&quot;&#xA;color_array(127,1)=&quot;#FFE4C4&quot;&#xA;color_array(128,0)=&quot;#MISTYROSE&quot;&#xA;color_array(128,1)=&quot;#FFE4E1&quot;&#xA;color_array(129,0)=&quot;#BLANCHEDALMOND&quot;&#xA;color_array(129,1)=&quot;#FFEBCD&quot;&#xA;color_array(130,0)=&quot;#PAPAYAWHIP&quot;&#xA;color_array(130,1)=&quot;#FFEFD5&quot;&#xA;color_array(131,0)=&quot;#LAVENDERBLUSH&quot;&#xA;color_array(131,1)=&quot;#FFF0F5&quot;&#xA;color_array(132,0)=&quot;#SEASHELL&quot;&#xA;color_array(132,1)=&quot;#FFF5EE&quot;&#xA;color_array(133,0)=&quot;#CORNSILK&quot;&#xA;color_array(133,1)=&quot;#FFF8DC&quot;&#xA;color_array(134,0)=&quot;#LEMONCHIFFON&quot;&#xA;color_array(134,1)=&quot;#FFFACD&quot;&#xA;color_array(135,0)=&quot;#FLORALWHITE&quot;&#xA;color_array(135,1)=&quot;#FFFAF0&quot;&#xA;color_array(136,0)=&quot;#SNOW&quot;&#xA;color_array(136,1)=&quot;#FFFAFA&quot;&#xA;color_array(137,0)=&quot;#YELLOW&quot;&#xA;color_array(137,1)=&quot;#FFFF00&quot;&#xA;color_array(138,0)=&quot;#LIGHTYELLOW&quot;&#xA;color_array(138,1)=&quot;#FFFFE0&quot;&#xA;color_array(139,0)=&quot;#IVORY&quot;&#xA;color_array(139,1)=&quot;#FFFFF0&quot;&#xA;color_array(140,0)=&quot;#WHITE&quot;&#xA;color_array(140,1)=&quot;#FFFFFF&quot;&#xA;color_array(141,0)=&quot;#DARKSLATEGRAY&quot;&#xA;color_array(141,1)=&quot;#2F4F4F&quot;&#xA;color_array(142,0)=&quot;#DIMGRAY&quot;&#xA;color_array(142,1)=&quot;#696969&quot;&#xA;color_array(143,0)=&quot;#SLATEGRAY&quot;&#xA;color_array(143,1)=&quot;#708090&quot;&#xA;color_array(144,0)=&quot;#LIGHTSLATEGRAY&quot;&#xA;color_array(144,1)=&quot;#778899&quot;&#xA;color_array(145,0)=&quot;#GRAY&quot;&#xA;color_array(145,1)=&quot;#808080&quot;&#xA;color_array(146,0)=&quot;#DARKGRAY&quot;&#xA;color_array(146,1)=&quot;#A9A9A9&quot;&#xA;color_array(147,0)=&quot;#LIGHTGRAY&quot;&#xA;color_array(147,1)=&quot;#D3D3D3&quot;&#xA;color_array(148,0)=&quot;#DARKSLATEGRAY&quot;&#xA;color_array(148,1)=&quot;#2F4F4F&quot;&#xA;color_array(149,0)=&quot;#APPLICATION&quot;&#xA;color_array(149,1)=&quot;#ADD8E7&quot;&#xA;color_array(150,0)=&quot;#IMPLEMENTATION&quot;&#xA;color_array(150,1)=&quot;#FFC0CC&quot;&#xA;color_array(151,0)=&quot;#MOTIVATION&quot;&#xA;color_array(151,1)=&quot;#9370DC&quot;&#xA;color_array(152,0)=&quot;#MOTIVATION&quot;&#xA;color_array(152,1)=&quot;#9370DC&quot;&#xA;color_array(153,0)=&quot;#PYSICAL&quot;&#xA;color_array(153,1)=&quot;#98FB99&quot;&#xA;color_array(154,0)=&quot;#TECHNOLOGY&quot;&#xA;color_array(154,1)=&quot;#90EE91&quot;&#xA;&#xA;function ColorHexByName (colorName) &#xA;dim i&#xA;&#x9;'Session.Output( &quot;ColorName=&quot; &amp; colorName)&#xA;&#x9;ColorHexByName=&quot;&quot;&#xA;&#x9;for i = 0 to Ubound(color_array)&#xA;&#x9;&#x9;if color_array(i,0) = colorName then&#xA;&#x9;&#x9;&#x9;ColorHexByName = color_array(i,1)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot;ColorHex(&quot; &amp; i &amp; &quot;) =&quot; &amp; ColorHexByName)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;end function&#xA;&#xA;function ColorNameByHex (colorHex) &#xA;dim i&#xA;&#x9;ColorNameByHex=&quot;&quot;&#xA;&#x9;'Session.Output( &quot;ColorHex=&quot; &amp; colorHex)&#xA;&#x9;&#xA;&#x9;for i = 0 to Ubound(color_array)&#xA;&#x9;&#x9;if color_array(i,1) = colorHex then&#xA;&#x9;&#x9;&#x9;ColorNameByHex = color_array(i,0)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot;ColorName(&quot; &amp; i &amp; &quot;) =&quot; &amp; ColorNameByHex)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;next&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="12"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="13"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7A8B0B88-F523-41b2-BACB-8B878BA90E1E}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Logging&#xA;&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;LOGLEVEL=1&#x9;&#x9;'INFO&#xA;'LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: ImportPlantUMLScript&#xA;' Author: David Anderson&#xA;' Purpose: Populate a Note element using the contenst of a selected PlantUML file&#xA;' Date: 25-Mar-2019&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Import PlantUML script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;'check a note element is selected&#xA;&#x9;&#x9;if not theSelectedElement is nothing _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;dim OF_FILEMUSTEXIST&#xA;&#x9;&#x9;&#x9;OF_FILEMUSTEXIST = &amp;H1000&#xA;&#x9;&#x9;&#x9;dim PlantUMLfn&#xA;&#x9;&#x9;&#x9;PlantUMLfn = Repository.InvokeFileDialog(&quot;PlantUML|*.pu;*puml&quot;,1,OF_FILEMUSTEXIST)&#xA;&#x9;&#x9;&#x9;If PlantUMLfn = &quot;&quot; Then &#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo(&quot;File not selected&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;stop&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo (&quot;PlantUML Script file selected: &quot; &amp; PlantUMLfn )&#xA;&#x9;&#x9;&#x9;&#x9;Dim fileSystemObject&#xA;&#x9;&#x9;&#x9;&#x9;dim inputFile&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;&quot;&quot;&quot; &amp; PlantUMLfn &amp; &quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;' Define Global File IO Objects&#xA;&#x9;&#x9;&#x9;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.GetFile(PlantUMLfn)&#xA;&#x9;&#x9;&#x9;&#x9;dim strRow&#xA;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.OpenTextFile(PlantUMLfn)&#xA;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Notes=&quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;do until inputFile.AtEndOfStream&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strRow = inputFile.readline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug(strRow)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if theSelectedElement.Notes=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Notes = strRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Notes = theSelectedElement.Notes &amp; vbcrlf &amp; strRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;&#x9;inputFile.Close&#xA;&#x9;&#x9;&#x9;&#x9;theSelectedElement.Update&#xA;&#x9;&#x9;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected for storing the PlantUML script&quot; , promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected for storing the PlantUML script&quot; , promptOK&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="14"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="15"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{139A7C20-709C-4b25-8BC0-D6D553A1118D}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Geert"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="16"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{EF4646F5-9279-46aa-B46A-E857C07E146C}"/>
			<Column name="ScriptAuthor" value="{139A7C20-709C-4b25-8BC0-D6D553A1118D}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;CreateMessageOverviewSequence&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'[path=\Projects\Project A\Element Group]&#xA;'[group=Element Group]&#xA;'option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Atrias Scripts.Util&#xA;&#xA;&#xA;'&#xA;' Script Name: CreateMessageOverviewSequence&#xA;' Author: Geert Belleken&#xA;' Purpose: Creates a sequence diagram under the selected businessprocess that shows the sequence of the messages&#xA;' from this businessprocess and it's subprocesses&#xA;' Date: 31/03/2015&#xA;'&#xA;'**********EDIT FROM HERE************&#xA;&#xA;'The distance between two lifelines&#xA;dim xIncrement&#xA;xIncrement = 200&#xA;'The width of a lifeline&#xA;dim defaultwidth&#xA;defaultwidth = 90&#xA;'the diagrams name suffix&#xA;dim namesuffix&#xA;namesuffix = &quot; Message Overview&quot;&#xA;'the horizontal space between two levels of boundaries&#xA;&#xA;dim boundaryX&#xA;boundaryX = 5&#xA;&#xA;'colors&#xA;dim colors&#xA;' paars, geel, groen,blauw&#xA;colors = Array(16758490,14745599,13434828,16776869)&#xA;'**********TO HERE************&#xA;&#xA;dim Yoffset&#xA;dim YIncrement&#xA;&#xA;YoffSet = 72&#xA;YIncrement = 35&#xA;&#xA;dim lpos&#xA;dim mpos&#xA;dim rpos&#xA;dim lmpos&#xA;dim rmpos&#xA;&#xA;lpos = 100&#xA;mpos = 400&#xA;rpos = 700&#xA;lmpos = mpos - 100&#xA;rmpos = mpos + 100&#xA;&#xA;sub main&#xA;&#xA;&#x9;' get the selected element&#xA;&#xA;&#x9;dim process as EA.Element&#xA;&#x9;set process = Repository.GetTreeSelectedObject&#xA;&#x9;if process.ObjectType = otElement then&#xA;&#x9;&#x9;if process.Type = &quot;Activity&quot; then&#xA;&#x9;&#x9;&#x9;dim userinput&#xA;&#x9;&#x9;&#x9;userinput = MsgBox( &quot;With process boundaries?&quot;, vbYesNoCancel + vbQuestion, &quot;Message Overview Diagram&quot;)&#xA;&#x9;&#x9;&#x9;if userinput &lt;&gt; vbCancel then&#xA;&#x9;&#x9;&#x9;&#x9;' make a new diagram -&gt; MessageOverview&#xA;&#x9;&#x9;&#x9;&#x9;dim overviewDiagram as EA.Diagram&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramName&#xA;&#x9;&#x9;&#x9;&#x9;diagramName = process.name &amp; namesuffix&#xA;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramName = diagramName &amp; &quot; with proces boundaries&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;set overviewDiagram = getOwnedDiagramByName(process, diagramName)&#xA;&#x9;&#x9;&#x9;&#x9;if overviewDiagram is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set overviewDiagram = process.Diagrams.AddNew(diagramName, &quot;Sequence&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;overviewDiagram.update&#xA;&#x9;&#x9;&#x9;&#x9;Repository.AdviseElementChange process.ElementID&#xA;&#x9;&#x9;&#x9;&#x9;dim messageflows&#xA;&#x9;&#x9;&#x9;&#x9;set messageflows = getOwnedMessageFlows(process,0, process.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;dim messageflow as EA.Connector&#xA;&#x9;&#x9;&#x9;&#x9;dim sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;sequenceNumber = 1&#xA;&#x9;&#x9;&#x9;&#x9;dim boundaries&#xA;&#x9;&#x9;&#x9;&#x9;set boundaries = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;for each messageflow in messageflows&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Add each message flow tot he MessageOverview diagram&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;addMessageFlowToDiagram messageFlow, overviewDiagram, process, sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;addBoundary messageFlow.Alias, overviewDiagram, boundaries,sequenceNumber&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequenceNumber = sequenceNumber +1&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.OpenDiagram(overviewDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;Repository.SaveDiagram(overviewDiagram.DiagramID)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'re-order the lifeLines&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim totalwidth&#xA;&#x9;&#x9;&#x9;&#x9;totalwidth = reorderLifeLines(overviewDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if userinput = vbYes then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'resize boundaries&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resizeBoundaries boundaries, totalwidth&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'set all messages to Asynchronous&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;setMessagesAsynchronous (overviewDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'reload diagram&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Repository.ReloadDiagram(overviewDiagram.DiagramID)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'tell the user we are finished&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;MsgBox &quot;Finished!&quot;&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;&#xA;&#xA;main&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function resizeBoundaries ( boundaries, totalwidth)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;for each diagramObject in boundaries&#xA;&#xA;&#x9;&#x9;diagramObject.right = totalwidth - diagramObject.left&#xA;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addBoundary(processIDPath, diagram, boundaries, sequenceNumber)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim processID&#xA;&#xA;&#x9;dim processIDs&#xA;&#xA;&#x9;processIDs = Split(processIDPath, &quot;.&quot;) &#xA;&#xA;&#x9;&#xA;&#xA;&#x9;dim level &#xA;&#xA;&#x9;level = Ubound(processIDs) &#xA;&#xA;&#x9;&#xA;&#xA;&#x9;if level &lt; 0 then&#xA;&#xA;&#x9;&#x9;processID = processIDPath&#xA;&#xA;&#x9;&#x9;level = 0&#xA;&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;processID = processIDs(level)&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'debug&#xA;&#xA;&#x9;'Session.Output &quot;processIDPath: &quot; &amp; processIDPath &amp; &quot; level: &quot; &amp; level &amp; &quot; processID: &quot; &amp; processID&#xA;&#xA;&#x9;'check if the last instance of the boundaries with this level is is the same process&#xA;&#xA;&#x9;set diagramObject = getLastBoundaryWithLevel(level, boundaries)&#xA;&#xA;&#x9;dim boundary as EA.Element&#xA;&#xA;&#x9;dim foundit&#xA;&#xA;&#x9;foundit = false&#xA;&#xA;&#x9;if not diagramObject is nothing then&#xA;&#xA;&#x9;&#x9;'check if the diagramObject is about the same process&#xA;&#xA;&#x9;&#x9;set boundary = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;boundary.Alias: &quot; &amp; boundary.Alias &amp; &quot; processID: &quot; &amp; processID &amp; &quot; boundary.Alias = processID &quot; &amp; (boundary.Alias = processID )&#xA;&#xA;&#x9;&#x9;if boundary.Alias = processIDPath then&#xA;&#xA;&#x9;&#x9;&#x9;'found it. Elongate the diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = (YoffSet + (YIncrement * (sequenceNumber + 1))) * -1&#xA;&#xA;&#x9;&#x9;&#x9;'save the diagram object&#xA;&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;&#x9;foundit = true&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'do the &quot;parent&quot; boundaries first&#xA;&#xA;&#x9;if level &gt; 0 then&#xA;&#xA;&#x9;&#x9;'remove the last ID form the processIDPath to go one level up&#xA;&#xA;&#x9;&#x9;dim lastDelimiter&#xA;&#xA;&#x9;&#x9;lastDelimiter = InstrRev(processIDPath, &quot;.&quot;)&#xA;&#xA;&#x9;&#x9;dim newProcessIDPath &#xA;&#xA;&#x9;&#x9;newProcessIDPath = left(processIDPath, lastDelimiter -1)&#xA;&#xA;&#x9;&#x9;'make or elongate the parent&#xA;&#xA;&#x9;&#x9;addBoundary newProcessIDPath, diagram, boundaries, sequenceNumber&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;if not foundit = true then&#xA;&#xA;&#x9;&#x9;'get the diagram parent element&#xA;&#xA;&#x9;&#x9;dim diagramOwner as EA.Element&#xA;&#xA;&#x9;&#x9;set diagramOwner = Repository.GetElementByID(diagram.parentID)&#xA;&#xA;&#x9;&#x9;'get the owning process for the message flow&#xA;&#xA;&#x9;&#x9;dim process as EA.Element&#xA;&#xA;&#x9;&#x9;set process = Repository.GetElementByID(processID)&#xA;&#xA;&#x9;&#x9;'create a new boundary&#xA;&#xA;&#x9;&#x9;set boundary = diagramOwner.Elements.AddNew(&quot;&quot;, &quot;Boundary&quot;)&#xA;&#xA;&#x9;&#x9;'set the TreePos so we remember which process is used&#xA;&#xA;&#x9;&#x9;boundary.TreePos = processID&#xA;&#xA;&#x9;&#x9;'set the Alias to the alias of the messageFlow&#xA;&#xA;&#x9;&#x9;boundary.Alias = processIDPath&#xA;&#xA;&#x9;&#x9;'borderstyle&#xA;&#xA;&#x9;&#x9;dim borderstyle&#xA;&#xA;&#x9;&#x9;set borderstyle = boundary.Properties(&quot;BorderStyle&quot;)&#xA;&#xA;&#x9;&#x9;borderstyle.Value = &quot;Dotted&quot;&#xA;&#xA;&#x9;&#x9;if level &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;dim colorIndex&#xA;&#xA;&#x9;&#x9;&#x9;colorIndex = level  MOD (UBound(colors) +1)&#xA;&#xA;&#x9;&#x9;&#x9;'color&#xA;&#xA;&#x9;&#x9;&#x9;boundary.SetAppearance 1,0,colors(colorIndex) 'groen&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;'save the boundary&#xA;&#xA;&#x9;&#x9;boundary.Update&#xA;&#xA;&#x9;&#x9;'create a new diagramObject for the boundary&#xA;&#xA;&#x9;&#x9;dim positionString&#xA;&#xA;&#x9;&#x9;positionString =  &quot;l=&quot; &amp; boundaryX * (level +1) &amp; &quot;;r=&quot; &amp; 1000 &amp; &quot;;t=&quot; &amp; YoffSet + (YIncrement * sequenceNumber) &amp; &quot;;b=&quot; &amp; YoffSet + (YIncrement * (sequenceNumber + 1)) &amp; &quot;;&quot;&#xA;&#xA;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;positionString for boundary &quot; &amp; process.Name &amp; &quot;: &quot; &amp; positionString&#xA;&#xA;&#x9;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#xA;&#x9;&#x9;diagramObject.ElementID = boundary.ElementID&#xA;&#xA;&#x9;&#x9;diagramObject.Sequence = 10 - level&#xA;&#xA;&#x9;&#x9;'save the diagram object&#xA;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;'add the diagramObject tot the list of boundaries&#xA;&#xA;&#x9;&#x9;boundaries.Add diagramObject &#xA;&#xA;&#x9;&#x9;'add the text element&#xA;&#xA;&#x9;&#x9;dim hyperlink as EA.Element&#xA;&#xA;&#x9;&#x9;dim hyperlinkName&#xA;&#xA;&#x9;&#x9;dim compositeDiagramID&#xA;&#xA;&#x9;&#x9;hyperlinkName = &quot;$diagram://&quot;&#xA;&#xA;&#x9;&#x9;if not process.CompositeDiagram is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;hyperlinkName = hyperlinkName &amp; process.CompositeDiagram.DiagramGUID&#xA;&#xA;&#x9;&#x9;&#x9;compositeDiagramID = process.CompositeDiagram.DiagramID&#xA;&#xA;&#x9;&#x9;else&#xA;&#xA;&#x9;&#x9;&#x9;hyperlinkName = hyperlinkName &amp; diagram.DiagramGUID&#xA;&#xA;&#x9;&#x9;&#x9;compositeDiagramID = diagram.DiagramID&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;set hyperlink = diagramOwner.Elements.AddNew(hyperlinkName, &quot;Text&quot;)&#xA;&#xA;&#x9;&#x9;hyperlink.Notes = process.Name&#xA;&#xA;&#x9;&#x9;hyperlink.Update&#xA;&#xA;&#x9;&#x9;'set the link to the composite diagram&#xA;&#xA;&#x9;&#x9;dim hyperlinkSQL&#xA;&#xA;&#x9;&#x9;hyperlinkSQL = &quot;update t_object set PDATA1 = &quot; &amp; compositeDiagramID &amp; &quot; where Object_ID = &quot; &amp; hyperlink.ElementID&#xA;&#xA;&#x9;&#x9;Repository.Execute hyperlinkSQL&#xA;&#xA;&#x9;&#x9;'add the hyperlink to the diagram&#xA;&#xA;&#x9;&#x9;positionstring = &quot;l=&quot; &amp; boundaryX * (level +1) &amp; &quot;;r=&quot; &amp; 500 &amp; &quot;;t=&quot; &amp; YoffSet + (YIncrement * sequenceNumber) &amp; &quot;;b=&quot; &amp;  YoffSet + (YIncrement * sequenceNumber) + 10 &amp; &quot;;&quot;&#xA;&#xA;&#x9;&#x9;dim hyperlinkDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;&#x9;set hyperlinkDiagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#xA;&#x9;&#x9;hyperlinkDiagramObject.SetStyleEx &quot;HideIcon&quot;,&quot;1&quot;&#xA;&#xA;&#x9;&#x9;hyperlinkDiagramObject.ElementID = hyperlink.ElementID&#xA;&#xA;&#x9;&#x9;hyperlinkDiagramObject.Update&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getLastBoundaryWithLevel(level, boundaries)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;set diagramObject = nothing&#xA;&#xA;&#x9;set getLastBoundaryWithLevel = nothing&#xA;&#xA;&#x9;dim i&#xA;&#xA;&#x9;for i = boundaries.Count -1  to O step -1&#xA;&#xA;&#x9;&#x9;set diagramObject = boundaries(i)&#xA;&#xA;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;level: &quot; &amp; level &amp; &quot; diagramObject.left: &quot; &amp; diagramObject.left &amp; &quot; diagramObject.left / boundaryX: &quot; &amp; diagramObject.left / boundaryX&#xA;&#xA;&#x9;&#x9;if (diagramObject.left / boundaryX) = (level + 1) then&#xA;&#xA;&#x9;&#x9;&#x9;'debug &#xA;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;found one!&quot;&#xA;&#xA;&#x9;&#x9;&#x9;'found one with the same level&#xA;&#xA;&#x9;&#x9;&#x9;set getLastBoundaryWithLevel = diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function setMessagesAsynchronous (diagram)&#xA;&#xA;'There no clean way to do it we we do it with a dirty SQL update&#xA;&#xA;&#x9;if (diagram.DiagramID &gt; 0) then&#xA;&#xA;&#x9;&#x9;dim sqlupdate &#xA;&#xA;&#x9;&#x9;sqlupdate = &quot;update t_connector set PDATA1 = 'Asynchronous' where DiagramID =&quot; &amp; diagram.DiagramID&#xA;&#xA;&#x9;&#x9;Repository.Execute sqlupdate&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function reorderLifeLines(diagram)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#xA;&#xA;&#x9;dim xpos&#xA;&#xA;&#x9;xpos = 50&#xA;&#xA;&#x9;dim cmsName&#xA;&#xA;&#x9;cmsName = &quot;Central Market System&quot;&#xA;&#xA;&#x9;dim backendName&#xA;&#xA;&#x9;backendName = &quot;DGO-BE System&quot;&#xA;&#xA;&#x9;dim backendAdded&#xA;&#xA;&#x9;backendAdded = false&#xA;&#xA;&#x9;dim orderedDiagramObjects&#xA;&#xA;&#x9;Set orderedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;dim classifier as EA.Element&#xA;&#xA;&#x9;'reorder them in a new arraylist&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;set classifier = getDiagramObjectClassifier(diagramObject)&#xA;&#xA;&#x9;&#x9;if not classifier is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;if classifier.Name = backendName then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;backendAdded = true&#xA;&#xA;&#x9;&#x9;&#x9;elseif classifier.Name = cmsName then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if not backendAdded then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert orderedDiagramObjects.Count -1, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;else&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert 0, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;'reset their positions&#xA;&#xA;&#x9;for each diagramObject in orderedDiagramObjects&#xA;&#xA;&#x9;&#x9;diagramObject.left = xpos&#xA;&#xA;&#x9;&#x9;diagramObject.right = xpos + defaultwidth&#xA;&#xA;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;xpos = xpos + xIncrement&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;reorderLifeLines = xpos&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getDiagramObjectClassifier(diagramObject)&#xA;&#xA;&#x9;set getDiagramObjectClassifier = nothing&#xA;&#xA;&#x9;dim instance as EA.Element&#xA;&#xA;&#x9;set instance = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;if not instance is nothing and instance.ClassifierID &gt; O then&#xA;&#xA;&#x9;&#x9;set getDiagramObjectClassifier = Repository.GetElementByID(instance.ClassifierID)&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addMessageFlowToDiagram(messageFlow, diagram, process, sequenceNumber)&#xA;&#xA;&#x9;'get the start and end element&#xA;&#xA;&#x9;dim startElement as EA.Element&#xA;&#xA;&#x9;dim startDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim endElement as EA.Element&#xA;&#xA;&#x9;dim endDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim startClassifier as EA.Element&#xA;&#xA;&#x9;dim endClassifier as EA.Element&#xA;&#xA;&#x9;dim startLifeLine as EA.Element&#xA;&#xA;&#x9;dim endLifeLine as EA.Element&#xA;&#xA;&#x9;dim sequenceMessage as EA.Connector&#xA;&#xA;&#x9;set startElement = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#xA;&#x9;set endElement = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#xA;&#x9;if not startElement is nothing AND not endElement is nothing then&#xA;&#xA;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;start and endElement found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#xA;&#x9;&#x9;set startClassifier = getElementClassifier(startElement)&#xA;&#xA;&#x9;&#x9;set endClassifier = getElementClassifier(endElement)&#xA;&#xA;&#x9;&#x9;if not startClassifier is nothing AND not endClassifier is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;'add message between start and end&#xA;&#xA;&#x9;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;start and endClassifier found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#xA;&#x9;&#x9;&#x9;set startLifeLine = getInstanceForClassifier(startClassifier, diagram, process)&#xA;&#xA;&#x9;&#x9;&#x9;set endLifeLine = getInstanceForClassifier(endClassifier, diagram, process)&#xA;&#xA;&#x9;&#x9;&#x9;if not startLifeLine is nothing and not endLifeLine is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;start and endLifeLine found for messageFlow.Name: &quot; &amp; messageflow.Name &amp; &quot;from &quot; &amp; messageflow.ClientID &amp; &quot; to &quot; &amp; messageflow.SupplierID &amp; &quot; id: &quot; &amp; messageflow.ConnectorID&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set sequenceMessage = addSequenceMessage(messageFlow, startLifeLine,endLifeLine,sequenceNumber)&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function getInstanceForClassifier(classifier, diagram, process)&#xA;&#xA;&#x9;set getInstanceForClassifier = nothing&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;'get the element&#xA;&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;&#x9;if (not element is nothing) and element.ClassifierID = classifier.ElementID then&#xA;&#xA;&#x9;&#x9;&#x9;set getInstanceForClassifier = element&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;'if not already existing then add new one&#xA;&#xA;&#x9;if getInstanceForClassifier is nothing then&#xA;&#xA;&#x9;&#x9;set getInstanceForClassifier = addNewLifeline(classifier,process)&#xA;&#xA;&#x9;&#x9;'add it to the diagram&#xA;&#xA;&#x9;&#x9;addElementToDiagram getInstanceForClassifier, diagram, 50, 50 &#xA;&#xA;&#x9;&#x9;'Make sure the diagram knows that there is a new diagramObject&#xA;&#xA;&#x9;&#x9;diagram.DiagramObjects.Refresh&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addNewLifeline(classifier,process)&#xA;&#xA;&#x9;dim lifeLine as EA.Element&#xA;&#xA;&#x9;set lifeLine = nothing&#xA;&#xA;&#x9;set lifeLine = process.Elements.AddNew(&quot;&quot;,&quot;Object&quot;)&#xA;&#xA;&#x9;if not lifeLine is nothing then&#xA;&#xA;&#x9;&#x9;lifeLine.ClassifierID = classifier.ElementID&#xA;&#xA;&#x9;&#x9;lifeLine.Update&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;set addNewLifeline = lifeline&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addSequenceMessage(messageFlow, startLifeLine,endLifeLine,sequenceNumber)&#xA;&#xA;&#x9;set addSequenceMessage = nothing&#xA;&#xA;&#x9;dim sequenceConnector as EA.Connector&#xA;&#xA;&#x9;dim messageName&#xA;&#xA;&#x9;messageName = &quot;&quot;&#xA;&#xA;&#x9;'get the name of the sequence message&#xA;&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#xA;&#x9;dim messageElement as EA.Element&#xA;&#xA;&#x9;'Get the messageRef tagged value&#xA;&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; O then&#xA;&#xA;&#x9;&#x9;&#x9; set messageElement = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#xA;&#x9;&#x9;&#x9; if not messageElement is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;messageName = messageElement.Name&#xA;&#xA;&#x9;&#x9;&#x9; end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;if len(messageName) = 0 then&#xA;&#xA;&#x9;&#x9;dim intermediateEvent as EA.Element&#xA;&#xA;&#x9;&#x9;set intermediateEvent = Repository.GetElementByID(messageFlow.SupplierID)&#xA;&#xA;&#x9;&#x9;if intermediateEvent.Stereotype &lt;&gt; &quot;IntermediateEvent&quot; then&#xA;&#xA;&#x9;&#x9;set intermediateEvent = Repository.GetElementByID(messageFlow.ClientID)&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;messageName = intermediateEvent.Name &amp; &quot;[MessagRef tag missing!]&quot;&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'debug&#xA;&#xA;&#x9;'messageName = messageFlow.Alias &amp; &quot;.&quot; &amp; messageName &#xA;&#xA;&#x9;'add the connector&#xA;&#xA;&#x9;set sequenceConnector = startLifeLine.Connectors.AddNew(messageName,&quot;Sequence&quot;)&#xA;&#xA;&#x9;sequenceConnector.SupplierID = endLifeLine.ElementID&#xA;&#xA;&#x9;sequenceConnector.SequenceNo = sequenceNumber&#xA;&#xA;&#x9;sequenceConnector.ClientEnd.Constraint = messageFlow.Name&#xA;&#xA;&#x9;sequenceConnector.Update&#xA;&#xA;&#x9;set addSequenceMessage = sequenceConnector&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function getElementClassifier(element)&#xA;&#xA;&#x9;'Initialise&#xA;&#xA;&#x9;set getElementClassifier = nothing&#xA;&#xA;&#x9;dim currentElement as EA.Element&#xA;&#xA;&#x9;set currentElement = element&#xA;&#xA;&#x9;dim pool as EA.Element&#xA;&#xA;&#x9;'intermediate event&#xA;&#xA;&#x9;if currentElement.Type = &quot;Event&quot; and currentElement.ParentID &gt; 0 then&#xA;&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentElement.ParentID)&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'lane&#xA;&#xA;&#x9;if currentElement.Type = &quot;ActivityPartition&quot; and currentElement.Stereotype = &quot;Lane&quot; AND currentElement.ParentID &gt; 0 then&#xA;&#xA;&#x9;&#x9;set currentElement = Repository.GetElementByID(currentElement.ParentID)&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'Pool&#xA;&#xA;&#x9;if currentElement.Type = &quot;ActivityPartition&quot; and currentElement.Stereotype = &quot;Pool&quot; AND currentElement.ClassfierID &gt; 0 then&#xA;&#xA;&#x9;&#x9;set getElementClassifier = Repository.GetElementByID(currentElement.ClassfierID)&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getXpos(element)&#xA;&#xA;&#x9;getXpos = lpos&#xA;&#xA;&#x9;if element.Type = &quot;Event&quot; then&#xA;&#xA;&#x9;&#x9;getXpos = mpos&#xA;&#xA;&#x9;elseif element.Type = &quot;ActivityPartition&quot; then&#xA;&#xA;&#x9;&#x9;getXpos = lpos&#xA;&#xA;&#x9;&#x9;'DGO-BE- System is the only one that should be on the right side.&#xA;&#xA;&#x9;&#x9;if element.ClassfierID &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;dim actor&#xA;&#xA;&#x9;&#x9;&#x9;set actor = Repository.GetElementByID(element.ClassfierID)&#xA;&#xA;&#x9;&#x9;&#x9;if not actor is nothing AND actor.name = &quot;DGO-BE System&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;getXpos = rpos&#xA;&#xA;&#x9;&#x9;&#x9;end if &#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addMessageRefToDiagram(messageFlow, diagram, y, x,process)&#xA;&#xA;&#x9;dim messageRefTag as EA.ConnectorTag&#xA;&#xA;&#x9;dim messageElement as EA.Element&#xA;&#xA;&#x9;'Get the messageRef tagged value&#xA;&#xA;&#x9;set messageRefTag = getConnectorTag(messageFlow,&quot;messageRef&quot;)&#xA;&#xA;&#x9;if not messageRefTag is nothing then&#xA;&#xA;&#x9;&#x9;if len(messageRefTag.Value) &gt; O then&#xA;&#xA;&#x9;&#x9;&#x9; set messageElement = Repository.GetElementByGuid(messageRefTag.Value)&#xA;&#xA;&#x9;&#x9;&#x9; if not messageElement is nothing then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'add a local object for the message&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim messageObject as EA.Element&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set messageObject = process.Elements.AddNew(&quot;&quot;, &quot;Object&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;messageObject.ClassfierID = messageElement.ElementID&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;synchronizeElement messageObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'add a diagramObject for the local object&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set diagramObject = addElementToDiagram(messageObject, diagram, y , x)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;setFontOnDiagramObject diagramObject, &quot;Arial Narrow&quot;, 12&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#xA;&#x9;&#x9;&#x9; end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getConnectorTag(messageFlow, tagName)&#xA;&#xA;&#x9;dim connectorTag as EA.ConnectorTag&#xA;&#xA;&#x9;set getConnectorTag = nothing&#xA;&#xA;&#x9;for each connectorTag in messageFlow.TaggedValues&#xA;&#xA;&#x9;&#x9;if connectorTag.Name = tagName then&#xA;&#xA;&#x9;&#x9;&#x9;set getConnectorTag = connectorTag&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function addElementToDiagram(element, diagram, y, x)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim positionString&#xA;&#xA;&#x9;'determine height and width&#xA;&#xA;&#x9;dim width &#xA;&#xA;&#x9;dim height&#xA;&#xA;&#x9;dim elementType&#xA;&#xA;&#x9;dim setVPartition &#xA;&#xA;&#x9;setVPartition = false&#xA;&#xA;&#x9;elementType = element.Type&#xA;&#xA;&#x9;select case elementType       &#xA;&#xA;&#x9;&#x9;case &quot;Event&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 30&#xA;&#xA;&#x9;&#x9;&#x9;height = 30&#xA;&#xA;&#x9;&#x9;case &quot;Object&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 40&#xA;&#xA;&#x9;&#x9;&#x9;height = 25&#xA;&#xA;&#x9;&#x9;case &quot;Activity&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 110&#xA;&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#xA;&#x9;&#x9;case &quot;ActivityPartition&quot;&#xA;&#xA;&#x9;&#x9;&#x9;width = 190&#xA;&#xA;&#x9;&#x9;&#x9;height = 60&#xA;&#xA;&#x9;&#x9;&#x9;setVPartition = true&#xA;&#xA;&#x9;&#x9;case else&#xA;&#xA;&#x9;&#x9;&#x9;'default width and height&#xA;&#xA;&#x9;&#x9;&#x9;width = 75&#xA;&#xA;&#x9;&#x9;&#x9;height = 50&#xA;&#xA;&#x9;end select&#xA;&#xA;&#x9;if diagram.Type = &quot;Sequence&quot; then&#xA;&#xA;&#x9;&#x9;width = 90&#xA;&#xA;&#x9;&#x9;height = 150&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;'to make sure all elements are vertically aligned we subtract half of the width of the x&#xA;&#xA;&#x9;x = x - width/2&#xA;&#xA;&#x9;'set the position of the diagramObject&#xA;&#xA;&#x9;positionString =  &quot;l=&quot; &amp; x &amp; &quot;;r=&quot; &amp; x + width &amp; &quot;;t=&quot; &amp; y &amp; &quot;;b=&quot; &amp; y + height &amp; &quot;;&quot;&#xA;&#xA;&#x9;set diagramObject = diagram.DiagramObjects.AddNew( positionString, &quot;&quot; )&#xA;&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#xA;&#x9;if setVPartition then&#xA;&#xA;&#x9;&#x9;diagramObject.Style = &quot;VPartition=1&quot;&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;diagramObject.Update&#xA;&#xA;&#x9;diagram.DiagramObjects.Refresh&#xA;&#xA;&#x9;set addElementToDiagram = diagramObject&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function messageFlowIsOnDiagram(messageFlow, diagram)&#xA;&#xA;&#x9;dim beginElement as EA.DiagramObject&#xA;&#xA;&#x9;dim endElement as EA.DiagramObject&#xA;&#xA;&#x9;set beginElement = getDiagramObjectForElementID(messageFlow.ClientID, diagram)&#xA;&#xA;&#x9;set endElement = getDiagramObjectForElementID(messageFlow.SupplierID, diagram)&#xA;&#xA;&#x9;if not beginElement is nothing and not endElement is nothing then&#xA;&#xA;&#x9;&#x9;messageFlowIsOnDiagram = true&#xA;&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;messageFlowIsOnDiagram = false&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;'returns all owned messages of this process and of its subprocesses.&#xA;&#xA;function getOwnedMessageFlows(process, level, processIDPath)&#xA;&#xA;&#x9;dim messageflows&#xA;&#xA;&#x9;dim messageFlowLinks&#xA;&#xA;&#x9;dim messageHeights&#xA;&#xA;&#x9;Set messageflows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;Set messageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;' find the composite diagam for the selected element&#xA;&#xA;&#x9;dim compositeDiagram as EA.Diagram&#xA;&#xA;&#x9;set compositeDiagram = process.CompositeDiagram &#xA;&#xA;&#x9;' Make a list of all MessageFlows, ordered by their vertical starting position&#xA;&#xA;&#x9;if not compositeDiagram is nothing then&#xA;&#xA;&#x9;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#xA;&#x9;&#x9;dim messageFlow as EA.Connector&#xA;&#xA;&#x9;&#x9;for each messageFlowLink in compositeDiagram.DiagramLinks&#xA;&#xA;&#x9;&#x9;&#x9;if messageFlowLink.IsHidden = false then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set messageFlow = Repository.GetConnectorByID(messageFlowLink.ConnectorID)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim isOnDiagram&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;isOnDiagram = messageFlowIsOnDiagram(messageFlow, compositeDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if isOnDiagram and messageFlow.Stereotype = &quot;MessageFlow&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'ok, found a messageflow, add messageFlow and messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the RouteStyle to store the process id&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.RouteStyle = process.ElementID&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the SequenceNo to store the level&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.SequenceNo = level&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'abuse the alias field to store the processIDPath&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlow.Alias = processIDPath&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlows.Add messageFlow&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageFlowLinks.Add messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;'sort the messageflows by their location in the diagram&#xA;&#xA;&#x9;&#x9;set messageHeights = sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram )&#xA;&#xA;&#x9;&#x9;' Make a list of all Activities on the diagram ordered by their vertical position. (if equal from left to right)&#xA;&#xA;&#x9;&#x9;dim sortedActivities&#xA;&#xA;&#x9;&#x9;set sortedActivities = getOrderedActivities(compositeDiagram)&#xA;&#xA;&#x9;&#x9;'Do the same thing for each Activity and add those messageflows to the list&#xA;&#xA;&#x9;&#x9;dim sortedActivity as EA.Element&#xA;&#xA;&#x9;&#x9;dim indexShift&#xA;&#xA;&#x9;&#x9;indexShift = 0&#xA;&#xA;&#x9;&#x9;for each sortedActivity in sortedActivities&#xA;&#xA;&#x9;&#x9;&#x9;dim ownedMessageFlows&#xA;&#xA;&#x9;&#x9;&#x9;set ownedMessageFlows = getOwnedMessageFlows(sortedActivity, level +1, processIDPath &amp; &quot;.&quot; &amp; sortedActivity.ElementID)&#xA;&#xA;&#x9;&#x9;&#x9;if ownedMessageFlows.Count &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'Check the height of the sorted activity against the sorted messageHeights&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim activityDiagramObject as EA.DiagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;set activityDiagramObject = getDiagramObjectForElementID(sortedActivity.ElementID, compositeDiagram)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim heightindex&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;heightindex = getHeightIndex(messageHeights,activityDiagramObject.top)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;heightindex for &quot; &amp; sortedActivity.Name &amp; &quot;with activityDiagramObject.top: &quot; &amp; activityDiagramObject.top &amp;  &quot; heightindex : &quot; &amp; heightindex&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'insert the messageflows at the heightindex + indexShift&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim insertIndex&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;insertIndex = heightindex + indexShift&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;dim j&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for j = ownedMessageFlows.Count -1 to 0 step -1&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'debug&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Session.Output &quot;inserting: &quot; &amp; ownedMessageFlows(j).Name &amp; &quot; before: &quot; &amp; messageflows(insertIndex).Name&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;messageflows.Insert insertIndex, ownedMessageFlows(j)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;'calculate new index shift&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;indexShift = IndexShift + ownedMessageFlows.Count&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;set getOwnedMessageFlows = messageFlows&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getHeightIndex(messageHeights, height)&#xA;&#xA;&#x9;dim i &#xA;&#xA;&#x9;getHeightIndex = messageHeights.Count&#xA;&#xA;&#x9;for i = 0 to messageHeights.Count -1&#xA;&#xA;&#x9;&#x9;'Session.Output &quot;height: &quot; &amp; height &amp; &quot;messageHeights(i): &quot; &amp; messageHeights(i) &#xA;&#xA;&#x9;&#x9;if height &gt; messageHeights(i) then&#xA;&#xA;&#x9;&#x9;&#x9;getHeightIndex = i&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getOrderedActivities(diagram)&#xA;&#xA;&#x9;'loop all diagram object&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;dim orderedActivities&#xA;&#xA;&#x9;dim orderedDiagramObjects&#xA;&#xA;&#x9;set orderedActivities = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;set orderedDiagramObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;dim element as EA.Element&#xA;&#xA;&#x9;&#x9;set element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#xA;&#x9;&#x9;if not element is nothing and element.Type = &quot;Activity&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;dim added &#xA;&#xA;&#x9;&#x9;&#x9;added = false&#xA;&#xA;&#x9;&#x9;&#x9;dim i&#xA;&#xA;&#x9;&#x9;&#x9;for i = 0 to orderedDiagramObjects.Count - 1&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.top = orderedDiagramObjects(i).top then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'height is equal, check x position&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.left &lt;= orderedDiagramObjects(i).left then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert i, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;orderedActivities.Insert i, element&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;elseif diagramObject.top &gt; orderedDiagramObjects(i).top then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'add before&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Insert i, diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;orderedActivities.Insert i, element&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;&#x9;'if not added yet then add it to the back of the list&#xA;&#xA;&#x9;&#x9;&#x9;if not added then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedDiagramObjects.Add diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;orderedActivities.Add element&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;set getOrderedActivities = orderedActivities&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function sortMessageFlows (messageFlows, messageFlowLinks,compositeDiagram)&#xA;&#xA;&#x9;dim messageFlow as EA.Connector&#xA;&#xA;&#x9;dim messageFlowLink as EA.DiagramLink&#xA;&#xA;&#x9;dim sortedMessageFlows&#xA;&#xA;&#x9;dim sortedMessageFlowLinks&#xA;&#xA;&#x9;dim sortedHeights&#xA;&#xA;&#x9;Set sortedMessageFlows = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;Set sortedMessageFlowLinks = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;Set sortedHeights = CreateObject(&quot;System.Collections.ArrayList&quot;)&#xA;&#xA;&#x9;dim i&#xA;&#xA;&#x9;for i = 0 to messageFlows.Count -1&#xA;&#xA;&#x9;&#x9;set messageFlow = messageFlows(i)&#xA;&#xA;&#x9;&#x9;set messageFlowLink = messageFlowLinks(i)&#xA;&#xA;&#x9;&#x9;dim height&#xA;&#xA;&#x9;&#x9;height = getStartingHeight(messageFlow, messageFlowLink,compositeDiagram)&#xA;&#xA;&#x9;&#x9;dim added&#xA;&#xA;&#x9;&#x9;added = false&#xA;&#xA;&#x9;&#x9;'loop the already sorted elements&#xA;&#xA;&#x9;&#x9;dim j&#xA;&#xA;&#x9;&#x9;for j = 0 to sortedMessageFlows.Count -1&#xA;&#xA;&#x9;&#x9;&#x9;dim sortedHeight&#xA;&#xA;&#x9;&#x9;&#x9;sortedHeight = sortedHeights(j)&#xA;&#xA;&#x9;&#x9;&#x9;if sortedHeight &lt;= height then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlows.Insert j, messageFlow &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Insert j, messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;sortedHeights.Insert j, height&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;added = true&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;'if it is the first element then just add it&#xA;&#xA;&#x9;&#x9;if not added then&#xA;&#xA;&#x9;&#x9;&#x9;sortedMessageFlows.Add messageFlow&#xA;&#xA;&#x9;&#x9;&#x9;sortedMessageFlowLinks.Add messageFlowLink&#xA;&#xA;&#x9;&#x9;&#x9;sortedHeights.Add height&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;next&#xA;&#xA;&#x9;set messageFlows = sortedMessageFlows&#xA;&#xA;&#x9;set messageFlowLinks = sortedMessageFlowLinks&#xA;&#xA;&#x9;set sortMessageFlows = sortedHeights&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function getStartingHeight(connector, diagramLink, diagram)&#xA;&#xA;&#x9;'check start element&#xA;&#xA;&#x9;dim startElement as EA.Element&#xA;&#xA;&#x9;dim elementID&#xA;&#xA;&#x9;set startElement = Repository.GetElementByID(connector.ClientID)&#xA;&#xA;&#x9;elementID = startElement.ElementID&#xA;&#xA;&#x9;if startElement.Type = &quot;ActivityPartition&quot; then&#xA;&#xA;&#x9;&#x9;'check end element&#xA;&#xA;&#x9;&#x9;dim endElement as EA.Element&#xA;&#xA;&#x9;&#x9;set endElement = Repository.GetElementByID(connector.SupplierID)&#xA;&#xA;&#x9;&#x9;if endElement.Type &lt;&gt; &quot;ActivityPartition&quot; then&#xA;&#xA;&#x9;&#x9;&#x9;elementID = endElement.ElementID&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;end if&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;set diagramObject = getDiagramObjectForElementID(ElementID, diagram)&#xA;&#xA;&#x9;if not diagramObject is nothing then&#xA;&#xA;&#x9;&#x9;getStartingHeight = diagramObject.top&#xA;&#xA;&#x9;else&#xA;&#xA;&#x9;&#x9;getStartingHeight = 0&#xA;&#xA;&#x9;end if&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getDiagramObjectForElementID(elementID, diagram)&#xA;&#xA;&#x9;set getDiagramObjectForElementID = nothing&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#xA;&#x9;for each diagramObject in diagram.DiagramObjects&#xA;&#xA;&#x9;&#x9;if diagramObject.ElementID = elementID then&#xA;&#xA;&#x9;&#x9;&#x9;set getDiagramObjectForElementID = diagramObject&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;function setLinkStyles(overviewDiagram)&#xA;&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#xA;&#x9;for each diagramLink in overviewDiagram.DiagramLinks&#xA;&#xA;&#x9;&#x9;dim styleParts&#xA;&#xA;&#x9;&#x9;styleParts = Split (diagramLink.Style, &quot;;&quot;) &#xA;&#xA;&#x9;&#x9;dim i&#xA;&#xA;&#x9;&#x9;dim stylepart&#xA;&#xA;&#x9;&#x9;dim modepart &#xA;&#xA;&#x9;&#x9;modepart = &quot;Mode=2&quot;&#xA;&#xA;&#x9;&#x9;dim modeSet&#xA;&#xA;&#x9;&#x9;modeSet = false&#xA;&#xA;&#x9;&#x9;dim treepart&#xA;&#xA;&#x9;&#x9;treepart = &quot;TREE=OR&quot;&#xA;&#xA;&#x9;&#x9;dim treeSet&#xA;&#xA;&#x9;&#x9;treeSet = false&#xA;&#xA;&#x9;&#x9;for i = 0 to Ubound(styleParts) -1&#xA;&#xA;&#x9;&#x9;&#x9;stylepart = styleParts(i)&#xA;&#xA;&#x9;&#x9;&#x9;'Session.Output &quot;stylepart: &quot; &amp; stylepart &amp; &quot;, i: &quot; &amp; i &amp; &quot;, Instr(stylepart,Mode=): &quot; &amp; Instr(stylepart,&quot;Mode=&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;if Instr(stylepart,&quot;Mode=&quot;) &gt;= 0 then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;styleParts(i) = modepart&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;modeSet = true&#xA;&#xA;'&#x9;&#x9;&#x9;elseif Instr(stylepart,&quot;TREE=&quot;) &gt;= 0 then&#xA;&#xA;'&#x9;&#x9;&#x9;&#x9;styleParts(i) = treepart&#xA;&#xA;'&#x9;&#x9;&#x9;&#x9;treeSet = true&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;diagramLink.Style = join(styleParts,&quot;;&quot;)&#xA;&#xA;&#x9;&#x9;if not modeSet then&#xA;&#xA;&#x9;&#x9;&#x9;if len(diagramLink.Style) &gt; 0 then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Style = modepart &amp; &quot;;&quot;&amp; diagramLink.Style&#xA;&#xA;&#x9;&#x9;&#x9;else &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;diagramLink.Style = modepart &amp; &quot;;&quot;&#xA;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;'&#x9;&#x9;if not treeSet then&#xA;&#xA;'&#x9;&#x9;&#x9;diagramLink.Style = diagramLink.Style &amp; &quot;;&quot; &amp; treepart&#xA;&#xA;'&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;diagramLink.Update&#xA;&#xA;&#x9;next&#xA;&#xA;end function&#xA;&#xA;&#xA;&#xA;function getOwnedDiagramByName(element, diagramName)&#xA;&#xA;&#x9;set getOwnedDiagramByName = nothing&#xA;&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#xA;&#x9;for each diagram in element.Diagrams&#xA;&#xA;&#x9;&#x9;if diagram.Name = diagramName then&#xA;&#xA;&#x9;&#x9;&#x9;set getOwnedDiagramByName = diagram&#xA;&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#xA;&#x9;&#x9;end if&#xA;&#xA;&#x9;next&#xA;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="17"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3CFAAC29-29D4-4d8c-839E-6C54B2BF14F4}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Run PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC Common.Print-Array&#xA;!INC Common.color-picker&#xA;!INC EAScriptLib.VBScript-Logging&#xA;!INC PlantUML.Create-Activity-Diagram&#xA;!INC PlantUML.Create-Class-Diagram&#xA;!INC PlantUML.Create-Component-Diagram&#xA;!INC PlantUML.Create-Deployment-Diagram&#xA;!INC PlantUML.Create-Sequence-Diagram&#xA;!INC PlantUML.Create-UseCase-Diagram&#xA;!INC PlantUML.Create-C4-Diagram&#xA;&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;'LOGLEVEL=1&#x9;&#x9;'INFO&#xA;LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: Run PlantUML Script&#xA;' Author: David Anderson&#xA;' Purpose: Wrapper script to appear in the Diagram Scripting group  &#xA;' &#x9;&#x9;   responsible for directing to the relevant script by diagram type.  &#xA;' Date: 11-March-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;Dim currentDiagram as EA.Diagram&#xA;Dim currentPackage as EA.Package&#xA;Dim selectedObject as EA.DiagramObject&#xA;Dim theSelectedElement as EA.Element&#xA;&#xA;dim layout_array (99, 7)&#x9;&#x9;&#x9;'store cooridinates of all sequences and fragments that needs to be positioned&#xA;dim l&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'layout array index&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Run PlantUML script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;' One or more diagram objects are selected&#xA;&#x9;&#x9;&#x9;if not theSelectedElement is nothing _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _&#xA;&#x9;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;select case currentDiagram.Type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Activity&quot;&#x9;&#x9;call CreateActivityDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Logical&quot;&#x9;&#x9;call CreateClassDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Component&quot;&#x9;call CreateComponentDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Deployment&quot;&#x9;call CreateDeploymentDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;call CreateSequenceDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;Use Case&quot;&#x9;&#x9;call CreateUseCaseDiagram ()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;call LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Done&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object with the valid PlantUML script should be selected&quot; , promptOK&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="18"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="PlantUML"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="19"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{87F8A774-2C06-4d9c-A62E-FF8BAEA62D35}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Sequence-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Sequence Diagram &#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to be used to build a Sequence Diagram  &#xA;' Date: 11-Feb-2019&#xA;'-----------------------------------------&#xA;' Modifcation Log&#xA;' 30-Mar-2019:&#x9;add logic to support the following&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- \n for long names&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- title&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- dividers (==)&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- non decalred participants&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- non space delimitered sequences &#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- notes left/right and over&#xA;' 12-Sep-2022:  fix parsing logic for -&gt;&gt; and &lt;&lt;-&#xA;' 17-Sep-2022:  fix parsing logic for --&gt; and &lt;--&#xA;'&#x9;&#x9;&#x9;&#x9;trim plantuml line to fix parsing (thanks Takashi-K-TakaTech)&#xA;'&#x9;&#x9;&#x9;&#x9;fix when resolving isReturn&#xA;'&#x9;&#x9;&#x9;&#x9;handle resizing of multiple boxes&#xA;'&#x9;&#x9;&#x9;&#x9;ignore CREATE, DESTROY, ... (thanks mcagnion)&#xA;'&#x9;&#x9;&#x9;&#x9;Unnamed groups are now handled&#xA;'&#x9;&#x9;&#x9;&#x9;improve note layout processing&#xA;'&#xA;' 15-Sep-2022:&#x9;Refactor to support C4 Diargams&#xA;'&#xA;dim timeline_array (99,7)&#x9;&#x9;&#x9;'store timeline elements &#xA;dim sequence_array (99,7)&#x9;&#x9;&#x9;'store interations&#xA;dim t&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'timeline array index&#xA;dim s&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'sequence array index&#xA;dim fragment_level&#x9;&#x9;&#x9;&#x9;&#x9;'fragment level indicator&#xA;dim partition_level&#x9;&#x9;&#x9;&#x9;&#x9;'partition level within a fragment&#xA;dim left&#xA;dim multiline_note&#x9;&#x9;&#x9;&#x9;&#x9;'multi note line indicator is currently being processed and thefore will not hsv&#xA;dim note&#xA;dim noteName&#xA;dim n&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'count of note lines&#xA;dim autonumber&#xA;'dim startNumber&#xA;'dim increment&#xA;&#xA;sub CreateSequenceDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Sequence Diagram script activated&quot;)&#xA;&#xA;&#x9;dim PlantUML&#xA;&#x9;dim word&#xA;&#xA;&#x9;'check current diagram.. if nothing.. then this script has not been called properly&#xA;&#x9;&#xA;&#x9;'the following check is not really required..&#xA;&#x9;if not theSelectedElement is nothing _&#xA;&#x9;and theSelectedElement.ObjectType = otElement _&#xA;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;'split note..&#xA;&#x9;&#x9;'call LOGDebug( &quot;PlantUML&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;dim i&#xA;&#x9;&#x9;left=30&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set initial &#xA;&#x9;&#x9;fragment_level=0&#xA;&#x9;&#x9;PlantUML = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;&#x9;for i = 0 to Ubound(PlantUML)&#xA;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Processing #&quot; &amp; i &amp; &quot; :&quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;PlantUML(i) = Trim(PlantUML(i))&#xA;&#x9;&#x9;&#x9;if not PlantUML(i) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;if not Asc(PlantUML(i)) = 39  then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if multiline_note = True then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;process_note(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'process note&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;word=split(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select case ucase(word(0))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;AUTONUMBER&quot;&#x9;autonumber = True&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;TITLE&quot;&#x9;&#x9;create_title(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'timeline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;PARTICIPANT&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTROL&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ENTITY&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COLLECTIONS&quot;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DATABASE&quot;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;create_timeline(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'fragments&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;END&quot; &#x9;&#x9;&#x9;resize_diagramObject(PlantUML(i))&#x9;&#x9;&#x9;'box or a partition&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ALT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;OPT&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BREAK&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LOOP&quot; &#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CRITICAL&quot; &#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9; &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;==&quot; &#x9;&#x9;&#x9;create_fragment(PlantUML(i))&#x9;&#x9;&#x9; &#x9;'add divider as seq fragment&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ELSE&quot; &#x9;&#x9;add_partition(PlantUML(i)) &#x9;&#x9;&#x9;&#x9;&#x9;'add partition to fragment&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NOTE&quot;&#x9;&#x9;&#x9;process_note(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#x9;'process note&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@STARTUML&quot; &#x9;'LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;AUTOACTIVATE&quot;&#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ACTIVATE&quot; &#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DEACTIVATE&quot; &#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CREATE&quot; &#x9;&#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DESTROY&quot; &#x9;&#x9;LOGWarning ( &quot;skip: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@ENDUML&quot; &#x9;&#x9;'call LOGDebug ( &quot;skip: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'sequence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;create_sequence(PlantUML(i))&#x9;&#x9;&#x9;&#x9;'replace with a regex expression to make sure script line is indeed a sequence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#xA;&#x9;&#x9;call LOGDebug( &quot;**Timeline Array**&quot; )&#xA;&#x9;&#x9;Call PrintArray (timeline_array,0,t-1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;call layout_objects()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set relative coordinates of sequeuces &amp; fragments&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;call LOGDebug( &quot;**Layout Array**&quot; )&#xA;&#x9;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;call LOGInfo ( &quot;Create Sequence Diagram Script Complete&quot; )&#xA;&#x9;else&#xA;&#x9;&#x9;call LOGError(&quot;problem calling the sub routine&quot;)&#xA;&#x9;end if&#xA;end sub&#xA;&#xA;sub create_title(PlantUML)&#xA;dim strTitle&#xA;dim diagram as EA.Diagram&#xA;&#xA;&#x9;call LOGTrace(&quot;create_title(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;'set the diagram.name using title&#xA;&#x9;&#x9;&#xA;&#x9;strTitle = right(PlantUML, len(PlantUML)-5)&#xA;&#x9;'remove quotes&#xA;&#x9;strTitle = replace(strTitle, Chr(34), &quot; &quot;)&#xA;&#xA;&#x9;'handle \n&#xA;&#x9;strTitle = trim(replace(strTitle, &quot;\n&quot;, &quot; &quot;))&#xA;&#x9;&#xA;&#x9;set diagram = currentDiagram&#xA;&#x9;diagram.name = strTitle&#xA;&#x9;diagram.update&#xA;&#xA;&#x9;call LOGInfo( &quot;Set Diagram Name to: &quot; &amp; diagram.Name )&#xA;&#xA;end sub&#xA;&#xA;sub create_timeline(PlantUML)&#xA;dim i&#xA;dim word&#xA;dim sql&#xA;dim elementName&#xA;dim elementType&#xA;dim elementStereotype&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim width&#xA;dim diagramObjectName&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;'LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=3&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;create_timeline(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;word=split(PlantUML)&#xA;&#x9;select case Ucase(word(0))&#xA;&#x9;&#x9;case &quot;BOX&quot;&#x9;&#x9;&#x9;elementType = &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;ACTOR&quot;&#x9;&#x9;elementType = &quot;Actor&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;&quot;&#xA;&#x9;&#x9;case &quot;DATABASE&quot; &#x9;elementType = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;database&quot;&#xA;&#x9;&#x9;case &quot;BOUNDARY&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;boundary&quot;&#xA;&#x9;&#x9;case &quot;CONTROL&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;control&quot;&#xA;&#x9;&#x9;case &quot;ENTITY&quot; &#x9;&#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=50&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;entity&quot;&#xA;&#x9;&#x9;case &quot;COLLECTIONS&quot; &#x9;elementType = &quot;Sequence&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = &quot;collections&quot;&#xA;&#x9;&#x9;case else&#x9;&#x9;&#x9;elementType = &quot;Sequence&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;width=90&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;elementStereotype = getStereotype(Plantuml)&#xA;&#x9;end select&#xA;&#x9;&#xA;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;'call LOGDebug( &quot;word(1): &quot; &amp; word(1) &amp; &quot; of: &quot; &amp; ubound(word) )&#xA;&#x9;if Asc(word(1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;if Asc(right(word(1), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;elementName = mid(word(1),2,len(word(1))-2)&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;elementName = mid(word(1),2)&#xA;&#x9;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;&#x9;for i = 2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;elementName = elementName &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;elementName = word(1)&#xA;&#x9;end if&#xA;&#x9;'replace \n with a space&#xA;&#x9;elementName = replace(elementName, &quot;\n&quot;, &quot; &quot;)&#xA;&#xA;&#x9;sql =&quot;SELECT Object_ID FROM t_object WHERE t_object.Name =&quot; &amp; chr(34) &amp; elementName &amp; chr(34) &amp; &quot; and t_object.Object_Type = &quot; &amp; chr(34) &amp; elementType &amp; chr(34)&#xA;&#x9;'call LOGDebug ( &quot;sql: &quot; &amp; sql)&#xA;&#xA;&#x9;set elements=Repository.GetElementSet(sql,2)&#xA;&#x9;'call LOGDebug (&quot;elements returned: &quot; &amp; elements.Count)&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;'add element&#xA;&#x9;&#x9;set elements = currentPackage.Elements&#xA;&#x9;&#x9;set element = elements.AddNew( elementName, elementType )&#xA;&#x9;&#x9;element.Stereotype = elementStereotype&#xA;&#x9;&#x9;if instr(Ucase(PlantUML),&quot; AS &quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;element.Alias = elementAlias(PlantUML)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;dim borderStyle&#xA;&#x9;&#x9;&#x9;set borderStyle = element.Properties(&quot;BorderStyle&quot;)&#xA;&#x9;&#x9;&#x9;borderStyle.value = &quot;Solid&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;currentPackage.elements.Refresh&#xA;&#x9;&#x9;call LOGInfo( &quot;Added Element: &quot; &amp; element.Name &amp; &quot; (ID=&quot; &amp; element.ElementID &amp; &quot;) in package &quot; &amp; currentPackage.Name )&#xA;&#x9;else&#xA;&#x9;&#x9;set element = Repository.GetElementByID(elements.GetAt(0).ElementID)&#xA;&#x9;end if&#xA;&#xA;&#x9;&#xA;&#x9;if elementType=&quot;Boundary&quot; then&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=28;b=-278&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; left+width &amp; &quot;;t=50;b=-250&quot;&#xA;&#x9;end if &#xA;&#x9;left=left+width+45&#xA;&#x9;set DiagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, elementType)&#xA;&#x9;diagramObject.ElementID = element.ElementID&#xA;&#x9;'default color&#xA;&#x9;if instr(PlantUML,&quot;#&quot;) &gt; 0 then&#xA;&#x9;&#x9;diagramObject.BackgroundColor = getColor(PlantUML)&#xA;&#x9;end if&#xA;&#x9;diagramObject.Update&#xA;&#x9;diagramObjects.Refresh&#xA;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#xA;'add to timeline_array&#xA;&#x9;timeline_array (t,0) = element.ElementID&#xA;&#x9;timeline_array (t,1) = diagramObject.InstanceID&#xA;&#x9;timeline_array (t,2) = element.Name&#xA;&#x9;timeline_array (t,3) = element.Alias&#xA;&#x9;timeline_array (t,4) = Ucase(word(0)) 'PlantUML participant&#xA;&#x9;timeline_array (t,5) = diagramObject.left&#xA;&#x9;timeline_array (t,6) = diagramObject.right&#xA;&#x9;t=t+1&#xA;&#x9;call LOGTrace(&quot;create_timeline&quot;)&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;&#xA;'&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;&#xA;&#xA;end sub&#xA;&#xA;sub resize_diagramObject(script)&#xA;dim i&#xA;dim diagramObject as EA.DiagramObject&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#xA;&#x9;if ucase(script) = &quot;END BOX&quot; then&#xA;&#x9;&#x9;'find box in the timeline_array&#xA;&#x9;&#x9;for i = t to 0 step -1&#xA;&#x9;&#x9;&#x9;if timeline_array (i,4) = &quot;BOX&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.right = left&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left=left+15&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;'add fragment end to layout array&#xA;&#x9;&#x9;layout_array (l,0) = fragment_level&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;layout_array (l,1) = &quot;End&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;&#x9;'layout_array (l,2) = &quot;&quot;&#x9;&#x9;&#x9;'id of the connector&#xA;&#x9;&#x9;l=l+1&#xA;&#x9;&#x9;fragment_level = fragment_level-1&#xA;&#x9;end if&#xA;&#x9;call LOGTrace (&quot;resize_diagramObject&quot;)&#xA;&#xA;end sub&#xA;&#xA;sub create_sequence(script)&#xA;dim parsedScript&#xA;dim word&#xA;dim i&#xA;dim j&#xA;dim r&#xA;dim color&#xA;dim script_head&#xA;dim script_tail&#xA;dim script_return&#xA;dim script_source&#xA;dim script_target&#xA;dim element as EA.Element &#xA;dim connector as EA.Connector&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=5&#x9;&#xA;&#xA;&#x9;call LOGTrace( &quot;create sequence(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;&#xA;&#x9;'parse for color&#xA;&#x9;i=instr(script,&quot;[&quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;color = getColor(script)&#xA;&#x9;&#x9;j=instr(script,&quot;]&quot;)&#xA;&#x9;&#x9;'remove [#] from script&#xA;&#x9;&#x9;'call LOGDebug(&quot;[= &quot; &amp; i &amp; &quot; ]=&quot; &amp; j)&#xA;&#x9;&#x9;script_head=Mid(script,1,i-1)&#xA;&#x9;&#x9;script_tail=Mid(script,j+1)&#x9;&#x9;&#xA;&#x9;&#x9;script = script_head &amp; script_tail&#xA;&#x9;&#x9;'call LOGDebug( &quot;remove color(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'parse to ensure sufficient delimiters to support processing&#xA;&#x9;if instr(script,&quot;--&amp;gt;&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;LOGWarning ( &quot;--&gt;&gt; is invalid.. converting to -&gt;&gt;&quot;)&#x9; &#xA;&#x9;&#x9;script = replace(script, &quot;--&amp;gt;&amp;gt;&quot;, &quot; -&amp;gt;&amp;gt; &quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(script,&quot;-&amp;gt;&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;script = replace(script, &quot;-&amp;gt;&amp;gt;&quot;, &quot; -&amp;gt;&amp;gt; &quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if instr(script,&quot;-&amp;gt; &amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;-&amp;gt; &amp;gt;&quot;, &quot; -&amp;gt;&amp;gt; &quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(script,&quot;--&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;--&amp;gt;&quot;, &quot; --&amp;gt; &quot;)&#xA;&#x9;&#x9;&#x9;&#x9;else&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if instr(script,&quot;-&amp;gt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;-&amp;gt;&quot;, &quot; -&amp;gt; &quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if instr(script,&quot;&amp;lt;&amp;lt;-&quot;) &gt; 0 then&#xA;&#x9;&#x9;script = replace(script, &quot;&amp;lt;&amp;lt;-&quot;, &quot; &amp;lt;&amp;lt;- &quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(script,&quot;&amp;lt; &amp;lt;-&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;script = replace(script, &quot;&amp;lt; &amp;lt;-&quot;, &quot; &amp;lt;&amp;lt;- &quot;)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if instr(script,&quot;&amp;lt;--&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;&amp;lt;--&quot;, &quot; &amp;lt;-- &quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(script,&quot;&amp;lt;-&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;script = replace(script, &quot;&amp;lt;-&quot;, &quot; &amp;lt;- &quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;script = replace(script, &quot;++&quot;, &quot;&quot;)&#xA;&#x9;script = replace(script, &quot;--:&quot;, &quot;:&quot;)&#xA;&#x9;script = replace(script, &quot;--: &quot;, &quot;:&quot;)&#xA;&#x9;&#xA;&#xA;&#x9;script = replace(script, &quot;:&quot;, &quot; : &quot;)&#xA;&#x9;script = replace(script, &quot;  &quot;, &quot; &quot;)&#xA;&#x9;call LOGTrace( &quot;parsedScript: &quot; &amp; script)&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;&#xA;&#x9;if ucase(word(0)) = &quot;RETURN&quot; then&#xA;&#x9;&#x9;'resolve source and target timelines &#xA;&#x9;&#x9;if s &gt; 0 then&#xA;&#x9;&#x9;&#x9;script_source = timeline_array (timelineIndexById(sequence_array (s-1,2)),2) &#x9;'resolve source using the target element in the prior sequence&#xA;&#x9;&#x9;&#x9;script_target = resolveTarget(sequence_array (s-1,2))&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'resolve target using the target element from the prior sequence&#xA;&#x9;&#x9;&#x9;script_return = script_source &amp; &quot; --&gt; &quot; &amp; script_target &amp; &quot; : &quot;&#x9;&#x9;&#x9;&#x9;&#x9;'return in plantuml do not appear to have :&#xA;&#x9;&#x9;&#x9;script = replace(script, word(0), script_return)&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;return script updated to(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;word=split(script)&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;call LOGWarning(script &amp; &quot;:no where to return&quot;)&#xA;&#x9;&#x9;&#x9;exit sub&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'skip unresolved return&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'add to sequence array&#xA;&#x9;'call LOGDebug( &quot;word count(&quot; &amp; ubound(word)+1 &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug( &quot;word1(&quot; &amp; word(1) &amp; &quot;)&quot;)&#xA;&#x9;'check direction of the sequence&#xA;&#x9;if instr(word(1), &quot;&amp;lt;&quot;) = 0 then&#xA;&#x9;&#x9;sequence_array (s,0) = timelineElementID(word(0))&#x9;'source elementID&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,1) = word(1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'interaction type&#xA;&#x9;&#x9;sequence_array (s,2) = timelineElementID(word(2))&#x9;'target elementID&#xA;&#x9;else&#xA;&#x9;&#x9;sequence_array (s,2) = timelineElementID(word(0))&#x9;'source elementID&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,1) = word(1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'interaction type&#xA;&#x9;&#x9;sequence_array (s,0) = timelineElementID(word(2))&#x9;'target elementID&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'create connector&#xA;&#x9;set element = Repository.GetElementByID (sequence_array (s,0))&#xA;&#x9;set connector = element.Connectors.AddNew(&quot;&quot;,&quot;Sequence&quot;)&#xA;&#x9;&#xA;&#x9;connector.SupplierID = sequence_array (s,2)&#xA;&#x9;connector.SequenceNo = (s+1)*10&#xA;&#x9;if autonumber = True then&#xA;&#x9;&#x9;connector.Name = s+1 &amp; &quot;. &quot; &amp; connectorName(script)&#xA;&#x9;else&#xA;&#x9;&#x9;connector.Name = connectorName(script)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'Check lifecycle&#xA;&#x9;if instr(script, &quot;**&quot;) &gt; 0 then&#xA;&#x9;&#x9;connector.Subtype=&quot;New&quot;&#xA;&#x9;end if&#xA;&#x9;if instr(script, &quot;!!&quot;) &gt; 0 then&#xA;&#x9;&#x9;connector.Subtype=&quot;Delete&quot;&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;connector.DiagramID = currentDiagram.DiagramID&#xA;&#x9;connector.Color = color&#xA;&#xA;&#x9;sequence_array (s,3) = connector.Name&#xA;&#x9;sequence_array (s,4) = synch(word(1))&#xA;&#x9;sequence_array (s,5) = signature(script)&#xA;&#x9;sequence_array (s,6) = isReturn(word(1))&#xA;&#x9;sequence_array (s,7) = connector.ConnectorID&#xA;&#x9;&#xA;&#x9;connector.Update&#xA;&#x9;element.Connectors.Refresh&#xA;&#x9;&#xA;&#x9;dim sql&#xA;&#x9;sql =&quot;UPDATE t_connector SET PData1 = '&quot; &amp; sequence_array (s,4) &amp; &quot;', PData2 = '&quot; &amp; sequence_array (s,5)  &amp; &quot;', PData4 = '&quot; &amp; sequence_array (s,6) &amp; &quot;' WHERE Connector_Id = &quot; &amp; connector.ConnectorID &amp; &quot;;&quot;&#xA;&#x9;'call LOGDebug ( &quot;SQL: &quot; &amp; sql)&#xA;&#x9;&#xA;&#x9;Repository.Execute(sql)&#xA;&#x9;set connector = Repository.GetConnectorByID(connector.ConnectorID)&#x9;&#xA;&#x9;element.Update&#xA;&#x9;'call LOGDebug (&quot;+created connector (&quot; &amp; connector.ConnectorID &amp; &quot;)&quot; &amp; vbcrlf &amp; _&#xA;&#x9;'&#x9;&#x9;&#x9;&#x9;vbtab &amp; vbtab &amp; vbtab &amp; &quot; synch: &quot; &amp; connector.MiscData(0) )&#xA;&#x9;&#xA;&#x9;'add sequence to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#xA;&#x9;if connector.ClientID = connector.SupplierID then&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence2Self&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Sequence&quot;&#x9;&#x9;&#x9;'type of object &#xA;&#x9;end if&#xA;&#x9;layout_array (l,2) = connector.ConnectorID&#x9;'id of the connector&#xA;&#x9;l=l+1&#xA;&#x9;s=s+1&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;sub create_fragment(script)&#xA;&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramObjectName&#xA;dim i&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;' position of space character&#xA;dim fragmentName&#xA;dim fragmentType&#xA;&#xA;&#x9;'create element&#xA;&#x9;i = instr(script, &quot; &quot;) 'postion to 1st char after key word&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;fragmentType = mid(script,1, i-1)&#xA;&#x9;&#x9;fragmentName = mid(script, i+1)&#xA;&#x9;else&#xA;&#x9;&#x9;fragmentType = script&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'remove trialing == of divider&#xA;&#x9;fragmentName = replace(fragmentName, &quot;==&quot;, &quot;&quot;)&#xA;&#x9;fragmentName = trim(fragmentName)&#xA;&#x9;set elements = currentPackage.Elements&#xA;&#x9;set element = elements.AddNew( fragmentName, &quot;InteractionFragment&quot; )&#xA;&#x9;'handle when name is not supplied eg loop&#xA;&#xA;&#x9;element.Subtype = fragment_type(fragmentType)&#xA;&#x9;element.Update&#xA;&#x9;elements.Refresh&#xA;&#x9;call LOGInfo( &quot;added fragment: &quot; &amp; fragmentName &amp; &quot; (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#x9;&#xA;&#x9;'Do not increment fragment level if divider (==) as it will always be top level&#xA;&#x9;if element.Subtype = 9 then&#xA;&#x9;&#x9;layout_array (l,1) = &quot;Divider&quot;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;else&#xA;&#x9;&#x9;fragment_level=fragment_level+1&#x9;&#xA;&#x9;&#x9;layout_array (l,1) = &quot;InteractionFragment&quot;&#x9;'type of object ie seq, Fragment&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'add fragment to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub add_partition(script)&#xA;dim element as EA.Element&#xA;dim elementId&#xA;dim diagramObject as EA.DiagramObject&#xA;dim partitions as EA.Collection&#xA;dim partition as EA._Partition&#xA;dim partitionName&#xA;dim i&#xA;&#x9;i = instr(script, &quot; &quot;)&#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;partitionName = mid(script, i+1)&#xA;&#x9;end if&#xA;&#xA;&#x9;'get fragment element using the id stored in the layout array&#xA;&#x9;for i = l to 0 step-1&#xA;&#x9;&#x9;if layout_array (i,1) = &quot;InteractionFragment&quot; then&#xA;&#x9;&#x9;&#x9;elementId = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'&#xA;&#x9;set element = Repository.GetElementByID(elementId)&#xA;&#x9;set partitions = element.Partitions&#xA;&#x9;set partition = partitions.AddNew(partitionName,&quot;Partition&quot;)&#xA;&#x9;partition.Size=40&#x9;&#x9;'default&#xA;&#x9;element.Update&#xA;&#x9;currentPackage.elements.Refresh&#xA;&#x9;call LOGInfo( &quot;add partition: &quot; &amp; partitionName &amp; &quot; to Fragment (&quot; &amp; element.ElementID &amp; &quot;)&quot; )&#xA;&#xA;&#x9;'add partition to layout array&#xA;&#x9;layout_array (l,0) = fragment_level&#x9;&#x9;&#x9;'used to calculate height of object at same level&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;Partition&quot;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub process_note(script)&#xA;dim i&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=4&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;process_note (&quot; &amp; script &amp; &quot;)&quot;) &#xA;&#xA;&#x9;if ucase(script) = &quot;END NOTE&quot; then&#xA;&#x9;&#x9;'add note element&#xA;&#x9;&#x9;call add_note()&#xA;&#x9;&#x9;multiline_note = False&#x9;'switch off multi line note indictor&#xA;&#x9;else&#xA;&#x9;&#x9;if multiline_note = True then&#xA;&#x9;&#x9;&#x9;call contsruct_note(script)&#xA;&#x9;&#x9;else&#x9;&#xA;&#x9;&#x9;&#x9;i = inStr(script, &quot;:&quot;)&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;offset for : = &quot; &amp; i &amp; &quot; of &quot; &amp; len(script))&#xA;&#x9;&#x9;&#x9;'plantuml doesnot recognise note:.. so assume anything after note and before the colon controls layout&#xA;&#x9;&#x9;&#x9;if i &gt; 0 then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'single line note&#xA;&#x9;&#x9;&#x9;&#x9;noteName = Mid(script, 5, i-5)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;noteName : = &quot; &amp; noteName)&#xA;&#x9;&#x9;&#x9;&#x9;call contsruct_note(right(script, len(script)-i))&#xA;&#x9;&#x9;&#x9;&#x9;call add_note()&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;multiline_note = True&#xA;&#x9;&#x9;&#x9;&#x9;noteName = right(script, len(script)-5)&#xA;&#x9;&#x9;&#x9;&#x9;note=&quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'r = 0&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;sub contsruct_note(script)&#xA;dim notes&#xA;dim i&#xA;&#xA;&#x9;call LOGTrace(&quot;construct_note (&quot; &amp; script &amp; &quot;)&quot;) &#xA;&#xA;&#x9;notes = split(script, &quot;\n&quot;)&#xA;&#x9;&#xA;&#x9;for i = 0 to ubound(notes)&#xA;&#x9;&#x9;if note = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;note = notes(0)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;note = note &amp; vbcrlf &amp; notes(i)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;n=n+1&#xA;&#x9;next&#xA;&#x9;call LOGDebug( &quot;note* (&quot; &amp; note &amp; &quot;:&quot; &amp; n &amp; &quot;)&quot;)&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub add_note()&#xA;'relies on global variables: note, noteName and n&#xA;&#xA;dim elements as EA.Collection&#xA;dim element as EA.Element&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramObjectName&#xA;&#xA;&#x9;call LOGTrace(&quot;add_note (&quot; &amp; noteName &amp; &quot;)&quot;) &#xA;&#x9;'add next element&#xA;&#x9;set elements = currentPackage.Elements&#xA;&#x9;set element = elements.AddNew(trim(noteName), &quot;Note&quot; )&#xA;&#x9;element.Notes = note&#xA;&#x9;element.Update&#xA;&#x9;&#xA;&#x9;'add to layout array&#xA;&#x9;layout_array (l,0) = n&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;layout_array (l,1) = &quot;Note&quot;&#x9;&#x9;&#x9;&#x9;&#x9;'type of object ie seq, Fragment&#xA;&#x9;layout_array (l,2) = element.ElementID&#x9;&#x9;'id being element&#xA;&#x9;l=l+1&#xA;&#x9;note=&quot;&quot;&#xA;&#x9;n=0&#xA;&#xA;end sub&#xA;&#xA;function timelineElementID(word)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineElementID(&quot; &amp; word &amp; &quot;)&quot;)&#xA;&#x9;if right(word,1) = &quot;:&quot; then&#xA;&#x9;&#x9;word = mid(word, 1, len(word)-1)&#x9;&#x9;&#x9;&#x9;'remove trailing :&#xA;&#x9;end if&#xA;&#x9;timelineElementID=99&#xA;&#x9;for i = 0 to ubound(timeline_array)&#xA;&#x9;&#x9;if word = timeline_array(i,3) then&#x9;&#x9;&#x9;&#x9;'check using alias&#xA;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if word = timeline_array(i,2) then&#x9;&#x9;&#x9;'check using name&#xA;&#x9;&#x9;&#x9;&#x9;timelineElementID = timeline_array (i,0)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;'add logic to create timeline if not found in the arrary..&#xA;&#x9;if timelineElementID = 99 then&#xA;&#x9;&#x9;'call LOGDebug( &quot;create a timeline for participant =&quot; &amp; word)&#xA;&#x9;&#x9;call create_timeline(&quot;participant &quot; &amp; word )&#xA;&#x9;&#x9;timelineElementID = timeline_array (t-1,0)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;timelineElementID=&quot; &amp; timelineElementID )&#xA;&#x9;&#xA;end function&#xA;&#xA;function getColor(script)&#xA;'color is delimited by #&#xA;'the color value can be either&#xA;'&#x9;- a Hex version of RGB &#xA;'&#x9;- or a standard color name (refer to color-picker script)&#xA;'if a color name is provided, call color-picker to return hex value of RGB&#xA;'if not.. look up get the hex vales by color name&#xA;'return a decimal value of the RGB&#xA;'&#xA;dim word&#xA;dim hexRGB&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;getColor(&quot; &amp; script &amp; &quot;)&quot; )&#xA;&#x9;&#xA;&#x9;script = replace(script, &quot;[&quot;, &quot;[ &quot;)&#x9;&#x9;'add space so as [ to split on # for a sequence&#xA;&#x9;script = replace(script, &quot;]&quot;, &quot; ]&quot;)&#x9;&#x9;'add space so as ] to split on # for a sequence&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if Asc(word(i)) = 35 then&#x9;&#x9;'check for hash&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;word=&quot; &amp; word(i))&#xA;&#x9;&#x9;&#x9;if ishex(mid(word(i),2,len(word(i))-1)) then&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(word(i),2,6)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;hexRGB = mid(ColorHexByName(Ucase(word(i))),2,6)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;hexRGB=&quot; &amp; hexRGB)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if not hexRGB = &quot;&quot; then&#xA;&#x9;&#x9;getColor=clng(&quot;&amp;h&quot; &amp; mid(hexRGB,5,2) &amp; mid(hexRGB,3,2) &amp; mid(hexRGB,1,2))&#xA;&#x9;&#x9;'call LOGDebug( &quot;color decimal=&quot; &amp; getColor)&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;getColor=&quot; &amp; getColor )&#xA;&#x9;&#xA;end function&#xA;&#xA;function ishex(word)&#xA;&#x9;ishex= isnumeric(&quot;&amp;h&quot; &amp; word)&#xA;end function&#xA;&#xA;function elementAlias(script)&#xA;dim i&#xA;dim word&#xA;&#x9;elementAlias=&quot;&quot;&#xA;&#x9;&#xA;&#x9;&#x9;'check if word begins with a quote.. if yes then the name is multi word.. and therefore need to reconstruct name without quotes&#xA;&#xA;&#x9;word=split(script)&#xA;&#x9;' find  as &#xA;&#x9;for i = 0 to ubound(word)&#xA;&#x9;&#x9;if ucase(word(i)) = &quot;AS&quot; then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if Asc(word(i+1)) = 34 then&#x9;&#x9;'check for quotes&#xA;&#x9;&#x9;elementAlias = mid(word(i+1),2)&#xA;&#x9;&#x9;'loop until find the word with the enclosing chr(34)&#xA;&#x9;&#x9;for i = i+2 to Ubound(word)&#xA;&#x9;&#x9;&#x9;if Asc(right(word(i), 1)) = 34 then&#xA;&#x9;&#x9;&#x9;&#x9;dim x &#xA;&#x9;&#x9;&#x9;&#x9;x = int(len(word(i)))-1&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; mid(word(i),1, x)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementAlias = elementAlias &amp; &quot; &quot; &amp; word(i)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;next&#xA;&#x9;else&#xA;&#x9;&#x9;elementAlias = word(i+1)&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function connectorName(script)&#x9;&#xA;'start with :&#xA;'end with (&#xA;dim x&#xA;dim y&#xA;&#xA;&#x9;x = inStr(script, &quot;:&quot;)&#xA;&#x9;y = inStr(script, &quot;(&quot;)&#xA;&#x9;if x &gt; 0 then&#xA;&#x9;&#x9;if y &gt; x then&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1, y-x-1))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;connectorName = trim(mid(script, x+1))&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function synch(arrow)&#xA;&#x9;call LOGTrace(&quot;synch(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;-&amp;gt;&amp;gt;&quot; or _&#x9;&#x9;&#xA;&#x9;&#x9;arrow = &quot;-&gt;&gt;&quot; then&#xA;&#x9;&#x9;synch = &quot;Asynchronous&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;synch = &quot;Synchronous&quot;&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;synch=&quot; &amp; synch)&#xA;end function&#xA;&#xA;function signature(script)&#xA;dim i&#xA;dim j&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#x9;signature=&quot;&quot;&#xA;&#x9;&#xA;&#x9;i = inStr(script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'find first :&#xA;&#x9;j= inStr(i+1,script, &quot;:&quot;)&#x9;&#x9;&#x9;&#x9;'find second : denoting retrun value&#xA;&#x9;if j &gt; 0 then&#xA;&#x9;&#x9;signature = &quot;retval=&quot; &amp; trim(mid(script,j+1))&#xA;&#x9;else&#xA;&#x9;&#x9;signature = &quot;retval=void&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;i = inStr(script, &quot;()&quot;)&#x9;&#x9;&#x9;&#x9;&#x9;'indicates there are no params&#xA;&#x9;if i = 0 then&#xA;&#x9;&#x9;i = inStr(script, &quot;(&quot;)&#xA;&#x9;&#x9;if i &gt; 0 then&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add parms&#xA;&#x9;&#x9;&#x9;j = inStr(script, &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;signature = signature &amp; &quot;;params=;paramsDlg=&quot; &amp; trim(mid(script, i+1, j-i-1)) &amp; &quot;;&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;signature(&quot; &amp; signature &amp; &quot;)&quot;)&#xA;&#x9;&#xA;end function&#xA;&#xA;function isReturn(arrow)&#xA;&#x9;call LOGTrace(&quot;isReturn(&quot; &amp; arrow &amp; &quot;)&quot;)&#xA;&#x9;if &#x9;arrow = &quot;--&amp;gt;&quot; or _ &#xA;&#x9;&#x9;arrow = &quot;--&gt;&quot; or _&#xA;&#x9; &#x9;arrow = &quot;&amp;lt;--&quot; or _ &#xA;&#x9;&#x9;arrow = &quot;&lt;--&quot;then&#xA;&#x9;&#x9;isReturn = 1&#xA;&#x9;else&#xA;&#x9;&#x9;isReturn = 0&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;isReturn=&quot; &amp; isReturn)&#xA;&#x9;&#xA;end function&#xA;&#xA;function fragment_type(script)&#xA;&#xA;&#x9;select case script&#xA;&#x9;&#x9;case &quot;alt&quot; &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;&#x9;case &quot;opt&quot; &#x9;&#x9;&#x9;fragment_type = 1&#xA;&#x9;&#x9;case &quot;break&quot; &#x9;&#x9;fragment_type = 2&#xA;&#x9;&#x9;case &quot;par&quot; &#x9;&#x9;&#x9;fragment_type = 3&#xA;&#x9;&#x9;case &quot;loop&quot; &#x9;&#x9;fragment_type = 4&#xA;&#x9;&#x9;case &quot;critical&quot;&#x9;&#x9;fragment_type = 5&#xA;&#x9;&#x9;case &quot;==&quot;&#x9;&#x9;&#x9;fragment_type = 9&#x9;&#x9;&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;fragment_type = 0&#xA;&#x9;end select&#xA;end function&#xA;&#xA;sub layout_objects()&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim element as EA.Element&#xA;dim diagramObjectName&#xA;dim diagramObjects as EA.Collection&#xA;dim diagramObject as EA.DiagramObject&#xA;dim diagramLink as EA.DiagramLink&#xA;&#xA;dim partition as EA._Partition&#xA;dim top&#xA;dim bottom&#xA;&#xA;dim LOGLEVEL_SAVE&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=4&#x9;&#x9;'DEBUG&#xA;&#x9;call LOGTrace(&quot;layout_Objects()&quot;)&#xA;&#xA;&#x9;LOGDebug (&quot;layout array count l-1=&quot; &amp; l-1 &amp; &quot; Ubound(layout_array)=&quot; &amp; Ubound(layout_array))&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;'call calculate heights (reursively) &#xA;&#x9;&#x9;select case layout_array(i,1)&#xA;&#x9;&#x9;&#x9;case &quot;Divider&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) =  dividerHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;case &quot;InteractionFragment&quot; &#x9;&#x9;&#x9;layout_array (i,3) =  fragmentHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;case &quot;Partition&quot; &#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) =  partitionHeight (layout_array (i,0), i) &#xA;&#x9;&#x9;&#x9;case &quot;Note&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,3) =  noteHeight (i) &#xA;&#x9;&#x9;end select&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'set cordinates of each object&#xA;&#x9;top = -130&#xA;&#xA;&#x9;for i = 0 to l-1&#x9;&#xA;&#x9;&#x9;'set top as an accumulation of object&#xA;&#x9;&#x9;'if layout_array(i,1) = &quot;Title&quot; then &#xA;&#x9;&#x9;'&#x9;layout_array (i,4) = 0 &#xA;&#x9;'&#x9;&#x9;layout_array (i,5) = -140 &#xA;&#x9;'&#x9;&#x9;'resize based on timeline edges&#xA;'&#x9;&#x9;&#x9;layout_array (i,6) = 30 &#xA;'&#x9;&#x9;&#x9;layout_array (i,7) = 250 &#xA;'&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;layout_array (i,4) = top &#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot;  or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Divider&quot; then &#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,4) = top + 20&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4) - layout_array (i,3)&#x9;'bottom&#xA;&#x9;&#x9;&#x9;&#x9;'set left and right coordinates based on the timelines&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;call setLeftRightCoordinates(layout_array (i,0),i)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  layout_array(i,1) = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call setNoteLayout(i)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top = top - layout_array (i,3)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4) - layout_array (i,3)&#x9;'bottom&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top = top - height(layout_array (i,1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'self message height&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (i,5) = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;set diagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then &#xA;&#x9;&#x9;&#x9;'get connector &amp; update connector Y coordinates&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'set element = Repository.GetElementByID(connector.ClientID)&#xA;&#x9;&#x9;&#x9;'&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'set connector = Repository.GetConnectorByID (layout_array (i,2))&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'call LOGDebug( &quot;*move sequence(&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; from &quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY &amp; &quot; to &quot; &amp; layout_array (i,4))&#xA;&#x9;&#x9;&#x9;'connector.StartPointX = 1&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.StartPointY = layout_array (i,4)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'connector.EndPointX = 2&#xA;&#x9;&#x9;&#x9;'connector.EndPointY = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;'connector.Update&#xA;&#x9;&#x9;&#x9;'element.Connectors.Refresh&#xA;&#x9;&#x9;&#x9;'element.Update&#xA;&#x9;&#x9;&#x9;'currentPackage.elements.Refresh&#xA;&#x9;&#x9;&#x9;'create diagramlink&#xA;&#x9;&#x9;&#x9;'set diagramLink = currentDiagram.DiagramLinks.AddNew(&quot;&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;'diagramLink.ConnectorID=connector.ConnectorID&#x9;&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'Session.Output( &quot; geometry: &quot; &amp; diagramLink.Geometry )&#xA;&#x9;&#x9;&#x9;'diagramLink.Update&#xA;&#x9;&#x9;&#x9;'currentDiagram.DiagramLinks.Refresh&#xA;&#x9;&#x9;&#x9;'currentDiagram.Update&#xA;&#x9;&#x9;&#x9;'Call LOGInfo( &quot;created diagramLink (&quot; &amp; diagramLink.ConnectorID  &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;'call LOGInfo( &quot;connector (&quot; &amp; layout_array (i,2) &amp; &quot;) &quot; &amp; connector.Name &amp; &quot; startX:Y=&quot; &amp; connector.StartPointX &amp; &quot;:&quot; &amp; connector.StartPointY)&#xA;&#x9;&#x9;end if&#xA;'&#x9;&#x9;if layout_array(i,1) = &quot;Title&quot; then &#xA;'&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing Title &quot;  &amp; layout_array (i,2)) &#xA;'&#x9;&#x9;&#x9;'add diagramobject&#xA;'&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;'&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;'&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;'&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;'&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;'&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;'&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;'&#x9;&#x9;&#x9;'centre text, fontsize and make bold&#xA;'&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;'&#x9;&#x9;&#x9;diagramObject.Update&#xA;'&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;'&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;'&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; or _&#xA;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Divider&quot; then &#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing InteractionFragment &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;'add diagramobject&#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Partition&quot; then&#xA;&#x9;&#x9;&#x9;'update partition size&#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing partition for &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;dim pcount&#xA;&#x9;&#x9;&#x9;pcount=0&#xA;&#x9;&#x9;&#x9;for j = i-1 to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;'LOGDebug (&quot;j=&quot; &amp; j)&#xA;&#x9;&#x9;&#x9;&#x9;if layout_array (i,2) = layout_array (j,2) then 'resolve which partition by counting the partitions with the same element id..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;pcount=pcount+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'LOGDebug (&quot;increment pcount to &quot; &amp; pcount)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;'for each partition in element.Partitions&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug( &quot;Partitition for &quot; &amp; element.ElementID &amp; &quot; &quot; &amp; &quot;name=&quot; &amp; partition.Name &amp; &quot; object type=&quot; &amp; partition.ObjectType &amp; &quot; size=&quot; &amp; partition.size)&#x9;&#xA;&#x9;&#x9;&#x9;'next&#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;Update partition number &quot; &amp; pcount-1 &amp; &quot; of &quot; &amp; element.Partitions.Count &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;set partition = element.Partitions.GetAt(pcount-1) &#xA;&#x9;&#x9;&#x9;'LOGDebug (&quot;partition size to be updated from &quot; &amp; partition.Size &amp; &quot; to &quot; &amp; layout_array (i,3)) &#xA;&#x9;&#x9;&#x9;partition.Size = layout_array (i,3)&#xA;&#x9;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;LOGDebug (&quot;i=&quot;&amp; i &amp; &quot;:Processing Note &quot;  &amp; layout_array (i,2)) &#xA;&#x9;&#x9;&#x9;'add diagramobject&#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; layout_array (i,6) &amp; &quot;;r=&quot; &amp; layout_array (i,7) &amp; &quot;;t=&quot; &amp; layout_array (i,4) &amp; &quot;;b=&quot; &amp; layout_array (i,3)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, layout_array (i,1))&#xA;&#x9;&#x9;&#x9;diagramObject.top = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;diagramObject.bottom = layout_array (i,5)&#xA;&#x9;&#x9;&#x9;'set based left/right of&#xA;&#x9;&#x9;&#x9;diagramObject.left = layout_array (i,6)&#xA;&#x9;&#x9;&#x9;diagramObject.right = layout_array (i,7)&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = layout_array (i,2)&#xA;'&#x9;&#x9;&#x9;'centre text, fontsize and make bold&#xA;&#x9;&#x9;&#x9;Call LOGInfo( &quot;created diagramObject (&quot; &amp; diagramObject.ElementID  &amp; &quot;) Top=&quot; &amp; diagramObject.top &amp; &quot; Bottom=&quot; &amp; diagramObject.bottom &amp; &quot; Left=&quot; &amp; diagramObject.left &amp; &quot; Right=&quot; &amp; diagramObject.right )&#xA;&#x9;&#x9;&#x9;'default color&#xA;&#x9;&#x9;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;&#x9;&#x9;if instr(element.Name,&quot;#&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;diagramObject.BackgroundColor = getColor(element.Name)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;&#x9;currentDiagram.Update&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;'resize any timeline boxes &#xA;&#x9;bottom = 0&#xA;&#x9;for i = 0 to l-1&#xA;&#x9;&#x9;if layout_array (i,5) &lt; bottom then&#xA;&#x9;&#x9;&#x9;bottom = layout_array (i,5)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;call LOGDebug( &quot;*resize timeline boxes to &quot; &amp; bottom)&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;'if timeline_array (i,4) = &quot;BOX&quot; then&#xA;&#x9;&#x9;&#x9;call LOGDebug( &quot;*timeline (&quot; &amp; timeline_array(i,0) &amp; &quot;) to be resized&quot;)&#xA;&#x9;&#x9;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;&#x9;&#x9;if diagramObject.ElementID = timeline_array(i,0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.bottom = bottom - 15&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;'end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currentDiagram.Update&#xA;&#x9;Repository.SaveDiagram(currentDiagram.DiagramID)&#xA;&#x9;'Repository.ReloadPackage(currentPackage.PackageID)&#xA;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;call LOGTrace( &quot;**Layout Array - updated**&quot; )&#xA;&#x9;Call PrintArray (layout_array,0,l-1)&#xA;&#xA;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#xA;end sub&#xA;&#xA;function height(thing)&#xA;&#x9;call LOGTrace(&quot;height(&quot; &amp; thing &amp; &quot;)&quot;)&#xA;&#x9;select case thing&#xA;&#x9;&#x9;case &quot;Note&quot;&#x9;&#x9;&#x9;&#x9;&#x9;height = 20 &#xA;&#x9;&#x9;case &quot;Sequence&quot;&#x9;&#x9;&#x9;&#x9;height = 35&#xA;&#x9;&#x9;case &quot;Sequence2Self&quot;&#x9;&#x9;height = 45&#xA;&#x9;&#x9;case &quot;InteractionFragment&quot; &#x9;height = 0&#x9;&#x9;'alt, loop etc&#xA;&#x9;&#x9;case &quot;Partition&quot;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;'else&#xA;&#x9;&#x9;case &quot;End&quot;&#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#x9;&#x9;&#xA;&#x9;&#x9;case &quot;Divider&quot; &#x9;&#x9;&#x9;&#x9;height = 20&#x9;&#x9;'seq&#xA;&#x9;&#x9;case else &#x9;&#x9;&#x9;&#x9;&#x9;height = 0&#xA;&#x9;end select&#xA;&#x9;call LOGTrace(&quot;height=&quot; &amp; height)&#xA;end function&#xA;&#xA;function dividerHeight(level, start)&#xA;dim i&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;dividerHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;dividerHeight=0&#xA;&#x9;for i = start+1 to l-1 &#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Divider&quot; then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;dividerHeight = dividerHeight + height(layout_array (i,1))&#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;dividerHeight=&quot; &amp; dividerHeight )&#xA;&#xA;end function&#xA;&#xA;function fragmentHeight(level, start)&#xA;dim i&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;fragmentHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;fragmentHeight=0&#xA;&#x9;for i = start to l-1 &#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;fragmentHeight = fragmentHeight + height(layout_array (i,1))&#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;fragmentHeight=&quot; &amp; fragmentHeight )&#xA;&#xA;end function&#xA;&#xA;function noteHeight(i)&#xA;&#x9;&#xA;&#x9;call LOGTrace( &quot;noteHeight(&quot; &amp; i &amp; &quot;)&quot; )&#xA;&#x9;noteHeight = height(&quot;Note&quot;) * layout_array(i,0)&#xA;&#x9;call LOGTrace( &quot;noteHeight=&quot; &amp; noteHeight )&#xA;&#xA;end function&#xA;&#xA;function partitionHeight(level, start)&#xA;dim i&#xA;dim LOGLEVEL_SAVE&#xA;LOGLEVEL_SAVE = LOGLEVEL &#xA;'&#x9;LOGLEVEL=4&#x9;&#x9;&#x9;'activate debugging for the sub&#xA;&#xA;&#x9;call LOGTrace( &quot;partitionHeight(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot; )&#xA;&#x9;partitionHeight=height(layout_array (start,1))&#xA;&#x9;for i = start+1 to Ubound(layout_array)&#xA;&#x9;&#x9;'end of partition is not specifically declared..  &#xA;&#x9;&#x9;if layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;InteractionFragment&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Partition&quot; or _&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'is dependant upon nuumber of sequences&#xA;&#x9;&#x9;partitionHeight = partitionHeight + height(layout_array (i,1))&#xA;&#x9;&#x9;'end of partition is identified when the level indicator is less than what was passed to it &#xA;&#x9;next&#xA;&#x9;call LOGTrace( &quot;partitionHeight=&quot; &amp; partitionHeight )&#xA;&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#xA;&#x9;&#xA;end function&#xA;&#xA;sub setLeftRightCoordinates(level,start)&#xA;'loop thru list of timelines in scope of this level and retrun the lowest value&#xA;&#xA;dim i&#xA;dim j&#xA;dim connector as EA.Connector&#xA;dim tLeft&#xA;dim tRight&#xA;&#xA;dim LOGLEVEL_SAVE&#x9;'&#xA;LOGLEVEL_SAVE = LOGLEVEL&#xA;'LOGLEVEL=3&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates(&quot; &amp; level &amp; &quot;:&quot; &amp; start &amp; &quot;)&quot;)&#xA;&#xA;&#x9;layout_array(start,6) = 400&#xA;&#x9;layout_array(start,7) = 0&#xA;&#xA;&#x9;for i = start to l-1&#xA;&#x9;&#x9;'need some way to identify nested fragments and whether the left and right values need adjusting&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; or _&#xA;&#x9;&#x9;&#x9;layout_array(i,1) = &quot;Sequence2Self&quot; then &#xA;&#x9;&#x9;&#x9;set connector = Repository.GetConnectorByID(layout_array(i,2))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;j=timelineIndexById(connector.ClientID)&#xA;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;'call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft - 25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;'&#x9;&#x9;call LOGDebug(&quot;client(&quot; &amp; connector.ClientID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight +25&#xA;&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;if layout_array(i,1) = &quot;Sequence&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndexById(connector.SupplierID)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;tLeft = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tLeft)&#xA;&#x9;&#x9;&#x9;&#x9;if tLeft &lt; layout_array(start,6) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = tLeft -25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;tRight = timeline_array(j,6)&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;supplier(&quot; &amp; connector.SupplierID &amp; &quot;) &quot; &amp; tRight)&#xA;&#x9;&#x9;&#x9;&#x9;if tRight &gt; layout_array(start,7) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = tRight + 25&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if layout_array(start,6) &lt; 5 then&#x9;&#x9;&#x9;'left coordinate cannot be less than zero&#xA;&#x9;&#x9;&#x9;&#x9;layout_array(start,6)=5&#xA;&#x9;&#x9;&#x9;end if &#xA;&#xA;&#x9;&#x9;&#x9;'check if margins need to adjusted becuase the fragment is nested&#xA;&#x9;&#x9;&#x9;if level &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;for j = start to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(j,0) = level -1 and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(j,1) = &quot;InteractionFragment&quot; then&#x9;&#x9;'scan layout arrary to find previous level fragmant&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,4) = layout_array(j,4) then&#x9;'if top value are the same subtract 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,4) = layout_array(start,4) - 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,5) = layout_array(j,5) then&#x9;'if bottom values are the same add 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,5) = layout_array(start,5) + 5&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,6) = layout_array(j,6) then&#x9;'if left value are the same add 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,6) = layout_array(start,6) + 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array(start,7) = layout_array(j,7) then&#x9;'if right values are the same subtract 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(start,7) = layout_array(start,7) - 10&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'call LOGDebug(&quot;Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'look for end of fragment for this level&#xA;&#x9;&#x9;if layout_array(i,1) = &quot;End&quot; and _&#xA;&#x9;&#x9;&#x9;layout_array(i,0) = level then&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;setLeftRightCoordinates: Left=&quot; &amp; layout_array(start,6) &amp; &quot;:Right=&quot; &amp; layout_array(start,7))&#xA;&#x9;'restore logging level&#x9;'&#xA;&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;'&#xA;&#xA;end sub&#xA;&#xA;sub setNoteLayout(i)&#xA;dim j&#xA;dim word&#xA;dim element as EA.Element&#xA;&#xA;&#x9;call LOGTrace(&quot;setNoteLayout(&quot; &amp; i &amp; &quot;)&quot;)&#xA;&#x9;'default width =155&#xA;&#xA;&#x9;'get element&#xA;&#x9;set element = Repository.GetElementByID(layout_array (i,2))&#xA;&#x9;'split element.name&#xA;&#x9;call LOGDebug(&quot;element.name=&quot; &amp; element.name)&#xA;&#xA;&#x9;word=split(element.Name)&#xA;&#x9;&#xA;&#x9;if ucase(word(0)) = &quot;LEFT&quot; then&#xA;&#x9;&#x9;'get timeline based on name&#xA;&#x9;&#x9;if ucase(element.Name) = &quot;LEFT&quot; then&#xA;&#x9;&#x9;&#x9;j=0&#x9;&#x9;&#x9;&#x9;&#x9;'no timeline provide so default to first&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;j=timelineIndexByName(word(2))&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'calculate left&#xA;&#x9;&#x9;layout_array(i,6) = timeline_array(j,5) - 80&#xA;&#x9;&#x9;if layout_array(i,6) &lt; 0 then&#xA;&#x9;&#x9;&#x9;layout_array(i,6) =0&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;'set right based on timeline left&#xA;&#x9;&#x9;layout_array(i,7) = timeline_array(j,5) + 35&#xA;&#x9;else&#xA;&#x9;&#x9;if ucase(word(0)) =  &quot;RIGHT&quot; then&#xA;&#x9;&#x9;&#x9;if ucase(element.Name) = &quot;RIGHT&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;j=t-1&#x9;&#x9;&#x9;&#x9;&#x9;'no timeline provide so default to last&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'get timeline based on name&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndexByName(word(2))&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'calculate left&#xA;&#x9;&#x9;&#x9;layout_array(i,6) = timeline_array(j,6) - 35&#xA;&#x9;&#x9;&#x9;'set right based on timeline left&#xA;&#x9;&#x9;&#x9;layout_array(i,7) = timeline_array(j,6) + 80&#xA;&#x9;&#x9;else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'over one timeline&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;over(&quot; &amp; word(1) &amp; &quot; of &quot; &amp; ubound(word) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;word(1) = replace(word(1), &quot;,&quot;, &quot;&quot;)&#x9;&#x9;'remove comma&#xA;&#x9;&#x9;&#x9;j=timelineIndexByName(word(1))&#x9;&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;t1(&quot; &amp; layout_array(i,4) &amp; &quot;):b1(&quot; &amp; layout_array(i,5) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;l1(&quot; &amp; layout_array(i,6) &amp; &quot;):r1(&quot; &amp; layout_array(i,7) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;call LOGDebug(&quot;l2(&quot; &amp; timeline_array(j,5) &amp; &quot;):r2(&quot; &amp; timeline_array(j,6) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;layout_array(i,6) = timeline_array(j,5) &#xA;&#x9;&#x9;&#x9;layout_array(i,7) = timeline_array(j,6)&#xA;&#x9;&#x9;&#x9;if ubound(word) &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;j=timelineIndexByName(word(2))&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;t1(&quot; &amp; layout_array(i,4) &amp; &quot;):b1(&quot; &amp; layout_array(i,5) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;l1(&quot; &amp; layout_array(i,6) &amp; &quot;):r1(&quot; &amp; layout_array(i,7) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;l2(&quot; &amp; timeline_array(j,5) &amp; &quot;):r2(&quot; &amp; timeline_array(j,6) &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if timeline_array(j,5) &lt; layout_array(i,6) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(i,6) = timeline_array(j,5)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;if timeline_array(j,6) &gt; layout_array(i,7) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array(i,7) = timeline_array(j,6)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;function timelineIndexById(timelineId )&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineIndexById(&quot; &amp; timelineId &amp; &quot;)&quot;)&#xA;&#x9;call LOGDebug(&quot;t=&quot; &amp; t)&#xA;&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timelineId = timeline_array(i,0) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;timelineIndexById = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;timelineIndexById=&quot; &amp; timelineIndexById)&#xA;&#xA;end function&#xA;&#xA;function timelineIndexByName(timelineName)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;timelineIndexByName(&quot; &amp; timelineName &amp; &quot;)&quot;)&#xA;&#x9;call LOGDebug(&quot;t=&quot; &amp; t)&#xA;&#xA;&#x9;for i = 0 to t-1&#xA;&#x9;&#x9;if timelineName = timeline_array(i,2) then&#x9;&#x9;&#x9;&#x9;'check using element name&#xA;&#x9;&#x9;&#x9;timelineIndexByName = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;timelineIndexByName=&quot; &amp; timelineIndexByName)&#xA;&#xA;end function&#xA;&#xA;function sequenceIndex(sequenceId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;sequenceIndex(&quot; &amp; sequenceId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;s=&quot; &amp; s)&#xA;&#xA;&#x9;for i = 0 to s-1&#xA;&#x9;&#x9;if sequenceId = sequence_array(i,7) then&#x9;&#x9;&#x9;&#x9;'check using element id&#xA;&#x9;&#x9;&#x9;sequenceIndex = i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGTrace(&quot;sequenceIndex=&quot; &amp; sequenceIndex)&#xA;&#xA;end function&#xA;&#xA;function resolveTarget(sourceId)&#xA;dim i&#xA;&#x9;call LOGTrace(&quot;resolveTarget(&quot; &amp; sourceId &amp; &quot;)&quot;)&#xA;&#x9;'call LOGDebug(&quot;s=&quot; &amp; s)&#xA;&#x9;resolveTarget=&quot;&quot;&#xA;&#x9;for i = s to 0 step -1&#xA;&#x9;&#x9;'call LOGDebug(&quot;i=&quot; &amp; i)&#xA;&#x9;&#x9;if sourceId = sequence_array(i,2) and sequence_array(i,6) = 0 then&#x9;&#x9;'check using elementid &amp; not a return flow&#xA;&#x9;&#x9;&#x9;resolveTarget = timeline_array (timelineIndexById(sequence_array(i,0)),2) &#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if resolveTarget=&quot;&quot; then&#xA;&#x9;&#x9;call LOGWarning(sourceId &amp; &quot;:no where to return.. so will treat as a self return&quot;)&#xA;&#x9;&#x9;resolveTarget = timeline_array(timelineIndexById(sourceId ),2)&#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;resolveTarget=&quot; &amp; resolveTarget)&#xA;&#xA;end function&#xA;&#xA;function getStereotype(script)&#xA;dim start&#xA;dim length&#xA;&#x9;call LOGTrace(&quot;getStereotype(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#xA;&#x9;if instr(script, &quot;&amp;lt;&amp;lt;&quot;) &gt; 0 then&#xA;&#x9;&#x9;start = instr(script, &quot;&amp;lt;&amp;lt;&quot;)+8&#xA;&#x9;&#x9;length = instr(script, &quot;&amp;gt;&amp;gt;&quot;) - start&#xA;&#x9;&#x9;getStereotype = trim(mid(script, start, length)) &#xA;&#x9;end if&#xA;&#x9;call LOGTrace(&quot;getStereotype=&quot; &amp; getStereotype)&#xA;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="20"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{697DDE6D-092E-48d9-95DD-5033A5D556BC}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Import File Attributes from CSV&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="Option Explicit&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Dialog&#xA;&#xA;' Script Name: ImportAttributesFromCSV&#xA;' Author: David Anderson&#xA;' Purpose: Import Attributes from a Slected CSV file into a selcted diagram object&#xA;'&#x9;&#x9;&#x9;Where the CSV file has the following 4 columns&#xA;'&#x9;&#x9;&#x9;&#x9;1.&#x9;Attribute Name&#xA;'&#x9;&#x9;&#x9;&#x9;2.&#x9;Type&#xA;'&#x9;&#x9;&#x9;&#x9;3.&#x9;Stereotype&#xA;'&#x9;&#x9;&#x9;&#x9;4.&#x9;Notes&#xA;'&#x9;&#x9;&#x9;&#xA;' Date: July-02-2017&#xA;' Change Log:&#xA;' Dec-01-2017: &#x9;Changed to select object from a diagram &#xA;'&#x9;&#x9;&#x9;&#x9;Add prompt for the delimiter&#xA;'&#x9;&#x9;&#x9;&#x9;Default delimiter set to |&#xA;&#xA;Sub ImportAttributesFromCSV()&#xA; Dim strFile&#xA; Dim strFileType&#xA; Dim fileSystemObject&#xA; dim inputFile&#xA; dim thisFile&#xA; dim strFileName&#xA; &#xA; ' Show the script output window&#xA; Repository.EnsureOutputVisible &quot;Script&quot;&#xA; &#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#xA;&#x9;if not currentDiagram is nothing then&#xA;&#x9;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#xA;&#x9;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;&#x9;dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;&#x9;dim theElement as EA.Element&#xA;&#x9;&#x9;&#x9;Dim theDelimiter&#xA;&#x9;&#x9;&#x9;theDelimiter = DLGInputBox( &quot;Enter delimiter&quot;, &quot;Attribute Import&quot;, &quot;|&quot; )&#xA;&#xA;&#x9;&#x9;&#x9;for each selectedObject in selectedObjects&#xA;&#x9;&#x9;&#x9;&#x9;set theElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;&#x9;&#x9;if not theElement is nothing and theElement.ObjectType = otElement then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strFile = SelectFile( )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If strFile = &quot;&quot; Then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;No file selected.&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;stop&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;&quot;&quot;&quot; &amp; strFile &amp; &quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' Define Global File IO Objects&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.GetFile(strFile)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strFileName = fileSystemObject.getfileName(inputFile)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check file type&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strFileType=Ucase(Right(strFile,3))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Select Case strFileType&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Case &quot;CSV&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;CSV File Type OK&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Case else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;File Type not yet supported&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;End Select&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'read first row&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim strRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set inputFile = fileSystemObject.OpenTextFile(strFile)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strRow = inputFile.readline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check it is a CSV header row...&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim cols&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;cols=Split(strRow, theDelimiter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if Ubound(Cols) = 3 and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(0) = &quot;Attribute Name&quot; and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(1) = &quot;Type&quot; and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(2) = &quot;Stereotype&quot; and _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;cols(3) = &quot;Notes&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;CSV File looks good&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;CSV File does not look good&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim attributes as EA.Collection&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;set attributes = theElement.Attributes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim newAttribute as EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim strCols&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'if attribute already exist.. delete them&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for i = 0 to attributes.Count - 1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Dim currentAttribute as EA.Attribute&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set currentAttribute = attributes.GetAt( i )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot;Deleting Attribute: &quot; &amp; currentAttribute.Name )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributes.DeleteAt i, false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;do until inputFile.AtEndOfStream&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;strRow = inputFile.readline&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;strCols = split(strRow, theDelimiter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add attributes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;set newAttribute = attributes.AddNew(strCols(0), strCols(1))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newAttribute.Stereotype=strCols(2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newAttribute.Notes=strCols(3)   &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;newAttribute.Update()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributes.Refresh()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output( &quot;Added attribute: &quot; &amp; newAttribute.Name &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot;(Type=&quot; &amp; newAttribute.Type &amp; &quot;Sterotype=&quot; &amp; newattribute.stereotype &amp; &quot;Notes=&quot; &amp; newAttribute.Notes &amp; &quot;)&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;loop&#xA;&#x9;&#x9;&#x9;&#x9;  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;inputFile.Close&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Session.Output(&quot;Done..&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;&#x9;end if&#xA;End Sub&#xA;ImportAttributesFromCSV&#xA;&#xA;Function SelectFile( )&#xA;     ' File Browser via HTA&#xA;     ' Author:   Rudi Degrande, modifications by Denis St-Pierre and Rob van der Woude&#xA;     ' Features: Works in Windows Vista and up (Should also work in XP).&#xA;     '           Fairly fast.&#xA;     '           All native code/controls (No 3rd party DLL/ XP DLL).&#xA;     ' Caveats:  Cannot define default starting folder.&#xA;     '           Uses last folder used with MSHTA.EXE stored in Binary in [HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32].&#xA;     '           Dialog title says &quot;Choose file to upload&quot;.&#xA;     ' Source:   https://social.technet.microsoft.com/Forums/scriptcenter/en-US/a3b358e8-15ae-4ba3-bca5-ec349df65ef6/windows7-vbscript-open-file-dialog-box-fakepath?forum=ITCG&#xA;     Dim objExec, strMSHTA, wshShell&#xA;     SelectFile = &quot;&quot;&#xA;     ' For use in HTAs as well as &quot;plain&quot; VBScript:&#xA;     strMSHTA = &quot;mshta.exe &quot;&quot;about:&quot; &amp; &quot;&lt;&quot; &amp; &quot;input type=file id=FILE&gt;&quot; _&#xA;              &amp; &quot;&lt;&quot; &amp; &quot;script&gt;FILE.click();new ActiveXObject('Scripting.FileSystemObject')&quot; _&#xA;              &amp; &quot;.GetStandardStream(1).WriteLine(FILE.value);close();resizeTo(0,0);&quot; &amp; &quot;&lt;&quot; &amp; &quot;/script&gt;&quot;&quot;&quot;&#xA;     ' For use in &quot;plain&quot; VBScript only:&#xA;     ' strMSHTA = &quot;mshta.exe &quot;&quot;about:&lt;input type=file id=FILE&gt;&quot; _&#xA;     '          &amp; &quot;&lt;script&gt;FILE.click();new ActiveXObject('Scripting.FileSystemObject')&quot; _&#xA;     '          &amp; &quot;.GetStandardStream(1).WriteLine(FILE.value);close();resizeTo(0,0);&lt;/script&gt;&quot;&quot;&quot;&#xA;     Set wshShell = CreateObject( &quot;WScript.Shell&quot; )&#xA;     Set objExec = wshShell.Exec( strMSHTA )&#xA;     SelectFile = objExec.StdOut.ReadLine( )&#xA;     Set objExec = Nothing&#xA;     Set wshShell = Nothing&#xA; End Function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="21"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7B67F573-3824-4f02-9E58-CC5BD70E6ABE}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-UseCase-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create UseCase Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a usecase diagram&#xA;' Date: 29-Mar-2019&#xA;'&#xA;sub CreateUseCaseDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Use Case Diagram script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="23"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8E190D22-8563-4172-AEE2-2B03A9ED19F3}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Class-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Class Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to build a Class Diagram  &#xA;' Date: 29-Mar-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;&#xA;dim class_array (99,7)&#x9;&#x9;&#x9;'store class elements &#xA;dim idxC&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'class array index&#xA;&#xA;dim relationship_array (99,7)&#x9;'store relationships &#xA;dim idxR&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'reltionship array index&#xA;&#xA;sub CreateClassDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Class Diagram script activated&quot;)&#xA;&#xA;&#x9;if instr(Ucase(theSelectedElement.Notes),&quot;C4-PLANTUML&quot;) &gt; 0 then&#xA;&#x9;&#x9;CreateC4Diagram ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Create Class Diagram Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="24"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{E226E81C-3BEE-4904-AB52-786BBAEB1A15}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Activity-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Activity Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a activity diagram&#xA;' Date: 29-Mar-2019&#xA;'&#xA;sub CreateActivityDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Activity Diagram script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="25"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FDBEC1DF-3BBF-425c-9A15-1BFBB0F7A372}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Deployment-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Deployment Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to build a Deployment Diagram  &#xA;' Date: 29-Mar-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;sub CreateDeploymentDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Deployment Diagram script is activated&quot;)&#xA;&#x9;&#xA;&#x9;if instr(Ucase(theSelectedElement.Notes),&quot;C4-PLANTUML&quot;) &gt; 0 then&#xA;&#x9;&#x9;CreateC4Diagram ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Create Deployment Diagram Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#x9;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="26"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{309B9684-8E1C-4726-85D4-3FD170284F0A}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Component-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Component Diagram&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to build a Component Diagram  &#xA;' Date: 29-Mar-2019&#xA;'&#xA;' 25-Sept-2022:&#x9;&#x9;Support C4 Diagrams&#xA;'&#xA;sub CreateComponentDiagram ()&#xA;&#x9;call LOGInfo(&quot;Create Component Diagram script activated&quot;)&#xA;&#x9;&#xA;&#x9;if instr(Ucase(theSelectedElement.Notes),&quot;C4-PLANTUML&quot;) &gt; 0 then&#xA;&#x9;&#x9;CreateC4Diagram ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Create Component Diagram Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="27"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="28"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A34FC3C1-3253-458a-B393-4A57CED7CAEC}"/>
			<Column name="ScriptAuthor" value="{9F9C7F5F-67D1-45e1-87B0-6731D4C85BE7}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Export PlantUML Script&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC EAScriptLib.VBScript-Logging&#xA;&#xA;'LOGLEVEL=0&#x9;&#x9;'ERROR&#xA;LOGLEVEL=1&#x9;&#x9;'INFO&#xA;'LOGLEVEL=2&#x9;&#x9;'WARNING&#xA;'LOGLEVEL=3&#x9;&#x9;'DEBUG&#xA;'LOGLEVEL=4&#x9;&#x9;'TRACE&#xA;'&#xA;' Script Name: ExportPlantUMLscript&#xA;' Author: David Anderson&#xA;' Purpose: Create a PUML file from the Selected Note Element&#xA;' Date: 25-Mar-2019&#xA;'&#xA;dim currentDiagram as EA.Diagram&#xA;dim currentPackage as EA.Package&#xA;&#xA;sub OnDiagramScript()&#xA;&#x9;'Show the script output window&#xA;&#x9;Repository.EnsureOutputVisible &quot;Script&quot;&#xA;&#x9;call LOGInfo (&quot;------VBScript Export PlantUML Script------&quot; )&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;set currentPackage = Repository.GetPackageByID(currentDiagram.PackageID)&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;if selectedObjects.Count = 1 then&#xA;&#x9;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;&#x9;'check a note element is selected&#xA;&#x9;&#x9;if not theSelectedElement is nothing _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.ObjectType = otElement _ &#xA;&#x9;&#x9;&#x9;and theSelectedElement.Type = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;dim PlantUMLfn&#xA;&#x9;&#x9;&#x9;dim project&#xA;&#x9;&#x9;&#x9;set project = Repository.GetProjectInterface()&#xA;&#x9;&#x9;&#x9;dim OFN_OVERWRITEPROMPT&#xA;&#x9;&#x9;&#x9;OFN_OVERWRITEPROMPT = &amp;H2&#xA;&#x9;&#x9;&#x9;PlantUMLfn = project.GetFileNameDialog (currentDiagram.Name &amp; &quot;.puml&quot;, &quot;PlantUML Files|*.pu;*.puml&quot;, 1, OFN_OVERWRITEPROMPT ,&quot;&quot;, 1) &#xA;&#x9;&#x9;&#x9;If PlantUMLfn = &quot;&quot; Then &#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo(&quot;File not selected&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;stop&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo (&quot;PlantUML Script file selected: &quot; &amp; PlantUMLfn )&#xA;&#x9;&#x9;&#x9;&#x9;Dim fileSystemObject&#xA;&#x9;&#x9;&#x9;&#x9;dim outputFile&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug(&quot;&quot;&quot;&quot; &amp; PlantUMLfn &amp; &quot;&quot;&quot;&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;' Define Global File IO Objects&#xA;&#x9;&#x9;&#x9;&#x9;set fileSystemObject = CreateObject( &quot;Scripting.FileSystemObject&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;dim strRow&#xA;&#x9;&#x9;&#x9;&#x9;If fileSystemObject.FileExists(PlantUMLfn) Then&#xA;&#x9;&#x9;&#x9;&#x9;  Set outputFile = fileSystemObject.OpenTextFile(PlantUMLfn, 2, True)&#xA;&#x9;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;&#x9;  Set outputFile = fileSystemObject.CreateTextFile(PlantUMLfn, True)&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;strRow = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;&#x9;&#x9;&#x9;dim i&#xA;&#x9;&#x9;&#x9;&#x9;for i = 0 to ubound(strRow)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputFile.writeline (strRow(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug(strRow(i))&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;outputFile.Close&#xA;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#x9;&#xA;&#x9;&#x9;if selectedObjects.Count = 0 then&#xA;&#x9;&#x9;' Nothing is selected&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;A note object should be selected&quot; , promptOK&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;Session.Prompt &quot;Only one object should be selected&quot; , promptOK&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;call LOGInfo ( &quot;Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;===============&quot; )&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="29"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D6B08FFF-374C-40a1-84E5-6D8FCB6BE873}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-UseCase-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create UseCase PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a usecase PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;sub CreateUseCasePlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Use Case PlantUML script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="30"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0715F63B-F932-43f2-A0EA-EEA53FCE7F82}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Deployment-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Deployment PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a deployment PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;' Change Log:&#xA;' 18-Sept-2022:&#x9;&#x9;Add C4 Diagram support&#xA;'&#xA;sub CreateDeploymentPlantUML ()&#xA;&#xA;&#x9;call LOGInfo(&quot;Create Deployment PlantUML Script activated &quot; &amp; currentDiagram.Stereotype)&#xA;&#x9;if Left(currentDiagram.Stereotype,2) = &quot;C4&quot; then&#xA;&#x9;&#x9;CreateC4PlantUML ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;call LOGInfo ( &quot;Create Deployment PlantUML Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="31"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{15E72C24-4AE9-44c6-B7FB-9546668521F5}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Component-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Component PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a component PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;sub CreateComponentPlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Component PlantUML Script activated &quot; &amp; currentDiagram.Stereotype)&#xA;&#x9;if Left(currentDiagram.Stereotype,2) = &quot;C4&quot; then&#xA;&#x9;&#x9;CreateC4PlantUML ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#x9;call LOGInfo ( &quot;Create Component PlantUML Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="32"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{11577C59-816D-4d5e-A98A-B24DC9791D16}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Class-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Class PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a class PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;' Change Log:&#xA;' 18-Sept-2022:&#x9;&#x9;Support C4 Diagram&#xA;'&#xA;&#xA;sub CreateClassPlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Class PlantUML Script activated &quot; &amp; currentDiagram.Stereotype)&#xA;&#x9;&#xA;&#x9;if Left(currentDiagram.Stereotype,2) = &quot;C4&quot; then&#xA;&#x9;&#x9;CreateC4PlantUML ()&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning(&quot;This script does not yet support &quot; &amp; currentDiagram.Type &amp; &quot; diagrams&quot;)&#xA;&#x9;end if&#xA;&#xA;&#x9;call LOGInfo ( &quot;Create Class PlantUML Script Complete&quot; )&#xA;&#x9;call LOGInfo ( &quot;=========================================&quot; )&#xA;&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="33"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{27DF1F2A-2F2B-47f0-87F9-9EE02ED11DF4}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Activity-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create Activity PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a activity PlantUML script&#xA;' Date: 21-Feb-2021&#xA;'&#xA;sub CreateActivityPlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create Activity PlantUML script not yet functional&quot;)&#xA;end sub"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="34"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2B860F99-0595-4e38-9BDA-9D207A476773}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-Sequence-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: GeneratePlantUMLScript&#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Generate PlantUML Script to be used to build a Sequence PlantUML  &#xA;' Date: 31-Jan-2019&#xA;'&#xA;'-----------------------------------------&#xA;' Modifcation Log&#xA;' 30-Mar-2019:&#x9;add logic to support the following&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- \n for long names&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- title&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- dividers&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- notes&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;- divider&#xA;' Diagram Script main function&#xA;'&#xA;dim timeline_array (99,10)&#xA;dim sequence_array (99,8)&#xA;dim t&#x9;&#x9;&#x9;&#x9;'index for timeline_array&#xA;dim s&#x9;&#x9;&#x9;&#x9;'index for sequence_array&#xA;&#xA;sub CreateSequencePlantUML()&#xA;&#x9;call LOGInfo(&quot;Create Sequence PlantUML script activated&quot;)&#xA;&#xA;&#x9;' Get a reference to the current diagram&#xA;&#x9;dim currentDiagram as EA.Diagram&#xA;&#x9;set currentDiagram = Repository.GetCurrentDiagram()&#xA;&#x9;dim generated_script&#xA;&#x9;&#xA;&#x9;&#x9;' Get a reference to any selected objects&#xA;&#x9;dim selectedObjects as EA.Collection&#xA;&#x9;set selectedObjects = currentDiagram.SelectedObjects&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;&#xA;&#x9;' One or more diagram objects are selected&#xA;&#x9;Dim theSelectedElement as EA.Element&#xA;&#x9;Dim selectedObject as EA.DiagramObject&#xA;&#x9;set selectedObject = selectedObjects.GetAt (0)&#xA;&#x9;set theSelectedElement = Repository.GetElementByID(selectedObject.ElementID)&#xA;&#x9;'spin through diagram objects and declare participants&#xA;&#x9;dim line_offset&#xA;&#x9;t=0&#xA;&#x9;s=0&#xA;&#x9;dim partition as EA._Partition&#xA;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;set Element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if inStr(&quot;...Sequence,Actor,Boundary,Component...&quot;, element.type) &gt; 0 then&#xA;&#x9;&#x9;&#x9;timeline_array (t,0) = element.ElementID&#xA;&#x9;&#x9;&#x9;timeline_array (t,1) = element.Type&#xA;&#x9;&#x9;&#x9;if instr(element.Name, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,2) = element.Name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,2) = chr(34) &amp; element.Name &amp; chr(34)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'replace spaces with \n if length greater than 20 &#xA;&#x9;&#x9;&#x9;if len(timeline_array (t,2)) &gt; 20 then&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,2) = replace(timeline_array (t,2), &quot; &quot;,&quot;\n&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if instr(element.Alias, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,3) = element.Alias&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;timeline_array (t,3) = chr(34) &amp; element.Alias &amp; chr(34)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;timeline_array (t,4) = element.Stereotype&#xA;&#x9;&#x9;&#x9;timeline_array (t,5) = diagramObject.Left&#xA;&#x9;&#x9;&#x9;timeline_array (t,6) = diagramObject.right&#xA;&#x9;&#x9;&#x9;timeline_array (t,7) = &quot;N&quot;  &#x9;'activate switch&#xA;&#x9;&#x9;&#x9;timeline_array (t,8) = lcase(color(element.Type, diagramObject.BackgroundColor))&#xA;&#x9;&#x9;&#x9;timeline_array (t,9) = diagramObject.Left + (diagramObject.right - diagramObject.left)/2  'timeline centre&#xA;&#x9;&#x9;&#x9;t=t+1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if element.Type = &quot;InteractionFragment&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;*Fragment (&quot; &amp; element.ElementID &amp; &quot;) name=&quot; &amp; element.Name &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&quot; t=&quot; &amp; diagramObject.top &amp; &quot;,b=&quot; &amp; diagramObject.bottom &amp; &quot;,l=&quot; &amp; diagramObject.left &amp; &quot;,r=&quot; &amp; diagramObject.right)&#xA;&#x9;&#x9;&#x9;&#x9;'add to sequence array&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = diagramObject.top *-1&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = element.Name&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = fragment_type(element.Subtype)&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;if element.Partitions.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;line_offset = (diagramObject.top *-1)+ 20&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for each partition in element.Partitions&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Partitition for &quot; &amp; element.ElementID &amp; &quot; &quot; &amp; &quot;name=&quot; &amp; partition.Name &amp; &quot; object type=&quot; &amp; partition.ObjectType &amp; &quot; operator=&quot; &amp; partition.Operator &amp; &quot; size=&quot; &amp; partition.size &amp; &quot; note=&quot; &amp; partition.Note)&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = line_offset&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = partition.Name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = &quot;Else&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;line_offset = line_offset + partition.Size&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;'suppress end for dividers&#xA;&#x9;&#x9;&#x9;&#x9;if not (sequence_array (s-1,4) = &quot;divider&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = diagramObject.bottom *-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = &quot;End&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = &quot;&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;end if &#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if element.Type = &quot;Note&quot; then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not (element.Name = &quot;PlantUML&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add to sequence array&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,0) = diagramObject.top *-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,1) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,2) = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,3) = element.Notes&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,4) = &quot;Note&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,5) = diagramObject.BackgroundColor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,6) = &quot;&quot; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,7) = diagramObject.left &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sequence_array (s,8) = diagramObject.right &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;s=s+1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning( &quot;PlantUML &quot; &amp; element.type &amp; &quot; element type not added to timeline array&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call QuickSort(timeline_array,0,t-1,5)&#xA;&#x9;call LOGDebug( &quot;Sorted Timeline Array&quot; )&#xA;&#x9;call PrintArray (timeline_array,0,t-1)&#xA;'&#xA;&#x9;call LOGDebug( &quot;Sequence Array&quot; )&#xA;&#x9;call PrintArray (sequence_array,0,s-1)&#xA;&#x9;&#xA;&#x9;dim box_right&#xA;&#x9;dim strLine&#xA;&#x9;box_right=0&#xA;&#x9;generated_script=&quot;@startuml&quot; &amp; vbcrlf &amp; &quot;autoactivate on&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;title &quot; &amp; currentDiagram.Name &amp; vbcrlf&#xA;&#x9;dim i&#xA;&#x9;'Output PlantUML participants&#xA;&#x9;for i = 0 to Ubound(timeline_array)&#xA;&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if timeline_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;strLine = &quot;Box &quot; &amp; timeline_array (i,2) &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;box_right = timeline_array (i,6)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;if box_right &gt; 0 then&#x9;&#x9;&#x9;'check for inline box&#xA;&#x9;&#x9;&#x9;&#x9;if timeline_array (i,5) &gt; box_right then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; &quot;End Box&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;box_right=0&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;strLine = participant(timeline_array (i,1), timeline_array (i,4)) &amp; &quot; &quot; &amp; timeline_array (i,2) &#xA;&#x9;&#x9;&#x9;if not timeline_array (i,3) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot; as &quot; &amp; timeline_array (i,3)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;End if&#xA;&#x9;&#x9;if not&#x9;timeline_array (i,8) = &quot;&quot; then&#x9;&#x9;&#x9;'append color if one exists&#xA;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot; &quot; &amp; timeline_array (i,8)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;if box_right &gt; 0 then&#x9;&#x9;&#x9;&#x9;'check for trailing&#xA;&#x9;&#x9;generated_script = generated_script &amp; &quot;End Box&quot; &amp; vbcrlf&#xA;&#x9;&#x9;box_right=0&#xA;&#x9;end if&#xA;&#xA;&#x9;'spin through diagram links&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;dim connectorEnd as EA.ConnectorEnd&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;dim connectorTag as EA.ConnectorTag&#xA;&#x9;&#xA;&#x9;for each diagramLink in currentDiagram.DiagramLinks&#xA;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;'add to sequence array&#xA;'&#x9;&#x9;call LOGDebug( &quot;+Connector (&quot; &amp; connector.ConnectorID &amp; &quot;) &quot; &amp;  connector.Name &amp; _&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;&quot; #:&quot; &amp; connector.SequenceNo &amp; &quot;, sx:&quot; &amp; connector.StartPointX &amp; &quot;, sy:&quot; &amp; connector.StartPointY &amp; &quot;, ex:&quot; &amp; connector.EndPointX &amp; &quot;,ey: &quot; &amp; connector.EndPointY )&#xA;&#x9;&#x9;'Session.Output( &quot; type: &quot; &amp; connector.Type )&#xA;&#x9;&#x9;'Session.Output( &quot; subtype: &quot; &amp; connector.Subtype )&#xA;&#x9;&#x9;'Session.Output( &quot; styleEx: &quot; &amp; connector.StyleEx )&#xA;&#x9;&#x9;'Session.Output( &quot; parmam &amp; retval: &quot; &amp; connector.MiscData(1) )&#xA;&#x9;&#x9;'Session.Output( &quot; custom property count: &quot; &amp; connector.CustomProperties.Count)&#xA;&#x9;&#x9;'Session.Output( &quot; event flags: &quot; &amp; connector.EventFlags)&#xA;&#x9;&#x9;'Session.Output( &quot; tags: &quot; &amp; connector.TaggedValues.Count)&#xA;&#x9;&#x9;'Session.Output( &quot; states: &quot; &amp; connector.StateFlags)&#xA;&#x9;&#x9;'Session.Output( &quot; metatype: &quot; &amp; connector.MetaType)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,0) = connector.StartPointY *-1&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;sequence_array (s,1) = connector.ClientID&#xA;&#x9;&#x9;sequence_array (s,2) = connector.SupplierID&#xA;&#x9;&#x9;sequence_array (s,3) = connector.Name&#xA;&#x9;&#x9;sequence_array (s,4) = connector.MiscData(0)&#x9;&#x9;'synch or async&#xA;&#x9;&#x9;sequence_array (s,5) = connector.MiscData(1)&#x9;&#x9;'return value and parameters&#xA;&#x9;&#x9;sequence_array (s,6) = connector.MiscData(3)&#x9;&#x9;'isReturn&#xA;&#x9;&#x9;s=s+1&#xA;&#x9;next&#xA;&#x9;'sort links from top to bottom&#xA;&#x9;Call QuickSort(sequence_array,0,s-1,0)&#xA;&#x9;call LOGDebug( &quot;Sorted Sequence Array&quot; )&#xA;&#x9;Call PrintArray (sequence_array,0,s-1)&#xA;&#xA;&#x9;'Output PlantUML sequences&#xA;&#xA;&#x9;for i = 0 to Ubound(sequence_array)&#xA;&#x9;&#x9;if sequence_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if sequence_array (i,1) = 0 then&#x9;&#x9;'source/target identifiers are equal 0&#xA;&#x9;&#x9;&#x9;if sequence_array (i,4) = &quot;divider&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strline = &quot;== &quot; &amp; sequence_array(i,3) &amp; &quot; ==&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if sequence_array (i,4) = &quot;Note&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'use proximity to resolve position&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strline = &quot;note &quot; &amp; resolveNoteLocation(i) &amp; &quot; &quot; &amp; color(&quot;Note&quot;, sequence_array (i,5)) &amp; vbcrlf &amp; sequence_array(i,3) &amp; vbcrlf &amp; &quot;end note&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;strline = sequence_array (i,4) &amp; &quot; &quot; &amp; sequence_array(i,3)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;strline = timeline(sequence_array(i,1)) &amp; arrow(sequence_array (i,4), sequence_array (i,6)) &amp; timeline(sequence_array(i,2))  &#xA;&#x9;&#x9;&#x9;if not sequence_array(i,3) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strline = strline &amp; &quot;: &quot; &amp; sequence_array(i,3) &amp; signature(sequence_array (i,5))&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#xA;&#x9;&#x9;&#x9;'activate source if synchronous and not already active&#xA;'&#x9;&#x9;&#x9;if sequence_array (i,4) = &quot;Synchronous&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;if activate_timeline(sequence_array(i,1)) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;strline = &quot;activate &quot; &amp; timeline(sequence_array(i,1))&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;'&#x9;&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;end if&#xA;&#xA;&#x9;&#x9;&#x9;'activate target if asynchronous and not already active&#xA;'&#x9;&#x9;&#x9;if activate_timeline(sequence_array(i,2)) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;activate &quot; &amp; timeline(sequence_array(i,2))&#xA;'&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;'&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'deactivate source&#xA;'&#x9;&#x9;&#x9;if sequence_array (i,6) = 1 then&#x9;&#x9;&#x9;'isreturn&#xA;'&#x9;&#x9;&#x9;&#x9;deactivate_timeline(sequence_array(i,1))&#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;deactivate &quot; &amp; timeline(sequence_array(i,1))&#xA;'&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;'&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'deactivate any active timelines&#xA;'&#x9;For i = 0 to t-1&#xA;'&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;&#x9;if timeline_array (i,7) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;timeline_array (i,7) = &quot;N&quot;&#xA;'&#x9;&#x9;&#x9;if timeline_array(i,3) = &quot;&quot; then &#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;deactivate &quot; &amp; timeline_array(i,2)&#xA;'&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;strline = &quot;deactivate &quot; &amp; timeline_array(i,3)&#xA;'&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;'&#x9;&#x9;end if&#xA;'&#x9;Next&#xA;&#x9;'check for InteractionFragments&#xA;&#x9;&#xA;&#x9;generated_script=generated_script &amp; &quot;@enduml&quot;&#xA;&#x9;theSelectedElement.Notes = generated_script&#xA;&#x9;theSelectedElement.Update&#xA;&#xA;end sub&#xA;&#xA;function participant(strType, strStereotype)&#xA;&#x9;If strType = &quot;Actor&quot; then&#xA;&#x9;&#x9;participant = strType&#xA;&#x9;else&#xA;&#x9;&#x9;select case Ucase(strStereotype)&#xA;&#x9;&#x9;&#x9;case &quot;DATABASE&quot; &#x9;participant = &quot;Database&quot;&#xA;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot; &#x9;participant = &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;case &quot;CONTROL&quot; &#x9;&#x9;participant = &quot;Control&quot;&#xA;&#x9;&#x9;&#x9;case &quot;ENTITY&quot; &#x9;&#x9;participant = &quot;Entity&quot;&#xA;&#x9;&#x9;&#x9;case &quot;COLLECTIONS&quot; &#x9;participant = &quot;Collections&quot;&#xA;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;participant = &quot;Participant&quot; &#xA;&#x9;&#x9;end select&#xA;&#x9;end if&#xA;end function&#xA;&#xA;function timeline(elementid)&#xA;Dim i&#xA;&#x9;Call LOGTrace( &quot;timeline(&quot; &amp; elementid &amp; &quot;)&quot; )&#xA;&#xA;&#x9;For i = 0 to Ubound(timeline_array)&#xA;&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if timeline_array (i,0) = elementid then&#xA;&#x9;&#x9;&#x9;if timeline_array (i,3) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;timeline = timeline_array (i,2)&#x9;&#x9;'return name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;timeline = timeline_array (i,3)&#x9;&#x9;'return alias&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'check if spaces.. if enclosed in quotes&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;Call LOGTrace( &quot;timeline=&quot; &amp; timeline )&#xA;&#xA;end function&#xA;&#xA;'function activate_timeline(elementid)&#xA;'&#x9;Dim i&#xA;'&#x9;For i = 0 to Ubound(timeline_array)&#xA;'&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;&#x9;if timeline_array (i,0) = elementid then&#xA;'&#x9;&#x9;&#x9;if timeline_array (i,7) = &quot;N&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;timeline_array (i,7) = &quot;Y&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;activate_timeline = &quot;Y&quot;&#x9;&#x9;'activate&#xA;'&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;activate_timeline = &quot;N&quot;&#x9;&#x9;'already activated&#xA;'&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;Next&#xA;'end function&#xA;&#xA;'maynot be required if autoactivate is set&#xA;'function deactivate_timeline(elementid)&#xA;'Dim i&#xA;'&#x9;For i = 0 to Ubound(timeline_array)&#xA;'&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;&#x9;if timeline_array (i,0) = elementid then&#xA;'&#x9;&#x9;&#x9;if timeline_array (i,7) = &quot;Y&quot; then&#xA;'&#x9;&#x9;&#x9;&#x9;timeline_array (i,7) = &quot;N&quot;&#xA;'&#x9;&#x9;&#x9;&#x9;deactivate_timeline = &quot;Y&quot;&#x9;&#x9;'deactivated&#xA;'&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;deactivate_timeline = &quot;N&quot;&#x9;&#x9;'not activated&#xA;'&#x9;&#x9;&#x9;end if&#xA;'&#x9;&#x9;&#x9;Exit for&#xA;'&#x9;&#x9;end if&#xA;'&#x9;Next&#xA;'end function&#xA;&#xA;function arrow(misc0, misc3)&#xA;&#x9;Call LOGTrace( &quot;arrow(&quot; &amp; misc0 &amp; &quot;:&quot; &amp; misc3 &amp; &quot;)&quot; )&#xA;&#x9;&#xA;&#x9;if misc0 = &quot;Asynchronous&quot; then&#xA;&#x9;&#x9;arrow = &quot; -&gt;&gt; &quot;&#xA;&#x9;else&#xA;&#x9;&#x9;if isnull(misc3) then&#x9;&#xA;&#x9;&#x9;&#x9;arrow = &quot; -&gt; &quot;&#x9;&#x9;&#x9;&#x9;'synchronous&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if misc3 = 0 then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;arrow = &quot; -&gt; &quot;&#x9;&#x9;&#x9;&#x9;'synchronous&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if misc3 = 1 then&#x9;&#x9;&#x9;' is return?&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;arrow = &quot; --&gt; &quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;Call LOGTrace( &quot;arrow=&quot; &amp; arrow )&#xA;&#x9;&#xA;end function&#xA;&#xA;function signature(misc2)&#xA;&#x9;'parse miscdata2 for params and retrun value&#xA;&#x9;call LOGTrace( &quot;signature(&quot; &amp; misc2 &amp; &quot;)&quot;)&#xA;&#xA;&#x9;dim i &#xA;&#x9;dim j&#xA;&#x9;dim l&#xA;&#x9;dim retval&#xA;&#x9;dim param&#xA;&#x9;&#xA;&#x9;if misc2=&quot;&quot; then&#xA;&#x9;&#x9;signature = &quot; ()&quot;&#xA;&#x9;&#x9;exit function&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;i = inStr(misc2, &quot;retval=void&quot;)&#xA;&#x9;if i = 0 then&#xA;&#x9;&#x9;i = inStr(misc2, &quot;retval=&quot;)&#xA;&#x9;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;&#x9;j = inStr(i, misc2, chr(59))&#xA;&#x9;&#x9;&#x9;l=j-(i+7)&#xA;&#x9;&#x9;&#x9;if j&gt;0 then&#xA;&#x9;&#x9;&#x9;&#x9;retval=mid(misc2,i+7, l)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#xA;&#x9;i = instr(misc2,&quot;paramsDlg=&quot;) &#xA;&#x9;if i &gt; 0 then&#xA;&#x9;&#x9;j = instr(i, misc2,chr(59))&#xA;&#x9;&#x9;l = j-(i+10)&#xA;&#x9;&#x9;param=mid(misc2,i+10,l)&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if param = &quot;&quot; then&#xA;&#x9;&#x9;param=&quot;()&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;param = &quot;(&quot; &amp; param &amp; &quot;)&quot; &#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if not retval = &quot;&quot; then&#xA;&#x9;&#x9;retval=&quot;:&quot; &amp; retval&#xA;&#x9;end if&#xA;&#xA;&#x9;signature = param &amp; retval&#xA;&#x9;call LOGTrace( &quot;Signature=&quot; &amp; signature )&#xA;&#x9;&#xA;end function&#xA;&#xA;function color(elementType, BackgroundColor)&#xA;'receives decimal version of rbg&#xA;'resolve default value if value passed is -1&#xA;'resolve ColorNameByHex&#xA;&#xA;dim hexvalue&#xA;dim hexRGB&#xA;&#x9;call LOGTrace(&quot;color(&quot; &amp; elementType &amp; &quot;:&quot; &amp; BackgroundColor &amp; &quot;)&quot;)&#xA;&#x9;if BackgroundColor = -1 then&#xA;&#x9;&#x9;select case elementType&#xA;&#x9;&#x9;&#x9;case &quot;Sequence&quot; &#x9;color = &quot;#lightblue&quot;&#xA;&#x9;&#x9;&#x9;case &quot;Component&quot; &#x9;color = &quot;#lightpink&quot;&#xA;&#x9;&#x9;&#x9;case &quot;Boundary&quot; &#x9;color = &quot;#lightgrey&quot;&#xA;&#x9;&#x9;&#x9;case &quot;Note&quot; &#x9;&#x9;color = &quot;#lightyellow&quot;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;case else &#x9;&#x9;&#x9;color=&quot;&quot;&#xA;&#x9;&#x9;&#x9;end select&#xA;&#x9;else&#xA;&#x9;&#x9;'Session.Output( &quot;background color=&quot; &amp; BackgroundColor)&#xA;&#x9;&#x9;hexvalue = hex(BackgroundColor)&#xA;&#x9;&#x9;while len(hexvalue) &lt; 6&#xA;&#x9;&#x9;&#x9;hexvalue = &quot;0&quot; &amp; hexvalue&#xA;&#x9;&#x9;wend&#x9;&#x9;&#xA;&#x9;&#x9;hexRGB = &quot;#&quot; &amp; mid(hexvalue,5,2) &amp; mid(hexvalue,3,2) &amp; mid(hexvalue,1,2)&#xA;&#x9;&#x9;color = ColorNameByHex (hexRGB)&#xA;&#x9;&#x9;if color=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;color = hexRGB&#xA;&#x9;&#x9;end if&#xA;'&#x9;&#x9;call LOGDebug( &quot;hexColor=&quot; &amp; color)&#xA;&#x9;end if &#xA;&#x9;call LOGTrace(&quot;color=&quot; &amp; color)&#xA;&#x9;&#xA;end function&#xA;&#xA;function fragment_type(ftype)&#xA;&#x9;select case ftype&#xA;&#x9;&#x9;case 0 &#x9;&#x9;fragment_type = &quot;alt&quot;&#xA;&#x9;&#x9;case 1 &#x9;&#x9;fragment_type = &quot;opt&quot;&#xA;&#x9;&#x9;case 2 &#x9;&#x9;fragment_type = &quot;break&quot;&#xA;&#x9;&#x9;case 3 &#x9;&#x9;fragment_type = &quot;par&quot;&#xA;&#x9;&#x9;case 4 &#x9;&#x9;fragment_type = &quot;loop&quot;&#xA;&#x9;&#x9;case 5 &#x9;&#x9;fragment_type = &quot;critical&quot;&#xA;&#x9;&#x9;case 9&#x9;&#x9;fragment_type = &quot;divider&quot;&#xA;&#x9;&#x9;case else &#x9;fragment_type=&quot;&quot;&#xA;&#x9;end select&#xA;end function&#xA;&#xA;function resolveNoteLocation(sequence_index)&#xA;'this funtion does not cater for a Note spanning 2 timelines&#xA;dim i&#x9;&#x9;'index for spinning thru time line arrary&#xA;dim j    &#x9;'index for the selected timeline entry&#xA;dim rightSide_gap&#xA;dim leftSide_gap&#xA;dim gap&#xA;dim side&#xA;rightSide_gap = 999999&#xA;leftSide_gap = 999999&#xA;&#xA;&#x9;call LOGTrace(&quot;resolveNoteLocation(&quot; &amp; sequence_index &amp; &quot;)&quot;)&#xA;'&#x9;call LOGDebug( &quot;Nbr of timelines=&quot; &amp; t)&#xA;&#x9;for i = 0 to t-1&#xA;'&#x9;&#x9;call LOGDebug( &quot;processing timeline(&quot; &amp; i &amp; &quot;)=&quot; &amp; timeline_array(i, 2) &amp; &quot;:l=&quot; &amp; timeline_array(i, 5) &amp; &quot; r=&quot; &amp; timeline_array(i, 6) &amp; &quot; c=&quot; &amp; timeline_array(i, 9))&#xA;&#x9;&#x9;if timeline_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if not (timeline_array (i,1) = &quot;Boundary&quot;) then&#xA;'&#x9;&#x9;&#x9;call LOGDebug( &quot;Note l=&quot; &amp; sequence_array(sequence_index,7) &amp; &quot;:r=&quot; &amp; sequence_array(sequence_index,8))&#xA;&#x9;&#x9;&#x9;if sequence_array(sequence_index,7) =&gt; timeline_array(i, 9) then&#xA;&#x9;&#x9;&#x9;&#x9;'note is on the right side of current timeline&#xA;&#x9;&#x9;&#x9;&#x9;gap = sequence_array(sequence_index,7) - timeline_array(i, 9) &#x9;'calculate leftside_gap&#xA;'&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Note is on the right side of &quot; &amp; timeline_array(i, 2) &amp; &quot; with a gap of &quot; &amp; gap)&#xA;&#x9;&#x9;&#x9;&#x9;if gap &lt; leftside_gap then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;side = &quot;right&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;leftside_gap = gap&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j=i&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Setting timeline(&quot; &amp; timeline_array(i, 2) &amp; &quot;) as being the closest&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;if sequence_array(sequence_index,8) &lt;= timeline_array(i, 9) then&#xA;&#x9;&#x9;&#x9;&#x9;'note is on the left side of current timeline&#xA;&#x9;&#x9;&#x9;&#x9;gap = timeline_array(i, 9) - sequence_array(sequence_index,8) &#x9;'calculate rightside_gap&#xA;'&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Note is on the left side of &quot; &amp; timeline_array(i, 2) &amp; &quot; with a gap of &quot; &amp; gap)&#xA;&#x9;&#x9;&#x9;&#x9;if gap &lt; rightside_gap then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;side = &quot;left&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rightside_gap = gap&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j=i&#xA;'&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug( &quot;Setting timeline(&quot; &amp; timeline_array(i, 2) &amp; &quot;) as being the closest&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;call LOGDebug( &quot;skipping boundary&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;resolveNoteLocation = side &amp; &quot; of &quot; &amp; timeline(timeline_array(j, 0))&#xA;&#x9;call LOGTrace(&quot;resolveNoteLocation=&quot; &amp; resolveNoteLocation)&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="35"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{1C68123F-E67B-450d-AC1E-6F7BFC916F8C}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="archive"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="36"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="37"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{CC5FE190-2BC3-4d6b-BFBD-ED59D0F142BC}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-C4-Diagram&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create C4 Diagram &#xA;' Author: David Anderson&#xA;' Purpose: Sub routine called by the Run PlantUML Script to be used to build a C4 Diagram  &#xA;' Date: 25-Sep-2022&#xA;'-----------------------------------------'&#xA;' Modifcation Log&#xA;' 27-Nov-2022:&#x9;revamp layout, add person type&#xA;&#xA;dim stereotype_array (99,7)&#x9;&#x9;'store stereotypes &#xA;dim idxS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'stereotype array index&#xA;dim idxL&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'index for layout_array &#xA;&#xA;sub CreateC4Diagram ()&#xA;&#x9;call LOGInfo(&quot;Create C4 Diagram script activated&quot;)&#xA;&#xA;&#x9;dim PlantUML&#xA;&#x9;dim word&#xA;&#x9;dim i&#xA;&#x9;&#xA;&#x9;PlantUML = Split(theSelectedElement.Notes,vbcrlf,-1,0)&#xA;&#x9;for i = 0 to Ubound(PlantUML)&#xA;&#x9;&#x9;call LOGDebug ( &quot;Processing #&quot; &amp; i &amp; &quot; :&quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;if not PlantUML(i) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;PlantUML(i) = Trim(PlantUML(i))&#xA;&#x9;&#x9;&#x9;'C4 commands are&#xA;&#x9;&#x9;&#x9;PlantUML(i) = replace(PlantUML(i), &quot;(&quot;, &quot; (&quot;)&#xA;&#x9;&#x9;&#x9;if not Asc(PlantUML(i)) = 39  then&#xA;&#x9;&#x9;&#x9;&#x9;word=split(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;select case ucase(word(0))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;TITLE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_title(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'ignore&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;!INCLUDE&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@STARTUML&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;@ENDUML&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LAYOUT_TOP_DOWN&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LAYOUT_AS_SKETCH&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LAYOUT_WITH_LEGEND&quot;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SHOW_LEGEND&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;' not yet supported&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;RELINDEX&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;INCREMENT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SETINDEX&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;LASTINDEX&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NODE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NODE_L&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;NODE_R&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;DEPLOYMENT_NODE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDPROPERTY&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;WITHOUTPROPERTYHEADER&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDNODETAG&quot; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;not yet supported: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'class&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;PERSON&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEM&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEM_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMDB&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMDB_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMQUEUE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEMQUEUE_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINER&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINER_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERDB&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERDB_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERQUEUE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINERQUEUE_EXT&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENT_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTDB&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTDB_EXT&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTQUEUE&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;COMPONENTQUEUE_EXT&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'boundary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;SYSTEM_BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;CONTAINER_BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ENTERPRISE_BOUNDARY&quot;&#x9;&#x9;&#x9;&#x9;call create_class(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;}&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call end_of(PlantUML(i))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'sterotype&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDPERSONTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDBOUNDARYTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDELEMENTTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDCOMPONENTTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDRELTAG&quot;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALPERSONTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALSYSTEMTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALCONTAINERTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;ADDEXTERNALCOMPONENTTAG&quot; &#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATECONTAINERBOUNDARYSTYLE&quot; &#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATESYSTEMBOUNDARYSTYLE&quot; &#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATEENTERPRISEBOUNDARYSTYLE&quot; &#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATEBOUNDARYSTYLE&quot; &#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case &quot;UPDATERELSTYLE&quot; &#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning ( &quot;skipping: &quot; &amp; PlantUML(i) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'relationship&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case else&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call create_relationship(PlantUML(i))&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;end select&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;&#x9;call LOGDebug( &quot;**Class Array**&quot; )&#xA;&#x9;Call PrintArray (class_array,0,idxC-1)&#xA;&#xA;&#x9;'apply stereotype settings&#xA;&#x9;'call LOGDebug( &quot;**Stereotype Array**&quot; )&#xA;&#x9;'Call PrintArray (stereotype_array,0,idxS-1)&#xA;&#xA;&#x9;'call LOGDebug( &quot;**Relationship Array**&quot; )&#xA;&#x9;'Call PrintArray (relationship_array,0,idxR-1)&#xA;&#x9;&#xA;&#x9;'layout objects based&#xA;&#x9;call layout_objects()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'set relative coordinates based nesting of ojects&#xA;&#xA;&#x9;call LOGDebug( &quot;**Layout Array**&quot; )&#xA;&#x9;Call PrintArray (layout_array,0,idxL-1)&#xA;&#x9;&#xA;&#x9;call build_diagram()&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'&#xA;&#x9;&#xA;&#x9;'LayoutDiagram(currentDiagram.DiagramID)&#xA;&#x9;ReloadDiagram(currentDiagram.DiagramID)&#xA;&#x9;call LOGInfo ( &quot;Create C4 Diagram Script Complete&quot; )&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub create_title(PlantUML)&#xA;&#x9;dim strTitle&#xA;&#x9;dim diagram as EA.Diagram&#xA;&#xA;&#x9;call LOGTrace(&quot;create_title(&quot; &amp; PlantUML &amp; &quot;)&quot;)&#xA;&#x9;'set the diagram.name using title&#xA;&#x9;&#x9;&#xA;&#x9;strTitle = right(PlantUML, len(PlantUML)-5)&#xA;&#x9;'remove quotes&#xA;&#x9;strTitle = replace(strTitle, Chr(34), &quot; &quot;)&#xA;&#xA;&#x9;'handle \n&#xA;&#x9;strTitle = trim(replace(strTitle, &quot;\n&quot;, &quot; &quot;))&#xA;&#x9;&#xA;&#x9;set diagram = currentDiagram&#xA;&#x9;diagram.name = strTitle&#xA;&#x9;diagram.update&#xA;&#xA;&#x9;call LOGInfo( &quot;Set Diagram Name to: &quot; &amp; diagram.Name )&#xA;&#xA;end sub&#xA;&#xA;sub create_class(script)&#xA;&#x9;dim i&#xA;&#x9;dim word&#xA;&#x9;dim sql&#xA;&#x9;dim className&#xA;&#x9;dim classAlias&#xA;&#x9;dim classObjectType&#xA;&#x9;dim classTech&#xA;&#x9;dim classStereotype&#xA;&#x9;dim classC4Type&#xA;&#x9;dim classNotes&#xA;&#x9;dim elements as EA.Collection&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim elementTag as EA.TaggedValue&#xA;&#x9;dim LOGLEVEL_SAVE&#x9;'&#xA;&#x9;'LOGLEVEL_SAVE = LOGLEVEL&#xA;&#x9;'LOGLEVEL=3&#x9;&#xA;&#xA;&#x9;call LOGTrace(&quot;create_class(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;word=split(script)&#xA;&#x9;&#xA;&#x9;if instr(word(0),&quot;Boundary&quot;) &gt; 0 then&#xA;&#x9;&#x9;classObjectType = &quot;Boundary&quot;&#xA;&#x9;&#x9;classStereotype = replace(word(0),&quot;_&quot;,&quot; &quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(word(0),&quot;Person&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;classObjectType = &quot;Actor&quot;&#xA;&#x9;&#x9;&#x9;classStereotype = &quot;Person&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;classObjectType = &quot;Class&quot;&#xA;&#x9;&#x9;&#x9;if instr(word(0),&quot;Container&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;'classObjectType = &quot;Container&quot;&#xA;&#x9;&#x9;&#x9;&#x9;classStereotype = &quot;Container&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(word(0),&quot;Component&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'classObjectType = &quot;Component&quot;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if instr(word(0),&quot;System&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'classObjectType = &quot;System&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;classStereotype = &quot;System&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;if instr(word(0),&quot;Db&quot;) &gt; 0 then&#xA;&#x9;&#x9;classC4Type=&quot;Storage&quot;&#xA;&#x9;else&#xA;&#x9;&#x9;if instr(word(0),&quot;Queue&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;classC4Type=&quot;Queue&quot;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if instr(word(0),&quot;System&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;classC4Type=&quot;Software&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(word(0),&quot;Container&quot;) &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;classC4Type=&quot;Application&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;'extract macro which is delimitered by ()&#xA;&#x9;dim strMacro&#xA;&#x9;strMacro = trim(Mid(script, instr(script,&quot;(&quot;)+1, instr(script,&quot;)&quot;)-instr(script,&quot;(&quot;)-1))&#xA;&#x9;call LOGDebug( &quot;strMacro: &quot; &amp; strMacro )&#xA;&#x9;&#xA;&#x9;dim strArgs&#xA;&#x9;strArgs=split(strMacro,&quot;,&quot;)&#xA;&#x9;for i = 0 to Ubound(strArgs)&#xA;&#x9;&#x9;call LOGDebug( &quot;strArgs(&quot; &amp; i &amp; &quot; of &quot; &amp; ubound(strArgs) &amp; &quot;) : &quot; &amp; strArgs(i) )&#xA;&#x9;next&#xA;&#x9;classAlias = trim(strArgs(0))&#xA;&#x9;className = trim(strArgs(1))&#xA;&#x9;'replace \n with a space&#xA;&#x9;className = replace(className, &quot;\n&quot;, &quot; &quot;)&#xA;&#x9;className = replace(className, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#xA;&#x9;if Ubound(strArgs) &gt; 1 then&#xA;&#x9;&#x9;classTech = trim(strArgs(2))&#xA;&#x9;&#x9;classTech = replace(classTech, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;classTech = &quot;&quot;&#xA;&#x9;end if&#xA;&#x9;'assumes last arg contains the description&#xA;&#x9;if Ubound(strArgs) &gt; 2 then&#xA;&#x9;&#x9;classNotes = trim(strArgs(Ubound(strArgs)))&#xA;&#x9;&#x9;classNotes = replace(classNotes, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;classNotes = replace(classNotes, &quot;$descr=&quot;, &quot;&quot;)&#xA;&#x9;else&#xA;&#x9;&#x9;classNotes = &quot;&quot;&#xA;&#x9;end if&#xA;&#xA;&#x9;sql =&quot;SELECT Object_ID FROM t_object WHERE t_object.Name =&quot; &amp; chr(34) &amp; className &amp; chr(34) &amp; &quot; and t_object.Object_Type = &quot; &amp; chr(34) &amp; classObjectType &amp; chr(34)&#xA;&#x9;call LOGDebug ( &quot;sql: &quot; &amp; sql)&#xA;&#xA;&#x9;set elements=Repository.GetElementSet(sql,2)&#xA;&#x9;call LOGDebug (&quot;elements returned: &quot; &amp; elements.Count)&#xA;&#x9;if elements.Count = 0 then&#xA;&#x9;&#x9;'add element&#xA;&#x9;&#x9;set elements = currentPackage.Elements&#xA;&#x9;&#x9;set element = elements.AddNew(className, classObjectType )&#xA;&#x9;&#x9;element.Alias = classAlias&#xA;&#x9;&#x9;element.Stereotype = classStereotype&#xA;&#x9;&#x9;element.Notes = classNotes&#xA;&#x9;&#x9;element.Update&#xA;&#x9;&#x9;element.TaggedValues.Refresh&#xA;&#x9;&#x9;currentPackage.elements.Refresh&#xA;&#x9;&#x9;call LOGInfo( &quot;Added Element: &quot; &amp; element.Name &amp; &quot; (ID=&quot; &amp; element.ElementID &amp; &quot;) in package &quot; &amp; currentPackage.Name )&#xA;&#x9;&#x9;set elementTag = nothing&#xA;&#x9;&#x9;if not (classC4Type = &quot;&quot;) then&#xA;&#x9;&#x9;&#x9;set elementTag = element.TaggedValues.GetByName(&quot;Type&quot;)&#xA;&#x9;&#x9;&#x9;if elementTag is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;'add new tag if not found&#xA;&#x9;&#x9;&#x9;&#x9;set elementTag = element.TaggedValues.AddNew(&quot;Type&quot;, classTech)&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo( &quot;Add elementTag: &quot; &amp; elementTag.Value &amp; &quot; (ID=&quot; &amp; elementTag.PropertyID &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;elementTag.Value = classTech&#xA;&#x9;&#x9;&#x9;&#x9;elementTag.Update&#xA;&#x9;&#x9;&#x9;&#x9;call LOGInfo( &quot;Updated elementTag: &quot; &amp; elementTag.Value &amp; &quot; (ID=&quot; &amp; elementTag.PropertyID &amp; &quot;)&quot;)&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;else&#xA;&#x9;&#x9;set element = Repository.GetElementByID(elements.GetAt(0).ElementID)&#xA;&#x9;end if&#xA;&#xA;&#x9;'add to class_array&#xA;&#x9;class_array (idxC,0) = element.ElementID&#xA;&#x9;class_array (idxC,1) = element.Name&#xA;&#x9;class_array (idxC,2) = element.Alias&#xA;&#x9;class_array (idxC,3) = element.Stereotype&#xA;&#x9;class_array (idxC,4) = element.Type&#xA;&#x9;class_array (idxC,5) = classTech&#xA;&#x9;if instr(script, &quot;{&quot;) &gt; 0 then&#xA;&#x9;&#x9;class_array (idxC,6) = &quot;Start&quot;&#xA;&#x9;end if &#xA;&#x9;idxC=idxC+1&#xA;&#x9;&#xA;&#x9;'restore logging level&#x9;&#xA;'&#x9;LOGLEVEL=LOGLEVEL_SAVE&#x9;&#x9;&#xA;&#xA;end sub&#xA;&#xA;sub create_sterotype(script)&#xA;&#xA;end sub&#xA;&#xA;sub create_boundary(script)&#xA;'&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;'&#x9;&#x9;&#x9;dim borderStyle&#xA;'&#x9;&#x9;&#x9;set borderStyle = element.Properties(&quot;BorderStyle&quot;)&#xA;'&#x9;&#x9;&#x9;borderStyle.value = &quot;Solid&quot;&#xA;'&#x9;&#x9;end if&#xA;&#x9;'add to class_array&#xA;&#x9;class_array (idxC,0) = element.ElementID&#xA;&#x9;class_array (idxC,1) = element.Name&#xA;&#x9;class_array (idxC,2) = element.Alias&#xA;&#x9;class_array (idxC,3) = element.Stereotype&#x9;&#xA;&#x9;class_array (idxC,4) = element.ObjectType&#xA;&#x9;class_array (idxC,5) = classTech&#xA;&#x9;if instr(script, &quot;{&quot;) &gt; 0 then&#xA;&#x9;&#x9;class_array (idxC,6) = &quot;Start&quot;&#xA;&#x9;end if &#xA;&#x9;idxC=idxC+1&#xA;&#xA;end sub&#xA;&#xA;sub end_of(script)&#xA;&#x9;class_array (idxC,6) = &quot;End&quot;&#xA;&#x9;idxC=idxC+1&#xA;end sub&#xA;&#xA;sub create_relationship(script)&#xA;&#x9;call LOGTrace(&quot;create_relationship(&quot; &amp; script &amp; &quot;)&quot;)&#xA;&#x9;dim strRel&#xA;&#x9;dim strRelParms&#xA;&#x9;dim connID&#xA;&#x9;dim connSterotype&#xA;&#x9;dim i&#xA;&#x9;&#xA;&#x9;'process REL &#xA;&#x9;if instr(script,&quot;Rel&quot;) &gt; 0 then&#xA;&#x9;&#x9;'extract relationship which is delimitered by ()&#xA;&#x9;&#x9;strRel = trim(Mid(script, instr(script,&quot;(&quot;)+1, instr(script,&quot;)&quot;)-instr(script,&quot;(&quot;)-1))&#xA;&#x9;&#x9;call LOGDebug( &quot;strRel: &quot; &amp; strRel )&#xA;&#x9;&#x9;strRelParms=split(strRel,&quot;,&quot;)&#x9;&#xA;&#x9;&#x9;call LOGDebug( &quot;strRelParms: &quot; &amp; ubound(strRelParms) )&#xA;&#x9;&#x9;relationship_array (idxR,0) = getClassID(trim(strRelParms(0)))&#x9;'source elementID&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;relationship_array (idxR,1) = getClassID(trim(strRelParms(1)))&#x9;'target elementID&#xA;&#x9;&#x9;if ubound(strRelParms) &gt; 1 then&#xA;&#x9;&#x9;&#x9;relationship_array (idxR,3) = strRelParms(2)&#xA;&#x9;&#x9;&#x9;relationship_array (idxR,3) = replace(relationship_array (idxR,3), &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if ubound(strRelParms) &gt; 2 then&#xA;&#x9;&#x9;&#x9;connSterotype = strRelParms(3)&#xA;&#x9;&#x9;&#x9;connSterotype = replace(connSterotype, &quot;&quot;&quot;&quot;, &quot;&quot;)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;connID = getConnectorID (relationship_array (idxR,0), relationship_array (idxR,1))&#xA;&#x9;&#x9;if connID=0 then&#xA;&#x9;&#x9;&#x9;connID = createConnector (relationship_array (idxR,0), relationship_array (idxR,1), relationship_array (idxR,3), connSterotype)&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;relationship_array (idxR,2) = connID&#xA;&#x9;&#x9;idxR=idxR+1&#xA;&#x9;else&#xA;&#x9;&#x9;LOGWarning ( &quot;not yet supported: &quot; &amp; script )&#xA;&#x9;end if&#xA;&#x9;&#xA;end sub&#xA;&#xA;sub layout_objects()&#xA;&#xA;&#x9;call LOGTrace(&quot;layout_Objects()&quot;)&#xA;&#xA;&#x9;dim width&#xA;&#x9;dim height&#xA;&#x9;dim padding&#xA;&#x9;dim level&#xA;&#x9;dim i &#xA;&#x9;dim j&#xA;&#x9;dim left&#xA;&#x9;dim right&#xA;&#x9;dim top&#xA;&#x9;dim bottom&#xA;&#x9;&#xA;&#x9;width=150&#xA;&#x9;height=108&#xA;&#x9;padding=40&#xA;&#x9;&#xA;&#x9;'set the first row&#xA;&#x9;layout_array (0,1) = padding&#xA;&#x9;layout_array (0,3) = padding * -1&#xA;&#x9;if class_array (0,4) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;level = 1&#xA;&#x9;&#x9;layout_array (0,2) = layout_array (0,1) + width + padding&#xA;&#x9;&#x9;layout_array (0,4) = layout_array (0,3) - height - padding&#xA;&#x9;else&#xA;&#x9;&#x9;level = 0&#xA;&#x9;&#x9;layout_array (0,2) = layout_array (0,1) + width&#xA;&#x9;&#x9;layout_array (0,4) = layout_array (0,3) - height&#xA;&#x9;end if&#xA;&#x9;layout_array (0,0) = level&#x9;&#xA;&#xA;&#x9;for idxL = 1 to idxC-1&#x9;&#xA;&#x9;&#x9;if class_array (idxL,6) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;call LOGDebug ( &quot;processing end of boundary&quot; )&#xA;&#x9;&#x9;&#x9;'set the right and bottom of the parent&#xA;&#x9;&#x9;&#x9;layout_array (idxL,0) = level&#xA;&#x9;&#x9;&#x9;level = level - 1&#xA;&#x9;&#x9;&#x9;i = getParent(idxL)&#xA;&#x9;&#x9;&#x9;'loop thru to resolve right and bottom coorodinates&#xA;&#x9;&#x9;&#x9;'this needs to have a start tag&#xA;&#x9;&#x9;&#x9;if class_array (i,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;resize boundary&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;right = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;&#x9;bottom = layout_array (i,4)&#xA;&#x9;&#x9;&#x9;&#x9;for j = iDXL to i step -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Checking dimentions of (&quot; &amp;  j &amp; &quot;): &quot; &amp; class_array(j,0) )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array (j,2) &gt; right then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;right = layout_array (j,2)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Right Adjusted to-&gt;&quot; &amp;  right )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if layout_array (j,4) &lt; bottom then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;bottom = layout_array (j,4)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;Bottom Adjusted to-&gt;&quot; &amp;  bottom )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,2) = right + padding&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (i,4) = bottom - padding&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;bottom = getBottom()&#xA;&#x9;&#x9;&#x9;if class_array (idxL,6) = &quot;Start&quot; then&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;processing start of boundary&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;level = level + 1&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,0) = level&#xA;&#x9;&#x9;&#x9;&#x9;'go up to find relative position.&#xA;&#x9;&#x9;&#x9;&#x9;if layout_array (idxL,0) &gt; 1 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'i = getParent(idxL)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if class_array (idxL-1,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left = layout_array (idxL-1,1) + padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;top = layout_array (idxL-1,3) - padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;left = layout_array (idxL-1,1) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;top = bottom - padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;left = layout_array (idxL-1,1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;top = bottom - padding&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = left + padding&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,2) = left + width + padding&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = top &#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,4) = top - padding - height - padding&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'non-boundary object&#xA;&#x9;&#x9;&#x9;&#x9;call LOGDebug ( &quot;processing a non-boundary object&quot; )&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,0) = level&#xA;&#x9;&#x9;&#x9;&#x9;if class_array (idxL-1,6) = &quot;End&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = layout_array (i,1) + padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'resolve bottom &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = bottom - padding&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if class_array (idxL-1,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = layout_array (idxL-1,1) + padding&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = layout_array (idxL-1,3) - padding&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,1) = layout_array (idxL-1,2) + padding&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,3) = layout_array (idxL-1,3) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,2) = layout_array (idxL,1) + width&#xA;&#x9;&#x9;&#x9;&#x9;layout_array (idxL,4) = layout_array (idxL,3) - height&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#xA;end sub&#xA;&#xA;sub build_diagram()&#xA;&#x9;call LOGTrace(&quot;build_diagram()&quot;)&#xA;&#x9;dim diagramObjects as EA.Collection&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim left&#xA;&#x9;dim right&#xA;&#x9;dim top&#xA;&#x9;dim bottom&#xA;&#x9;dim diagramObjectName&#xA;&#x9;dim i&#xA;&#x9;set DiagramObjects = currentDiagram.DiagramObjects&#xA;&#x9;&#xA;&#x9;' Add diagramObjects&#xA;&#x9;for i = 0 to idxL-1&#x9;&#xA;&#x9;&#x9;if not (class_array(i,6) = &quot;End&quot;) then&#xA;&#x9;&#x9;&#x9;left = layout_array (i,1)&#xA;&#x9;&#x9;&#x9;right = layout_array (i,2)&#xA;&#x9;&#x9;&#x9;top = layout_array (i,3)&#xA;&#x9;&#x9;&#x9;bottom = layout_array (i,4) &#xA;&#x9;&#x9;&#x9;diagramObjectName= &quot;l=&quot; &amp; left &amp; &quot;;r=&quot; &amp; right &amp; &quot;;t=&quot; &amp; top &amp; &quot;;b=&quot; &amp; bottom&#xA;&#x9;&#x9;&#x9;call LOGDebug ( &quot;ElementId=&quot; &amp; class_array (i,0) &amp; &quot;-Left(&quot; &amp; left &amp; &quot;);Right(&quot; &amp; right &amp; &quot;);top(&quot; &amp; top &amp; &quot;);Bottom(&quot; &amp; bottom &amp; &quot;)&quot;)&#xA;&#x9;&#x9;&#x9;set diagramObject = currentDiagram.DiagramObjects.AddNew(diagramObjectName, class_array (i,4))&#xA;&#x9;&#x9;&#x9;diagramObject.ElementID = class_array (i,0)&#xA;&#x9;&#x9;&#x9;diagramObject.Update&#xA;&#x9;&#x9;&#x9;diagramObjects.Refresh&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;currentDiagram.Update&#xA;&#xA;end sub&#xA;&#xA;function getParent(startFrom)&#xA;&#x9;call LOGTrace(&quot;getParent(&quot; &amp; startFrom &amp; &quot;)&quot;)&#xA;&#xA;&#x9;'return the index of the immediate parent by going back up the layout_array based on level&#xA;&#x9;Dim i&#xA;&#x9;dim level&#xA;&#x9;&#xA;&#x9;getParent=startFrom&#xA;&#x9;level = layout_array (startFrom,0)&#xA;&#x9;call LOGDebug ( &quot;Level (&quot; &amp;  startFrom &amp; &quot;): &quot; &amp; level )&#xA;&#xA;&#x9;for i = startFrom-1 to 0 step -1&#xA;&#x9;&#x9;call LOGDebug ( &quot;Checking (&quot; &amp;  i &amp; &quot;)&quot; )&#xA;&#x9;&#x9;if layout_array (i,0) = level _ &#xA;&#x9;&#x9;and class_array (i,6) = &quot;Start&quot; then&#xA;&#x9;&#x9;&#x9;getParent=i&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;getParent=&quot; &amp; getParent)&#xA;&#xA;end function&#xA;&#xA;function getBottom()&#xA;&#x9;call LOGTrace(&quot;getBottom()&quot;)&#xA;&#xA;&#x9;Dim i&#xA;&#x9;&#xA;&#x9;getBottom=0&#xA;&#x9;for i = 0 to idxL &#xA;&#x9;&#x9;call LOGDebug ( &quot;Checking (&quot; &amp;  i &amp; &quot;)&quot; )&#xA;&#x9;&#x9;if layout_array (i,4) &lt; getBottom then &#xA;&#x9;&#x9;&#x9;getBottom = layout_array (i,4)&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;Bottom=&quot; &amp; getBottom)&#xA;&#xA;end function&#xA;&#xA;function getClassID(name)&#xA;&#x9;call LOGTrace(&quot;getClassID(&quot; &amp; name &amp; &quot;)&quot;)&#xA;&#x9;&#xA;&#x9;dim i&#xA;&#x9;&#xA;&#x9;getClassID=99&#xA;&#x9;for i = 0 to idxC&#xA;&#x9;&#x9;if name = class_array(i,3) then&#x9;&#x9;&#x9;&#x9;'check using alias&#xA;&#x9;&#x9;&#x9;getClassID = class_array (i,0)&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if name = class_array(i,2) then&#x9;&#x9;&#x9;'check using name&#xA;&#x9;&#x9;&#x9;&#x9;getClassID = class_array (i,0)&#xA;&#x9;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;if getClassID = 99 then&#xA;&#x9;&#x9;LOGWarning ( &quot;class not found: &quot; &amp; name )&#xA;&#x9;end if&#xA;&#x9;&#xA;&#x9;call LOGTrace(&quot;getClassID=&quot; &amp; getClassID )&#xA;&#x9;&#xA;end function&#xA;&#x9;&#xA;function getConnectorID(fromElementID, toElementID)&#xA;&#x9;call LOGTrace(&quot;getConnectorID(&quot; &amp; fromElementID &amp; &quot;,&quot; &amp; toElementID &amp; &quot;)&quot;)&#xA;&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#xA;&#x9;getConnectorID=0&#xA;&#x9;set element = Repository.GetElementByID (fromElementID)&#xA;&#x9;for each connector in element.Connectors&#xA;&#x9;&#x9;if connector.SupplierID = toElementID then&#xA;&#x9;&#x9;&#x9;getConnectorID=connector.ConnectorID&#xA;&#x9;&#x9;&#x9;exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;call LOGTrace(&quot;getConnectorID=&quot; &amp; getConnectorID )&#xA;&#xA;end function&#xA;&#xA;function createConnector(fromElementID, toElementID, connName, connSterotype)&#xA;&#x9;call LOGTrace(&quot;createConnector(&quot; &amp; fromElementID &amp; &quot;,&quot; &amp; toElementID &amp; &quot;,&quot; &amp; connName &amp; &quot;)&quot;)&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#xA;&#x9;set element = Repository.GetElementByID (fromElementID)&#xA;&#x9;&#xA;&#x9;'create connector&#xA;&#x9;set connector = element.Connectors.AddNew(&quot;&quot;,&quot;Connector&quot;)&#x9;&#xA;&#x9;connector.SupplierID = toElementID&#xA;&#x9;connector.Name = connName&#xA;&#x9;connector.Direction = &quot;Source -&gt; Destination&quot;&#xA;&#x9;connector.Stereotype = connSterotype&#xA;&#x9;connector.Update&#xA;&#x9;element.Connectors.Refresh&#x9;&#x9;&#xA;&#x9;createConnector = connector.ConnectorID&#xA;&#x9;call LOGTrace(&quot;createConnector=&quot; &amp; createConnector )&#xA;&#x9;&#x9;&#xA;end function"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="38"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{3B9CF089-EE5C-4cef-B203-EBA8BA00BB77}"/>
			<Column name="ScriptAuthor" value="{E41F7300-3114-4266-87AE-444F92505A16}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Create-C4-PlantUML&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'&#xA;' Script Name: Create C4 PlantUML&#xA;' Author: David Anderson&#xA;' Purpose: Callable routine for dealing with the creation of a C4 PlantUML script&#xA;' Date: 18-Sept-2022&#xA;'&#xA;dim generated_script&#xA;'dim reltag_array (99,4)&#xA;' 0=sterotype&#xA;' 1=&#xA;'dim iRT&#xA;&#xA;sub CreateC4PlantUML ()&#xA;&#x9;call LOGInfo(&quot;Create C4 PlantUML script activated&quot;)&#xA;&#xA;&#x9;dim diagramObject as EA.DiagramObject&#xA;&#x9;dim element as EA.Element&#xA;&#x9;dim connector as EA.Connector&#xA;&#x9;dim elementTag as EA.TaggedValue&#xA;&#xA;&#x9;dim include_puml&#xA;&#x9;&#xA;&#x9;select case currentDiagram.Type&#xA;&#x9;&#x9;case &quot;Logical&quot;&#x9;&#x9;include_puml = &quot;C4_Context&quot;&#xA;&#x9;&#x9;case &quot;Deployment&quot;&#x9;include_puml = &quot;C4_Container&quot;&#xA;&#x9;&#x9;case &quot;Component&quot;&#x9;include_puml = &quot;C4_Component&quot;&#xA;&#x9;end select&#xA;&#xA;&#x9;generated_script=&quot;@startuml&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/&quot; &amp; include_puml &amp; &quot;.puml&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;' uncomment the following line and comment the first to use locally&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;' !include &quot; &amp; include_puml &amp; &quot;.puml&quot; &amp; vbcrlf &amp; _&#xA;&#x9;vbcrlf &amp; _&#xA;&#x9;&quot;'LAYOUT_TOP_DOWN()&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;'LAYOUT_AS_SKETCH()&quot; &amp; vbcrlf &amp; _&#xA;&#x9;&quot;LAYOUT_WITH_LEGEND()&quot; &amp; vbcrlf&#xA;&#xA;&#x9;generated_script = generated_script &amp; &quot;title &quot; &amp; currentDiagram.Name &amp; vbcrlf&#xA;&#xA;&#x9;for each diagramObject in currentDiagram.DiagramObjects&#xA;&#x9;&#x9;set Element = Repository.GetElementByID(diagramObject.ElementID)&#xA;&#x9;&#x9;if not(theSelectedElement.ElementID = element.ElementID) then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;element_array (e,0) = element.ElementID&#xA;&#x9;&#x9;&#x9;element_array (e,1) = element.Type&#xA;&#x9;&#x9;&#x9;if instr(element.Name, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,2) = element.Name&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,2) = chr(34) &amp; element.Name &amp; chr(34)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'replace spaces with \n if length greater than 20 &#xA;&#x9;&#x9;&#x9;'if len(element_array (e,2)) &gt; 20 then&#xA;&#x9;&#x9;&#x9;'&#x9;element_array (e,2) = replace(element_array (e,2), &quot; &quot;,&quot;\n&quot;)&#xA;&#x9;&#x9;&#x9;'end if&#xA;&#x9;&#x9;&#x9;if element.Alias = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,3) = replace(element.Name, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if instr(element.Alias, &quot; &quot;) = 0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,3) = element.Alias&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,3) = chr(34) &amp; element.Alias &amp; chr(34)&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;'boundary objects do not have a sterotype type value&#xA;&#x9;&#x9;&#x9;if element.Stereotype = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;if element.Type = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,4) =  &quot;Boundary&quot;&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,4) = replace(element.Stereotype, &quot; &quot;, &quot;_&quot;)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;element_array (e,5) = element.Notes&#xA;&#xA;&#x9;&#x9;&#x9;if element.TaggedValues.Count &gt; 0 then&#xA;&#x9;&#x9;&#x9;&#x9;set elementTag = element.TaggedValues.GetByName(&quot;Type&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;if elementTag is nothing then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;call LOGWarning(&quot;Element: &quot; &amp; element.Name &amp; &quot; missing 'Type' tagged value&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (e,6) = elementTag.Value&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;else&#xA;'&#x9;&#x9;&#x9;&#x9;element_array (e,6) = lcase(color(element.Type, diagramObject.BackgroundColor))&#xA;&#x9;&#x9;&#x9;&#x9;element_array (e,6)=&quot;&quot;&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;element_array (e,7) = diagramObject.left&#x9;&#xA;&#x9;&#x9;&#x9;element_array (e,8) = diagramObject.top&#x9;&#xA;&#x9;&#x9;&#x9;element_array (e,9) = diagramObject.right&#xA;&#x9;&#x9;&#x9;element_array (e,10) = diagramObject.bottom&#xA;&#x9;&#x9;&#x9;element_array (e,11) = &quot;&quot;&#x9;&#x9;&#x9;'children - delimitered string of element ids within a boundary&#xA;&#x9;&#x9;&#x9;element_array (e,12) = &quot;&quot;&#x9;&#x9;&#x9;'parent boundary elementid&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;e=e+1&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;'&#x9;resolve tags&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;&#x9;'resolve boundary hierarchy using coordinates&#xA;&#x9;dim i&#xA;&#x9;dim i2&#xA;&#x9;dim i2Id&#xA;&#x9;For i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;'loop thru the element array and check is the element coordinates are inside the boundary&#xA;&#x9;&#x9;&#x9;'call LOGDebug(&quot;*process boundary(&quot; &amp; i &amp; &quot;):&quot; &amp; element_array(i,0))&#xA;&#x9;&#x9;&#x9;For i2 = 0 to e-1&#xA;&#x9;&#x9;&#x9;&#x9;if not(i = i2) then&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i2,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if inBoundary(i2,i) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'add boundary element to the list of children elements for this boundary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i2Id = &quot;B&quot; &amp; i2 &amp; &quot;#&quot; &amp; element_array (i2,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = i2Id&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = element_array (i,11) &amp; &quot;|&quot; &amp; i2Id &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update the element with the boundary parent.. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i2,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i2,12) = element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i2,12) = element_array (i2,12) &amp; &quot;|&quot; &amp; element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;Next &#xA;&#x9;&#x9;end if&#xA;&#x9;Next &#xA;&#xA;&#x9;'call LOGDebug(&quot;Find Children: part 1&quot;)&#xA;&#xA;'&#x9;for each boundary.. populate the elements within&#xA;&#x9;dim children&#xA;&#x9;dim i3&#x9;&#x9;'index for the boundary in the element array&#xA;&#x9;dim i4&#x9;&#x9;'index to compare &#xA;&#x9;for i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;if not element_array (i,11)=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;*children:&quot; &amp; i &amp; &quot;=&quot; &amp; element_array (i,11))&#xA;&#x9;&#x9;&#x9;&#x9;children = split( element_array (i,11),&quot;|&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;for i2 = ubound(children) to 0 step -1&#xA;&#x9;&#x9;&#x9;&#x9;'start with the deepest boundary and work out..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;*processing boundary childs:&quot; &amp; i2 &amp; &quot;=&quot; &amp; children(i2))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'check if this is a boundary...&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if left(children(i2),1)=&quot;B&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'get index of the boundary we are checking against..&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'remove hardcoded length&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i3 = Mid(children(i2),2,1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'call LOGDebug ( &quot;index: &quot; &amp; i3)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'loop thru the elements arrary&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'compare coordinate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;For i4 = 0 to e-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if not (element_array (i4,1) = &quot;Boundary&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if inBoundary(i4,i3) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i3,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i3,11) = element_array (i4,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i3,11) = element_array (i3,11) &amp; &quot;|&quot; &amp; element_array (i4,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update the element with the boundary parent.. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i4,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i3,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i4,12) &amp; &quot;|&quot; &amp; element_array (i3,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;'for each top level boundary.. populate the elements within if they have not yet been allocated&#xA;&#xA;&#x9;'call LOGDebug(&quot;Find Children: part 2&quot;)&#xA;&#x9;for i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;if element_array (i,12)=&quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;'call LOGDebug(&quot;Find Children: part 2&quot; &amp; i &amp; &quot;=&quot; &amp; element_array (i,0))&#xA;&#x9;&#x9;&#x9;&#x9;For i4 = 0 to e-1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if not (element_array (i4,1) = &quot;Boundary&quot;) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i4,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if inBoundary(i4,i) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = element_array (i4,0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,11) = element_array (i,11) &amp; &quot;|&quot; &amp; element_array (i4,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'update the element with the boundary parent.. &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if element_array (i4,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i4,12) = element_array (i4,12) &amp; &quot;|&quot; &amp; element_array (i,0) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;&#x9;next&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;call LOGDebug( &quot;Element Array&quot; )&#xA;&#x9;call PrintArray (element_array,0,e-1)&#xA;&#xA;&#x9;'spin through diagram links&#xA;&#x9;dim diagramLink as EA.DiagramLink&#xA;&#x9;r=0&#xA;&#x9;for each diagramLink in currentDiagram.DiagramLinks&#xA;&#x9;&#x9;set connector = Repository.GetConnectorByID(diagramLink.ConnectorID)&#xA;&#x9;&#x9;relationship_array (r,0) = connector.ClientID&#xA;&#x9;&#x9;relationship_array (r,1) = connector.SupplierID&#xA;&#x9;&#x9;relationship_array (r,2) = connector.Name&#xA;&#x9;&#x9;relationship_array (r,3) = connector.Stereotype&#xA;&#x9;&#x9;'TODO: build up relTag for each sterotype and set color and  linetype&#xA;&#x9;&#x9;r=r+1&#xA;&#x9;next&#xA;&#xA;&#x9;dim strLine&#xA;&#x9;'Output PlantUML objects&#xA;&#x9;generated_script = generated_script &amp; &quot;AddElementTag('Service', $shape=EightSidedShape(), $legendText='service (eight sided)')&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;AddRelTag(Alert, $textColor='red', $lineColor='red', $lineStyle = DashedLine(), $legendText='Alert')&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;AddRelTag(Synchronous, $textColor='black', $lineColor='dimgrey',$legendText='Synchronous')&quot; &amp; vbcrlf&#xA;&#x9;generated_script = generated_script &amp; &quot;AddRelTag(Asynchronous,$textColor='black', $lineColor='dimgrey', $lineStyle = DashedLine(), $legendText='Asynchronous')&quot; &amp; vbcrlf&#xA;&#x9;&#xA;&#x9;'Process top level objects (without a parent)&#xA;&#x9;for i = 0 to e-1&#xA;&#x9;&#x9;if element_array (i,12) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;strLine = construct_output(i)&#xA;&#x9;&#x9;&#x9;'No Children exist&#xA;&#x9;&#x9;&#x9;if element_array (i,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; &quot;{&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;&#x9;'Process Boundary&#xA;&#x9;&#x9;&#x9;&#x9;call process_boundary (i)&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; &quot;}&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;end if&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;'Output PlantUML relationships&#xA;&#x9;for i = 0 to r-1&#xA;&#x9;&#x9;strLine = &quot;Rel(&quot; &amp; system(relationship_array (i,0)) &amp; &quot;,&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;system(relationship_array (i,1)) &amp; &quot;,&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;chr(34) &amp; relationship_array (i,2) &amp; chr(34) &amp; &quot;,&quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;chr(34) &amp; relationship_array (i,3) &amp; chr(34)&#xA;&#x9;&#x9;if not (relationship_array (i,3)=&quot;&quot;) then&#xA;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot;, $tags='&quot; &amp; relationship_array (i,3) &amp; &quot;'&quot;&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;strLine = strLine &amp; &quot;)&quot;&#xA;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;next &#xA;&#x9;&#xA;&#x9;generated_script=generated_script &amp; &quot;SHOW_LEGEND()&quot; &amp; vbcrlf &amp; &quot;@enduml&quot; &amp; vbcrlf&#xA;&#x9;theSelectedElement.Notes = generated_script&#xA;&#x9;theSelectedElement.Update&#xA;&#xA;end sub&#xA;&#xA;sub process_boundary (i)&#xA;&#x9;call LOGDebug(&quot;Process Boundary:&quot; &amp; element_array (i,11))&#xA;&#x9;dim strLine&#xA;&#x9;dim member&#xA;&#x9;dim i2&#xA;&#x9;dim i3&#xA;&#x9;dim i4&#xA;&#x9;member = split(element_array (i,11),&quot;|&quot;)&#xA;&#x9;for i2 = 0 to ubound(member)&#xA;&#x9;&#x9;call LOGDebug(&quot;Process Member:&quot; &amp; member(i2))&#xA;&#x9;&#x9;'check if this is a boundary...&#xA;&#x9;&#x9;if left(member(i2),1)=&quot;B&quot; then&#xA;&#x9;&#x9;&#x9;'get index of the boundary &#xA;&#x9;&#x9;&#x9;i3 = Mid(member(i2),2,1)&#xA;&#x9;&#x9;&#x9;strLine = construct_output(i3)&#xA;&#x9;&#x9;&#x9;if element_array (i3,11) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; &quot;{&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;&#x9;'Process Boundary&#xA;&#x9;&#x9;&#x9;&#x9;call process_boundary (i3)&#xA;&#x9;&#x9;&#x9;&#x9;generated_script = generated_script &amp; &quot;}&quot; &amp; vbcrlf&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;'get index based using element id&#xA;&#x9;&#x9;&#x9;i4 = getIndex(CLng(member(i2)))&#xA;&#x9;&#x9;&#x9;strLine = construct_output(i4)&#xA;&#x9;&#x9;&#x9;generated_script = generated_script &amp; strLine &amp; vbcrlf&#xA;&#x9;&#x9;end if&#xA;&#x9;next&#xA;&#x9;&#xA;end sub&#xA;&#xA;function construct_output (i)&#xA;&#x9;'call LOGDebug ( &quot;construct_output: &quot; &amp; i &amp; &quot;=&quot; &amp; element_array (i,0))&#x9;&#x9;&#xA;&#xA;&#x9;dim strLine&#xA;&#x9;dim strType&#xA;&#x9;'if boundary..&#xA;&#x9;if inStr(&quot;...Person,System...&quot;, element_array (i,4)) &gt; 0 then&#xA;&#x9;&#x9;strLine = element_array (i,4) &amp; &quot;(&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;element_array (i,3) &amp; &quot;, &quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;element_array (i,2) &#xA;&#x9;else&#xA;&#x9;&#x9;if element_array (i,1) = &quot;Boundary&quot; then&#xA;&#x9;&#x9;&#x9;strLine = element_array (i,4) &amp; &quot;(&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,3) &amp; &quot;, &quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,2) &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if element_array (i,6) = &quot;Storage&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strType=element_array (i,4) &amp; &quot;Db&quot;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;strType=element_array (i,4)&#xA;&#x9;&#x9;&#x9;end if&#xA;&#x9;&#x9;&#x9;strLine = strType &amp; &quot;(&quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,3) &amp; &quot;, &quot; &amp; _&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,2) &amp; &quot;, &quot; &amp; _&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;element_array (i,6)&#xA;&#x9;&#x9;&#x9;if element_array (i,6) = &quot;Service&quot; then&#xA;&#x9;&#x9;&#x9;&#x9;strLine = strLine &amp; &quot;, $tags='Service'&quot;&#xA;&#x9;&#x9;&#x9;'else&#xA;&#x9;&#x9;&#x9;'&#x9;strLine = strLine &amp; &quot;,&quot;&#xA;&#x9;&#x9;&#x9;end if&#x9;&#x9;&#xA;&#x9;&#x9;end if&#xA;&#x9;end if&#xA;&#x9;if element_array (i,5) = &quot;&quot; then&#xA;&#x9;&#x9;strLine = strLine &amp; &quot;)&quot;&#x9;&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;strLine = strLine &amp; &quot;,&quot; &amp; chr(34) &amp; element_array (i,5) &amp; chr(34) &amp; &quot;)&quot;&#xA;&#x9;end if&#xA;&#x9;construct_output = strLine&#xA;end function&#xA;&#xA;function inBoundary(i1, i2) &#xA;&#x9;'call LOGDebug ( &quot;inBoundary: &quot; &amp; i1 &amp; &quot;:&quot; &amp; i2)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;if element_array (i1,7) &gt; element_array (i2,7) _&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;and element_array (i1,8) &lt; element_array (i2,8) _&#x9;&#x9;&#xA;&#x9;&#x9;and element_array (i1,9) &lt; element_array (i2,9) _&#x9;&#x9;&#xA;&#x9;&#x9;and element_array (i1,10) &gt; element_array (i2,10) then&#xA;&#x9;&#x9;inBoundary=True&#xA;&#x9;else&#xA;&#x9;&#x9;inBoundary=False&#xA;&#x9;end if&#xA;&#x9;'call LOGDebug ( &quot;inBoundary=&quot; &amp; inBoundary)&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;end function&#xA;&#xA;function system(elementid)&#xA;&#x9;Dim i&#xA;&#x9;'Call LOGTrace( &quot;system(&quot; &amp; elementid &amp; &quot;)&quot; )&#xA;&#xA;&#x9;For i = 0 to Ubound(element_array)&#xA;&#x9;&#x9;if element_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element_array (i,0) = elementid then&#xA;&#x9;&#x9;&#x9;system = element_array (i,3)&#x9;&#x9;'return alias&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;'Call LOGTrace( &quot;system=&quot; &amp; system )&#xA;&#xA;end function&#xA;&#xA;function getIndex(elementid)&#xA;&#x9;Dim i&#xA;&#x9;'Call LOGTrace( &quot;getIndex(&quot; &amp; elementid &amp; &quot;of type &quot; &amp; TypeName(elementid) &amp; &quot;)&quot; )&#xA;&#xA;&#x9;For i = 0 to Ubound(element_array)&#xA;&#x9;&#x9;'Call LOGTrace( &quot;i(&quot; &amp; i &amp; &quot;)=&quot; &amp; element_array (i,0) &amp; &quot; of type=&quot; &amp; TypeName(element_array (i,0)) )&#xA;&#x9;&#x9;if element_array (i,0) = &quot;&quot; then&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;&#x9;if element_array (i,0) = elementid then&#xA;&#x9;&#x9;&#x9;getIndex = i&#x9;&#x9;'return index&#xA;&#x9;&#x9;&#x9;Exit for&#xA;&#x9;&#x9;end if&#xA;&#x9;Next&#xA;&#x9;'Call LOGTrace( &quot;getIndex=&quot; &amp; getIndex )&#xA;&#xA;end function"/>
		</DataRow>
	</DataSet>
</RefData>